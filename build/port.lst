ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"port.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.data.uxCriticalNesting,"aw"
  20              		.align	2
  23              	uxCriticalNesting:
  24 0000 AAAAAAAA 		.word	-1431655766
  25              		.section	.bss.ucMaxSysCallPriority,"aw",%nobits
  28              	ucMaxSysCallPriority:
  29 0000 00       		.space	1
  30              		.section	.bss.ulMaxPRIGROUPValue,"aw",%nobits
  31              		.align	2
  34              	ulMaxPRIGROUPValue:
  35 0000 00000000 		.space	4
  36              		.section	.rodata.pcInterruptPriorityRegisters,"a"
  37              		.align	2
  40              	pcInterruptPriorityRegisters:
  41 0000 F0E300E0 		.word	-536812560
  42              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  43              		.align	1
  44              		.global	pxPortInitialiseStack
  45              		.syntax unified
  46              		.thumb
  47              		.thumb_func
  49              	pxPortInitialiseStack:
  50              	.LFB5:
  51              		.file 1 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c"
   1:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
   2:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * FreeRTOS Kernel V10.5.1
   3:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  *
   5:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * SPDX-License-Identifier: MIT
   6:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  *
   7:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * the Software without restriction, including without limitation the rights to
  10:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * subject to the following conditions:
  13:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  *
  14:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * The above copyright notice and this permission notice shall be included in all
  15:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * copies or substantial portions of the Software.
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 2


  16:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  *
  17:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  *
  24:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * https://www.FreeRTOS.org
  25:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * https://github.com/FreeRTOS
  26:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  *
  27:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
  28:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  29:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------
  30:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** * Implementation of functions defined in portable.h for the ARM CM4F port.
  31:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** *----------------------------------------------------------*/
  32:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  33:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Scheduler includes. */
  34:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #include "FreeRTOS.h"
  35:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #include "task.h"
  36:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  37:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #ifndef __VFP_FP__
  38:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #error This port can only be used when the project options are configured to enable hardware fl
  39:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif
  40:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  41:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the core.  Registers first... */
  42:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CTRL_REG             ( *( ( volatile uint32_t * ) 0xe000e010 ) )
  43:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_LOAD_REG             ( *( ( volatile uint32_t * ) 0xe000e014 ) )
  44:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG    ( *( ( volatile uint32_t * ) 0xe000e018 ) )
  45:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SHPR3_REG                    ( *( ( volatile uint32_t * ) 0xe000ed20 ) )
  46:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* ...then bits in the registers. */
  47:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CLK_BIT              ( 1UL << 2UL )
  48:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_INT_BIT              ( 1UL << 1UL )
  49:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT           ( 1UL << 0UL )
  50:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT       ( 1UL << 16UL )
  51:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSVCLEAR_BIT              ( 1UL << 27UL )
  52:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PEND_SYSTICK_SET_BIT         ( 1UL << 26UL )
  53:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT       ( 1UL << 25UL )
  54:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  55:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Constants used to detect a Cortex-M7 r0p1 core, which should use the ARM_CM7
  56:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * r0p1 port. */
  57:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portCPUID                             ( *( ( volatile uint32_t * ) 0xE000ed00 ) )
  58:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p1_ID                 ( 0x410FC271UL )
  59:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p0_ID                 ( 0x410FC270UL )
  60:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  61:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSV_PRI                   ( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) <<
  62:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_PRI                  ( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) <<
  63:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  64:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Constants required to check the validity of an interrupt priority. */
  65:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER       ( 16 )
  66:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16       ( 0xE000E3F0 )
  67:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portAIRCR_REG                         ( *( ( volatile uint32_t * ) 0xE000ED0C ) )
  68:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portMAX_8_BIT_VALUE                   ( ( uint8_t ) 0xff )
  69:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portTOP_BIT_OF_BYTE                   ( ( uint8_t ) 0x80 )
  70:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portMAX_PRIGROUP_BITS                 ( ( uint8_t ) 7 )
  71:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portPRIORITY_GROUP_MASK               ( 0x07UL << 8UL )
  72:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portPRIGROUP_SHIFT                    ( 8UL )
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 3


  73:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  74:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  75:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portVECTACTIVE_MASK                   ( 0xFFUL )
  76:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  77:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the VFP. */
  78:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portFPCCR                             ( ( volatile uint32_t * ) 0xe000ef34 ) /* Floating po
  79:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portASPEN_AND_LSPEN_BITS              ( 0x3UL << 30UL )
  80:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  81:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Constants required to set up the initial stack. */
  82:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_XPSR                      ( 0x01000000 )
  83:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_EXC_RETURN                ( 0xfffffffd )
  84:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  85:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* The systick is a 24-bit counter. */
  86:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portMAX_24_BIT_NUMBER                 ( 0xffffffUL )
  87:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  88:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
  89:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
  90:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portSTART_ADDRESS_MASK                ( ( StackType_t ) 0xfffffffeUL )
  91:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  92:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
  93:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * occurred while the SysTick counter is stopped during tickless idle
  94:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * calculations. */
  95:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #define portMISSED_COUNTS_FACTOR              ( 94UL )
  96:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
  97:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Let the user override the default SysTick clock rate.  If defined by the
  98:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * user, this symbol must equal the SysTick clock rate when the CLK bit is 0 in the
  99:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * configuration register. */
 100:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #ifndef configSYSTICK_CLOCK_HZ
 101:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #define configSYSTICK_CLOCK_HZ             ( configCPU_CLOCK_HZ )
 102:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Ensure the SysTick is clocked at the same frequency as the core. */
 103:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #define portNVIC_SYSTICK_CLK_BIT_CONFIG    ( portNVIC_SYSTICK_CLK_BIT )
 104:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #else
 105:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Select the option to clock SysTick not at the same frequency as the core. */
 106:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #define portNVIC_SYSTICK_CLK_BIT_CONFIG    ( 0 )
 107:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif
 108:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 109:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 110:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * prvTaskExitError() in case it messes up unwinding of the stack in the
 111:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * debugger. */
 112:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #ifdef configTASK_RETURN_ADDRESS
 113:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #define portTASK_RETURN_ADDRESS    configTASK_RETURN_ADDRESS
 114:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #else
 115:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #define portTASK_RETURN_ADDRESS    prvTaskExitError
 116:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif
 117:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 118:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 119:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 120:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * file is weak to allow application writers to change the timer used to
 121:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * generate the tick interrupt.
 122:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 123:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortSetupTimerInterrupt( void );
 124:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 125:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 126:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Exception handlers.
 127:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 128:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void ) __attribute__( ( naked ) );
 129:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void );
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 4


 130:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void ) __attribute__( ( naked ) );
 131:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 132:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 133:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 134:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 135:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void ) __attribute__( ( naked ) );
 136:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 137:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 138:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Function to enable the VFP.
 139:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 140:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void ) __attribute__( ( naked ) );
 141:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 142:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 143:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 144:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 145:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void );
 146:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 147:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 148:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 149:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 150:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * variable. */
 151:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 152:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 153:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 154:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * The number of SysTick increments that make up one tick period.
 155:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 156:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 157:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     static uint32_t ulTimerCountsForOneTick = 0;
 158:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 159:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 160:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 161:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 162:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * 24 bit resolution of the SysTick timer.
 163:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 164:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 165:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     static uint32_t xMaximumPossibleSuppressedTicks = 0;
 166:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 167:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 168:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 169:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 170:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * power functionality only.
 171:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 172:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 173:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     static uint32_t ulStoppedTimerCompensation = 0;
 174:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 175:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 176:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 177:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 178:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 179:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 180:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 181:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #if ( configASSERT_DEFINED == 1 )
 182:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     static uint8_t ucMaxSysCallPriority = 0;
 183:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     static uint32_t ulMaxPRIGROUPValue = 0;
 184:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t *
 185:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif /* configASSERT_DEFINED */
 186:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 5


 187:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 188:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 189:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 190:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 191:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 192:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
 193:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                                      TaskFunction_t pxCode,
 194:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                                      void * pvParameters )
 195:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
  52              		.loc 1 195 1
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 16
  55              		@ frame_needed = 1, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  57 0000 80B4     		push	{r7}
  58              	.LCFI0:
  59              		.cfi_def_cfa_offset 4
  60              		.cfi_offset 7, -4
  61 0002 85B0     		sub	sp, sp, #20
  62              	.LCFI1:
  63              		.cfi_def_cfa_offset 24
  64 0004 00AF     		add	r7, sp, #0
  65              	.LCFI2:
  66              		.cfi_def_cfa_register 7
  67 0006 F860     		str	r0, [r7, #12]
  68 0008 B960     		str	r1, [r7, #8]
  69 000a 7A60     		str	r2, [r7, #4]
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Simulate the stack frame as it would be created by a context switch
 197:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * interrupt. */
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 199:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Offset added to account for the way the MCU uses the stack on entry/exit
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * of interrupts, and to ensure alignment. */
 201:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
  70              		.loc 1 201 17
  71 000c FB68     		ldr	r3, [r7, #12]
  72 000e 043B     		subs	r3, r3, #4
  73 0010 FB60     		str	r3, [r7, #12]
 202:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 203:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
  74              		.loc 1 203 19
  75 0012 FB68     		ldr	r3, [r7, #12]
  76 0014 4FF08072 		mov	r2, #16777216
  77 0018 1A60     		str	r2, [r3]
 204:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
  78              		.loc 1 204 17
  79 001a FB68     		ldr	r3, [r7, #12]
  80 001c 043B     		subs	r3, r3, #4
  81 001e FB60     		str	r3, [r7, #12]
 205:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
  82              		.loc 1 205 23
  83 0020 BB68     		ldr	r3, [r7, #8]
  84              		.loc 1 205 48
  85 0022 23F00102 		bic	r2, r3, #1
  86              		.loc 1 205 19
  87 0026 FB68     		ldr	r3, [r7, #12]
  88 0028 1A60     		str	r2, [r3]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 6


  89              		.loc 1 206 17
  90 002a FB68     		ldr	r3, [r7, #12]
  91 002c 043B     		subs	r3, r3, #4
  92 002e FB60     		str	r3, [r7, #12]
 207:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
  93              		.loc 1 207 21
  94 0030 0C4A     		ldr	r2, .L3
  95              		.loc 1 207 19
  96 0032 FB68     		ldr	r3, [r7, #12]
  97 0034 1A60     		str	r2, [r3]
 208:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 209:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Save code space by skipping register initialisation. */
 210:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
  98              		.loc 1 210 18
  99 0036 FB68     		ldr	r3, [r7, #12]
 100 0038 143B     		subs	r3, r3, #20
 101 003a FB60     		str	r3, [r7, #12]
 211:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 102              		.loc 1 211 21
 103 003c 7A68     		ldr	r2, [r7, #4]
 104              		.loc 1 211 19
 105 003e FB68     		ldr	r3, [r7, #12]
 106 0040 1A60     		str	r2, [r3]
 212:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 213:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* A save method is being used that requires each task to maintain its
 214:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * own exec return value. */
 215:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack--;
 107              		.loc 1 215 17
 108 0042 FB68     		ldr	r3, [r7, #12]
 109 0044 043B     		subs	r3, r3, #4
 110 0046 FB60     		str	r3, [r7, #12]
 216:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     *pxTopOfStack = portINITIAL_EXC_RETURN;
 111              		.loc 1 216 19
 112 0048 FB68     		ldr	r3, [r7, #12]
 113 004a 6FF00202 		mvn	r2, #2
 114 004e 1A60     		str	r2, [r3]
 217:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 218:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 115              		.loc 1 218 18
 116 0050 FB68     		ldr	r3, [r7, #12]
 117 0052 203B     		subs	r3, r3, #32
 118 0054 FB60     		str	r3, [r7, #12]
 219:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 220:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     return pxTopOfStack;
 119              		.loc 1 220 12
 120 0056 FB68     		ldr	r3, [r7, #12]
 221:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 121              		.loc 1 221 1
 122 0058 1846     		mov	r0, r3
 123 005a 1437     		adds	r7, r7, #20
 124              	.LCFI3:
 125              		.cfi_def_cfa_offset 4
 126 005c BD46     		mov	sp, r7
 127              	.LCFI4:
 128              		.cfi_def_cfa_register 13
 129              		@ sp needed
 130 005e 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 7


 131              	.LCFI5:
 132              		.cfi_restore 7
 133              		.cfi_def_cfa_offset 0
 134 0062 7047     		bx	lr
 135              	.L4:
 136              		.align	2
 137              	.L3:
 138 0064 00000000 		.word	prvTaskExitError
 139              		.cfi_endproc
 140              	.LFE5:
 142              		.section	.text.prvTaskExitError,"ax",%progbits
 143              		.align	1
 144              		.syntax unified
 145              		.thumb
 146              		.thumb_func
 148              	prvTaskExitError:
 149              	.LFB6:
 222:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 223:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 224:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void )
 225:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 150              		.loc 1 225 1
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 16
 153              		@ frame_needed = 1, uses_anonymous_args = 0
 154              		@ link register save eliminated.
 155 0000 80B4     		push	{r7}
 156              	.LCFI6:
 157              		.cfi_def_cfa_offset 4
 158              		.cfi_offset 7, -4
 159 0002 85B0     		sub	sp, sp, #20
 160              	.LCFI7:
 161              		.cfi_def_cfa_offset 24
 162 0004 00AF     		add	r7, sp, #0
 163              	.LCFI8:
 164              		.cfi_def_cfa_register 7
 226:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     volatile uint32_t ulDummy = 0;
 165              		.loc 1 226 23
 166 0006 0023     		movs	r3, #0
 167 0008 7B60     		str	r3, [r7, #4]
 227:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 228:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* A function that implements a task must not exit or attempt to return to
 229:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * its caller as there is nothing to return to.  If a task wants to exit it
 230:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * should instead call vTaskDelete( NULL ).
 231:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      *
 232:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * Artificially force an assert() to be triggered if configASSERT() is
 233:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * defined, then stop here so application writers can catch the error. */
 234:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     configASSERT( uxCriticalNesting == ~0UL );
 168              		.loc 1 234 5
 169 000a 124B     		ldr	r3, .L9
 170 000c 1B68     		ldr	r3, [r3]
 171 000e B3F1FF3F 		cmp	r3, #-1
 172 0012 0AD0     		beq	.L6
 173              	.LBB31:
 174              	.LBB32:
 175              		.file 2 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
   1:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 8


   2:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.5.1
   3:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   7:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  13:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  14:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  16:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  17:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  24:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://www.FreeRTOS.org
  25:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://github.com/FreeRTOS
  26:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  27:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  28:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  30:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  31:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define PORTMACRO_H
  32:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  33:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef __cplusplus
  34:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         extern "C" {
  35:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  36:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  37:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  38:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  39:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  40:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  42:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  43:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  44:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  45:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  46:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  48:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCHAR          char
  49:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portFLOAT         float
  50:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDOUBLE        double
  51:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portLONG          long
  52:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSHORT         short
  53:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBASE_TYPE     long
  55:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  57:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef long             BaseType_t;
  58:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef unsigned long    UBaseType_t;
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 9


  59:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  60:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint16_t     TickType_t;
  62:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #else
  64:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint32_t     TickType_t;
  65:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  66:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  68:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not need to be guarded with a critical section. */
  69:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  70:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  71:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  72:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  73:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  74:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  79:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  80:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  81:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD()                                 \
  82:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {                                                   \
  83:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****                                                         \
  86:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  88:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  89:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "isb" );                                  \
  90:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
  91:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  92:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  95:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  96:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  97:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  98:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  99:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortEnterCritical( void );
 100:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortExitCritical( void );
 101:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 104:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 109:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 110:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * (which build with all the ports) will build. */
 113:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 114:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 10


 116:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 117:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 118:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 119:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 122:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 123:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 124:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 125:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 126:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 127:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 128:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 131:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Generic helper function. */
 132:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 134:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             uint8_t ucReturn;
 135:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 136:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             return ucReturn;
 139:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 140:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 141:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Check the configuration. */
 142:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #endif
 145:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 146:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 147:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 149:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 151:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 152:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 153:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 154:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 156:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 157:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 158:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef configASSERT
 159:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 161:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 162:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 164:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNOP()
 165:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 166:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portINLINE              __inline
 167:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 168:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portFORCE_INLINE
 169:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 171:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 172:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 11


 173:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 174:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulCurrentInterrupt;
 175:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         BaseType_t xReturn;
 176:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 178:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 179:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 181:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 182:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdFALSE;
 183:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 184:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         else
 185:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 186:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdTRUE;
 187:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 188:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         return xReturn;
 190:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 191:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 192:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 193:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 194:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 195:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulNewBASEPRI;
 197:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 176              		.loc 2 198 9
 177              		.syntax unified
 178              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 179 0014 4FF05003 			mov r3, #80												
 180 0018 83F31188 		msr basepri, r3											
 181 001c BFF36F8F 		isb														
 182 0020 BFF34F8F 		dsb														
 183              	
 184              	@ 0 "" 2
 185              		.thumb
 186              		.syntax unified
 187 0024 FB60     		str	r3, [r7, #12]
 199:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mov %0, %1												\n"\
 201:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %0											\n"\
 202:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	isb														\n"\
 203:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	dsb														\n"\
 204:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 205:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         );
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 188              		.loc 2 206 5
 189 0026 00BF     		nop
 190              	.L7:
 191              	.LBE32:
 192              	.LBE31:
 193              		.loc 1 234 5 discriminator 1
 194 0028 FEE7     		b	.L7
 195              	.L6:
 196              	.LBB33:
 197              	.LBB34:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 12


 198              		.loc 2 198 9
 199              		.syntax unified
 200              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 201 002a 4FF05003 			mov r3, #80												
 202 002e 83F31188 		msr basepri, r3											
 203 0032 BFF36F8F 		isb														
 204 0036 BFF34F8F 		dsb														
 205              	
 206              	@ 0 "" 2
 207              		.thumb
 208              		.syntax unified
 209 003a BB60     		str	r3, [r7, #8]
 210              		.loc 2 206 5
 211 003c 00BF     		nop
 212              	.LBE34:
 213              	.LBE33:
 235:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portDISABLE_INTERRUPTS();
 236:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 237:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     while( ulDummy == 0 )
 214              		.loc 1 237 10
 215 003e 00BF     		nop
 216              	.L8:
 217              		.loc 1 237 20 discriminator 1
 218 0040 7B68     		ldr	r3, [r7, #4]
 219              		.loc 1 237 10 discriminator 1
 220 0042 002B     		cmp	r3, #0
 221 0044 FCD0     		beq	.L8
 238:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     {
 239:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* This file calls prvTaskExitError() after the scheduler has been
 240:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * started to remove a compiler warning about the function being defined
 241:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * but never called.  ulDummy is used purely to quieten other warnings
 242:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * about code appearing after this function is called - making ulDummy
 243:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * volatile makes the compiler think the function could return and
 244:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * therefore not output an 'unreachable code' warning for code that appears
 245:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * after it. */
 246:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     }
 247:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 222              		.loc 1 247 1
 223 0046 00BF     		nop
 224 0048 00BF     		nop
 225 004a 1437     		adds	r7, r7, #20
 226              	.LCFI9:
 227              		.cfi_def_cfa_offset 4
 228 004c BD46     		mov	sp, r7
 229              	.LCFI10:
 230              		.cfi_def_cfa_register 13
 231              		@ sp needed
 232 004e 5DF8047B 		ldr	r7, [sp], #4
 233              	.LCFI11:
 234              		.cfi_restore 7
 235              		.cfi_def_cfa_offset 0
 236 0052 7047     		bx	lr
 237              	.L10:
 238              		.align	2
 239              	.L9:
 240 0054 00000000 		.word	uxCriticalNesting
 241              		.cfi_endproc
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 13


 242              	.LFE6:
 244              		.section	.text.SVC_Handler,"ax",%progbits
 245              		.align	1
 246              		.global	SVC_Handler
 247              		.syntax unified
 248              		.thumb
 249              		.thumb_func
 251              	SVC_Handler:
 252              	.LFB7:
 248:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 249:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 250:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void )
 251:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 253              		.loc 1 251 1
 254              		.cfi_startproc
 255              		@ Naked Function: prologue and epilogue provided by programmer.
 256              		@ args = 0, pretend = 0, frame = 0
 257              		@ frame_needed = 1, uses_anonymous_args = 0
 252:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     __asm volatile (
 258              		.loc 1 252 5
 259              		.syntax unified
 260              	@ 252 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c" 1
 261 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 262 0002 1968     		ldr r1, [r3]					
 263 0004 0868     		ldr r0, [r1]					
 264 0006 B0E8F04F 		ldmia r0!, {r4-r11, r14}		
 265 000a 80F30988 		msr psp, r0						
 266 000e BFF36F8F 		isb								
 267 0012 4FF00000 		mov r0, #0 						
 268 0016 80F31188 		msr	basepri, r0					
 269 001a 7047     		bx r14							
 270              										
 271 001c AFF30080 		.align 4						
 272 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 273              	
 274              	@ 0 "" 2
 253:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	ldr	r3, pxCurrentTCBConst2		\n"/* Restore the context. */
 254:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	ldr r1, [r3]					\n"/* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 255:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	ldr r0, [r1]					\n"/* The first item in pxCurrentTCB is the task top of stack. */
 256:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	ldmia r0!, {r4-r11, r14}		\n"/* Pop the registers that are not automatically saved on exc
 257:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	msr psp, r0						\n"/* Restore the task stack pointer. */
 258:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	isb								\n"
 259:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	mov r0, #0 						\n"
 260:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	msr	basepri, r0					\n"
 261:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	bx r14							\n"
 262:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "									\n"
 263:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	.align 4						\n"
 264:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 265:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         );
 266:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 275              		.loc 1 266 1
 276              		.thumb
 277              		.syntax unified
 278 0024 00BF     		nop
 279              		.cfi_endproc
 280              	.LFE7:
 282 0026 00BF     		.section	.text.prvPortStartFirstTask,"ax",%progbits
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 14


 283              		.align	1
 284              		.syntax unified
 285              		.thumb
 286              		.thumb_func
 288              	prvPortStartFirstTask:
 289              	.LFB8:
 267:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 268:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 269:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void )
 270:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 290              		.loc 1 270 1
 291              		.cfi_startproc
 292              		@ Naked Function: prologue and epilogue provided by programmer.
 293              		@ args = 0, pretend = 0, frame = 0
 294              		@ frame_needed = 1, uses_anonymous_args = 0
 271:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Start the first task.  This also clears the bit that indicates the FPU is
 272:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * in use in case the FPU was used before the scheduler was started - which
 273:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * would otherwise result in the unnecessary leaving of space in the SVC stack
 274:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * for lazy saving of FPU registers. */
 275:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     __asm volatile (
 295              		.loc 1 275 5
 296              		.syntax unified
 297              	@ 275 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c" 1
 298 0000 0848     		 ldr r0, =0xE000ED08 	
 299 0002 0068     	 ldr r0, [r0] 			
 300 0004 0068     	 ldr r0, [r0] 			
 301 0006 80F30888 	 msr msp, r0			
 302 000a 4FF00000 	 mov r0, #0			
 303 000e 80F31488 	 msr control, r0		
 304 0012 62B6     	 cpsie i				
 305 0014 61B6     	 cpsie f				
 306 0016 BFF34F8F 	 dsb					
 307 001a BFF36F8F 	 isb					
 308 001e 00DF     	 svc 0					
 309 0020 00BF     	 nop					
 310 0022 000008ED 	 .ltorg				
 310      00E0
 311              	
 312              	@ 0 "" 2
 276:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " ldr r0, =0xE000ED08 	\n"/* Use the NVIC offset register to locate the stack. */
 277:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " ldr r0, [r0] 			\n"
 278:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " ldr r0, [r0] 			\n"
 279:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " msr msp, r0			\n"/* Set the msp back to the start of the stack. */
 280:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " mov r0, #0			\n"/* Clear the bit that indicates the FPU is in use, see comment above. */
 281:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " msr control, r0		\n"
 282:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " cpsie i				\n"/* Globally enable interrupts. */
 283:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " cpsie f				\n"
 284:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " dsb					\n"
 285:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " isb					\n"
 286:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " svc 0					\n"/* System call to start first task. */
 287:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " nop					\n"
 288:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         " .ltorg				\n"
 289:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         );
 290:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 313              		.loc 1 290 1
 314              		.thumb
 315              		.syntax unified
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 15


 316 0028 00BF     		nop
 317              		.cfi_endproc
 318              	.LFE8:
 320 002a 00BF     		.section	.text.xPortStartScheduler,"ax",%progbits
 321              		.align	1
 322              		.global	xPortStartScheduler
 323              		.syntax unified
 324              		.thumb
 325              		.thumb_func
 327              	xPortStartScheduler:
 328              	.LFB9:
 291:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 292:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 293:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 294:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 295:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 296:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** BaseType_t xPortStartScheduler( void )
 297:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 329              		.loc 1 297 1
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 24
 332              		@ frame_needed = 1, uses_anonymous_args = 0
 333 0000 80B5     		push	{r7, lr}
 334              	.LCFI12:
 335              		.cfi_def_cfa_offset 8
 336              		.cfi_offset 7, -8
 337              		.cfi_offset 14, -4
 338 0002 86B0     		sub	sp, sp, #24
 339              	.LCFI13:
 340              		.cfi_def_cfa_offset 32
 341 0004 00AF     		add	r7, sp, #0
 342              	.LCFI14:
 343              		.cfi_def_cfa_register 7
 298:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 299:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 300:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 301:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 302:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* This port can be used on all revisions of the Cortex-M7 core other than
 303:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * the r0p1 parts.  r0p1 parts should use the port from the
 304:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * /source/portable/GCC/ARM_CM7/r0p1 directory. */
 305:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 344              		.loc 1 305 5
 345 0006 464B     		ldr	r3, .L23
 346 0008 1B68     		ldr	r3, [r3]
 347 000a 464A     		ldr	r2, .L23+4
 348 000c 9342     		cmp	r3, r2
 349 000e 0AD1     		bne	.L14
 350              	.LBB35:
 351              	.LBB36:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 352              		.loc 2 198 9
 353              		.syntax unified
 354              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 355 0010 4FF05003 			mov r3, #80												
 356 0014 83F31188 		msr basepri, r3											
 357 0018 BFF36F8F 		isb														
 358 001c BFF34F8F 		dsb														
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 16


 359              	
 360              	@ 0 "" 2
 361              		.thumb
 362              		.syntax unified
 363 0020 3B61     		str	r3, [r7, #16]
 364              		.loc 2 206 5
 365 0022 00BF     		nop
 366              	.L15:
 367              	.LBE36:
 368              	.LBE35:
 369              		.loc 1 305 5 discriminator 2
 370 0024 FEE7     		b	.L15
 371              	.L14:
 306:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 372              		.loc 1 306 5
 373 0026 3E4B     		ldr	r3, .L23
 374 0028 1B68     		ldr	r3, [r3]
 375 002a 3F4A     		ldr	r2, .L23+8
 376 002c 9342     		cmp	r3, r2
 377 002e 0AD1     		bne	.L16
 378              	.LBB37:
 379              	.LBB38:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 380              		.loc 2 198 9
 381              		.syntax unified
 382              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 383 0030 4FF05003 			mov r3, #80												
 384 0034 83F31188 		msr basepri, r3											
 385 0038 BFF36F8F 		isb														
 386 003c BFF34F8F 		dsb														
 387              	
 388              	@ 0 "" 2
 389              		.thumb
 390              		.syntax unified
 391 0040 FB60     		str	r3, [r7, #12]
 392              		.loc 2 206 5
 393 0042 00BF     		nop
 394              	.L17:
 395              	.LBE38:
 396              	.LBE37:
 397              		.loc 1 306 5 discriminator 3
 398 0044 FEE7     		b	.L17
 399              	.L16:
 400              	.LBB39:
 307:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 308:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #if ( configASSERT_DEFINED == 1 )
 309:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     {
 310:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         volatile uint32_t ulOriginalPriority;
 311:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( port
 401              		.loc 1 311 34
 402 0046 394B     		ldr	r3, .L23+12
 403 0048 7B61     		str	r3, [r7, #20]
 312:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         volatile uint8_t ucMaxPriorityValue;
 313:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 314:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Determine the maximum priority from which ISR safe FreeRTOS API
 315:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * functions can be called.  ISR safe functions are those that end in
 316:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 17


 317:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * ensure interrupt entry is as fast and simple as possible.
 318:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          *
 319:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * Save the interrupt priority value that is about to be clobbered. */
 320:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         ulOriginalPriority = *pucFirstUserPriorityRegister;
 404              		.loc 1 320 30
 405 004a 7B69     		ldr	r3, [r7, #20]
 406 004c 1B78     		ldrb	r3, [r3]
 407 004e DBB2     		uxtb	r3, r3
 408              		.loc 1 320 28
 409 0050 7B60     		str	r3, [r7, #4]
 321:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 322:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Determine the number of priority bits available.  First write to all
 323:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * possible bits. */
 324:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 410              		.loc 1 324 39
 411 0052 7B69     		ldr	r3, [r7, #20]
 412 0054 FF22     		movs	r2, #255
 413 0056 1A70     		strb	r2, [r3]
 325:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 326:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Read the value back to see how many bits stuck. */
 327:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 414              		.loc 1 327 30
 415 0058 7B69     		ldr	r3, [r7, #20]
 416 005a 1B78     		ldrb	r3, [r3]
 417 005c DBB2     		uxtb	r3, r3
 418              		.loc 1 327 28
 419 005e FB70     		strb	r3, [r7, #3]
 328:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 329:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Use the same mask on the maximum system call priority. */
 330:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 420              		.loc 1 330 69
 421 0060 FB78     		ldrb	r3, [r7, #3]
 422 0062 DBB2     		uxtb	r3, r3
 423 0064 03F05003 		and	r3, r3, #80
 424 0068 DAB2     		uxtb	r2, r3
 425              		.loc 1 330 30
 426 006a 314B     		ldr	r3, .L23+16
 427 006c 1A70     		strb	r2, [r3]
 331:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 332:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Calculate the maximum acceptable priority group value for the number
 333:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * of bits read back. */
 334:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 428              		.loc 1 334 28
 429 006e 314B     		ldr	r3, .L23+20
 430 0070 0722     		movs	r2, #7
 431 0072 1A60     		str	r2, [r3]
 335:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 336:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 432              		.loc 1 336 14
 433 0074 09E0     		b	.L18
 434              	.L19:
 337:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         {
 338:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             ulMaxPRIGROUPValue--;
 435              		.loc 1 338 31
 436 0076 2F4B     		ldr	r3, .L23+20
 437 0078 1B68     		ldr	r3, [r3]
 438 007a 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 18


 439 007c 2D4A     		ldr	r2, .L23+20
 440 007e 1360     		str	r3, [r2]
 339:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 441              		.loc 1 339 32
 442 0080 FB78     		ldrb	r3, [r7, #3]
 443 0082 DBB2     		uxtb	r3, r3
 444 0084 5B00     		lsls	r3, r3, #1
 445 0086 DBB2     		uxtb	r3, r3
 446 0088 FB70     		strb	r3, [r7, #3]
 447              	.L18:
 336:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         {
 448              		.loc 1 336 37
 449 008a FB78     		ldrb	r3, [r7, #3]
 450 008c DBB2     		uxtb	r3, r3
 451 008e 03F08003 		and	r3, r3, #128
 336:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         {
 452              		.loc 1 336 14
 453 0092 802B     		cmp	r3, #128
 454 0094 EFD0     		beq	.L19
 340:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         }
 341:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 342:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         #ifdef __NVIC_PRIO_BITS
 343:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         {
 344:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Check the CMSIS configuration that defines the number of
 345:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * priority bits matches the number of priority bits actually queried
 346:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * from the hardware. */
 347:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 348:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         }
 349:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         #endif
 350:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 351:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         #ifdef configPRIO_BITS
 352:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         {
 353:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Check the FreeRTOS configuration that defines the number of
 354:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * priority bits matches the number of priority bits actually queried
 355:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * from the hardware. */
 356:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 455              		.loc 1 356 13
 456 0096 274B     		ldr	r3, .L23+20
 457 0098 1B68     		ldr	r3, [r3]
 458 009a C3F10703 		rsb	r3, r3, #7
 459 009e 042B     		cmp	r3, #4
 460 00a0 0AD0     		beq	.L20
 461              	.LBB40:
 462              	.LBB41:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 463              		.loc 2 198 9
 464              		.syntax unified
 465              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 466 00a2 4FF05003 			mov r3, #80												
 467 00a6 83F31188 		msr basepri, r3											
 468 00aa BFF36F8F 		isb														
 469 00ae BFF34F8F 		dsb														
 470              	
 471              	@ 0 "" 2
 472              		.thumb
 473              		.syntax unified
 474 00b2 BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 19


 475              		.loc 2 206 5
 476 00b4 00BF     		nop
 477              	.L21:
 478              	.LBE41:
 479              	.LBE40:
 480              		.loc 1 356 13 discriminator 4
 481 00b6 FEE7     		b	.L21
 482              	.L20:
 357:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         }
 358:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         #endif
 359:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 360:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Shift the priority group value back to its position within the AIRCR
 361:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * register. */
 362:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 483              		.loc 1 362 28
 484 00b8 1E4B     		ldr	r3, .L23+20
 485 00ba 1B68     		ldr	r3, [r3]
 486 00bc 1B02     		lsls	r3, r3, #8
 487 00be 1D4A     		ldr	r2, .L23+20
 488 00c0 1360     		str	r3, [r2]
 363:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 489              		.loc 1 363 28
 490 00c2 1C4B     		ldr	r3, .L23+20
 491 00c4 1B68     		ldr	r3, [r3]
 492 00c6 03F4E063 		and	r3, r3, #1792
 493 00ca 1A4A     		ldr	r2, .L23+20
 494 00cc 1360     		str	r3, [r2]
 364:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 365:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Restore the clobbered interrupt priority register to its original
 366:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * value. */
 367:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         *pucFirstUserPriorityRegister = ulOriginalPriority;
 495              		.loc 1 367 39
 496 00ce 7B68     		ldr	r3, [r7, #4]
 497 00d0 DAB2     		uxtb	r2, r3
 498 00d2 7B69     		ldr	r3, [r7, #20]
 499 00d4 1A70     		strb	r2, [r3]
 500              	.LBE39:
 368:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     }
 369:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #endif /* configASSERT_DEFINED */
 370:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 371:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Make PendSV and SysTick the lowest priority interrupts. */
 372:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 501              		.loc 1 372 24
 502 00d6 184B     		ldr	r3, .L23+24
 503 00d8 1B68     		ldr	r3, [r3]
 504 00da 174A     		ldr	r2, .L23+24
 505 00dc 43F47003 		orr	r3, r3, #15728640
 506 00e0 1360     		str	r3, [r2]
 373:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 507              		.loc 1 373 24
 508 00e2 154B     		ldr	r3, .L23+24
 509 00e4 1B68     		ldr	r3, [r3]
 510 00e6 144A     		ldr	r2, .L23+24
 511 00e8 43F07043 		orr	r3, r3, #-268435456
 512 00ec 1360     		str	r3, [r2]
 374:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 375:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Start the timer that generates the tick ISR.  Interrupts are disabled
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 20


 376:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * here already. */
 377:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     vPortSetupTimerInterrupt();
 513              		.loc 1 377 5
 514 00ee FFF7FEFF 		bl	vPortSetupTimerInterrupt
 378:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 379:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Initialise the critical nesting count ready for the first task. */
 380:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting = 0;
 515              		.loc 1 380 23
 516 00f2 124B     		ldr	r3, .L23+28
 517 00f4 0022     		movs	r2, #0
 518 00f6 1A60     		str	r2, [r3]
 381:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 382:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Ensure the VFP is enabled - it should be anyway. */
 383:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     vPortEnableVFP();
 519              		.loc 1 383 5
 520 00f8 FFF7FEFF 		bl	vPortEnableVFP
 384:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 385:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Lazy save always. */
 386:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 521              		.loc 1 386 20
 522 00fc 104B     		ldr	r3, .L23+32
 523 00fe 1B68     		ldr	r3, [r3]
 524 0100 0F4A     		ldr	r2, .L23+32
 525 0102 43F04043 		orr	r3, r3, #-1073741824
 526 0106 1360     		str	r3, [r2]
 387:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 388:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Start the first task. */
 389:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     prvPortStartFirstTask();
 527              		.loc 1 389 5
 528 0108 FFF7FEFF 		bl	prvPortStartFirstTask
 390:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 391:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Should never get here as the tasks will now be executing!  Call the task
 392:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * exit error function to prevent compiler warnings about a static function
 393:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * not being called in the case that the application writer overrides this
 394:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * functionality by defining configTASK_RETURN_ADDRESS.  Call
 395:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * vTaskSwitchContext() so link time optimisation does not remove the
 396:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * symbol. */
 397:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     vTaskSwitchContext();
 529              		.loc 1 397 5
 530 010c FFF7FEFF 		bl	vTaskSwitchContext
 398:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     prvTaskExitError();
 531              		.loc 1 398 5
 532 0110 FFF7FEFF 		bl	prvTaskExitError
 399:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 400:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Should not get here! */
 401:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     return 0;
 533              		.loc 1 401 12
 534 0114 0023     		movs	r3, #0
 402:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 535              		.loc 1 402 1
 536 0116 1846     		mov	r0, r3
 537 0118 1837     		adds	r7, r7, #24
 538              	.LCFI15:
 539              		.cfi_def_cfa_offset 8
 540 011a BD46     		mov	sp, r7
 541              	.LCFI16:
 542              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 21


 543              		@ sp needed
 544 011c 80BD     		pop	{r7, pc}
 545              	.L24:
 546 011e 00BF     		.align	2
 547              	.L23:
 548 0120 00ED00E0 		.word	-536810240
 549 0124 71C20F41 		.word	1091551857
 550 0128 70C20F41 		.word	1091551856
 551 012c 00E400E0 		.word	-536812544
 552 0130 00000000 		.word	ucMaxSysCallPriority
 553 0134 00000000 		.word	ulMaxPRIGROUPValue
 554 0138 20ED00E0 		.word	-536810208
 555 013c 00000000 		.word	uxCriticalNesting
 556 0140 34EF00E0 		.word	-536809676
 557              		.cfi_endproc
 558              	.LFE9:
 560              		.section	.text.vPortEndScheduler,"ax",%progbits
 561              		.align	1
 562              		.global	vPortEndScheduler
 563              		.syntax unified
 564              		.thumb
 565              		.thumb_func
 567              	vPortEndScheduler:
 568              	.LFB10:
 403:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 404:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 405:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortEndScheduler( void )
 406:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 569              		.loc 1 406 1
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 8
 572              		@ frame_needed = 1, uses_anonymous_args = 0
 573              		@ link register save eliminated.
 574 0000 80B4     		push	{r7}
 575              	.LCFI17:
 576              		.cfi_def_cfa_offset 4
 577              		.cfi_offset 7, -4
 578 0002 83B0     		sub	sp, sp, #12
 579              	.LCFI18:
 580              		.cfi_def_cfa_offset 16
 581 0004 00AF     		add	r7, sp, #0
 582              	.LCFI19:
 583              		.cfi_def_cfa_register 7
 407:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Not implemented in ports where there is nothing to return to.
 408:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * Artificially force an assert. */
 409:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     configASSERT( uxCriticalNesting == 1000UL );
 584              		.loc 1 409 5
 585 0006 0B4B     		ldr	r3, .L29
 586 0008 1B68     		ldr	r3, [r3]
 587 000a B3F57A7F 		cmp	r3, #1000
 588 000e 0AD0     		beq	.L28
 589              	.LBB42:
 590              	.LBB43:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 591              		.loc 2 198 9
 592              		.syntax unified
 593              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 22


 594 0010 4FF05003 			mov r3, #80												
 595 0014 83F31188 		msr basepri, r3											
 596 0018 BFF36F8F 		isb														
 597 001c BFF34F8F 		dsb														
 598              	
 599              	@ 0 "" 2
 600              		.thumb
 601              		.syntax unified
 602 0020 7B60     		str	r3, [r7, #4]
 603              		.loc 2 206 5
 604 0022 00BF     		nop
 605              	.L27:
 606              	.LBE43:
 607              	.LBE42:
 608              		.loc 1 409 5 discriminator 1
 609 0024 FEE7     		b	.L27
 610              	.L28:
 410:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 611              		.loc 1 410 1
 612 0026 00BF     		nop
 613 0028 0C37     		adds	r7, r7, #12
 614              	.LCFI20:
 615              		.cfi_def_cfa_offset 4
 616 002a BD46     		mov	sp, r7
 617              	.LCFI21:
 618              		.cfi_def_cfa_register 13
 619              		@ sp needed
 620 002c 5DF8047B 		ldr	r7, [sp], #4
 621              	.LCFI22:
 622              		.cfi_restore 7
 623              		.cfi_def_cfa_offset 0
 624 0030 7047     		bx	lr
 625              	.L30:
 626 0032 00BF     		.align	2
 627              	.L29:
 628 0034 00000000 		.word	uxCriticalNesting
 629              		.cfi_endproc
 630              	.LFE10:
 632              		.section	.text.vPortEnterCritical,"ax",%progbits
 633              		.align	1
 634              		.global	vPortEnterCritical
 635              		.syntax unified
 636              		.thumb
 637              		.thumb_func
 639              	vPortEnterCritical:
 640              	.LFB11:
 411:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 412:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 413:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortEnterCritical( void )
 414:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 641              		.loc 1 414 1
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 8
 644              		@ frame_needed = 1, uses_anonymous_args = 0
 645              		@ link register save eliminated.
 646 0000 80B4     		push	{r7}
 647              	.LCFI23:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 23


 648              		.cfi_def_cfa_offset 4
 649              		.cfi_offset 7, -4
 650 0002 83B0     		sub	sp, sp, #12
 651              	.LCFI24:
 652              		.cfi_def_cfa_offset 16
 653 0004 00AF     		add	r7, sp, #0
 654              	.LCFI25:
 655              		.cfi_def_cfa_register 7
 656              	.LBB44:
 657              	.LBB45:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 658              		.loc 2 198 9
 659              		.syntax unified
 660              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 661 0006 4FF05003 			mov r3, #80												
 662 000a 83F31188 		msr basepri, r3											
 663 000e BFF36F8F 		isb														
 664 0012 BFF34F8F 		dsb														
 665              	
 666              	@ 0 "" 2
 667              		.thumb
 668              		.syntax unified
 669 0016 7B60     		str	r3, [r7, #4]
 670              		.loc 2 206 5
 671 0018 00BF     		nop
 672              	.LBE45:
 673              	.LBE44:
 415:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portDISABLE_INTERRUPTS();
 416:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting++;
 674              		.loc 1 416 22
 675 001a 0F4B     		ldr	r3, .L35
 676 001c 1B68     		ldr	r3, [r3]
 677 001e 0133     		adds	r3, r3, #1
 678 0020 0D4A     		ldr	r2, .L35
 679 0022 1360     		str	r3, [r2]
 417:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 418:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* This is not the interrupt safe version of the enter critical function so
 419:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * assert() if it is being called from an interrupt context.  Only API
 420:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * functions that end in "FromISR" can be used in an interrupt.  Only assert if
 421:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * the critical nesting count is 1 to protect against recursive calls if the
 422:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * assert function also uses a critical section. */
 423:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     if( uxCriticalNesting == 1 )
 680              		.loc 1 423 27
 681 0024 0C4B     		ldr	r3, .L35
 682 0026 1B68     		ldr	r3, [r3]
 683              		.loc 1 423 7
 684 0028 012B     		cmp	r3, #1
 685 002a 0FD1     		bne	.L34
 424:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     {
 425:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 686              		.loc 1 425 9
 687 002c 0B4B     		ldr	r3, .L35+4
 688 002e 1B68     		ldr	r3, [r3]
 689 0030 DBB2     		uxtb	r3, r3
 690 0032 002B     		cmp	r3, #0
 691 0034 0AD0     		beq	.L34
 692              	.LBB46:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 24


 693              	.LBB47:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 694              		.loc 2 198 9
 695              		.syntax unified
 696              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 697 0036 4FF05003 			mov r3, #80												
 698 003a 83F31188 		msr basepri, r3											
 699 003e BFF36F8F 		isb														
 700 0042 BFF34F8F 		dsb														
 701              	
 702              	@ 0 "" 2
 703              		.thumb
 704              		.syntax unified
 705 0046 3B60     		str	r3, [r7]
 706              		.loc 2 206 5
 707 0048 00BF     		nop
 708              	.L33:
 709              	.LBE47:
 710              	.LBE46:
 711              		.loc 1 425 9 discriminator 1
 712 004a FEE7     		b	.L33
 713              	.L34:
 426:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     }
 427:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 714              		.loc 1 427 1
 715 004c 00BF     		nop
 716 004e 0C37     		adds	r7, r7, #12
 717              	.LCFI26:
 718              		.cfi_def_cfa_offset 4
 719 0050 BD46     		mov	sp, r7
 720              	.LCFI27:
 721              		.cfi_def_cfa_register 13
 722              		@ sp needed
 723 0052 5DF8047B 		ldr	r7, [sp], #4
 724              	.LCFI28:
 725              		.cfi_restore 7
 726              		.cfi_def_cfa_offset 0
 727 0056 7047     		bx	lr
 728              	.L36:
 729              		.align	2
 730              	.L35:
 731 0058 00000000 		.word	uxCriticalNesting
 732 005c 04ED00E0 		.word	-536810236
 733              		.cfi_endproc
 734              	.LFE11:
 736              		.section	.text.vPortExitCritical,"ax",%progbits
 737              		.align	1
 738              		.global	vPortExitCritical
 739              		.syntax unified
 740              		.thumb
 741              		.thumb_func
 743              	vPortExitCritical:
 744              	.LFB12:
 428:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 429:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 430:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void vPortExitCritical( void )
 431:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 25


 745              		.loc 1 431 1
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 8
 748              		@ frame_needed = 1, uses_anonymous_args = 0
 749              		@ link register save eliminated.
 750 0000 80B4     		push	{r7}
 751              	.LCFI29:
 752              		.cfi_def_cfa_offset 4
 753              		.cfi_offset 7, -4
 754 0002 83B0     		sub	sp, sp, #12
 755              	.LCFI30:
 756              		.cfi_def_cfa_offset 16
 757 0004 00AF     		add	r7, sp, #0
 758              	.LCFI31:
 759              		.cfi_def_cfa_register 7
 432:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     configASSERT( uxCriticalNesting );
 760              		.loc 1 432 5
 761 0006 124B     		ldr	r3, .L42
 762 0008 1B68     		ldr	r3, [r3]
 763 000a 002B     		cmp	r3, #0
 764 000c 0AD1     		bne	.L38
 765              	.LBB48:
 766              	.LBB49:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 767              		.loc 2 198 9
 768              		.syntax unified
 769              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 770 000e 4FF05003 			mov r3, #80												
 771 0012 83F31188 		msr basepri, r3											
 772 0016 BFF36F8F 		isb														
 773 001a BFF34F8F 		dsb														
 774              	
 775              	@ 0 "" 2
 776              		.thumb
 777              		.syntax unified
 778 001e 7B60     		str	r3, [r7, #4]
 779              		.loc 2 206 5
 780 0020 00BF     		nop
 781              	.L39:
 782              	.LBE49:
 783              	.LBE48:
 784              		.loc 1 432 5 discriminator 1
 785 0022 FEE7     		b	.L39
 786              	.L38:
 433:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     uxCriticalNesting--;
 787              		.loc 1 433 22
 788 0024 0A4B     		ldr	r3, .L42
 789 0026 1B68     		ldr	r3, [r3]
 790 0028 013B     		subs	r3, r3, #1
 791 002a 094A     		ldr	r2, .L42
 792 002c 1360     		str	r3, [r2]
 434:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 435:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     if( uxCriticalNesting == 0 )
 793              		.loc 1 435 27
 794 002e 084B     		ldr	r3, .L42
 795 0030 1B68     		ldr	r3, [r3]
 796              		.loc 1 435 7
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 26


 797 0032 002B     		cmp	r3, #0
 798 0034 05D1     		bne	.L41
 799 0036 0023     		movs	r3, #0
 800 0038 3B60     		str	r3, [r7]
 801              	.LBB50:
 802              	.LBB51:
 207:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 208:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 209:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 210:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 211:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 212:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 213:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 214:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 215:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 216:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mrs %0, basepri											\n"\
 217:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mov %1, %2												\n"\
 218:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %1											\n"\
 219:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	isb														\n"\
 220:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	dsb														\n"\
 221:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 222:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         );
 223:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 224:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 225:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****          * warnings. */
 226:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         return ulOriginalBASEPRI;
 227:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 228:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 229:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 230:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 231:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 232:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 803              		.loc 2 232 9
 804 003a 3B68     		ldr	r3, [r7]
 805              		.syntax unified
 806              	@ 232 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 807 003c 83F31188 			msr basepri, r3	
 808              	@ 0 "" 2
 233:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 234:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
 235:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         );
 236:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 809              		.loc 2 236 5
 810              		.thumb
 811              		.syntax unified
 812 0040 00BF     		nop
 813              	.L41:
 814              	.LBE51:
 815              	.LBE50:
 436:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     {
 437:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         portENABLE_INTERRUPTS();
 438:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     }
 439:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 816              		.loc 1 439 1
 817 0042 00BF     		nop
 818 0044 0C37     		adds	r7, r7, #12
 819              	.LCFI32:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 27


 820              		.cfi_def_cfa_offset 4
 821 0046 BD46     		mov	sp, r7
 822              	.LCFI33:
 823              		.cfi_def_cfa_register 13
 824              		@ sp needed
 825 0048 5DF8047B 		ldr	r7, [sp], #4
 826              	.LCFI34:
 827              		.cfi_restore 7
 828              		.cfi_def_cfa_offset 0
 829 004c 7047     		bx	lr
 830              	.L43:
 831 004e 00BF     		.align	2
 832              	.L42:
 833 0050 00000000 		.word	uxCriticalNesting
 834              		.cfi_endproc
 835              	.LFE12:
 837              		.section	.text.PendSV_Handler,"ax",%progbits
 838              		.align	1
 839              		.global	PendSV_Handler
 840              		.syntax unified
 841              		.thumb
 842              		.thumb_func
 844              	PendSV_Handler:
 845              	.LFB13:
 440:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 441:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 442:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void )
 443:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 846              		.loc 1 443 1
 847              		.cfi_startproc
 848              		@ Naked Function: prologue and epilogue provided by programmer.
 849              		@ args = 0, pretend = 0, frame = 0
 850              		@ frame_needed = 1, uses_anonymous_args = 0
 444:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* This is a naked function. */
 445:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 446:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     __asm volatile
 851              		.loc 1 446 5
 852              		.syntax unified
 853              	@ 446 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c" 1
 854 0000 EFF30980 			mrs r0, psp							
 855 0004 BFF36F8F 		isb									
 856              											
 857 0008 154B     		ldr	r3, pxCurrentTCBConst			
 858 000a 1A68     		ldr	r2, [r3]						
 859              											
 860 000c 1EF0100F 		tst r14, #0x10						
 861 0010 08BF     		it eq								
 862 0012 20ED108A 		vstmdbeq r0!, {s16-s31}				
 863              											
 864 0016 20E9F04F 		stmdb r0!, {r4-r11, r14}			
 865 001a 1060     		str r0, [r2]						
 866              											
 867 001c 2DE90900 		stmdb sp!, {r0, r3}					
 868 0020 4FF05000 		mov r0, #80 							
 869 0024 80F31188 		msr basepri, r0						
 870 0028 BFF34F8F 		dsb									
 871 002c BFF36F8F 		isb									
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 28


 872 0030 FFF7FEFF 		bl vTaskSwitchContext				
 873 0034 4FF00000 		mov r0, #0							
 874 0038 80F31188 		msr basepri, r0						
 875 003c 09BC     		ldmia sp!, {r0, r3}					
 876              											
 877 003e 1968     		ldr r1, [r3]						
 878 0040 0868     		ldr r0, [r1]						
 879              											
 880 0042 B0E8F04F 		ldmia r0!, {r4-r11, r14}			
 881              											
 882 0046 1EF0100F 		tst r14, #0x10						
 883 004a 08BF     		it eq								
 884 004c B0EC108A 		vldmiaeq r0!, {s16-s31}				
 885              											
 886 0050 80F30988 		msr psp, r0							
 887 0054 BFF36F8F 		isb									
 888              											
 889              											
 890 0058 7047     		bx r14								
 891              											
 892 005a 00BFAFF3 		.align 4							
 892      0080
 893 0060 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 894              	
 895              	@ 0 "" 2
 447:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     (
 448:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	mrs r0, psp							\n"
 449:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	isb									\n"
 450:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 451:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	ldr	r3, pxCurrentTCBConst			\n"/* Get the location of the current TCB. */
 452:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	ldr	r2, [r3]						\n"
 453:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 454:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	tst r14, #0x10						\n"/* Is the task using the FPU context?  If so, push high vfp regist
 455:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	it eq								\n"
 456:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	vstmdbeq r0!, {s16-s31}				\n"
 457:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 458:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	stmdb r0!, {r4-r11, r14}			\n"/* Save the core registers. */
 459:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	str r0, [r2]						\n"/* Save the new top of stack into the first member of the TCB. */
 460:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 461:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	stmdb sp!, {r0, r3}					\n"
 462:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	mov r0, %0 							\n"
 463:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	msr basepri, r0						\n"
 464:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	dsb									\n"
 465:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	isb									\n"
 466:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	bl vTaskSwitchContext				\n"
 467:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	mov r0, #0							\n"
 468:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	msr basepri, r0						\n"
 469:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	ldmia sp!, {r0, r3}					\n"
 470:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 471:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	ldr r1, [r3]						\n"/* The first item in pxCurrentTCB is the task top of stack. */
 472:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	ldr r0, [r1]						\n"
 473:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 474:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	ldmia r0!, {r4-r11, r14}			\n"/* Pop the core registers. */
 475:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 476:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	tst r14, #0x10						\n"/* Is the task using the FPU context?  If so, pop the high vfp reg
 477:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	it eq								\n"
 478:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	vldmiaeq r0!, {s16-s31}				\n"
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 29


 479:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 480:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	msr psp, r0							\n"
 481:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	isb									\n"
 482:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 483:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         #ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata workaround. */
 484:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             #if WORKAROUND_PMU_CM001 == 1
 485:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 "			push { r14 }				\n"
 486:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 "			pop { pc }					\n"
 487:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             #endif
 488:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         #endif
 489:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 490:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	bx r14								\n"
 491:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "										\n"
 492:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	.align 4							\n"
 493:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "pxCurrentTCBConst: .word pxCurrentTCB	\n"
 494:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 495:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     );
 496:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 896              		.loc 1 496 1
 897              		.thumb
 898              		.syntax unified
 899 0064 00BF     		nop
 900              		.cfi_endproc
 901              	.LFE13:
 903 0066 00BF     		.section	.text.SysTick_Handler,"ax",%progbits
 904              		.align	1
 905              		.global	SysTick_Handler
 906              		.syntax unified
 907              		.thumb
 908              		.thumb_func
 910              	SysTick_Handler:
 911              	.LFB14:
 497:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 498:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 499:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void )
 500:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 912              		.loc 1 500 1
 913              		.cfi_startproc
 914              		@ args = 0, pretend = 0, frame = 8
 915              		@ frame_needed = 1, uses_anonymous_args = 0
 916 0000 80B5     		push	{r7, lr}
 917              	.LCFI35:
 918              		.cfi_def_cfa_offset 8
 919              		.cfi_offset 7, -8
 920              		.cfi_offset 14, -4
 921 0002 82B0     		sub	sp, sp, #8
 922              	.LCFI36:
 923              		.cfi_def_cfa_offset 16
 924 0004 00AF     		add	r7, sp, #0
 925              	.LCFI37:
 926              		.cfi_def_cfa_register 7
 927              	.LBB52:
 928              	.LBB53:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 929              		.loc 2 198 9
 930              		.syntax unified
 931              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 30


 932 0006 4FF05003 			mov r3, #80												
 933 000a 83F31188 		msr basepri, r3											
 934 000e BFF36F8F 		isb														
 935 0012 BFF34F8F 		dsb														
 936              	
 937              	@ 0 "" 2
 938              		.thumb
 939              		.syntax unified
 940 0016 7B60     		str	r3, [r7, #4]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 941              		.loc 2 206 5
 942 0018 00BF     		nop
 943              	.LBE53:
 944              	.LBE52:
 501:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* The SysTick runs at the lowest interrupt priority, so when this interrupt
 502:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * executes all interrupts must be unmasked.  There is therefore no need to
 503:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * save and then restore the interrupt mask value as its value is already
 504:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****      * known. */
 505:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portDISABLE_INTERRUPTS();
 506:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     {
 507:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Increment the RTOS tick. */
 508:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         if( xTaskIncrementTick() != pdFALSE )
 945              		.loc 1 508 13
 946 001a FFF7FEFF 		bl	xTaskIncrementTick
 947 001e 0346     		mov	r3, r0
 948              		.loc 1 508 11
 949 0020 002B     		cmp	r3, #0
 950 0022 03D0     		beq	.L46
 509:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         {
 510:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* A context switch is required.  Context switching is performed in
 511:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * the PendSV interrupt.  Pend the PendSV interrupt. */
 512:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 951              		.loc 1 512 13
 952 0024 064B     		ldr	r3, .L47
 953              		.loc 1 512 35
 954 0026 4FF08052 		mov	r2, #268435456
 955 002a 1A60     		str	r2, [r3]
 956              	.L46:
 957 002c 0023     		movs	r3, #0
 958 002e 3B60     		str	r3, [r7]
 959              	.LBB54:
 960              	.LBB55:
 232:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 961              		.loc 2 232 9
 962 0030 3B68     		ldr	r3, [r7]
 963              		.syntax unified
 964              	@ 232 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 965 0032 83F31188 			msr basepri, r3	
 966              	@ 0 "" 2
 967              		.loc 2 236 5
 968              		.thumb
 969              		.syntax unified
 970 0036 00BF     		nop
 971              	.LBE55:
 972              	.LBE54:
 513:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         }
 514:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     }
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 31


 515:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portENABLE_INTERRUPTS();
 516:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 973              		.loc 1 516 1
 974 0038 00BF     		nop
 975 003a 0837     		adds	r7, r7, #8
 976              	.LCFI38:
 977              		.cfi_def_cfa_offset 8
 978 003c BD46     		mov	sp, r7
 979              	.LCFI39:
 980              		.cfi_def_cfa_register 13
 981              		@ sp needed
 982 003e 80BD     		pop	{r7, pc}
 983              	.L48:
 984              		.align	2
 985              	.L47:
 986 0040 04ED00E0 		.word	-536810236
 987              		.cfi_endproc
 988              	.LFE14:
 990              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 991              		.align	1
 992              		.weak	vPortSetupTimerInterrupt
 993              		.syntax unified
 994              		.thumb
 995              		.thumb_func
 997              	vPortSetupTimerInterrupt:
 998              	.LFB15:
 517:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 518:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 519:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 520:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 521:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 522:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     {
 523:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickDecre
 524:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         TickType_t xModifiableIdleTime;
 525:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 526:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Make sure the SysTick reload value does not overflow the counter. */
 527:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 528:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         {
 529:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 530:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         }
 531:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 532:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Enter a critical section but don't use the taskENTER_CRITICAL()
 533:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * method as that will mask interrupts that should exit sleep mode. */
 534:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         __asm volatile ( "cpsid i" ::: "memory" );
 535:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         __asm volatile ( "dsb" );
 536:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         __asm volatile ( "isb" );
 537:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 538:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* If a context switch is pending or a task is waiting for the scheduler
 539:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * to be unsuspended then abandon the low power entry. */
 540:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 541:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         {
 542:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Re-enable interrupts - see comments above the cpsid instruction
 543:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * above. */
 544:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 545:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         }
 546:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         else
 547:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 32


 548:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Stop the SysTick momentarily.  The time the SysTick is stopped for
 549:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * is accounted for as best it can be, but using the tickless mode will
 550:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * inevitably result in some tiny drift of the time maintained by the
 551:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * kernel with respect to calendar time. */
 552:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BI
 553:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 554:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Use the SysTick current-value register to determine the number of
 555:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * SysTick decrements remaining until the next tick interrupt.  If the
 556:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * current-value register is zero, then there are actually
 557:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * ulTimerCountsForOneTick decrements remaining, not zero, because the
 558:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * SysTick requests the interrupt when decrementing from 1 to 0. */
 559:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 560:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 561:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             if( ulSysTickDecrementsLeft == 0 )
 562:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             {
 563:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 ulSysTickDecrementsLeft = ulTimerCountsForOneTick;
 564:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             }
 565:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 566:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Calculate the reload value required to wait xExpectedIdleTime
 567:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * tick periods.  -1 is used because this code normally executes part
 568:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * way through the first tick period.  But if the SysTick IRQ is now
 569:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * pending, then clear the IRQ, suppressing the first tick, and correct
 570:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * the reload value to reflect that the second tick period is already
 571:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * underway.  The expected idle time is always at least two ticks. */
 572:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             ulReloadValue = ulSysTickDecrementsLeft + ( ulTimerCountsForOneTick * ( xExpectedIdleTi
 573:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 574:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             if( ( portNVIC_INT_CTRL_REG & portNVIC_PEND_SYSTICK_SET_BIT ) != 0 )
 575:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             {
 576:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_INT_CTRL_REG = portNVIC_PEND_SYSTICK_CLEAR_BIT;
 577:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 ulReloadValue -= ulTimerCountsForOneTick;
 578:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             }
 579:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 580:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             if( ulReloadValue > ulStoppedTimerCompensation )
 581:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             {
 582:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 ulReloadValue -= ulStoppedTimerCompensation;
 583:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             }
 584:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 585:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Set the new reload value. */
 586:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 587:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 588:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Clear the SysTick count flag and set the count value back to
 589:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * zero. */
 590:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 591:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 592:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Restart SysTick. */
 593:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 594:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 595:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 596:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * set its parameter to 0 to indicate that its implementation contains
 597:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * its own wait for interrupt or wait for event instruction, and so wfi
 598:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * should not be executed again.  However, the original expected idle
 599:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * time variable must remain unmodified, so a copy is taken. */
 600:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             xModifiableIdleTime = xExpectedIdleTime;
 601:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 602:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 603:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             if( xModifiableIdleTime > 0 )
 604:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 33


 605:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 __asm volatile ( "dsb" ::: "memory" );
 606:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 __asm volatile ( "wfi" );
 607:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 __asm volatile ( "isb" );
 608:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             }
 609:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 610:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 611:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 612:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Re-enable interrupts to allow the interrupt that brought the MCU
 613:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * out of sleep mode to execute immediately.  See comments above
 614:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * the cpsid instruction above. */
 615:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 616:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "dsb" );
 617:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "isb" );
 618:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 619:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Disable interrupts again because the clock is about to be stopped
 620:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * and interrupts that execute while the clock is stopped will increase
 621:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * any slippage between the time maintained by the RTOS and calendar
 622:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * time. */
 623:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "cpsid i" ::: "memory" );
 624:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "dsb" );
 625:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "isb" );
 626:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 627:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Disable the SysTick clock without reading the
 628:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * portNVIC_SYSTICK_CTRL_REG register to ensure the
 629:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 630:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * the time the SysTick is stopped for is accounted for as best it can
 631:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * be, but using the tickless mode will inevitably result in some tiny
 632:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * drift of the time maintained by the kernel with respect to calendar
 633:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * time*/
 634:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BI
 635:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 636:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Determine whether the SysTick has already counted to zero. */
 637:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 638:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             {
 639:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 uint32_t ulCalculatedLoadValue;
 640:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 641:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 /* The tick interrupt ended the sleep (or is now pending), and
 642:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * a new tick period has started.  Reset portNVIC_SYSTICK_LOAD_REG
 643:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * with whatever remains of the new tick period. */
 644:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portN
 645:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 646:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 /* Don't allow a tiny value, or values that have somehow
 647:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * underflowed because the post sleep hook did something
 648:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * that took too long or because the SysTick current-value register
 649:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * is zero. */
 650:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 if( ( ulCalculatedLoadValue <= ulStoppedTimerCompensation ) || ( ulCalculatedLoadVa
 651:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 {
 652:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                     ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 653:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 }
 654:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 655:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 656:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 657:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 /* As the pending tick will be processed as soon as this
 658:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * function exits, the tick value maintained by the tick is stepped
 659:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * forward by one less than the time spent waiting. */
 660:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 661:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             }
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 34


 662:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             else
 663:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             {
 664:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 /* Something other than the tick interrupt ended the sleep. */
 665:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 666:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 /* Use the SysTick current-value register to determine the
 667:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * number of SysTick decrements remaining until the expected idle
 668:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * time would have ended. */
 669:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 670:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 #if ( portNVIC_SYSTICK_CLK_BIT_CONFIG != portNVIC_SYSTICK_CLK_BIT )
 671:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 {
 672:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                     /* If the SysTick is not using the core clock, the current-
 673:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                      * value register might still be zero here.  In that case, the
 674:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                      * SysTick didn't load from the reload register, and there are
 675:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                      * ulReloadValue decrements remaining in the expected idle
 676:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                      * time, not zero. */
 677:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                     if( ulSysTickDecrementsLeft == 0 )
 678:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                     {
 679:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                         ulSysTickDecrementsLeft = ulReloadValue;
 680:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                     }
 681:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 }
 682:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 #endif /* portNVIC_SYSTICK_CLK_BIT_CONFIG */
 683:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 684:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 /* Work out how long the sleep lasted rounded to complete tick
 685:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * periods (not the ulReload value which accounted for part
 686:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * ticks). */
 687:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - ul
 688:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 689:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 /* How many complete tick periods passed while the processor
 690:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * was waiting? */
 691:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 692:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 693:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 /* The reload value is set to whatever fraction of a single tick
 694:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * period remains. */
 695:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOne
 696:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             }
 697:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 698:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG again,
 699:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * then set portNVIC_SYSTICK_LOAD_REG back to its standard value.  If
 700:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * the SysTick is not using the core clock, temporarily configure it to
 701:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * use the core clock.  This configuration forces the SysTick to load
 702:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * from portNVIC_SYSTICK_LOAD_REG immediately instead of at the next
 703:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * cycle of the other clock.  Then portNVIC_SYSTICK_LOAD_REG is ready
 704:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * to receive the standard value immediately. */
 705:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 706:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portN
 707:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             #if ( portNVIC_SYSTICK_CLK_BIT_CONFIG == portNVIC_SYSTICK_CLK_BIT )
 708:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             {
 709:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 710:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             }
 711:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             #else
 712:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             {
 713:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 /* The temporary usage of the core clock has served its purpose,
 714:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                  * as described above.  Resume usage of the other clock. */
 715:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT;
 716:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 717:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 718:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 35


 719:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                     /* The partial tick period already ended.  Be sure the SysTick
 720:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                      * counts it only once. */
 721:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0;
 722:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 }
 723:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 724:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 725:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****                 portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_
 726:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             }
 727:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             #endif /* portNVIC_SYSTICK_CLK_BIT_CONFIG */
 728:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 729:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Step the tick to account for any tick periods that elapsed. */
 730:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             vTaskStepTick( ulCompleteTickPeriods );
 731:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 732:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Exit with interrupts enabled. */
 733:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 734:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         }
 735:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     }
 736:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 737:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 738:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 739:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 740:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*
 741:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 742:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  * frequency.
 743:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****  */
 744:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** __attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
 745:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 999              		.loc 1 745 1
 1000              		.cfi_startproc
 1001              		@ args = 0, pretend = 0, frame = 0
 1002              		@ frame_needed = 1, uses_anonymous_args = 0
 1003              		@ link register save eliminated.
 1004 0000 80B4     		push	{r7}
 1005              	.LCFI40:
 1006              		.cfi_def_cfa_offset 4
 1007              		.cfi_offset 7, -4
 1008 0002 00AF     		add	r7, sp, #0
 1009              	.LCFI41:
 1010              		.cfi_def_cfa_register 7
 746:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Calculate the constants required to configure the tick interrupt. */
 747:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #if ( configUSE_TICKLESS_IDLE == 1 )
 748:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     {
 749:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 750:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 751:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTIC
 752:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     }
 753:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     #endif /* configUSE_TICKLESS_IDLE */
 754:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 755:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Stop and clear the SysTick. */
 756:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CTRL_REG = 0UL;
 1011              		.loc 1 756 5
 1012 0004 0B4B     		ldr	r3, .L50
 1013              		.loc 1 756 31
 1014 0006 0022     		movs	r2, #0
 1015 0008 1A60     		str	r2, [r3]
 757:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 1016              		.loc 1 757 5
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 36


 1017 000a 0B4B     		ldr	r3, .L50+4
 1018              		.loc 1 757 40
 1019 000c 0022     		movs	r2, #0
 1020 000e 1A60     		str	r2, [r3]
 758:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 759:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     /* Configure SysTick to interrupt at the requested rate. */
 760:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 1021              		.loc 1 760 58
 1022 0010 0A4B     		ldr	r3, .L50+8
 1023 0012 1B68     		ldr	r3, [r3]
 1024 0014 0A4A     		ldr	r2, .L50+12
 1025 0016 A2FB0323 		umull	r2, r3, r2, r3
 1026 001a 9B09     		lsrs	r3, r3, #6
 1027              		.loc 1 760 5
 1028 001c 094A     		ldr	r2, .L50+16
 1029              		.loc 1 760 81
 1030 001e 013B     		subs	r3, r3, #1
 1031              		.loc 1 760 31
 1032 0020 1360     		str	r3, [r2]
 761:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | port
 1033              		.loc 1 761 5
 1034 0022 044B     		ldr	r3, .L50
 1035              		.loc 1 761 31
 1036 0024 0722     		movs	r2, #7
 1037 0026 1A60     		str	r2, [r3]
 762:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 1038              		.loc 1 762 1
 1039 0028 00BF     		nop
 1040 002a BD46     		mov	sp, r7
 1041              	.LCFI42:
 1042              		.cfi_def_cfa_register 13
 1043              		@ sp needed
 1044 002c 5DF8047B 		ldr	r7, [sp], #4
 1045              	.LCFI43:
 1046              		.cfi_restore 7
 1047              		.cfi_def_cfa_offset 0
 1048 0030 7047     		bx	lr
 1049              	.L51:
 1050 0032 00BF     		.align	2
 1051              	.L50:
 1052 0034 10E000E0 		.word	-536813552
 1053 0038 18E000E0 		.word	-536813544
 1054 003c 00000000 		.word	SystemCoreClock
 1055 0040 D34D6210 		.word	274877907
 1056 0044 14E000E0 		.word	-536813548
 1057              		.cfi_endproc
 1058              	.LFE15:
 1060              		.section	.text.vPortEnableVFP,"ax",%progbits
 1061              		.align	1
 1062              		.syntax unified
 1063              		.thumb
 1064              		.thumb_func
 1066              	vPortEnableVFP:
 1067              	.LFB16:
 763:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 764:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 765:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /* This is a naked function. */
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 37


 766:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void )
 767:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** {
 1068              		.loc 1 767 1
 1069              		.cfi_startproc
 1070              		@ Naked Function: prologue and epilogue provided by programmer.
 1071              		@ args = 0, pretend = 0, frame = 0
 1072              		@ frame_needed = 1, uses_anonymous_args = 0
 768:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     __asm volatile
 1073              		.loc 1 768 5
 1074              		.syntax unified
 1075              	@ 768 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c" 1
 1076 0000 DFF80C00 			ldr.w r0, =0xE000ED88		
 1077 0004 0168     		ldr r1, [r0]				
 1078              									
 1079 0006 41F47001 		orr r1, r1, #( 0xf << 20 )	
 1080 000a 0160     		str r1, [r0]				
 1081 000c 7047     		bx r14						
 1082 000e 000088ED 		.ltorg						
 1082      00E0
 1083              	
 1084              	@ 0 "" 2
 769:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     (
 770:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	ldr.w r0, =0xE000ED88		\n"/* The FPU enable bits are in the CPACR. */
 771:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	ldr r1, [r0]				\n"
 772:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "								\n"
 773:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
 774:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	str r1, [r0]				\n"
 775:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	bx r14						\n"
 776:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         "	.ltorg						\n"
 777:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     );
 778:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** }
 1085              		.loc 1 778 1
 1086              		.thumb
 1087              		.syntax unified
 1088 0014 00BF     		nop
 1089              		.cfi_endproc
 1090              	.LFE16:
 1092 0016 00BF     		.section	.text.vPortValidateInterruptPriority,"ax",%progbits
 1093              		.align	1
 1094              		.global	vPortValidateInterruptPriority
 1095              		.syntax unified
 1096              		.thumb
 1097              		.thumb_func
 1099              	vPortValidateInterruptPriority:
 1100              	.LFB17:
 779:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 780:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 781:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** #if ( configASSERT_DEFINED == 1 )
 782:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 783:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     void vPortValidateInterruptPriority( void )
 784:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     {
 1101              		.loc 1 784 5
 1102              		.cfi_startproc
 1103              		@ args = 0, pretend = 0, frame = 16
 1104              		@ frame_needed = 1, uses_anonymous_args = 0
 1105              		@ link register save eliminated.
 1106 0000 80B4     		push	{r7}
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 38


 1107              	.LCFI44:
 1108              		.cfi_def_cfa_offset 4
 1109              		.cfi_offset 7, -4
 1110 0002 85B0     		sub	sp, sp, #20
 1111              	.LCFI45:
 1112              		.cfi_def_cfa_offset 24
 1113 0004 00AF     		add	r7, sp, #0
 1114              	.LCFI46:
 1115              		.cfi_def_cfa_register 7
 785:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         uint32_t ulCurrentInterrupt;
 786:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         uint8_t ucCurrentPriority;
 787:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 788:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Obtain the number of the currently executing interrupt. */
 789:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 1116              		.loc 1 789 9
 1117              		.syntax unified
 1118              	@ 789 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c" 1
 1119 0006 EFF30583 		mrs r3, ipsr
 1120              	@ 0 "" 2
 1121              		.thumb
 1122              		.syntax unified
 1123 000a FB60     		str	r3, [r7, #12]
 790:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 791:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Is the interrupt number a user defined interrupt? */
 792:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 1124              		.loc 1 792 11
 1125 000c FB68     		ldr	r3, [r7, #12]
 1126 000e 0F2B     		cmp	r3, #15
 1127 0010 14D9     		bls	.L54
 793:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         {
 794:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* Look up the interrupt's priority. */
 795:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 1128              		.loc 1 795 61
 1129 0012 174A     		ldr	r2, .L59
 1130 0014 FB68     		ldr	r3, [r7, #12]
 1131 0016 1344     		add	r3, r3, r2
 1132              		.loc 1 795 31
 1133 0018 1B78     		ldrb	r3, [r3]
 1134 001a FB72     		strb	r3, [r7, #11]
 796:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 797:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             /* The following assertion will fail if a service routine (ISR) for
 798:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * an interrupt that has been assigned a priority above
 799:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
 800:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * function.  ISR safe FreeRTOS API functions must *only* be called
 801:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * from interrupts that have been assigned a priority at or below
 802:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY.
 803:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              *
 804:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * Numerically low interrupt priority numbers represent logically high
 805:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * interrupt priorities, therefore the priority of the interrupt must
 806:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * be set to a value equal to or numerically *higher* than
 807:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY.
 808:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              *
 809:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * Interrupts that	use the FreeRTOS API must not be left at their
 810:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * default priority of	zero as that is the highest possible priority,
 811:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
 812:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * and	therefore also guaranteed to be invalid.
 813:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              *
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 39


 814:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * FreeRTOS maintains separate thread and ISR API functions to ensure
 815:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * interrupt entry is as fast and simple as possible.
 816:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              *
 817:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * The following links provide detailed information:
 818:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
 819:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****              * https://www.FreeRTOS.org/FAQHelp.html */
 820:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****             configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 1135              		.loc 1 820 13
 1136 001c 154B     		ldr	r3, .L59+4
 1137 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1138 0020 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1139 0022 9A42     		cmp	r2, r3
 1140 0024 0AD2     		bcs	.L54
 1141              	.LBB56:
 1142              	.LBB57:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1143              		.loc 2 198 9
 1144              		.syntax unified
 1145              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1146 0026 4FF05003 			mov r3, #80												
 1147 002a 83F31188 		msr basepri, r3											
 1148 002e BFF36F8F 		isb														
 1149 0032 BFF34F8F 		dsb														
 1150              	
 1151              	@ 0 "" 2
 1152              		.thumb
 1153              		.syntax unified
 1154 0036 7B60     		str	r3, [r7, #4]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1155              		.loc 2 206 5
 1156 0038 00BF     		nop
 1157              	.L55:
 1158              	.LBE57:
 1159              	.LBE56:
 1160              		.loc 1 820 13 discriminator 1
 1161 003a FEE7     		b	.L55
 1162              	.L54:
 821:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         }
 822:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c **** 
 823:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         /* Priority grouping:  The interrupt controller (NVIC) allows the bits
 824:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * that define each interrupt's priority to be split between bits that
 825:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * define the interrupt's pre-emption priority bits and bits that define
 826:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * the interrupt's sub-priority.  For simplicity all bits must be defined
 827:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * to be pre-emption priority bits.  The following assertion will fail if
 828:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * this is not the case (if some bits represent a sub-priority).
 829:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          *
 830:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * If the application only uses CMSIS libraries for interrupt
 831:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * configuration then the correct setting can be achieved on all Cortex-M
 832:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
 833:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * scheduler.  Note however that some vendor specific peripheral libraries
 834:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * assume a non-zero priority group setting, in which cases using a value
 835:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****          * of zero will result in unpredictable behaviour. */
 836:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****         configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 1163              		.loc 1 836 9
 1164 003c 0E4B     		ldr	r3, .L59+8
 1165 003e 1B68     		ldr	r3, [r3]
 1166 0040 03F4E062 		and	r2, r3, #1792
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 40


 1167 0044 0D4B     		ldr	r3, .L59+12
 1168 0046 1B68     		ldr	r3, [r3]
 1169 0048 9A42     		cmp	r2, r3
 1170 004a 0AD9     		bls	.L58
 1171              	.LBB58:
 1172              	.LBB59:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1173              		.loc 2 198 9
 1174              		.syntax unified
 1175              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1176 004c 4FF05003 			mov r3, #80												
 1177 0050 83F31188 		msr basepri, r3											
 1178 0054 BFF36F8F 		isb														
 1179 0058 BFF34F8F 		dsb														
 1180              	
 1181              	@ 0 "" 2
 1182              		.thumb
 1183              		.syntax unified
 1184 005c 3B60     		str	r3, [r7]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1185              		.loc 2 206 5
 1186 005e 00BF     		nop
 1187              	.L57:
 1188              	.LBE59:
 1189              	.LBE58:
 1190              		.loc 1 836 9 discriminator 2
 1191 0060 FEE7     		b	.L57
 1192              	.L58:
 837:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/port.c ****     }
 1193              		.loc 1 837 5
 1194 0062 00BF     		nop
 1195 0064 1437     		adds	r7, r7, #20
 1196              	.LCFI47:
 1197              		.cfi_def_cfa_offset 4
 1198 0066 BD46     		mov	sp, r7
 1199              	.LCFI48:
 1200              		.cfi_def_cfa_register 13
 1201              		@ sp needed
 1202 0068 5DF8047B 		ldr	r7, [sp], #4
 1203              	.LCFI49:
 1204              		.cfi_restore 7
 1205              		.cfi_def_cfa_offset 0
 1206 006c 7047     		bx	lr
 1207              	.L60:
 1208 006e 00BF     		.align	2
 1209              	.L59:
 1210 0070 F0E300E0 		.word	-536812560
 1211 0074 00000000 		.word	ucMaxSysCallPriority
 1212 0078 0CED00E0 		.word	-536810228
 1213 007c 00000000 		.word	ulMaxPRIGROUPValue
 1214              		.cfi_endproc
 1215              	.LFE17:
 1217              		.text
 1218              	.Letext0:
 1219              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 1220              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 1221              		.file 5 "ThirdParty/FreeRTOS/include/projdefs.h"
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 41


 1222              		.file 6 "ThirdParty/FreeRTOS/FreeRTOSConfig.h"
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 42


DEFINED SYMBOLS
                            *ABS*:00000000 port.c
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:20     .data.uxCriticalNesting:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:23     .data.uxCriticalNesting:00000000 uxCriticalNesting
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:28     .bss.ucMaxSysCallPriority:00000000 ucMaxSysCallPriority
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:29     .bss.ucMaxSysCallPriority:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:31     .bss.ulMaxPRIGROUPValue:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:34     .bss.ulMaxPRIGROUPValue:00000000 ulMaxPRIGROUPValue
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:37     .rodata.pcInterruptPriorityRegisters:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:40     .rodata.pcInterruptPriorityRegisters:00000000 pcInterruptPriorityRegisters
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:43     .text.pxPortInitialiseStack:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:49     .text.pxPortInitialiseStack:00000000 pxPortInitialiseStack
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:138    .text.pxPortInitialiseStack:00000064 $d
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:148    .text.prvTaskExitError:00000000 prvTaskExitError
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:143    .text.prvTaskExitError:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:240    .text.prvTaskExitError:00000054 $d
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:245    .text.SVC_Handler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:251    .text.SVC_Handler:00000000 SVC_Handler
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:272    .text.SVC_Handler:00000020 pxCurrentTCBConst2
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:272    .text.SVC_Handler:00000020 $d
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:278    .text.SVC_Handler:00000024 $t
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:283    .text.prvPortStartFirstTask:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:288    .text.prvPortStartFirstTask:00000000 prvPortStartFirstTask
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:310    .text.prvPortStartFirstTask:00000022 $d
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:310    .text.prvPortStartFirstTask:00000024 $d
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:316    .text.prvPortStartFirstTask:00000028 $t
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:321    .text.xPortStartScheduler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:327    .text.xPortStartScheduler:00000000 xPortStartScheduler
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:997    .text.vPortSetupTimerInterrupt:00000000 vPortSetupTimerInterrupt
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:1066   .text.vPortEnableVFP:00000000 vPortEnableVFP
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:548    .text.xPortStartScheduler:00000120 $d
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:561    .text.vPortEndScheduler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:567    .text.vPortEndScheduler:00000000 vPortEndScheduler
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:628    .text.vPortEndScheduler:00000034 $d
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:633    .text.vPortEnterCritical:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:639    .text.vPortEnterCritical:00000000 vPortEnterCritical
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:731    .text.vPortEnterCritical:00000058 $d
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:737    .text.vPortExitCritical:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:743    .text.vPortExitCritical:00000000 vPortExitCritical
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:833    .text.vPortExitCritical:00000050 $d
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:838    .text.PendSV_Handler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:844    .text.PendSV_Handler:00000000 PendSV_Handler
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:893    .text.PendSV_Handler:00000060 pxCurrentTCBConst
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:893    .text.PendSV_Handler:00000060 $d
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:899    .text.PendSV_Handler:00000064 $t
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:904    .text.SysTick_Handler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:910    .text.SysTick_Handler:00000000 SysTick_Handler
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:986    .text.SysTick_Handler:00000040 $d
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:991    .text.vPortSetupTimerInterrupt:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:1052   .text.vPortSetupTimerInterrupt:00000034 $d
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:1061   .text.vPortEnableVFP:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:1082   .text.vPortEnableVFP:0000000e $d
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:1082   .text.vPortEnableVFP:00000010 $d
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:1088   .text.vPortEnableVFP:00000014 $t
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:1093   .text.vPortValidateInterruptPriority:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:1099   .text.vPortValidateInterruptPriority:00000000 vPortValidateInterruptPriority
C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s:1210   .text.vPortValidateInterruptPriority:00000070 $d
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccJoqpkP.s 			page 43



UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
SystemCoreClock
