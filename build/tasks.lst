ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	pxCurrentTCB
  20              		.section	.bss.pxCurrentTCB,"aw",%nobits
  21              		.align	2
  24              	pxCurrentTCB:
  25 0000 00000000 		.space	4
  26              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  27              		.align	2
  30              	pxReadyTasksLists:
  31 0000 00000000 		.space	100
  31      00000000 
  31      00000000 
  31      00000000 
  31      00000000 
  32              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  33              		.align	2
  36              	xDelayedTaskList1:
  37 0000 00000000 		.space	20
  37      00000000 
  37      00000000 
  37      00000000 
  37      00000000 
  38              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  39              		.align	2
  42              	xDelayedTaskList2:
  43 0000 00000000 		.space	20
  43      00000000 
  43      00000000 
  43      00000000 
  43      00000000 
  44              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  45              		.align	2
  48              	pxDelayedTaskList:
  49 0000 00000000 		.space	4
  50              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  51              		.align	2
  54              	pxOverflowDelayedTaskList:
  55 0000 00000000 		.space	4
  56              		.section	.bss.xPendingReadyList,"aw",%nobits
  57              		.align	2
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 2


  60              	xPendingReadyList:
  61 0000 00000000 		.space	20
  61      00000000 
  61      00000000 
  61      00000000 
  61      00000000 
  62              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  63              		.align	2
  66              	xTasksWaitingTermination:
  67 0000 00000000 		.space	20
  67      00000000 
  67      00000000 
  67      00000000 
  67      00000000 
  68              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  69              		.align	2
  72              	uxDeletedTasksWaitingCleanUp:
  73 0000 00000000 		.space	4
  74              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  75              		.align	2
  78              	xSuspendedTaskList:
  79 0000 00000000 		.space	20
  79      00000000 
  79      00000000 
  79      00000000 
  79      00000000 
  80              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  81              		.align	2
  84              	uxCurrentNumberOfTasks:
  85 0000 00000000 		.space	4
  86              		.section	.bss.xTickCount,"aw",%nobits
  87              		.align	2
  90              	xTickCount:
  91 0000 00000000 		.space	4
  92              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  93              		.align	2
  96              	uxTopReadyPriority:
  97 0000 00000000 		.space	4
  98              		.section	.bss.xSchedulerRunning,"aw",%nobits
  99              		.align	2
 102              	xSchedulerRunning:
 103 0000 00000000 		.space	4
 104              		.section	.bss.xPendedTicks,"aw",%nobits
 105              		.align	2
 108              	xPendedTicks:
 109 0000 00000000 		.space	4
 110              		.section	.bss.xYieldPending,"aw",%nobits
 111              		.align	2
 114              	xYieldPending:
 115 0000 00000000 		.space	4
 116              		.section	.bss.xNumOfOverflows,"aw",%nobits
 117              		.align	2
 120              	xNumOfOverflows:
 121 0000 00000000 		.space	4
 122              		.section	.bss.uxTaskNumber,"aw",%nobits
 123              		.align	2
 126              	uxTaskNumber:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 3


 127 0000 00000000 		.space	4
 128              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 129              		.align	2
 132              	xNextTaskUnblockTime:
 133 0000 00000000 		.space	4
 134              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 135              		.align	2
 138              	xIdleTaskHandle:
 139 0000 00000000 		.space	4
 140              		.global	uxTopUsedPriority
 141              		.section	.data.uxTopUsedPriority,"aw"
 142              		.align	2
 145              	uxTopUsedPriority:
 146 0000 04000000 		.word	4
 147              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 148              		.align	2
 151              	uxSchedulerSuspended:
 152 0000 00000000 		.space	4
 153              		.section	.text.xTaskCreate,"ax",%progbits
 154              		.align	1
 155              		.global	xTaskCreate
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 160              	xTaskCreate:
 161              	.LFB5:
 162              		.file 1 "ThirdParty/FreeRTOS/tasks.c"
   1:ThirdParty/FreeRTOS/tasks.c **** /*
   2:ThirdParty/FreeRTOS/tasks.c ****  * FreeRTOS Kernel V10.5.1
   3:ThirdParty/FreeRTOS/tasks.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:ThirdParty/FreeRTOS/tasks.c ****  *
   5:ThirdParty/FreeRTOS/tasks.c ****  * SPDX-License-Identifier: MIT
   6:ThirdParty/FreeRTOS/tasks.c ****  *
   7:ThirdParty/FreeRTOS/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:ThirdParty/FreeRTOS/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:ThirdParty/FreeRTOS/tasks.c ****  * the Software without restriction, including without limitation the rights to
  10:ThirdParty/FreeRTOS/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:ThirdParty/FreeRTOS/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:ThirdParty/FreeRTOS/tasks.c ****  * subject to the following conditions:
  13:ThirdParty/FreeRTOS/tasks.c ****  *
  14:ThirdParty/FreeRTOS/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  15:ThirdParty/FreeRTOS/tasks.c ****  * copies or substantial portions of the Software.
  16:ThirdParty/FreeRTOS/tasks.c ****  *
  17:ThirdParty/FreeRTOS/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:ThirdParty/FreeRTOS/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:ThirdParty/FreeRTOS/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:ThirdParty/FreeRTOS/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:ThirdParty/FreeRTOS/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:ThirdParty/FreeRTOS/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:ThirdParty/FreeRTOS/tasks.c ****  *
  24:ThirdParty/FreeRTOS/tasks.c ****  * https://www.FreeRTOS.org
  25:ThirdParty/FreeRTOS/tasks.c ****  * https://github.com/FreeRTOS
  26:ThirdParty/FreeRTOS/tasks.c ****  *
  27:ThirdParty/FreeRTOS/tasks.c ****  */
  28:ThirdParty/FreeRTOS/tasks.c **** 
  29:ThirdParty/FreeRTOS/tasks.c **** /* Standard includes. */
  30:ThirdParty/FreeRTOS/tasks.c **** #include <stdlib.h>
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 4


  31:ThirdParty/FreeRTOS/tasks.c **** #include <string.h>
  32:ThirdParty/FreeRTOS/tasks.c **** 
  33:ThirdParty/FreeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  34:ThirdParty/FreeRTOS/tasks.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  35:ThirdParty/FreeRTOS/tasks.c ****  * task.h is included from an application file. */
  36:ThirdParty/FreeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  37:ThirdParty/FreeRTOS/tasks.c **** 
  38:ThirdParty/FreeRTOS/tasks.c **** /* FreeRTOS includes. */
  39:ThirdParty/FreeRTOS/tasks.c **** #include "FreeRTOS.h"
  40:ThirdParty/FreeRTOS/tasks.c **** #include "task.h"
  41:ThirdParty/FreeRTOS/tasks.c **** #include "timers.h"
  42:ThirdParty/FreeRTOS/tasks.c **** #include "stack_macros.h"
  43:ThirdParty/FreeRTOS/tasks.c **** 
  44:ThirdParty/FreeRTOS/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:ThirdParty/FreeRTOS/tasks.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:ThirdParty/FreeRTOS/tasks.c ****  * for the header files above, but not in this file, in order to generate the
  47:ThirdParty/FreeRTOS/tasks.c ****  * correct privileged Vs unprivileged linkage and placement. */
  48:ThirdParty/FreeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:ThirdParty/FreeRTOS/tasks.c **** 
  50:ThirdParty/FreeRTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  51:ThirdParty/FreeRTOS/tasks.c ****  * functions but without including stdio.h here. */
  52:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  53:ThirdParty/FreeRTOS/tasks.c **** 
  54:ThirdParty/FreeRTOS/tasks.c **** /* At the bottom of this file are two optional functions that can be used
  55:ThirdParty/FreeRTOS/tasks.c ****  * to generate human readable text from the raw data generated by the
  56:ThirdParty/FreeRTOS/tasks.c ****  * uxTaskGetSystemState() function.  Note the formatting functions are provided
  57:ThirdParty/FreeRTOS/tasks.c ****  * for convenience only, and are NOT considered part of the kernel. */
  58:ThirdParty/FreeRTOS/tasks.c ****     #include <stdio.h>
  59:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  60:ThirdParty/FreeRTOS/tasks.c **** 
  61:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_PREEMPTION == 0 )
  62:ThirdParty/FreeRTOS/tasks.c **** 
  63:ThirdParty/FreeRTOS/tasks.c **** /* If the cooperative scheduler is being used then a yield should not be
  64:ThirdParty/FreeRTOS/tasks.c ****  * performed just because a higher priority task has been woken. */
  65:ThirdParty/FreeRTOS/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()
  66:ThirdParty/FreeRTOS/tasks.c **** #else
  67:ThirdParty/FreeRTOS/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  68:ThirdParty/FreeRTOS/tasks.c **** #endif
  69:ThirdParty/FreeRTOS/tasks.c **** 
  70:ThirdParty/FreeRTOS/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  71:ThirdParty/FreeRTOS/tasks.c **** #define taskNOT_WAITING_NOTIFICATION              ( ( uint8_t ) 0 ) /* Must be zero as it is the in
  72:ThirdParty/FreeRTOS/tasks.c **** #define taskWAITING_NOTIFICATION                  ( ( uint8_t ) 1 )
  73:ThirdParty/FreeRTOS/tasks.c **** #define taskNOTIFICATION_RECEIVED                 ( ( uint8_t ) 2 )
  74:ThirdParty/FreeRTOS/tasks.c **** 
  75:ThirdParty/FreeRTOS/tasks.c **** /*
  76:ThirdParty/FreeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  77:ThirdParty/FreeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
  78:ThirdParty/FreeRTOS/tasks.c ****  */
  79:ThirdParty/FreeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE                        ( 0xa5U )
  80:ThirdParty/FreeRTOS/tasks.c **** 
  81:ThirdParty/FreeRTOS/tasks.c **** /* Bits used to record how a task's stack and TCB were allocated. */
  82:ThirdParty/FreeRTOS/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB    ( ( uint8_t ) 0 )
  83:ThirdParty/FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY        ( ( uint8_t ) 1 )
  84:ThirdParty/FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB     ( ( uint8_t ) 2 )
  85:ThirdParty/FreeRTOS/tasks.c **** 
  86:ThirdParty/FreeRTOS/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  87:ThirdParty/FreeRTOS/tasks.c ****  * value so the high water mark can be determined.  If none of the following are
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 5


  88:ThirdParty/FreeRTOS/tasks.c ****  * set then don't fill the stack so there is no unnecessary dependency on memset. */
  89:ThirdParty/FreeRTOS/tasks.c **** #if ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
  90:ThirdParty/FreeRTOS/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    1
  91:ThirdParty/FreeRTOS/tasks.c **** #else
  92:ThirdParty/FreeRTOS/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    0
  93:ThirdParty/FreeRTOS/tasks.c **** #endif
  94:ThirdParty/FreeRTOS/tasks.c **** 
  95:ThirdParty/FreeRTOS/tasks.c **** /*
  96:ThirdParty/FreeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  97:ThirdParty/FreeRTOS/tasks.c ****  */
  98:ThirdParty/FreeRTOS/tasks.c **** #define tskRUNNING_CHAR      ( 'X' )
  99:ThirdParty/FreeRTOS/tasks.c **** #define tskBLOCKED_CHAR      ( 'B' )
 100:ThirdParty/FreeRTOS/tasks.c **** #define tskREADY_CHAR        ( 'R' )
 101:ThirdParty/FreeRTOS/tasks.c **** #define tskDELETED_CHAR      ( 'D' )
 102:ThirdParty/FreeRTOS/tasks.c **** #define tskSUSPENDED_CHAR    ( 'S' )
 103:ThirdParty/FreeRTOS/tasks.c **** 
 104:ThirdParty/FreeRTOS/tasks.c **** /*
 105:ThirdParty/FreeRTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 106:ThirdParty/FreeRTOS/tasks.c ****  * be global, rather than file scope.
 107:ThirdParty/FreeRTOS/tasks.c ****  */
 108:ThirdParty/FreeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 109:ThirdParty/FreeRTOS/tasks.c ****     #define static
 110:ThirdParty/FreeRTOS/tasks.c **** #endif
 111:ThirdParty/FreeRTOS/tasks.c **** 
 112:ThirdParty/FreeRTOS/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 113:ThirdParty/FreeRTOS/tasks.c ****  * configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 114:ThirdParty/FreeRTOS/tasks.c **** #ifndef configIDLE_TASK_NAME
 115:ThirdParty/FreeRTOS/tasks.c ****     #define configIDLE_TASK_NAME    "IDLE"
 116:ThirdParty/FreeRTOS/tasks.c **** #endif
 117:ThirdParty/FreeRTOS/tasks.c **** 
 118:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 119:ThirdParty/FreeRTOS/tasks.c **** 
 120:ThirdParty/FreeRTOS/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 121:ThirdParty/FreeRTOS/tasks.c ****  * performed in a generic way that is not optimised to any particular
 122:ThirdParty/FreeRTOS/tasks.c ****  * microcontroller architecture. */
 123:ThirdParty/FreeRTOS/tasks.c **** 
 124:ThirdParty/FreeRTOS/tasks.c **** /* uxTopReadyPriority holds the priority of the highest priority ready
 125:ThirdParty/FreeRTOS/tasks.c ****  * state task. */
 126:ThirdParty/FreeRTOS/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority ) \
 127:ThirdParty/FreeRTOS/tasks.c ****     {                                               \
 128:ThirdParty/FreeRTOS/tasks.c ****         if( ( uxPriority ) > uxTopReadyPriority )   \
 129:ThirdParty/FreeRTOS/tasks.c ****         {                                           \
 130:ThirdParty/FreeRTOS/tasks.c ****             uxTopReadyPriority = ( uxPriority );    \
 131:ThirdParty/FreeRTOS/tasks.c ****         }                                           \
 132:ThirdParty/FreeRTOS/tasks.c ****     } /* taskRECORD_READY_PRIORITY */
 133:ThirdParty/FreeRTOS/tasks.c **** 
 134:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 135:ThirdParty/FreeRTOS/tasks.c **** 
 136:ThirdParty/FreeRTOS/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                \
 137:ThirdParty/FreeRTOS/tasks.c ****     {                                                                         \
 138:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxTopPriority = uxTopReadyPriority;                       \
 139:ThirdParty/FreeRTOS/tasks.c ****                                                                               \
 140:ThirdParty/FreeRTOS/tasks.c ****         /* Find the highest priority queue that contains ready tasks. */      \
 141:ThirdParty/FreeRTOS/tasks.c ****         while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) ) \
 142:ThirdParty/FreeRTOS/tasks.c ****         {                                                                     \
 143:ThirdParty/FreeRTOS/tasks.c ****             configASSERT( uxTopPriority );                                    \
 144:ThirdParty/FreeRTOS/tasks.c ****             --uxTopPriority;                                                  \
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 6


 145:ThirdParty/FreeRTOS/tasks.c ****         }                                                                     \
 146:ThirdParty/FreeRTOS/tasks.c ****                                                                               \
 147:ThirdParty/FreeRTOS/tasks.c ****         /* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of \
 148:ThirdParty/FreeRTOS/tasks.c ****          * the  same priority get an equal share of the processor time. */                    \
 149:ThirdParty/FreeRTOS/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) ); \
 150:ThirdParty/FreeRTOS/tasks.c ****         uxTopReadyPriority = uxTopPriority;                                                   \
 151:ThirdParty/FreeRTOS/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK */
 152:ThirdParty/FreeRTOS/tasks.c **** 
 153:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 154:ThirdParty/FreeRTOS/tasks.c **** 
 155:ThirdParty/FreeRTOS/tasks.c **** /* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 156:ThirdParty/FreeRTOS/tasks.c ****  * they are only required when a port optimised method of task selection is
 157:ThirdParty/FreeRTOS/tasks.c ****  * being used. */
 158:ThirdParty/FreeRTOS/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )
 159:ThirdParty/FreeRTOS/tasks.c ****     #define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 160:ThirdParty/FreeRTOS/tasks.c **** 
 161:ThirdParty/FreeRTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 162:ThirdParty/FreeRTOS/tasks.c **** 
 163:ThirdParty/FreeRTOS/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 164:ThirdParty/FreeRTOS/tasks.c ****  * performed in a way that is tailored to the particular microcontroller
 165:ThirdParty/FreeRTOS/tasks.c ****  * architecture being used. */
 166:ThirdParty/FreeRTOS/tasks.c **** 
 167:ThirdParty/FreeRTOS/tasks.c **** /* A port optimised version is provided.  Call the port defined macros. */
 168:ThirdParty/FreeRTOS/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority )    portRECORD_READY_PRIORITY( ( uxPriority ), u
 169:ThirdParty/FreeRTOS/tasks.c **** 
 170:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 171:ThirdParty/FreeRTOS/tasks.c **** 
 172:ThirdParty/FreeRTOS/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                                  \
 173:ThirdParty/FreeRTOS/tasks.c ****     {                                                                                           \
 174:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxTopPriority;                                                              \
 175:ThirdParty/FreeRTOS/tasks.c ****                                                                                                 \
 176:ThirdParty/FreeRTOS/tasks.c ****         /* Find the highest priority list that contains ready tasks. */                         \
 177:ThirdParty/FreeRTOS/tasks.c ****         portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );                          \
 178:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 ); \
 179:ThirdParty/FreeRTOS/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );   \
 180:ThirdParty/FreeRTOS/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 181:ThirdParty/FreeRTOS/tasks.c **** 
 182:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 183:ThirdParty/FreeRTOS/tasks.c **** 
 184:ThirdParty/FreeRTOS/tasks.c **** /* A port optimised version is provided, call it only if the TCB being reset
 185:ThirdParty/FreeRTOS/tasks.c ****  * is being referenced from a ready list.  If it is referenced from a delayed
 186:ThirdParty/FreeRTOS/tasks.c ****  * or suspended list then it won't be in a ready list. */
 187:ThirdParty/FreeRTOS/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )                                                 
 188:ThirdParty/FreeRTOS/tasks.c ****     {                                                                                              
 189:ThirdParty/FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 
 190:ThirdParty/FreeRTOS/tasks.c ****         {                                                                                          
 191:ThirdParty/FreeRTOS/tasks.c ****             portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );                    
 192:ThirdParty/FreeRTOS/tasks.c ****         }                                                                                          
 193:ThirdParty/FreeRTOS/tasks.c ****     }
 194:ThirdParty/FreeRTOS/tasks.c **** 
 195:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 196:ThirdParty/FreeRTOS/tasks.c **** 
 197:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 198:ThirdParty/FreeRTOS/tasks.c **** 
 199:ThirdParty/FreeRTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 200:ThirdParty/FreeRTOS/tasks.c ****  * count overflows. */
 201:ThirdParty/FreeRTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()                                                \
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 7


 202:ThirdParty/FreeRTOS/tasks.c ****     {                                                                             \
 203:ThirdParty/FreeRTOS/tasks.c ****         List_t * pxTemp;                                                          \
 204:ThirdParty/FreeRTOS/tasks.c ****                                                                                   \
 205:ThirdParty/FreeRTOS/tasks.c ****         /* The delayed tasks list should be empty when the lists are switched. */ \
 206:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );               \
 207:ThirdParty/FreeRTOS/tasks.c ****                                                                                   \
 208:ThirdParty/FreeRTOS/tasks.c ****         pxTemp = pxDelayedTaskList;                                               \
 209:ThirdParty/FreeRTOS/tasks.c ****         pxDelayedTaskList = pxOverflowDelayedTaskList;                            \
 210:ThirdParty/FreeRTOS/tasks.c ****         pxOverflowDelayedTaskList = pxTemp;                                       \
 211:ThirdParty/FreeRTOS/tasks.c ****         xNumOfOverflows++;                                                        \
 212:ThirdParty/FreeRTOS/tasks.c ****         prvResetNextTaskUnblockTime();                                            \
 213:ThirdParty/FreeRTOS/tasks.c ****     }
 214:ThirdParty/FreeRTOS/tasks.c **** 
 215:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 216:ThirdParty/FreeRTOS/tasks.c **** 
 217:ThirdParty/FreeRTOS/tasks.c **** /*
 218:ThirdParty/FreeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 219:ThirdParty/FreeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 220:ThirdParty/FreeRTOS/tasks.c ****  */
 221:ThirdParty/FreeRTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )                                                             
 222:ThirdParty/FreeRTOS/tasks.c ****     traceMOVED_TASK_TO_READY_STATE( pxTCB );                                                       
 223:ThirdParty/FreeRTOS/tasks.c ****     taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );                                            
 224:ThirdParty/FreeRTOS/tasks.c ****     listINSERT_END( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem )
 225:ThirdParty/FreeRTOS/tasks.c ****     tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 226:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 227:ThirdParty/FreeRTOS/tasks.c **** 
 228:ThirdParty/FreeRTOS/tasks.c **** /*
 229:ThirdParty/FreeRTOS/tasks.c ****  * Several functions take a TaskHandle_t parameter that can optionally be NULL,
 230:ThirdParty/FreeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 231:ThirdParty/FreeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 232:ThirdParty/FreeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 233:ThirdParty/FreeRTOS/tasks.c ****  */
 234:ThirdParty/FreeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle )    ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle )
 235:ThirdParty/FreeRTOS/tasks.c **** 
 236:ThirdParty/FreeRTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 237:ThirdParty/FreeRTOS/tasks.c ****  * of the task to which it belongs (coded to allow it to be held in reverse
 238:ThirdParty/FreeRTOS/tasks.c ****  * priority order).  However, it is occasionally borrowed for other purposes.  It
 239:ThirdParty/FreeRTOS/tasks.c ****  * is important its value is not updated due to a task priority change while it is
 240:ThirdParty/FreeRTOS/tasks.c ****  * being used for another purpose.  The following bit definition is used to inform
 241:ThirdParty/FreeRTOS/tasks.c ****  * the scheduler that the value should not be changed - in which case it is the
 242:ThirdParty/FreeRTOS/tasks.c ****  * responsibility of whichever module is using the value to ensure it gets set back
 243:ThirdParty/FreeRTOS/tasks.c ****  * to its original value when it is released. */
 244:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_16_BIT_TICKS == 1 )
 245:ThirdParty/FreeRTOS/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x8000U
 246:ThirdParty/FreeRTOS/tasks.c **** #else
 247:ThirdParty/FreeRTOS/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x80000000UL
 248:ThirdParty/FreeRTOS/tasks.c **** #endif
 249:ThirdParty/FreeRTOS/tasks.c **** 
 250:ThirdParty/FreeRTOS/tasks.c **** /*
 251:ThirdParty/FreeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 252:ThirdParty/FreeRTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 253:ThirdParty/FreeRTOS/tasks.c ****  * (the task's run time environment, including register values)
 254:ThirdParty/FreeRTOS/tasks.c ****  */
 255:ThirdParty/FreeRTOS/tasks.c **** typedef struct tskTaskControlBlock       /* The old naming convention is used to prevent breaking k
 256:ThirdParty/FreeRTOS/tasks.c **** {
 257:ThirdParty/FreeRTOS/tasks.c ****     volatile StackType_t * pxTopOfStack; /*< Points to the location of the last item placed on the 
 258:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 8


 259:ThirdParty/FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 260:ThirdParty/FreeRTOS/tasks.c ****         xMPU_SETTINGS xMPUSettings; /*< The MPU settings are defined as part of the port layer.  TH
 261:ThirdParty/FreeRTOS/tasks.c ****     #endif
 262:ThirdParty/FreeRTOS/tasks.c **** 
 263:ThirdParty/FreeRTOS/tasks.c ****     ListItem_t xStateListItem;                  /*< The list that the state list item of a task is 
 264:ThirdParty/FreeRTOS/tasks.c ****     ListItem_t xEventListItem;                  /*< Used to reference a task from an event list. */
 265:ThirdParty/FreeRTOS/tasks.c ****     UBaseType_t uxPriority;                     /*< The priority of the task.  0 is the lowest prio
 266:ThirdParty/FreeRTOS/tasks.c ****     StackType_t * pxStack;                      /*< Points to the start of the stack. */
 267:ThirdParty/FreeRTOS/tasks.c ****     char pcTaskName[ configMAX_TASK_NAME_LEN ]; /*< Descriptive name given to the task when created
 268:ThirdParty/FreeRTOS/tasks.c **** 
 269:ThirdParty/FreeRTOS/tasks.c ****     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 270:ThirdParty/FreeRTOS/tasks.c ****         StackType_t * pxEndOfStack; /*< Points to the highest valid address for the stack. */
 271:ThirdParty/FreeRTOS/tasks.c ****     #endif
 272:ThirdParty/FreeRTOS/tasks.c **** 
 273:ThirdParty/FreeRTOS/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 274:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxCriticalNesting; /*< Holds the critical section nesting depth for ports that 
 275:ThirdParty/FreeRTOS/tasks.c ****     #endif
 276:ThirdParty/FreeRTOS/tasks.c **** 
 277:ThirdParty/FreeRTOS/tasks.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 278:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxTCBNumber;  /*< Stores a number that increments each time a TCB is created.  
 279:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxTaskNumber; /*< Stores a number specifically for use by third party trace cod
 280:ThirdParty/FreeRTOS/tasks.c ****     #endif
 281:ThirdParty/FreeRTOS/tasks.c **** 
 282:ThirdParty/FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 283:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxBasePriority; /*< The priority last assigned to the task - used by the priori
 284:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxMutexesHeld;
 285:ThirdParty/FreeRTOS/tasks.c ****     #endif
 286:ThirdParty/FreeRTOS/tasks.c **** 
 287:ThirdParty/FreeRTOS/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 288:ThirdParty/FreeRTOS/tasks.c ****         TaskHookFunction_t pxTaskTag;
 289:ThirdParty/FreeRTOS/tasks.c ****     #endif
 290:ThirdParty/FreeRTOS/tasks.c **** 
 291:ThirdParty/FreeRTOS/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 292:ThirdParty/FreeRTOS/tasks.c ****         void * pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 293:ThirdParty/FreeRTOS/tasks.c ****     #endif
 294:ThirdParty/FreeRTOS/tasks.c **** 
 295:ThirdParty/FreeRTOS/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 296:ThirdParty/FreeRTOS/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulRunTimeCounter; /*< Stores the amount of time the task has sp
 297:ThirdParty/FreeRTOS/tasks.c ****     #endif
 298:ThirdParty/FreeRTOS/tasks.c **** 
 299:ThirdParty/FreeRTOS/tasks.c ****     #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
 300:ThirdParty/FreeRTOS/tasks.c ****         configTLS_BLOCK_TYPE xTLSBlock; /*< Memory block used as Thread Local Storage (TLS) Block f
 301:ThirdParty/FreeRTOS/tasks.c ****     #endif
 302:ThirdParty/FreeRTOS/tasks.c **** 
 303:ThirdParty/FreeRTOS/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 304:ThirdParty/FreeRTOS/tasks.c ****         volatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 305:ThirdParty/FreeRTOS/tasks.c ****         volatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 306:ThirdParty/FreeRTOS/tasks.c ****     #endif
 307:ThirdParty/FreeRTOS/tasks.c **** 
 308:ThirdParty/FreeRTOS/tasks.c ****     /* See the comments in FreeRTOS.h with the definition of
 309:ThirdParty/FreeRTOS/tasks.c ****      * tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 310:ThirdParty/FreeRTOS/tasks.c ****     #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been conso
 311:ThirdParty/FreeRTOS/tasks.c ****         uint8_t ucStaticallyAllocated;                     /*< Set to pdTRUE if the task is a stati
 312:ThirdParty/FreeRTOS/tasks.c ****     #endif
 313:ThirdParty/FreeRTOS/tasks.c **** 
 314:ThirdParty/FreeRTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 315:ThirdParty/FreeRTOS/tasks.c ****         uint8_t ucDelayAborted;
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 9


 316:ThirdParty/FreeRTOS/tasks.c ****     #endif
 317:ThirdParty/FreeRTOS/tasks.c **** 
 318:ThirdParty/FreeRTOS/tasks.c ****     #if ( configUSE_POSIX_ERRNO == 1 )
 319:ThirdParty/FreeRTOS/tasks.c ****         int iTaskErrno;
 320:ThirdParty/FreeRTOS/tasks.c ****     #endif
 321:ThirdParty/FreeRTOS/tasks.c **** } tskTCB;
 322:ThirdParty/FreeRTOS/tasks.c **** 
 323:ThirdParty/FreeRTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 324:ThirdParty/FreeRTOS/tasks.c ****  * below to enable the use of older kernel aware debuggers. */
 325:ThirdParty/FreeRTOS/tasks.c **** typedef tskTCB TCB_t;
 326:ThirdParty/FreeRTOS/tasks.c **** 
 327:ThirdParty/FreeRTOS/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 328:ThirdParty/FreeRTOS/tasks.c ****  * which static variables must be declared volatile. */
 329:ThirdParty/FreeRTOS/tasks.c **** portDONT_DISCARD PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 330:ThirdParty/FreeRTOS/tasks.c **** 
 331:ThirdParty/FreeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 332:ThirdParty/FreeRTOS/tasks.c ****  * xDelayedTaskList1 and xDelayedTaskList2 could be moved to function scope but
 333:ThirdParty/FreeRTOS/tasks.c ****  * doing so breaks some kernel aware debuggers and debuggers that rely on removing
 334:ThirdParty/FreeRTOS/tasks.c ****  * the static qualifier. */
 335:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ]; /*< Prioritised ready task
 336:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;                         /*< Delayed tasks. */
 337:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;                         /*< Delayed tasks (two lis
 338:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              /*< Points to the delayed 
 339:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      /*< Points to the delayed 
 340:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;                         /*< Tasks that have been r
 341:ThirdParty/FreeRTOS/tasks.c **** 
 342:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 343:ThirdParty/FreeRTOS/tasks.c **** 
 344:ThirdParty/FreeRTOS/tasks.c ****     PRIVILEGED_DATA static List_t xTasksWaitingTermination; /*< Tasks that have been deleted - but 
 345:ThirdParty/FreeRTOS/tasks.c ****     PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 346:ThirdParty/FreeRTOS/tasks.c **** 
 347:ThirdParty/FreeRTOS/tasks.c **** #endif
 348:ThirdParty/FreeRTOS/tasks.c **** 
 349:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 350:ThirdParty/FreeRTOS/tasks.c **** 
 351:ThirdParty/FreeRTOS/tasks.c ****     PRIVILEGED_DATA static List_t xSuspendedTaskList; /*< Tasks that are currently suspended. */
 352:ThirdParty/FreeRTOS/tasks.c **** 
 353:ThirdParty/FreeRTOS/tasks.c **** #endif
 354:ThirdParty/FreeRTOS/tasks.c **** 
 355:ThirdParty/FreeRTOS/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 356:ThirdParty/FreeRTOS/tasks.c ****  * the errno of the currently running task. */
 357:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 358:ThirdParty/FreeRTOS/tasks.c ****     int FreeRTOS_errno = 0;
 359:ThirdParty/FreeRTOS/tasks.c **** #endif
 360:ThirdParty/FreeRTOS/tasks.c **** 
 361:ThirdParty/FreeRTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 362:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 363:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 364:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority = tskIDLE_PRIORITY;
 365:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning = pdFALSE;
 366:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;
 367:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending = pdFALSE;
 368:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;
 369:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;
 370:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U; /* Initialised
 371:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;                          /*< Holds the 
 372:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 10


 373:ThirdParty/FreeRTOS/tasks.c **** /* Improve support for OpenOCD. The kernel tracks Ready tasks via priority lists.
 374:ThirdParty/FreeRTOS/tasks.c ****  * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority
 375:ThirdParty/FreeRTOS/tasks.c ****  * to determine the number of priority lists to read back from the remote target. */
 376:ThirdParty/FreeRTOS/tasks.c **** const volatile UBaseType_t uxTopUsedPriority = configMAX_PRIORITIES - 1U;
 377:ThirdParty/FreeRTOS/tasks.c **** 
 378:ThirdParty/FreeRTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 379:ThirdParty/FreeRTOS/tasks.c ****  * interrupts must not manipulate the xStateListItem of a TCB, or any of the
 380:ThirdParty/FreeRTOS/tasks.c ****  * lists the xStateListItem can be referenced from, if the scheduler is suspended.
 381:ThirdParty/FreeRTOS/tasks.c ****  * If an interrupt needs to unblock a task while the scheduler is suspended then it
 382:ThirdParty/FreeRTOS/tasks.c ****  * moves the task's event list item into the xPendingReadyList, ready for the
 383:ThirdParty/FreeRTOS/tasks.c ****  * kernel to move the task from the pending ready list into the real ready list
 384:ThirdParty/FreeRTOS/tasks.c ****  * when the scheduler is unsuspended.  The pending ready list itself can only be
 385:ThirdParty/FreeRTOS/tasks.c ****  * accessed from a critical section. */
 386:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) pdFALSE;
 387:ThirdParty/FreeRTOS/tasks.c **** 
 388:ThirdParty/FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 389:ThirdParty/FreeRTOS/tasks.c **** 
 390:ThirdParty/FreeRTOS/tasks.c **** /* Do not move these variables to function scope as doing so prevents the
 391:ThirdParty/FreeRTOS/tasks.c ****  * code working with debuggers that need to remove the static qualifier. */
 392:ThirdParty/FreeRTOS/tasks.c ****     PRIVILEGED_DATA static configRUN_TIME_COUNTER_TYPE ulTaskSwitchedInTime = 0UL;    /*< Holds the
 393:ThirdParty/FreeRTOS/tasks.c ****     PRIVILEGED_DATA static volatile configRUN_TIME_COUNTER_TYPE ulTotalRunTime = 0UL; /*< Holds the
 394:ThirdParty/FreeRTOS/tasks.c **** 
 395:ThirdParty/FreeRTOS/tasks.c **** #endif
 396:ThirdParty/FreeRTOS/tasks.c **** 
 397:ThirdParty/FreeRTOS/tasks.c **** /*lint -restore */
 398:ThirdParty/FreeRTOS/tasks.c **** 
 399:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 400:ThirdParty/FreeRTOS/tasks.c **** 
 401:ThirdParty/FreeRTOS/tasks.c **** /* File private functions. --------------------------------*/
 402:ThirdParty/FreeRTOS/tasks.c **** 
 403:ThirdParty/FreeRTOS/tasks.c **** /**
 404:ThirdParty/FreeRTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 405:ThirdParty/FreeRTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 406:ThirdParty/FreeRTOS/tasks.c ****  * is in any other state.
 407:ThirdParty/FreeRTOS/tasks.c ****  */
 408:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 409:ThirdParty/FreeRTOS/tasks.c **** 
 410:ThirdParty/FreeRTOS/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 411:ThirdParty/FreeRTOS/tasks.c **** 
 412:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 413:ThirdParty/FreeRTOS/tasks.c **** 
 414:ThirdParty/FreeRTOS/tasks.c **** /*
 415:ThirdParty/FreeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 416:ThirdParty/FreeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 417:ThirdParty/FreeRTOS/tasks.c ****  */
 418:ThirdParty/FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 419:ThirdParty/FreeRTOS/tasks.c **** 
 420:ThirdParty/FreeRTOS/tasks.c **** /*
 421:ThirdParty/FreeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 422:ThirdParty/FreeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 423:ThirdParty/FreeRTOS/tasks.c ****  * creation of the first user task.
 424:ThirdParty/FreeRTOS/tasks.c ****  *
 425:ThirdParty/FreeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 426:ThirdParty/FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 427:ThirdParty/FreeRTOS/tasks.c ****  *
 428:ThirdParty/FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 429:ThirdParty/FreeRTOS/tasks.c ****  *
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 11


 430:ThirdParty/FreeRTOS/tasks.c ****  */
 431:ThirdParty/FreeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
 432:ThirdParty/FreeRTOS/tasks.c **** 
 433:ThirdParty/FreeRTOS/tasks.c **** /*
 434:ThirdParty/FreeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 435:ThirdParty/FreeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 436:ThirdParty/FreeRTOS/tasks.c ****  *
 437:ThirdParty/FreeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 438:ThirdParty/FreeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 439:ThirdParty/FreeRTOS/tasks.c ****  */
 440:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 441:ThirdParty/FreeRTOS/tasks.c **** 
 442:ThirdParty/FreeRTOS/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB ) PRIVILEGED_FUNCTION;
 443:ThirdParty/FreeRTOS/tasks.c **** 
 444:ThirdParty/FreeRTOS/tasks.c **** #endif
 445:ThirdParty/FreeRTOS/tasks.c **** 
 446:ThirdParty/FreeRTOS/tasks.c **** /*
 447:ThirdParty/FreeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 448:ThirdParty/FreeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 449:ThirdParty/FreeRTOS/tasks.c ****  * and its TCB deleted.
 450:ThirdParty/FreeRTOS/tasks.c ****  */
 451:ThirdParty/FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 452:ThirdParty/FreeRTOS/tasks.c **** 
 453:ThirdParty/FreeRTOS/tasks.c **** /*
 454:ThirdParty/FreeRTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 455:ThirdParty/FreeRTOS/tasks.c ****  * either the current or the overflow delayed task list.
 456:ThirdParty/FreeRTOS/tasks.c ****  */
 457:ThirdParty/FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
 458:ThirdParty/FreeRTOS/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely ) PRIVILEGED_FUN
 459:ThirdParty/FreeRTOS/tasks.c **** 
 460:ThirdParty/FreeRTOS/tasks.c **** /*
 461:ThirdParty/FreeRTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 462:ThirdParty/FreeRTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 463:ThirdParty/FreeRTOS/tasks.c ****  * a suspended list, etc.).
 464:ThirdParty/FreeRTOS/tasks.c ****  *
 465:ThirdParty/FreeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 466:ThirdParty/FreeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 467:ThirdParty/FreeRTOS/tasks.c ****  */
 468:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 469:ThirdParty/FreeRTOS/tasks.c **** 
 470:ThirdParty/FreeRTOS/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
 471:ThirdParty/FreeRTOS/tasks.c ****                                                      List_t * pxList,
 472:ThirdParty/FreeRTOS/tasks.c ****                                                      eTaskState eState ) PRIVILEGED_FUNCTION;
 473:ThirdParty/FreeRTOS/tasks.c **** 
 474:ThirdParty/FreeRTOS/tasks.c **** #endif
 475:ThirdParty/FreeRTOS/tasks.c **** 
 476:ThirdParty/FreeRTOS/tasks.c **** /*
 477:ThirdParty/FreeRTOS/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 478:ThirdParty/FreeRTOS/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 479:ThirdParty/FreeRTOS/tasks.c ****  */
 480:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 481:ThirdParty/FreeRTOS/tasks.c **** 
 482:ThirdParty/FreeRTOS/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
 483:ThirdParty/FreeRTOS/tasks.c ****                                                      const char pcNameToQuery[] ) PRIVILEGED_FUNCTI
 484:ThirdParty/FreeRTOS/tasks.c **** 
 485:ThirdParty/FreeRTOS/tasks.c **** #endif
 486:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 12


 487:ThirdParty/FreeRTOS/tasks.c **** /*
 488:ThirdParty/FreeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 489:ThirdParty/FreeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 490:ThirdParty/FreeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 491:ThirdParty/FreeRTOS/tasks.c ****  */
 492:ThirdParty/FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 493:ThirdParty/FreeRTOS/tasks.c **** 
 494:ThirdParty/FreeRTOS/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVIL
 495:ThirdParty/FreeRTOS/tasks.c **** 
 496:ThirdParty/FreeRTOS/tasks.c **** #endif
 497:ThirdParty/FreeRTOS/tasks.c **** 
 498:ThirdParty/FreeRTOS/tasks.c **** /*
 499:ThirdParty/FreeRTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 500:ThirdParty/FreeRTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 501:ThirdParty/FreeRTOS/tasks.c ****  *
 502:ThirdParty/FreeRTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 503:ThirdParty/FreeRTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 504:ThirdParty/FreeRTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 505:ThirdParty/FreeRTOS/tasks.c ****  * set to a value other than 1.
 506:ThirdParty/FreeRTOS/tasks.c ****  */
 507:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 508:ThirdParty/FreeRTOS/tasks.c **** 
 509:ThirdParty/FreeRTOS/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 510:ThirdParty/FreeRTOS/tasks.c **** 
 511:ThirdParty/FreeRTOS/tasks.c **** #endif
 512:ThirdParty/FreeRTOS/tasks.c **** 
 513:ThirdParty/FreeRTOS/tasks.c **** /*
 514:ThirdParty/FreeRTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 515:ThirdParty/FreeRTOS/tasks.c ****  * will exit the Blocked state.
 516:ThirdParty/FreeRTOS/tasks.c ****  */
 517:ThirdParty/FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void ) PRIVILEGED_FUNCTION;
 518:ThirdParty/FreeRTOS/tasks.c **** 
 519:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 )
 520:ThirdParty/FreeRTOS/tasks.c **** 
 521:ThirdParty/FreeRTOS/tasks.c **** /*
 522:ThirdParty/FreeRTOS/tasks.c ****  * Helper function used to pad task names with spaces when printing out
 523:ThirdParty/FreeRTOS/tasks.c ****  * human readable tables of task information.
 524:ThirdParty/FreeRTOS/tasks.c ****  */
 525:ThirdParty/FreeRTOS/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
 526:ThirdParty/FreeRTOS/tasks.c ****                                         const char * pcTaskName ) PRIVILEGED_FUNCTION;
 527:ThirdParty/FreeRTOS/tasks.c **** 
 528:ThirdParty/FreeRTOS/tasks.c **** #endif
 529:ThirdParty/FreeRTOS/tasks.c **** 
 530:ThirdParty/FreeRTOS/tasks.c **** /*
 531:ThirdParty/FreeRTOS/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 532:ThirdParty/FreeRTOS/tasks.c ****  * dynamically to fill in the structure's members.
 533:ThirdParty/FreeRTOS/tasks.c ****  */
 534:ThirdParty/FreeRTOS/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 535:ThirdParty/FreeRTOS/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 536:ThirdParty/FreeRTOS/tasks.c ****                                   const uint32_t ulStackDepth,
 537:ThirdParty/FreeRTOS/tasks.c ****                                   void * const pvParameters,
 538:ThirdParty/FreeRTOS/tasks.c ****                                   UBaseType_t uxPriority,
 539:ThirdParty/FreeRTOS/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 540:ThirdParty/FreeRTOS/tasks.c ****                                   TCB_t * pxNewTCB,
 541:ThirdParty/FreeRTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 542:ThirdParty/FreeRTOS/tasks.c **** 
 543:ThirdParty/FreeRTOS/tasks.c **** /*
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 13


 544:ThirdParty/FreeRTOS/tasks.c ****  * Called after a new task has been created and initialised to place the task
 545:ThirdParty/FreeRTOS/tasks.c ****  * under the control of the scheduler.
 546:ThirdParty/FreeRTOS/tasks.c ****  */
 547:ThirdParty/FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB ) PRIVILEGED_FUNCTION;
 548:ThirdParty/FreeRTOS/tasks.c **** 
 549:ThirdParty/FreeRTOS/tasks.c **** /*
 550:ThirdParty/FreeRTOS/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 551:ThirdParty/FreeRTOS/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 552:ThirdParty/FreeRTOS/tasks.c ****  * called by the function.
 553:ThirdParty/FreeRTOS/tasks.c ****  */
 554:ThirdParty/FreeRTOS/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 555:ThirdParty/FreeRTOS/tasks.c **** 
 556:ThirdParty/FreeRTOS/tasks.c ****     static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 557:ThirdParty/FreeRTOS/tasks.c **** 
 558:ThirdParty/FreeRTOS/tasks.c **** #endif
 559:ThirdParty/FreeRTOS/tasks.c **** 
 560:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 561:ThirdParty/FreeRTOS/tasks.c **** 
 562:ThirdParty/FreeRTOS/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 563:ThirdParty/FreeRTOS/tasks.c **** 
 564:ThirdParty/FreeRTOS/tasks.c ****     TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
 565:ThirdParty/FreeRTOS/tasks.c ****                                     const char * const pcName, /*lint !e971 Unqualified char types 
 566:ThirdParty/FreeRTOS/tasks.c ****                                     const uint32_t ulStackDepth,
 567:ThirdParty/FreeRTOS/tasks.c ****                                     void * const pvParameters,
 568:ThirdParty/FreeRTOS/tasks.c ****                                     UBaseType_t uxPriority,
 569:ThirdParty/FreeRTOS/tasks.c ****                                     StackType_t * const puxStackBuffer,
 570:ThirdParty/FreeRTOS/tasks.c ****                                     StaticTask_t * const pxTaskBuffer )
 571:ThirdParty/FreeRTOS/tasks.c ****     {
 572:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 573:ThirdParty/FreeRTOS/tasks.c ****         TaskHandle_t xReturn;
 574:ThirdParty/FreeRTOS/tasks.c **** 
 575:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( puxStackBuffer != NULL );
 576:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 577:ThirdParty/FreeRTOS/tasks.c **** 
 578:ThirdParty/FreeRTOS/tasks.c ****         #if ( configASSERT_DEFINED == 1 )
 579:ThirdParty/FreeRTOS/tasks.c ****         {
 580:ThirdParty/FreeRTOS/tasks.c ****             /* Sanity check that the size of the structure used to declare a
 581:ThirdParty/FreeRTOS/tasks.c ****              * variable of type StaticTask_t equals the size of the real task
 582:ThirdParty/FreeRTOS/tasks.c ****              * structure. */
 583:ThirdParty/FreeRTOS/tasks.c ****             volatile size_t xSize = sizeof( StaticTask_t );
 584:ThirdParty/FreeRTOS/tasks.c ****             configASSERT( xSize == sizeof( TCB_t ) );
 585:ThirdParty/FreeRTOS/tasks.c ****             ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 586:ThirdParty/FreeRTOS/tasks.c ****         }
 587:ThirdParty/FreeRTOS/tasks.c ****         #endif /* configASSERT_DEFINED */
 588:ThirdParty/FreeRTOS/tasks.c **** 
 589:ThirdParty/FreeRTOS/tasks.c ****         if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 590:ThirdParty/FreeRTOS/tasks.c ****         {
 591:ThirdParty/FreeRTOS/tasks.c ****             /* The memory used for the task's TCB and stack are passed into this
 592:ThirdParty/FreeRTOS/tasks.c ****              * function - use them. */
 593:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the stru
 594:ThirdParty/FreeRTOS/tasks.c ****             memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 595:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 596:ThirdParty/FreeRTOS/tasks.c **** 
 597:ThirdParty/FreeRTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has be
 598:ThirdParty/FreeRTOS/tasks.c ****             {
 599:ThirdParty/FreeRTOS/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
 600:ThirdParty/FreeRTOS/tasks.c ****                  * task was created statically in case the task is later deleted. */
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 14


 601:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 602:ThirdParty/FreeRTOS/tasks.c ****             }
 603:ThirdParty/FreeRTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 604:ThirdParty/FreeRTOS/tasks.c **** 
 605:ThirdParty/FreeRTOS/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xRet
 606:ThirdParty/FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 607:ThirdParty/FreeRTOS/tasks.c ****         }
 608:ThirdParty/FreeRTOS/tasks.c ****         else
 609:ThirdParty/FreeRTOS/tasks.c ****         {
 610:ThirdParty/FreeRTOS/tasks.c ****             xReturn = NULL;
 611:ThirdParty/FreeRTOS/tasks.c ****         }
 612:ThirdParty/FreeRTOS/tasks.c **** 
 613:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
 614:ThirdParty/FreeRTOS/tasks.c ****     }
 615:ThirdParty/FreeRTOS/tasks.c **** 
 616:ThirdParty/FreeRTOS/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 617:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 618:ThirdParty/FreeRTOS/tasks.c **** 
 619:ThirdParty/FreeRTOS/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 620:ThirdParty/FreeRTOS/tasks.c **** 
 621:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
 622:ThirdParty/FreeRTOS/tasks.c ****                                             TaskHandle_t * pxCreatedTask )
 623:ThirdParty/FreeRTOS/tasks.c ****     {
 624:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 625:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 626:ThirdParty/FreeRTOS/tasks.c **** 
 627:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 628:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 629:ThirdParty/FreeRTOS/tasks.c **** 
 630:ThirdParty/FreeRTOS/tasks.c ****         if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NUL
 631:ThirdParty/FreeRTOS/tasks.c ****         {
 632:ThirdParty/FreeRTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 633:ThirdParty/FreeRTOS/tasks.c ****              * on the implementation of the port malloc function and whether or
 634:ThirdParty/FreeRTOS/tasks.c ****              * not static allocation is being used. */
 635:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 636:ThirdParty/FreeRTOS/tasks.c ****             memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 637:ThirdParty/FreeRTOS/tasks.c **** 
 638:ThirdParty/FreeRTOS/tasks.c ****             /* Store the stack location in the TCB. */
 639:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 640:ThirdParty/FreeRTOS/tasks.c **** 
 641:ThirdParty/FreeRTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 642:ThirdParty/FreeRTOS/tasks.c ****             {
 643:ThirdParty/FreeRTOS/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
 644:ThirdParty/FreeRTOS/tasks.c ****                  * task was created statically in case the task is later deleted. */
 645:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 646:ThirdParty/FreeRTOS/tasks.c ****             }
 647:ThirdParty/FreeRTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 648:ThirdParty/FreeRTOS/tasks.c **** 
 649:ThirdParty/FreeRTOS/tasks.c ****             prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 650:ThirdParty/FreeRTOS/tasks.c ****                                   pxTaskDefinition->pcName,
 651:ThirdParty/FreeRTOS/tasks.c ****                                   ( uint32_t ) pxTaskDefinition->usStackDepth,
 652:ThirdParty/FreeRTOS/tasks.c ****                                   pxTaskDefinition->pvParameters,
 653:ThirdParty/FreeRTOS/tasks.c ****                                   pxTaskDefinition->uxPriority,
 654:ThirdParty/FreeRTOS/tasks.c ****                                   pxCreatedTask, pxNewTCB,
 655:ThirdParty/FreeRTOS/tasks.c ****                                   pxTaskDefinition->xRegions );
 656:ThirdParty/FreeRTOS/tasks.c **** 
 657:ThirdParty/FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 15


 658:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pdPASS;
 659:ThirdParty/FreeRTOS/tasks.c ****         }
 660:ThirdParty/FreeRTOS/tasks.c **** 
 661:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
 662:ThirdParty/FreeRTOS/tasks.c ****     }
 663:ThirdParty/FreeRTOS/tasks.c **** 
 664:ThirdParty/FreeRTOS/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 665:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 666:ThirdParty/FreeRTOS/tasks.c **** 
 667:ThirdParty/FreeRTOS/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 668:ThirdParty/FreeRTOS/tasks.c **** 
 669:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
 670:ThirdParty/FreeRTOS/tasks.c ****                                       TaskHandle_t * pxCreatedTask )
 671:ThirdParty/FreeRTOS/tasks.c ****     {
 672:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 673:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 674:ThirdParty/FreeRTOS/tasks.c **** 
 675:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer );
 676:ThirdParty/FreeRTOS/tasks.c **** 
 677:ThirdParty/FreeRTOS/tasks.c ****         if( pxTaskDefinition->puxStackBuffer != NULL )
 678:ThirdParty/FreeRTOS/tasks.c ****         {
 679:ThirdParty/FreeRTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 680:ThirdParty/FreeRTOS/tasks.c ****              * on the implementation of the port malloc function and whether or
 681:ThirdParty/FreeRTOS/tasks.c ****              * not static allocation is being used. */
 682:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 683:ThirdParty/FreeRTOS/tasks.c **** 
 684:ThirdParty/FreeRTOS/tasks.c ****             if( pxNewTCB != NULL )
 685:ThirdParty/FreeRTOS/tasks.c ****             {
 686:ThirdParty/FreeRTOS/tasks.c ****                 memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 687:ThirdParty/FreeRTOS/tasks.c **** 
 688:ThirdParty/FreeRTOS/tasks.c ****                 /* Store the stack location in the TCB. */
 689:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 690:ThirdParty/FreeRTOS/tasks.c **** 
 691:ThirdParty/FreeRTOS/tasks.c ****                 #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 692:ThirdParty/FreeRTOS/tasks.c ****                 {
 693:ThirdParty/FreeRTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note
 694:ThirdParty/FreeRTOS/tasks.c ****                      * this task had a statically allocated stack in case it is
 695:ThirdParty/FreeRTOS/tasks.c ****                      * later deleted.  The TCB was allocated dynamically. */
 696:ThirdParty/FreeRTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 697:ThirdParty/FreeRTOS/tasks.c ****                 }
 698:ThirdParty/FreeRTOS/tasks.c ****                 #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 699:ThirdParty/FreeRTOS/tasks.c **** 
 700:ThirdParty/FreeRTOS/tasks.c ****                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 701:ThirdParty/FreeRTOS/tasks.c ****                                       pxTaskDefinition->pcName,
 702:ThirdParty/FreeRTOS/tasks.c ****                                       ( uint32_t ) pxTaskDefinition->usStackDepth,
 703:ThirdParty/FreeRTOS/tasks.c ****                                       pxTaskDefinition->pvParameters,
 704:ThirdParty/FreeRTOS/tasks.c ****                                       pxTaskDefinition->uxPriority,
 705:ThirdParty/FreeRTOS/tasks.c ****                                       pxCreatedTask, pxNewTCB,
 706:ThirdParty/FreeRTOS/tasks.c ****                                       pxTaskDefinition->xRegions );
 707:ThirdParty/FreeRTOS/tasks.c **** 
 708:ThirdParty/FreeRTOS/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
 709:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 710:ThirdParty/FreeRTOS/tasks.c ****             }
 711:ThirdParty/FreeRTOS/tasks.c ****         }
 712:ThirdParty/FreeRTOS/tasks.c **** 
 713:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
 714:ThirdParty/FreeRTOS/tasks.c ****     }
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 16


 715:ThirdParty/FreeRTOS/tasks.c **** 
 716:ThirdParty/FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 717:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 718:ThirdParty/FreeRTOS/tasks.c **** 
 719:ThirdParty/FreeRTOS/tasks.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 720:ThirdParty/FreeRTOS/tasks.c **** 
 721:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
 722:ThirdParty/FreeRTOS/tasks.c ****                             const char * const pcName, /*lint !e971 Unqualified char types are allo
 723:ThirdParty/FreeRTOS/tasks.c ****                             const configSTACK_DEPTH_TYPE usStackDepth,
 724:ThirdParty/FreeRTOS/tasks.c ****                             void * const pvParameters,
 725:ThirdParty/FreeRTOS/tasks.c ****                             UBaseType_t uxPriority,
 726:ThirdParty/FreeRTOS/tasks.c ****                             TaskHandle_t * const pxCreatedTask )
 727:ThirdParty/FreeRTOS/tasks.c ****     {
 163              		.loc 1 727 5
 164              		.cfi_startproc
 165              		@ args = 8, pretend = 0, frame = 32
 166              		@ frame_needed = 1, uses_anonymous_args = 0
 167 0000 80B5     		push	{r7, lr}
 168              	.LCFI0:
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 7, -8
 171              		.cfi_offset 14, -4
 172 0002 8CB0     		sub	sp, sp, #48
 173              	.LCFI1:
 174              		.cfi_def_cfa_offset 56
 175 0004 04AF     		add	r7, sp, #16
 176              	.LCFI2:
 177              		.cfi_def_cfa 7, 40
 178 0006 F860     		str	r0, [r7, #12]
 179 0008 B960     		str	r1, [r7, #8]
 180 000a 3B60     		str	r3, [r7]
 181 000c 1346     		mov	r3, r2	@ movhi
 182 000e FB80     		strh	r3, [r7, #6]	@ movhi
 183              	.LBB155:
 728:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 729:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn;
 730:ThirdParty/FreeRTOS/tasks.c **** 
 731:ThirdParty/FreeRTOS/tasks.c ****         /* If the stack grows down then allocate the stack then the TCB so the stack
 732:ThirdParty/FreeRTOS/tasks.c ****          * does not grow into the TCB.  Likewise if the stack grows up then allocate
 733:ThirdParty/FreeRTOS/tasks.c ****          * the TCB then the stack. */
 734:ThirdParty/FreeRTOS/tasks.c ****         #if ( portSTACK_GROWTH > 0 )
 735:ThirdParty/FreeRTOS/tasks.c ****         {
 736:ThirdParty/FreeRTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends on
 737:ThirdParty/FreeRTOS/tasks.c ****              * the implementation of the port malloc function and whether or not static
 738:ThirdParty/FreeRTOS/tasks.c ****              * allocation is being used. */
 739:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 740:ThirdParty/FreeRTOS/tasks.c **** 
 741:ThirdParty/FreeRTOS/tasks.c ****             if( pxNewTCB != NULL )
 742:ThirdParty/FreeRTOS/tasks.c ****             {
 743:ThirdParty/FreeRTOS/tasks.c ****                 memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 744:ThirdParty/FreeRTOS/tasks.c **** 
 745:ThirdParty/FreeRTOS/tasks.c ****                 /* Allocate space for the stack used by the task being created.
 746:ThirdParty/FreeRTOS/tasks.c ****                  * The base of the stack memory stored in the TCB so the task can
 747:ThirdParty/FreeRTOS/tasks.c ****                  * be deleted later if required. */
 748:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocStack( ( ( ( size_t ) usStackDept
 749:ThirdParty/FreeRTOS/tasks.c **** 
 750:ThirdParty/FreeRTOS/tasks.c ****                 if( pxNewTCB->pxStack == NULL )
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 17


 751:ThirdParty/FreeRTOS/tasks.c ****                 {
 752:ThirdParty/FreeRTOS/tasks.c ****                     /* Could not allocate the stack.  Delete the allocated TCB. */
 753:ThirdParty/FreeRTOS/tasks.c ****                     vPortFree( pxNewTCB );
 754:ThirdParty/FreeRTOS/tasks.c ****                     pxNewTCB = NULL;
 755:ThirdParty/FreeRTOS/tasks.c ****                 }
 756:ThirdParty/FreeRTOS/tasks.c ****             }
 757:ThirdParty/FreeRTOS/tasks.c ****         }
 758:ThirdParty/FreeRTOS/tasks.c ****         #else /* portSTACK_GROWTH */
 759:ThirdParty/FreeRTOS/tasks.c ****         {
 760:ThirdParty/FreeRTOS/tasks.c ****             StackType_t * pxStack;
 761:ThirdParty/FreeRTOS/tasks.c **** 
 762:ThirdParty/FreeRTOS/tasks.c ****             /* Allocate space for the stack used by the task being created. */
 763:ThirdParty/FreeRTOS/tasks.c ****             pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) );
 184              		.loc 1 763 46
 185 0010 FB88     		ldrh	r3, [r7, #6]
 186              		.loc 1 763 23
 187 0012 9B00     		lsls	r3, r3, #2
 188 0014 1846     		mov	r0, r3
 189 0016 FFF7FEFF 		bl	pvPortMalloc
 190 001a 7861     		str	r0, [r7, #20]
 764:ThirdParty/FreeRTOS/tasks.c **** 
 765:ThirdParty/FreeRTOS/tasks.c ****             if( pxStack != NULL )
 191              		.loc 1 765 15
 192 001c 7B69     		ldr	r3, [r7, #20]
 193 001e 002B     		cmp	r3, #0
 194 0020 13D0     		beq	.L2
 766:ThirdParty/FreeRTOS/tasks.c ****             {
 767:ThirdParty/FreeRTOS/tasks.c ****                 /* Allocate space for the TCB. */
 768:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All va
 195              		.loc 1 768 40
 196 0022 5820     		movs	r0, #88
 197 0024 FFF7FEFF 		bl	pvPortMalloc
 198 0028 F861     		str	r0, [r7, #28]
 769:ThirdParty/FreeRTOS/tasks.c **** 
 770:ThirdParty/FreeRTOS/tasks.c ****                 if( pxNewTCB != NULL )
 199              		.loc 1 770 19
 200 002a FB69     		ldr	r3, [r7, #28]
 201 002c 002B     		cmp	r3, #0
 202 002e 08D0     		beq	.L3
 771:ThirdParty/FreeRTOS/tasks.c ****                 {
 772:ThirdParty/FreeRTOS/tasks.c ****                     memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 203              		.loc 1 772 21
 204 0030 5822     		movs	r2, #88
 205 0032 0021     		movs	r1, #0
 206 0034 F869     		ldr	r0, [r7, #28]
 207 0036 FFF7FEFF 		bl	memset
 773:ThirdParty/FreeRTOS/tasks.c **** 
 774:ThirdParty/FreeRTOS/tasks.c ****                     /* Store the stack location in the TCB. */
 775:ThirdParty/FreeRTOS/tasks.c ****                     pxNewTCB->pxStack = pxStack;
 208              		.loc 1 775 39
 209 003a FB69     		ldr	r3, [r7, #28]
 210 003c 7A69     		ldr	r2, [r7, #20]
 211 003e 1A63     		str	r2, [r3, #48]
 212 0040 05E0     		b	.L4
 213              	.L3:
 776:ThirdParty/FreeRTOS/tasks.c ****                 }
 777:ThirdParty/FreeRTOS/tasks.c ****                 else
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 18


 778:ThirdParty/FreeRTOS/tasks.c ****                 {
 779:ThirdParty/FreeRTOS/tasks.c ****                     /* The stack cannot be used as the TCB was not created.  Free
 780:ThirdParty/FreeRTOS/tasks.c ****                      * it again. */
 781:ThirdParty/FreeRTOS/tasks.c ****                     vPortFreeStack( pxStack );
 214              		.loc 1 781 21
 215 0042 7869     		ldr	r0, [r7, #20]
 216 0044 FFF7FEFF 		bl	vPortFree
 217 0048 01E0     		b	.L4
 218              	.L2:
 782:ThirdParty/FreeRTOS/tasks.c ****                 }
 783:ThirdParty/FreeRTOS/tasks.c ****             }
 784:ThirdParty/FreeRTOS/tasks.c ****             else
 785:ThirdParty/FreeRTOS/tasks.c ****             {
 786:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB = NULL;
 219              		.loc 1 786 26
 220 004a 0023     		movs	r3, #0
 221 004c FB61     		str	r3, [r7, #28]
 222              	.L4:
 223              	.LBE155:
 787:ThirdParty/FreeRTOS/tasks.c ****             }
 788:ThirdParty/FreeRTOS/tasks.c ****         }
 789:ThirdParty/FreeRTOS/tasks.c ****         #endif /* portSTACK_GROWTH */
 790:ThirdParty/FreeRTOS/tasks.c **** 
 791:ThirdParty/FreeRTOS/tasks.c ****         if( pxNewTCB != NULL )
 224              		.loc 1 791 11
 225 004e FB69     		ldr	r3, [r7, #28]
 226 0050 002B     		cmp	r3, #0
 227 0052 13D0     		beq	.L5
 792:ThirdParty/FreeRTOS/tasks.c ****         {
 793:ThirdParty/FreeRTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has be
 794:ThirdParty/FreeRTOS/tasks.c ****             {
 795:ThirdParty/FreeRTOS/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
 796:ThirdParty/FreeRTOS/tasks.c ****                  * task was created dynamically in case it is later deleted. */
 797:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 798:ThirdParty/FreeRTOS/tasks.c ****             }
 799:ThirdParty/FreeRTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 800:ThirdParty/FreeRTOS/tasks.c **** 
 801:ThirdParty/FreeRTOS/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPr
 228              		.loc 1 801 13
 229 0054 FA88     		ldrh	r2, [r7, #6]
 230 0056 0023     		movs	r3, #0
 231 0058 0393     		str	r3, [sp, #12]
 232 005a FB69     		ldr	r3, [r7, #28]
 233 005c 0293     		str	r3, [sp, #8]
 234 005e FB6A     		ldr	r3, [r7, #44]
 235 0060 0193     		str	r3, [sp, #4]
 236 0062 BB6A     		ldr	r3, [r7, #40]
 237 0064 0093     		str	r3, [sp]
 238 0066 3B68     		ldr	r3, [r7]
 239 0068 B968     		ldr	r1, [r7, #8]
 240 006a F868     		ldr	r0, [r7, #12]
 241 006c FFF7FEFF 		bl	prvInitialiseNewTask
 802:ThirdParty/FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 242              		.loc 1 802 13
 243 0070 F869     		ldr	r0, [r7, #28]
 244 0072 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 803:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pdPASS;
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 19


 245              		.loc 1 803 21
 246 0076 0123     		movs	r3, #1
 247 0078 BB61     		str	r3, [r7, #24]
 248 007a 02E0     		b	.L6
 249              	.L5:
 804:ThirdParty/FreeRTOS/tasks.c ****         }
 805:ThirdParty/FreeRTOS/tasks.c ****         else
 806:ThirdParty/FreeRTOS/tasks.c ****         {
 807:ThirdParty/FreeRTOS/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 250              		.loc 1 807 21
 251 007c 4FF0FF33 		mov	r3, #-1
 252 0080 BB61     		str	r3, [r7, #24]
 253              	.L6:
 808:ThirdParty/FreeRTOS/tasks.c ****         }
 809:ThirdParty/FreeRTOS/tasks.c **** 
 810:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
 254              		.loc 1 810 16
 255 0082 BB69     		ldr	r3, [r7, #24]
 811:ThirdParty/FreeRTOS/tasks.c ****     }
 256              		.loc 1 811 5
 257 0084 1846     		mov	r0, r3
 258 0086 2037     		adds	r7, r7, #32
 259              	.LCFI3:
 260              		.cfi_def_cfa_offset 8
 261 0088 BD46     		mov	sp, r7
 262              	.LCFI4:
 263              		.cfi_def_cfa_register 13
 264              		@ sp needed
 265 008a 80BD     		pop	{r7, pc}
 266              		.cfi_endproc
 267              	.LFE5:
 269              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 270              		.align	1
 271              		.syntax unified
 272              		.thumb
 273              		.thumb_func
 275              	prvInitialiseNewTask:
 276              	.LFB6:
 812:ThirdParty/FreeRTOS/tasks.c **** 
 813:ThirdParty/FreeRTOS/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 814:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 815:ThirdParty/FreeRTOS/tasks.c **** 
 816:ThirdParty/FreeRTOS/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 817:ThirdParty/FreeRTOS/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 818:ThirdParty/FreeRTOS/tasks.c ****                                   const uint32_t ulStackDepth,
 819:ThirdParty/FreeRTOS/tasks.c ****                                   void * const pvParameters,
 820:ThirdParty/FreeRTOS/tasks.c ****                                   UBaseType_t uxPriority,
 821:ThirdParty/FreeRTOS/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 822:ThirdParty/FreeRTOS/tasks.c ****                                   TCB_t * pxNewTCB,
 823:ThirdParty/FreeRTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions )
 824:ThirdParty/FreeRTOS/tasks.c **** {
 277              		.loc 1 824 1
 278              		.cfi_startproc
 279              		@ args = 16, pretend = 0, frame = 32
 280              		@ frame_needed = 1, uses_anonymous_args = 0
 281 0000 80B5     		push	{r7, lr}
 282              	.LCFI5:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 20


 283              		.cfi_def_cfa_offset 8
 284              		.cfi_offset 7, -8
 285              		.cfi_offset 14, -4
 286 0002 88B0     		sub	sp, sp, #32
 287              	.LCFI6:
 288              		.cfi_def_cfa_offset 40
 289 0004 00AF     		add	r7, sp, #0
 290              	.LCFI7:
 291              		.cfi_def_cfa_register 7
 292 0006 F860     		str	r0, [r7, #12]
 293 0008 B960     		str	r1, [r7, #8]
 294 000a 7A60     		str	r2, [r7, #4]
 295 000c 3B60     		str	r3, [r7]
 825:ThirdParty/FreeRTOS/tasks.c ****     StackType_t * pxTopOfStack;
 826:ThirdParty/FreeRTOS/tasks.c ****     UBaseType_t x;
 827:ThirdParty/FreeRTOS/tasks.c **** 
 828:ThirdParty/FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 829:ThirdParty/FreeRTOS/tasks.c ****         /* Should the task be created in privileged mode? */
 830:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xRunPrivileged;
 831:ThirdParty/FreeRTOS/tasks.c **** 
 832:ThirdParty/FreeRTOS/tasks.c ****         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 833:ThirdParty/FreeRTOS/tasks.c ****         {
 834:ThirdParty/FreeRTOS/tasks.c ****             xRunPrivileged = pdTRUE;
 835:ThirdParty/FreeRTOS/tasks.c ****         }
 836:ThirdParty/FreeRTOS/tasks.c ****         else
 837:ThirdParty/FreeRTOS/tasks.c ****         {
 838:ThirdParty/FreeRTOS/tasks.c ****             xRunPrivileged = pdFALSE;
 839:ThirdParty/FreeRTOS/tasks.c ****         }
 840:ThirdParty/FreeRTOS/tasks.c ****         uxPriority &= ~portPRIVILEGE_BIT;
 841:ThirdParty/FreeRTOS/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS == 1 */
 842:ThirdParty/FreeRTOS/tasks.c **** 
 843:ThirdParty/FreeRTOS/tasks.c ****     /* Avoid dependency on memset() if it is not required. */
 844:ThirdParty/FreeRTOS/tasks.c ****     #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 845:ThirdParty/FreeRTOS/tasks.c ****     {
 846:ThirdParty/FreeRTOS/tasks.c ****         /* Fill the stack with a known value to assist debugging. */
 847:ThirdParty/FreeRTOS/tasks.c ****         ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * s
 296              		.loc 1 847 34
 297 000e 3B6B     		ldr	r3, [r7, #48]
 298 0010 186B     		ldr	r0, [r3, #48]
 299              		.loc 1 847 18
 300 0012 7B68     		ldr	r3, [r7, #4]
 301 0014 9B00     		lsls	r3, r3, #2
 302 0016 1A46     		mov	r2, r3
 303 0018 A521     		movs	r1, #165
 304 001a FFF7FEFF 		bl	memset
 848:ThirdParty/FreeRTOS/tasks.c ****     }
 849:ThirdParty/FreeRTOS/tasks.c ****     #endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 850:ThirdParty/FreeRTOS/tasks.c **** 
 851:ThirdParty/FreeRTOS/tasks.c ****     /* Calculate the top of stack address.  This depends on whether the stack
 852:ThirdParty/FreeRTOS/tasks.c ****      * grows from high memory to low (as per the 80x86) or vice versa.
 853:ThirdParty/FreeRTOS/tasks.c ****      * portSTACK_GROWTH is used to make the result positive or negative as required
 854:ThirdParty/FreeRTOS/tasks.c ****      * by the port. */
 855:ThirdParty/FreeRTOS/tasks.c ****     #if ( portSTACK_GROWTH < 0 )
 856:ThirdParty/FreeRTOS/tasks.c ****     {
 857:ThirdParty/FreeRTOS/tasks.c ****         pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 305              		.loc 1 857 35
 306 001e 3B6B     		ldr	r3, [r7, #48]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 21


 307 0020 1A6B     		ldr	r2, [r3, #48]
 308              		.loc 1 857 44
 309 0022 7B68     		ldr	r3, [r7, #4]
 310 0024 03F18043 		add	r3, r3, #1073741824
 311 0028 013B     		subs	r3, r3, #1
 312 002a 9B00     		lsls	r3, r3, #2
 313              		.loc 1 857 22
 314 002c 1344     		add	r3, r3, r2
 315 002e BB61     		str	r3, [r7, #24]
 858:ThirdParty/FreeRTOS/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 316              		.loc 1 858 46
 317 0030 BB69     		ldr	r3, [r7, #24]
 318              		.loc 1 858 87
 319 0032 23F00703 		bic	r3, r3, #7
 320              		.loc 1 858 22
 321 0036 BB61     		str	r3, [r7, #24]
 859:ThirdParty/FreeRTOS/tasks.c **** 
 860:ThirdParty/FreeRTOS/tasks.c ****         /* Check the alignment of the calculated top of stack is correct. */
 861:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBY
 322              		.loc 1 861 9
 323 0038 BB69     		ldr	r3, [r7, #24]
 324 003a 03F00703 		and	r3, r3, #7
 325 003e 002B     		cmp	r3, #0
 326 0040 0AD0     		beq	.L9
 327              	.LBB156:
 328              	.LBB157:
 329              		.file 2 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
   1:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.5.1
   3:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   7:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  13:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  14:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  16:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  17:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  24:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://www.FreeRTOS.org
  25:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://github.com/FreeRTOS
  26:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  27:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  28:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  30:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 22


  31:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define PORTMACRO_H
  32:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  33:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef __cplusplus
  34:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         extern "C" {
  35:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  36:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  37:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  38:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  39:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  40:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  42:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  43:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  44:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  45:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  46:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  48:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCHAR          char
  49:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portFLOAT         float
  50:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDOUBLE        double
  51:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portLONG          long
  52:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSHORT         short
  53:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBASE_TYPE     long
  55:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  57:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef long             BaseType_t;
  58:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef unsigned long    UBaseType_t;
  59:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  60:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint16_t     TickType_t;
  62:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #else
  64:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint32_t     TickType_t;
  65:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  66:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  68:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not need to be guarded with a critical section. */
  69:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  70:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  71:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  72:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  73:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  74:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  79:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  80:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  81:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD()                                 \
  82:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {                                                   \
  83:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****                                                         \
  86:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****          * within the specified behaviour for the architecture. */ \
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 23


  88:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  89:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "isb" );                                  \
  90:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
  91:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  92:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  95:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  96:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  97:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  98:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  99:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortEnterCritical( void );
 100:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortExitCritical( void );
 101:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 104:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 109:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 110:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * (which build with all the ports) will build. */
 113:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 114:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 116:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 117:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 118:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 119:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 122:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 123:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 124:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 125:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 126:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 127:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 128:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 131:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Generic helper function. */
 132:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 134:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             uint8_t ucReturn;
 135:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 136:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             return ucReturn;
 139:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 140:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 141:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Check the configuration. */
 142:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #endif
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 24


 145:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 146:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 147:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 149:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 151:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 152:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 153:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 154:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 156:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 157:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 158:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef configASSERT
 159:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 161:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 162:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 164:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNOP()
 165:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 166:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portINLINE              __inline
 167:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 168:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portFORCE_INLINE
 169:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 171:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 172:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 173:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 174:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulCurrentInterrupt;
 175:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         BaseType_t xReturn;
 176:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 178:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 179:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 181:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 182:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdFALSE;
 183:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 184:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         else
 185:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 186:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdTRUE;
 187:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 188:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         return xReturn;
 190:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 191:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 192:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 193:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 194:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 195:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulNewBASEPRI;
 197:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 330              		.loc 2 198 9
 331              		.syntax unified
 332              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 25


 333 0042 4FF05003 			mov r3, #80												
 334 0046 83F31188 		msr basepri, r3											
 335 004a BFF36F8F 		isb														
 336 004e BFF34F8F 		dsb														
 337              	
 338              	@ 0 "" 2
 339              		.thumb
 340              		.syntax unified
 341 0052 7B61     		str	r3, [r7, #20]
 199:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mov %0, %1												\n"\
 201:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %0											\n"\
 202:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	isb														\n"\
 203:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	dsb														\n"\
 204:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 205:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         );
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 342              		.loc 2 206 5
 343 0054 00BF     		nop
 344              	.L10:
 345              	.LBE157:
 346              	.LBE156:
 347              		.loc 1 861 9 discriminator 1
 348 0056 FEE7     		b	.L10
 349              	.L9:
 862:ThirdParty/FreeRTOS/tasks.c **** 
 863:ThirdParty/FreeRTOS/tasks.c ****         #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
 864:ThirdParty/FreeRTOS/tasks.c ****         {
 865:ThirdParty/FreeRTOS/tasks.c ****             /* Also record the stack's high address, which may assist
 866:ThirdParty/FreeRTOS/tasks.c ****              * debugging. */
 867:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB->pxEndOfStack = pxTopOfStack;
 868:ThirdParty/FreeRTOS/tasks.c ****         }
 869:ThirdParty/FreeRTOS/tasks.c ****         #endif /* configRECORD_STACK_HIGH_ADDRESS */
 870:ThirdParty/FreeRTOS/tasks.c ****     }
 871:ThirdParty/FreeRTOS/tasks.c ****     #else /* portSTACK_GROWTH */
 872:ThirdParty/FreeRTOS/tasks.c ****     {
 873:ThirdParty/FreeRTOS/tasks.c ****         pxTopOfStack = pxNewTCB->pxStack;
 874:ThirdParty/FreeRTOS/tasks.c **** 
 875:ThirdParty/FreeRTOS/tasks.c ****         /* Check the alignment of the stack buffer is correct. */
 876:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) p
 877:ThirdParty/FreeRTOS/tasks.c **** 
 878:ThirdParty/FreeRTOS/tasks.c ****         /* The other extreme of the stack space is required if stack checking is
 879:ThirdParty/FreeRTOS/tasks.c ****          * performed. */
 880:ThirdParty/FreeRTOS/tasks.c ****         pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 881:ThirdParty/FreeRTOS/tasks.c ****     }
 882:ThirdParty/FreeRTOS/tasks.c ****     #endif /* portSTACK_GROWTH */
 883:ThirdParty/FreeRTOS/tasks.c **** 
 884:ThirdParty/FreeRTOS/tasks.c ****     /* Store the task name in the TCB. */
 885:ThirdParty/FreeRTOS/tasks.c ****     if( pcName != NULL )
 350              		.loc 1 885 7
 351 0058 BB68     		ldr	r3, [r7, #8]
 352 005a 002B     		cmp	r3, #0
 353 005c 1ED0     		beq	.L11
 886:ThirdParty/FreeRTOS/tasks.c ****     {
 887:ThirdParty/FreeRTOS/tasks.c ****         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 354              		.loc 1 887 16
 355 005e 0023     		movs	r3, #0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 26


 356 0060 FB61     		str	r3, [r7, #28]
 357              		.loc 1 887 9
 358 0062 12E0     		b	.L12
 359              	.L15:
 888:ThirdParty/FreeRTOS/tasks.c ****         {
 889:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 360              		.loc 1 889 47
 361 0064 BA68     		ldr	r2, [r7, #8]
 362 0066 FB69     		ldr	r3, [r7, #28]
 363 0068 1344     		add	r3, r3, r2
 364 006a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 365              		.loc 1 889 39
 366 006c 3A6B     		ldr	r2, [r7, #48]
 367 006e FB69     		ldr	r3, [r7, #28]
 368 0070 1344     		add	r3, r3, r2
 369 0072 3433     		adds	r3, r3, #52
 370 0074 0A46     		mov	r2, r1
 371 0076 1A70     		strb	r2, [r3]
 890:ThirdParty/FreeRTOS/tasks.c **** 
 891:ThirdParty/FreeRTOS/tasks.c ****             /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 892:ThirdParty/FreeRTOS/tasks.c ****              * configMAX_TASK_NAME_LEN characters just in case the memory after the
 893:ThirdParty/FreeRTOS/tasks.c ****              * string is not accessible (extremely unlikely). */
 894:ThirdParty/FreeRTOS/tasks.c ****             if( pcName[ x ] == ( char ) 0x00 )
 372              		.loc 1 894 23
 373 0078 BA68     		ldr	r2, [r7, #8]
 374 007a FB69     		ldr	r3, [r7, #28]
 375 007c 1344     		add	r3, r3, r2
 376 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 377              		.loc 1 894 15
 378 0080 002B     		cmp	r3, #0
 379 0082 06D0     		beq	.L20
 887:ThirdParty/FreeRTOS/tasks.c ****         {
 380              		.loc 1 887 83 discriminator 2
 381 0084 FB69     		ldr	r3, [r7, #28]
 382 0086 0133     		adds	r3, r3, #1
 383 0088 FB61     		str	r3, [r7, #28]
 384              	.L12:
 887:ThirdParty/FreeRTOS/tasks.c ****         {
 385              		.loc 1 887 9 discriminator 1
 386 008a FB69     		ldr	r3, [r7, #28]
 387 008c 092B     		cmp	r3, #9
 388 008e E9D9     		bls	.L15
 389 0090 00E0     		b	.L14
 390              	.L20:
 895:ThirdParty/FreeRTOS/tasks.c ****             {
 896:ThirdParty/FreeRTOS/tasks.c ****                 break;
 391              		.loc 1 896 17
 392 0092 00BF     		nop
 393              	.L14:
 897:ThirdParty/FreeRTOS/tasks.c ****             }
 898:ThirdParty/FreeRTOS/tasks.c ****             else
 899:ThirdParty/FreeRTOS/tasks.c ****             {
 900:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
 901:ThirdParty/FreeRTOS/tasks.c ****             }
 902:ThirdParty/FreeRTOS/tasks.c ****         }
 903:ThirdParty/FreeRTOS/tasks.c **** 
 904:ThirdParty/FreeRTOS/tasks.c ****         /* Ensure the name string is terminated in the case that the string length
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 27


 905:ThirdParty/FreeRTOS/tasks.c ****          * was greater or equal to configMAX_TASK_NAME_LEN. */
 906:ThirdParty/FreeRTOS/tasks.c ****         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 394              		.loc 1 906 61
 395 0094 3B6B     		ldr	r3, [r7, #48]
 396 0096 0022     		movs	r2, #0
 397 0098 83F83D20 		strb	r2, [r3, #61]
 398              	.L11:
 907:ThirdParty/FreeRTOS/tasks.c ****     }
 908:ThirdParty/FreeRTOS/tasks.c ****     else
 909:ThirdParty/FreeRTOS/tasks.c ****     {
 910:ThirdParty/FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 911:ThirdParty/FreeRTOS/tasks.c ****     }
 912:ThirdParty/FreeRTOS/tasks.c **** 
 913:ThirdParty/FreeRTOS/tasks.c ****     /* This is used as an array index so must ensure it's not too large. */
 914:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( uxPriority < configMAX_PRIORITIES );
 399              		.loc 1 914 5
 400 009c BB6A     		ldr	r3, [r7, #40]
 401 009e 042B     		cmp	r3, #4
 402 00a0 0AD9     		bls	.L16
 403              	.LBB158:
 404              	.LBB159:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 405              		.loc 2 198 9
 406              		.syntax unified
 407              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 408 00a2 4FF05003 			mov r3, #80												
 409 00a6 83F31188 		msr basepri, r3											
 410 00aa BFF36F8F 		isb														
 411 00ae BFF34F8F 		dsb														
 412              	
 413              	@ 0 "" 2
 414              		.thumb
 415              		.syntax unified
 416 00b2 3B61     		str	r3, [r7, #16]
 417              		.loc 2 206 5
 418 00b4 00BF     		nop
 419              	.L17:
 420              	.LBE159:
 421              	.LBE158:
 422              		.loc 1 914 5 discriminator 2
 423 00b6 FEE7     		b	.L17
 424              	.L16:
 915:ThirdParty/FreeRTOS/tasks.c **** 
 916:ThirdParty/FreeRTOS/tasks.c ****     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 425              		.loc 1 916 7
 426 00b8 BB6A     		ldr	r3, [r7, #40]
 427 00ba 042B     		cmp	r3, #4
 428 00bc 01D9     		bls	.L18
 917:ThirdParty/FreeRTOS/tasks.c ****     {
 918:ThirdParty/FreeRTOS/tasks.c ****         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 429              		.loc 1 918 20
 430 00be 0423     		movs	r3, #4
 431 00c0 BB62     		str	r3, [r7, #40]
 432              	.L18:
 919:ThirdParty/FreeRTOS/tasks.c ****     }
 920:ThirdParty/FreeRTOS/tasks.c ****     else
 921:ThirdParty/FreeRTOS/tasks.c ****     {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 28


 922:ThirdParty/FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 923:ThirdParty/FreeRTOS/tasks.c ****     }
 924:ThirdParty/FreeRTOS/tasks.c **** 
 925:ThirdParty/FreeRTOS/tasks.c ****     pxNewTCB->uxPriority = uxPriority;
 433              		.loc 1 925 26
 434 00c2 3B6B     		ldr	r3, [r7, #48]
 435 00c4 BA6A     		ldr	r2, [r7, #40]
 436 00c6 DA62     		str	r2, [r3, #44]
 926:ThirdParty/FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 927:ThirdParty/FreeRTOS/tasks.c ****     {
 928:ThirdParty/FreeRTOS/tasks.c ****         pxNewTCB->uxBasePriority = uxPriority;
 437              		.loc 1 928 34
 438 00c8 3B6B     		ldr	r3, [r7, #48]
 439 00ca BA6A     		ldr	r2, [r7, #40]
 440 00cc 9A64     		str	r2, [r3, #72]
 929:ThirdParty/FreeRTOS/tasks.c ****     }
 930:ThirdParty/FreeRTOS/tasks.c ****     #endif /* configUSE_MUTEXES */
 931:ThirdParty/FreeRTOS/tasks.c **** 
 932:ThirdParty/FreeRTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 441              		.loc 1 932 5
 442 00ce 3B6B     		ldr	r3, [r7, #48]
 443 00d0 0433     		adds	r3, r3, #4
 444 00d2 1846     		mov	r0, r3
 445 00d4 FFF7FEFF 		bl	vListInitialiseItem
 933:ThirdParty/FreeRTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 446              		.loc 1 933 5
 447 00d8 3B6B     		ldr	r3, [r7, #48]
 448 00da 1833     		adds	r3, r3, #24
 449 00dc 1846     		mov	r0, r3
 450 00de FFF7FEFF 		bl	vListInitialiseItem
 934:ThirdParty/FreeRTOS/tasks.c **** 
 935:ThirdParty/FreeRTOS/tasks.c ****     /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 936:ThirdParty/FreeRTOS/tasks.c ****      * back to  the containing TCB from a generic item in a list. */
 937:ThirdParty/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 451              		.loc 1 937 5
 452 00e2 3B6B     		ldr	r3, [r7, #48]
 453 00e4 3A6B     		ldr	r2, [r7, #48]
 454 00e6 1A61     		str	r2, [r3, #16]
 938:ThirdParty/FreeRTOS/tasks.c **** 
 939:ThirdParty/FreeRTOS/tasks.c ****     /* Event lists are always in priority order. */
 940:ThirdParty/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - (
 455              		.loc 1 940 5
 456 00e8 BB6A     		ldr	r3, [r7, #40]
 457 00ea C3F10502 		rsb	r2, r3, #5
 458 00ee 3B6B     		ldr	r3, [r7, #48]
 459 00f0 9A61     		str	r2, [r3, #24]
 941:ThirdParty/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 460              		.loc 1 941 5
 461 00f2 3B6B     		ldr	r3, [r7, #48]
 462 00f4 3A6B     		ldr	r2, [r7, #48]
 463 00f6 5A62     		str	r2, [r3, #36]
 942:ThirdParty/FreeRTOS/tasks.c **** 
 943:ThirdParty/FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 944:ThirdParty/FreeRTOS/tasks.c ****     {
 945:ThirdParty/FreeRTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStac
 946:ThirdParty/FreeRTOS/tasks.c ****     }
 947:ThirdParty/FreeRTOS/tasks.c ****     #else
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 29


 948:ThirdParty/FreeRTOS/tasks.c ****     {
 949:ThirdParty/FreeRTOS/tasks.c ****         /* Avoid compiler warning about unreferenced parameter. */
 950:ThirdParty/FreeRTOS/tasks.c ****         ( void ) xRegions;
 951:ThirdParty/FreeRTOS/tasks.c ****     }
 952:ThirdParty/FreeRTOS/tasks.c ****     #endif
 953:ThirdParty/FreeRTOS/tasks.c **** 
 954:ThirdParty/FreeRTOS/tasks.c ****     #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
 955:ThirdParty/FreeRTOS/tasks.c ****     {
 956:ThirdParty/FreeRTOS/tasks.c ****         /* Allocate and initialize memory for the task's TLS Block. */
 957:ThirdParty/FreeRTOS/tasks.c ****         configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 958:ThirdParty/FreeRTOS/tasks.c ****     }
 959:ThirdParty/FreeRTOS/tasks.c ****     #endif
 960:ThirdParty/FreeRTOS/tasks.c **** 
 961:ThirdParty/FreeRTOS/tasks.c ****     /* Initialize the TCB stack to look as if the task was already running,
 962:ThirdParty/FreeRTOS/tasks.c ****      * but had been interrupted by the scheduler.  The return address is set
 963:ThirdParty/FreeRTOS/tasks.c ****      * to the start of the task function. Once the stack has been initialised
 964:ThirdParty/FreeRTOS/tasks.c ****      * the top of stack variable is updated. */
 965:ThirdParty/FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 966:ThirdParty/FreeRTOS/tasks.c ****     {
 967:ThirdParty/FreeRTOS/tasks.c ****         /* If the port has capability to detect stack overflow,
 968:ThirdParty/FreeRTOS/tasks.c ****          * pass the stack end address to the stack initialization
 969:ThirdParty/FreeRTOS/tasks.c ****          * function as well. */
 970:ThirdParty/FreeRTOS/tasks.c ****         #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
 971:ThirdParty/FreeRTOS/tasks.c ****         {
 972:ThirdParty/FreeRTOS/tasks.c ****             #if ( portSTACK_GROWTH < 0 )
 973:ThirdParty/FreeRTOS/tasks.c ****             {
 974:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, px
 975:ThirdParty/FreeRTOS/tasks.c ****             }
 976:ThirdParty/FreeRTOS/tasks.c ****             #else /* portSTACK_GROWTH */
 977:ThirdParty/FreeRTOS/tasks.c ****             {
 978:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStac
 979:ThirdParty/FreeRTOS/tasks.c ****             }
 980:ThirdParty/FreeRTOS/tasks.c ****             #endif /* portSTACK_GROWTH */
 981:ThirdParty/FreeRTOS/tasks.c ****         }
 982:ThirdParty/FreeRTOS/tasks.c ****         #else /* portHAS_STACK_OVERFLOW_CHECKING */
 983:ThirdParty/FreeRTOS/tasks.c ****         {
 984:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters,
 985:ThirdParty/FreeRTOS/tasks.c ****         }
 986:ThirdParty/FreeRTOS/tasks.c ****         #endif /* portHAS_STACK_OVERFLOW_CHECKING */
 987:ThirdParty/FreeRTOS/tasks.c ****     }
 988:ThirdParty/FreeRTOS/tasks.c ****     #else /* portUSING_MPU_WRAPPERS */
 989:ThirdParty/FreeRTOS/tasks.c ****     {
 990:ThirdParty/FreeRTOS/tasks.c ****         /* If the port has capability to detect stack overflow,
 991:ThirdParty/FreeRTOS/tasks.c ****          * pass the stack end address to the stack initialization
 992:ThirdParty/FreeRTOS/tasks.c ****          * function as well. */
 993:ThirdParty/FreeRTOS/tasks.c ****         #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
 994:ThirdParty/FreeRTOS/tasks.c ****         {
 995:ThirdParty/FreeRTOS/tasks.c ****             #if ( portSTACK_GROWTH < 0 )
 996:ThirdParty/FreeRTOS/tasks.c ****             {
 997:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, px
 998:ThirdParty/FreeRTOS/tasks.c ****             }
 999:ThirdParty/FreeRTOS/tasks.c ****             #else /* portSTACK_GROWTH */
1000:ThirdParty/FreeRTOS/tasks.c ****             {
1001:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStac
1002:ThirdParty/FreeRTOS/tasks.c ****             }
1003:ThirdParty/FreeRTOS/tasks.c ****             #endif /* portSTACK_GROWTH */
1004:ThirdParty/FreeRTOS/tasks.c ****         }
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 30


1005:ThirdParty/FreeRTOS/tasks.c ****         #else /* portHAS_STACK_OVERFLOW_CHECKING */
1006:ThirdParty/FreeRTOS/tasks.c ****         {
1007:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters 
 464              		.loc 1 1007 38
 465 00f8 3A68     		ldr	r2, [r7]
 466 00fa F968     		ldr	r1, [r7, #12]
 467 00fc B869     		ldr	r0, [r7, #24]
 468 00fe FFF7FEFF 		bl	pxPortInitialiseStack
 469 0102 0246     		mov	r2, r0
 470              		.loc 1 1007 36
 471 0104 3B6B     		ldr	r3, [r7, #48]
 472 0106 1A60     		str	r2, [r3]
1008:ThirdParty/FreeRTOS/tasks.c ****         }
1009:ThirdParty/FreeRTOS/tasks.c ****         #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1010:ThirdParty/FreeRTOS/tasks.c ****     }
1011:ThirdParty/FreeRTOS/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS */
1012:ThirdParty/FreeRTOS/tasks.c **** 
1013:ThirdParty/FreeRTOS/tasks.c ****     if( pxCreatedTask != NULL )
 473              		.loc 1 1013 7
 474 0108 FB6A     		ldr	r3, [r7, #44]
 475 010a 002B     		cmp	r3, #0
 476 010c 02D0     		beq	.L21
1014:ThirdParty/FreeRTOS/tasks.c ****     {
1015:ThirdParty/FreeRTOS/tasks.c ****         /* Pass the handle out in an anonymous way.  The handle can be used to
1016:ThirdParty/FreeRTOS/tasks.c ****          * change the created task's priority, delete the created task, etc.*/
1017:ThirdParty/FreeRTOS/tasks.c ****         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 477              		.loc 1 1017 24
 478 010e FB6A     		ldr	r3, [r7, #44]
 479 0110 3A6B     		ldr	r2, [r7, #48]
 480 0112 1A60     		str	r2, [r3]
 481              	.L21:
1018:ThirdParty/FreeRTOS/tasks.c ****     }
1019:ThirdParty/FreeRTOS/tasks.c ****     else
1020:ThirdParty/FreeRTOS/tasks.c ****     {
1021:ThirdParty/FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1022:ThirdParty/FreeRTOS/tasks.c ****     }
1023:ThirdParty/FreeRTOS/tasks.c **** }
 482              		.loc 1 1023 1
 483 0114 00BF     		nop
 484 0116 2037     		adds	r7, r7, #32
 485              	.LCFI8:
 486              		.cfi_def_cfa_offset 8
 487 0118 BD46     		mov	sp, r7
 488              	.LCFI9:
 489              		.cfi_def_cfa_register 13
 490              		@ sp needed
 491 011a 80BD     		pop	{r7, pc}
 492              		.cfi_endproc
 493              	.LFE6:
 495              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 496              		.align	1
 497              		.syntax unified
 498              		.thumb
 499              		.thumb_func
 501              	prvAddNewTaskToReadyList:
 502              	.LFB7:
1024:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 31


1025:ThirdParty/FreeRTOS/tasks.c **** 
1026:ThirdParty/FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
1027:ThirdParty/FreeRTOS/tasks.c **** {
 503              		.loc 1 1027 1
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 16
 506              		@ frame_needed = 1, uses_anonymous_args = 0
 507 0000 80B5     		push	{r7, lr}
 508              	.LCFI10:
 509              		.cfi_def_cfa_offset 8
 510              		.cfi_offset 7, -8
 511              		.cfi_offset 14, -4
 512 0002 84B0     		sub	sp, sp, #16
 513              	.LCFI11:
 514              		.cfi_def_cfa_offset 24
 515 0004 00AF     		add	r7, sp, #0
 516              	.LCFI12:
 517              		.cfi_def_cfa_register 7
 518 0006 7860     		str	r0, [r7, #4]
1028:ThirdParty/FreeRTOS/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
1029:ThirdParty/FreeRTOS/tasks.c ****      * updated. */
1030:ThirdParty/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 519              		.loc 1 1030 5
 520 0008 FFF7FEFF 		bl	vPortEnterCritical
1031:ThirdParty/FreeRTOS/tasks.c ****     {
1032:ThirdParty/FreeRTOS/tasks.c ****         uxCurrentNumberOfTasks++;
 521              		.loc 1 1032 31
 522 000c 3A4B     		ldr	r3, .L27
 523 000e 1B68     		ldr	r3, [r3]
 524 0010 0133     		adds	r3, r3, #1
 525 0012 394A     		ldr	r2, .L27
 526 0014 1360     		str	r3, [r2]
1033:ThirdParty/FreeRTOS/tasks.c **** 
1034:ThirdParty/FreeRTOS/tasks.c ****         if( pxCurrentTCB == NULL )
 527              		.loc 1 1034 26
 528 0016 394B     		ldr	r3, .L27+4
 529 0018 1B68     		ldr	r3, [r3]
 530              		.loc 1 1034 11
 531 001a 002B     		cmp	r3, #0
 532 001c 09D1     		bne	.L23
1035:ThirdParty/FreeRTOS/tasks.c ****         {
1036:ThirdParty/FreeRTOS/tasks.c ****             /* There are no other tasks, or all the other tasks are in
1037:ThirdParty/FreeRTOS/tasks.c ****              * the suspended state - make this the current task. */
1038:ThirdParty/FreeRTOS/tasks.c ****             pxCurrentTCB = pxNewTCB;
 533              		.loc 1 1038 26
 534 001e 374A     		ldr	r2, .L27+4
 535 0020 7B68     		ldr	r3, [r7, #4]
 536 0022 1360     		str	r3, [r2]
1039:ThirdParty/FreeRTOS/tasks.c **** 
1040:ThirdParty/FreeRTOS/tasks.c ****             if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 537              		.loc 1 1040 40
 538 0024 344B     		ldr	r3, .L27
 539 0026 1B68     		ldr	r3, [r3]
 540              		.loc 1 1040 15
 541 0028 012B     		cmp	r3, #1
 542 002a 10D1     		bne	.L24
1041:ThirdParty/FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 32


1042:ThirdParty/FreeRTOS/tasks.c ****                 /* This is the first task to be created so do the preliminary
1043:ThirdParty/FreeRTOS/tasks.c ****                  * initialisation required.  We will not recover if this call
1044:ThirdParty/FreeRTOS/tasks.c ****                  * fails, but we will report the failure. */
1045:ThirdParty/FreeRTOS/tasks.c ****                 prvInitialiseTaskLists();
 543              		.loc 1 1045 17
 544 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 545 0030 0DE0     		b	.L24
 546              	.L23:
1046:ThirdParty/FreeRTOS/tasks.c ****             }
1047:ThirdParty/FreeRTOS/tasks.c ****             else
1048:ThirdParty/FreeRTOS/tasks.c ****             {
1049:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1050:ThirdParty/FreeRTOS/tasks.c ****             }
1051:ThirdParty/FreeRTOS/tasks.c ****         }
1052:ThirdParty/FreeRTOS/tasks.c ****         else
1053:ThirdParty/FreeRTOS/tasks.c ****         {
1054:ThirdParty/FreeRTOS/tasks.c ****             /* If the scheduler is not already running, make this task the
1055:ThirdParty/FreeRTOS/tasks.c ****              * current task if it is the highest priority task to be created
1056:ThirdParty/FreeRTOS/tasks.c ****              * so far. */
1057:ThirdParty/FreeRTOS/tasks.c ****             if( xSchedulerRunning == pdFALSE )
 547              		.loc 1 1057 35
 548 0032 334B     		ldr	r3, .L27+8
 549 0034 1B68     		ldr	r3, [r3]
 550              		.loc 1 1057 15
 551 0036 002B     		cmp	r3, #0
 552 0038 09D1     		bne	.L24
1058:ThirdParty/FreeRTOS/tasks.c ****             {
1059:ThirdParty/FreeRTOS/tasks.c ****                 if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 553              		.loc 1 1059 33
 554 003a 304B     		ldr	r3, .L27+4
 555 003c 1B68     		ldr	r3, [r3]
 556 003e DA6A     		ldr	r2, [r3, #44]
 557              		.loc 1 1059 57
 558 0040 7B68     		ldr	r3, [r7, #4]
 559 0042 DB6A     		ldr	r3, [r3, #44]
 560              		.loc 1 1059 19
 561 0044 9A42     		cmp	r2, r3
 562 0046 02D8     		bhi	.L24
1060:ThirdParty/FreeRTOS/tasks.c ****                 {
1061:ThirdParty/FreeRTOS/tasks.c ****                     pxCurrentTCB = pxNewTCB;
 563              		.loc 1 1061 34
 564 0048 2C4A     		ldr	r2, .L27+4
 565 004a 7B68     		ldr	r3, [r7, #4]
 566 004c 1360     		str	r3, [r2]
 567              	.L24:
1062:ThirdParty/FreeRTOS/tasks.c ****                 }
1063:ThirdParty/FreeRTOS/tasks.c ****                 else
1064:ThirdParty/FreeRTOS/tasks.c ****                 {
1065:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1066:ThirdParty/FreeRTOS/tasks.c ****                 }
1067:ThirdParty/FreeRTOS/tasks.c ****             }
1068:ThirdParty/FreeRTOS/tasks.c ****             else
1069:ThirdParty/FreeRTOS/tasks.c ****             {
1070:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1071:ThirdParty/FreeRTOS/tasks.c ****             }
1072:ThirdParty/FreeRTOS/tasks.c ****         }
1073:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 33


1074:ThirdParty/FreeRTOS/tasks.c ****         uxTaskNumber++;
 568              		.loc 1 1074 21
 569 004e 2D4B     		ldr	r3, .L27+12
 570 0050 1B68     		ldr	r3, [r3]
 571 0052 0133     		adds	r3, r3, #1
 572 0054 2B4A     		ldr	r2, .L27+12
 573 0056 1360     		str	r3, [r2]
1075:ThirdParty/FreeRTOS/tasks.c **** 
1076:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
1077:ThirdParty/FreeRTOS/tasks.c ****         {
1078:ThirdParty/FreeRTOS/tasks.c ****             /* Add a counter into the TCB for tracing only. */
1079:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB->uxTCBNumber = uxTaskNumber;
 574              		.loc 1 1079 35
 575 0058 2A4B     		ldr	r3, .L27+12
 576 005a 1A68     		ldr	r2, [r3]
 577 005c 7B68     		ldr	r3, [r7, #4]
 578 005e 1A64     		str	r2, [r3, #64]
1080:ThirdParty/FreeRTOS/tasks.c ****         }
1081:ThirdParty/FreeRTOS/tasks.c ****         #endif /* configUSE_TRACE_FACILITY */
1082:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_CREATE( pxNewTCB );
1083:ThirdParty/FreeRTOS/tasks.c **** 
1084:ThirdParty/FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxNewTCB );
 579              		.loc 1 1084 9
 580 0060 7B68     		ldr	r3, [r7, #4]
 581 0062 DB6A     		ldr	r3, [r3, #44]
 582 0064 0122     		movs	r2, #1
 583 0066 9A40     		lsls	r2, r2, r3
 584 0068 274B     		ldr	r3, .L27+16
 585 006a 1B68     		ldr	r3, [r3]
 586 006c 1343     		orrs	r3, r3, r2
 587 006e 264A     		ldr	r2, .L27+16
 588 0070 1360     		str	r3, [r2]
 589              	.LBB160:
 590 0072 7B68     		ldr	r3, [r7, #4]
 591 0074 DA6A     		ldr	r2, [r3, #44]
 592 0076 2549     		ldr	r1, .L27+20
 593 0078 1346     		mov	r3, r2
 594 007a 9B00     		lsls	r3, r3, #2
 595 007c 1344     		add	r3, r3, r2
 596 007e 9B00     		lsls	r3, r3, #2
 597 0080 0B44     		add	r3, r3, r1
 598 0082 0433     		adds	r3, r3, #4
 599 0084 1B68     		ldr	r3, [r3]
 600 0086 FB60     		str	r3, [r7, #12]
 601 0088 7B68     		ldr	r3, [r7, #4]
 602 008a FA68     		ldr	r2, [r7, #12]
 603 008c 9A60     		str	r2, [r3, #8]
 604 008e FB68     		ldr	r3, [r7, #12]
 605 0090 9A68     		ldr	r2, [r3, #8]
 606 0092 7B68     		ldr	r3, [r7, #4]
 607 0094 DA60     		str	r2, [r3, #12]
 608 0096 FB68     		ldr	r3, [r7, #12]
 609 0098 9B68     		ldr	r3, [r3, #8]
 610 009a 7A68     		ldr	r2, [r7, #4]
 611 009c 0432     		adds	r2, r2, #4
 612 009e 5A60     		str	r2, [r3, #4]
 613 00a0 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 34


 614 00a2 1A1D     		adds	r2, r3, #4
 615 00a4 FB68     		ldr	r3, [r7, #12]
 616 00a6 9A60     		str	r2, [r3, #8]
 617 00a8 7B68     		ldr	r3, [r7, #4]
 618 00aa DA6A     		ldr	r2, [r3, #44]
 619 00ac 1346     		mov	r3, r2
 620 00ae 9B00     		lsls	r3, r3, #2
 621 00b0 1344     		add	r3, r3, r2
 622 00b2 9B00     		lsls	r3, r3, #2
 623 00b4 154A     		ldr	r2, .L27+20
 624 00b6 1A44     		add	r2, r2, r3
 625 00b8 7B68     		ldr	r3, [r7, #4]
 626 00ba 5A61     		str	r2, [r3, #20]
 627 00bc 7B68     		ldr	r3, [r7, #4]
 628 00be DA6A     		ldr	r2, [r3, #44]
 629 00c0 1249     		ldr	r1, .L27+20
 630 00c2 1346     		mov	r3, r2
 631 00c4 9B00     		lsls	r3, r3, #2
 632 00c6 1344     		add	r3, r3, r2
 633 00c8 9B00     		lsls	r3, r3, #2
 634 00ca 0B44     		add	r3, r3, r1
 635 00cc 1B68     		ldr	r3, [r3]
 636 00ce 591C     		adds	r1, r3, #1
 637 00d0 0E48     		ldr	r0, .L27+20
 638 00d2 1346     		mov	r3, r2
 639 00d4 9B00     		lsls	r3, r3, #2
 640 00d6 1344     		add	r3, r3, r2
 641 00d8 9B00     		lsls	r3, r3, #2
 642 00da 0344     		add	r3, r3, r0
 643 00dc 1960     		str	r1, [r3]
 644              	.LBE160:
1085:ThirdParty/FreeRTOS/tasks.c **** 
1086:ThirdParty/FreeRTOS/tasks.c ****         portSETUP_TCB( pxNewTCB );
1087:ThirdParty/FreeRTOS/tasks.c ****     }
1088:ThirdParty/FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
 645              		.loc 1 1088 5
 646 00de FFF7FEFF 		bl	vPortExitCritical
1089:ThirdParty/FreeRTOS/tasks.c **** 
1090:ThirdParty/FreeRTOS/tasks.c ****     if( xSchedulerRunning != pdFALSE )
 647              		.loc 1 1090 27
 648 00e2 074B     		ldr	r3, .L27+8
 649 00e4 1B68     		ldr	r3, [r3]
 650              		.loc 1 1090 7
 651 00e6 002B     		cmp	r3, #0
 652 00e8 01D0     		beq	.L26
1091:ThirdParty/FreeRTOS/tasks.c ****     {
1092:ThirdParty/FreeRTOS/tasks.c ****         /* If the created task is of a higher priority than the current task
1093:ThirdParty/FreeRTOS/tasks.c ****          * then it should run now. */
1094:ThirdParty/FreeRTOS/tasks.c ****         if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 653              		.loc 1 1094 25
 654 00ea 044B     		ldr	r3, .L27+4
 655 00ec 1B68     		ldr	r3, [r3]
 656              	.L26:
1095:ThirdParty/FreeRTOS/tasks.c ****         {
1096:ThirdParty/FreeRTOS/tasks.c ****             taskYIELD_IF_USING_PREEMPTION();
1097:ThirdParty/FreeRTOS/tasks.c ****         }
1098:ThirdParty/FreeRTOS/tasks.c ****         else
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 35


1099:ThirdParty/FreeRTOS/tasks.c ****         {
1100:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1101:ThirdParty/FreeRTOS/tasks.c ****         }
1102:ThirdParty/FreeRTOS/tasks.c ****     }
1103:ThirdParty/FreeRTOS/tasks.c ****     else
1104:ThirdParty/FreeRTOS/tasks.c ****     {
1105:ThirdParty/FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1106:ThirdParty/FreeRTOS/tasks.c ****     }
1107:ThirdParty/FreeRTOS/tasks.c **** }
 657              		.loc 1 1107 1
 658 00ee 00BF     		nop
 659 00f0 1037     		adds	r7, r7, #16
 660              	.LCFI13:
 661              		.cfi_def_cfa_offset 8
 662 00f2 BD46     		mov	sp, r7
 663              	.LCFI14:
 664              		.cfi_def_cfa_register 13
 665              		@ sp needed
 666 00f4 80BD     		pop	{r7, pc}
 667              	.L28:
 668 00f6 00BF     		.align	2
 669              	.L27:
 670 00f8 00000000 		.word	uxCurrentNumberOfTasks
 671 00fc 00000000 		.word	pxCurrentTCB
 672 0100 00000000 		.word	xSchedulerRunning
 673 0104 00000000 		.word	uxTaskNumber
 674 0108 00000000 		.word	uxTopReadyPriority
 675 010c 00000000 		.word	pxReadyTasksLists
 676              		.cfi_endproc
 677              	.LFE7:
 679              		.section	.text.vTaskDelete,"ax",%progbits
 680              		.align	1
 681              		.global	vTaskDelete
 682              		.syntax unified
 683              		.thumb
 684              		.thumb_func
 686              	vTaskDelete:
 687              	.LFB8:
1108:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1109:ThirdParty/FreeRTOS/tasks.c **** 
1110:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1111:ThirdParty/FreeRTOS/tasks.c **** 
1112:ThirdParty/FreeRTOS/tasks.c ****     void vTaskDelete( TaskHandle_t xTaskToDelete )
1113:ThirdParty/FreeRTOS/tasks.c ****     {
 688              		.loc 1 1113 5
 689              		.cfi_startproc
 690              		@ args = 0, pretend = 0, frame = 16
 691              		@ frame_needed = 1, uses_anonymous_args = 0
 692 0000 80B5     		push	{r7, lr}
 693              	.LCFI15:
 694              		.cfi_def_cfa_offset 8
 695              		.cfi_offset 7, -8
 696              		.cfi_offset 14, -4
 697 0002 84B0     		sub	sp, sp, #16
 698              	.LCFI16:
 699              		.cfi_def_cfa_offset 24
 700 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 36


 701              	.LCFI17:
 702              		.cfi_def_cfa_register 7
 703 0006 7860     		str	r0, [r7, #4]
1114:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
1115:ThirdParty/FreeRTOS/tasks.c **** 
1116:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 704              		.loc 1 1116 9
 705 0008 FFF7FEFF 		bl	vPortEnterCritical
1117:ThirdParty/FreeRTOS/tasks.c ****         {
1118:ThirdParty/FreeRTOS/tasks.c ****             /* If null is passed in here then it is the calling task that is
1119:ThirdParty/FreeRTOS/tasks.c ****              * being deleted. */
1120:ThirdParty/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 706              		.loc 1 1120 21
 707 000c 7B68     		ldr	r3, [r7, #4]
 708 000e 002B     		cmp	r3, #0
 709 0010 02D1     		bne	.L30
 710              		.loc 1 1120 21 is_stmt 0 discriminator 1
 711 0012 3B4B     		ldr	r3, .L41
 712 0014 1B68     		ldr	r3, [r3]
 713 0016 00E0     		b	.L31
 714              	.L30:
 715              		.loc 1 1120 21 discriminator 2
 716 0018 7B68     		ldr	r3, [r7, #4]
 717              	.L31:
 718              		.loc 1 1120 19 is_stmt 1 discriminator 4
 719 001a FB60     		str	r3, [r7, #12]
1121:ThirdParty/FreeRTOS/tasks.c **** 
1122:ThirdParty/FreeRTOS/tasks.c ****             /* Remove task from the ready/delayed list. */
1123:ThirdParty/FreeRTOS/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 720              		.loc 1 1123 17 discriminator 4
 721 001c FB68     		ldr	r3, [r7, #12]
 722 001e 0433     		adds	r3, r3, #4
 723 0020 1846     		mov	r0, r3
 724 0022 FFF7FEFF 		bl	uxListRemove
 725 0026 0346     		mov	r3, r0
 726              		.loc 1 1123 15 discriminator 4
 727 0028 002B     		cmp	r3, #0
 728 002a 15D1     		bne	.L32
1124:ThirdParty/FreeRTOS/tasks.c ****             {
1125:ThirdParty/FreeRTOS/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 729              		.loc 1 1125 17
 730 002c FB68     		ldr	r3, [r7, #12]
 731 002e DA6A     		ldr	r2, [r3, #44]
 732 0030 3449     		ldr	r1, .L41+4
 733 0032 1346     		mov	r3, r2
 734 0034 9B00     		lsls	r3, r3, #2
 735 0036 1344     		add	r3, r3, r2
 736 0038 9B00     		lsls	r3, r3, #2
 737 003a 0B44     		add	r3, r3, r1
 738 003c 1B68     		ldr	r3, [r3]
 739 003e 002B     		cmp	r3, #0
 740 0040 0AD1     		bne	.L32
 741              		.loc 1 1125 17 is_stmt 0 discriminator 1
 742 0042 FB68     		ldr	r3, [r7, #12]
 743 0044 DB6A     		ldr	r3, [r3, #44]
 744 0046 0122     		movs	r2, #1
 745 0048 02FA03F3 		lsl	r3, r2, r3
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 37


 746 004c DA43     		mvns	r2, r3
 747 004e 2E4B     		ldr	r3, .L41+8
 748 0050 1B68     		ldr	r3, [r3]
 749 0052 1340     		ands	r3, r3, r2
 750 0054 2C4A     		ldr	r2, .L41+8
 751 0056 1360     		str	r3, [r2]
 752              	.L32:
1126:ThirdParty/FreeRTOS/tasks.c ****             }
1127:ThirdParty/FreeRTOS/tasks.c ****             else
1128:ThirdParty/FreeRTOS/tasks.c ****             {
1129:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1130:ThirdParty/FreeRTOS/tasks.c ****             }
1131:ThirdParty/FreeRTOS/tasks.c **** 
1132:ThirdParty/FreeRTOS/tasks.c ****             /* Is the task waiting on an event also? */
1133:ThirdParty/FreeRTOS/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 753              		.loc 1 1133 17 is_stmt 1
 754 0058 FB68     		ldr	r3, [r7, #12]
 755 005a 9B6A     		ldr	r3, [r3, #40]
 756              		.loc 1 1133 15
 757 005c 002B     		cmp	r3, #0
 758 005e 04D0     		beq	.L33
1134:ThirdParty/FreeRTOS/tasks.c ****             {
1135:ThirdParty/FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 759              		.loc 1 1135 26
 760 0060 FB68     		ldr	r3, [r7, #12]
 761 0062 1833     		adds	r3, r3, #24
 762 0064 1846     		mov	r0, r3
 763 0066 FFF7FEFF 		bl	uxListRemove
 764              	.L33:
1136:ThirdParty/FreeRTOS/tasks.c ****             }
1137:ThirdParty/FreeRTOS/tasks.c ****             else
1138:ThirdParty/FreeRTOS/tasks.c ****             {
1139:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1140:ThirdParty/FreeRTOS/tasks.c ****             }
1141:ThirdParty/FreeRTOS/tasks.c **** 
1142:ThirdParty/FreeRTOS/tasks.c ****             /* Increment the uxTaskNumber also so kernel aware debuggers can
1143:ThirdParty/FreeRTOS/tasks.c ****              * detect that the task lists need re-generating.  This is done before
1144:ThirdParty/FreeRTOS/tasks.c ****              * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1145:ThirdParty/FreeRTOS/tasks.c ****              * not return. */
1146:ThirdParty/FreeRTOS/tasks.c ****             uxTaskNumber++;
 765              		.loc 1 1146 25
 766 006a 284B     		ldr	r3, .L41+12
 767 006c 1B68     		ldr	r3, [r3]
 768 006e 0133     		adds	r3, r3, #1
 769 0070 264A     		ldr	r2, .L41+12
 770 0072 1360     		str	r3, [r2]
1147:ThirdParty/FreeRTOS/tasks.c **** 
1148:ThirdParty/FreeRTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
 771              		.loc 1 1148 23
 772 0074 224B     		ldr	r3, .L41
 773 0076 1B68     		ldr	r3, [r3]
 774              		.loc 1 1148 15
 775 0078 FA68     		ldr	r2, [r7, #12]
 776 007a 9A42     		cmp	r2, r3
 777 007c 0BD1     		bne	.L34
1149:ThirdParty/FreeRTOS/tasks.c ****             {
1150:ThirdParty/FreeRTOS/tasks.c ****                 /* A task is deleting itself.  This cannot complete within the
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 38


1151:ThirdParty/FreeRTOS/tasks.c ****                  * task itself, as a context switch to another task is required.
1152:ThirdParty/FreeRTOS/tasks.c ****                  * Place the task in the termination list.  The idle task will
1153:ThirdParty/FreeRTOS/tasks.c ****                  * check the termination list and free up any memory allocated by
1154:ThirdParty/FreeRTOS/tasks.c ****                  * the scheduler for the TCB and stack of the deleted task. */
1155:ThirdParty/FreeRTOS/tasks.c ****                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 778              		.loc 1 1155 17
 779 007e FB68     		ldr	r3, [r7, #12]
 780 0080 0433     		adds	r3, r3, #4
 781 0082 1946     		mov	r1, r3
 782 0084 2248     		ldr	r0, .L41+16
 783 0086 FFF7FEFF 		bl	vListInsertEnd
1156:ThirdParty/FreeRTOS/tasks.c **** 
1157:ThirdParty/FreeRTOS/tasks.c ****                 /* Increment the ucTasksDeleted variable so the idle task knows
1158:ThirdParty/FreeRTOS/tasks.c ****                  * there is a task that has been deleted and that it should therefore
1159:ThirdParty/FreeRTOS/tasks.c ****                  * check the xTasksWaitingTermination list. */
1160:ThirdParty/FreeRTOS/tasks.c ****                 ++uxDeletedTasksWaitingCleanUp;
 784              		.loc 1 1160 17
 785 008a 224B     		ldr	r3, .L41+20
 786 008c 1B68     		ldr	r3, [r3]
 787 008e 0133     		adds	r3, r3, #1
 788 0090 204A     		ldr	r2, .L41+20
 789 0092 1360     		str	r3, [r2]
 790 0094 06E0     		b	.L35
 791              	.L34:
1161:ThirdParty/FreeRTOS/tasks.c **** 
1162:ThirdParty/FreeRTOS/tasks.c ****                 /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1163:ThirdParty/FreeRTOS/tasks.c ****                  * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1164:ThirdParty/FreeRTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
1165:ThirdParty/FreeRTOS/tasks.c **** 
1166:ThirdParty/FreeRTOS/tasks.c ****                 /* The pre-delete hook is primarily for the Windows simulator,
1167:ThirdParty/FreeRTOS/tasks.c ****                  * in which Windows specific clean up operations are performed,
1168:ThirdParty/FreeRTOS/tasks.c ****                  * after which it is not possible to yield away from this task -
1169:ThirdParty/FreeRTOS/tasks.c ****                  * hence xYieldPending is used to latch that a context switch is
1170:ThirdParty/FreeRTOS/tasks.c ****                  * required. */
1171:ThirdParty/FreeRTOS/tasks.c ****                 portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1172:ThirdParty/FreeRTOS/tasks.c ****             }
1173:ThirdParty/FreeRTOS/tasks.c ****             else
1174:ThirdParty/FreeRTOS/tasks.c ****             {
1175:ThirdParty/FreeRTOS/tasks.c ****                 --uxCurrentNumberOfTasks;
 792              		.loc 1 1175 17
 793 0096 204B     		ldr	r3, .L41+24
 794 0098 1B68     		ldr	r3, [r3]
 795 009a 013B     		subs	r3, r3, #1
 796 009c 1E4A     		ldr	r2, .L41+24
 797 009e 1360     		str	r3, [r2]
1176:ThirdParty/FreeRTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
1177:ThirdParty/FreeRTOS/tasks.c **** 
1178:ThirdParty/FreeRTOS/tasks.c ****                 /* Reset the next expected unblock time in case it referred to
1179:ThirdParty/FreeRTOS/tasks.c ****                  * the task that has just been deleted. */
1180:ThirdParty/FreeRTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
 798              		.loc 1 1180 17
 799 00a0 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 800              	.L35:
1181:ThirdParty/FreeRTOS/tasks.c ****             }
1182:ThirdParty/FreeRTOS/tasks.c ****         }
1183:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
 801              		.loc 1 1183 9
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 39


 802 00a4 FFF7FEFF 		bl	vPortExitCritical
1184:ThirdParty/FreeRTOS/tasks.c **** 
1185:ThirdParty/FreeRTOS/tasks.c ****         /* If the task is not deleting itself, call prvDeleteTCB from outside of
1186:ThirdParty/FreeRTOS/tasks.c ****          * critical section. If a task deletes itself, prvDeleteTCB is called
1187:ThirdParty/FreeRTOS/tasks.c ****          * from prvCheckTasksWaitingTermination which is called from Idle task. */
1188:ThirdParty/FreeRTOS/tasks.c ****         if( pxTCB != pxCurrentTCB )
 803              		.loc 1 1188 19
 804 00a8 154B     		ldr	r3, .L41
 805 00aa 1B68     		ldr	r3, [r3]
 806              		.loc 1 1188 11
 807 00ac FA68     		ldr	r2, [r7, #12]
 808 00ae 9A42     		cmp	r2, r3
 809 00b0 02D0     		beq	.L36
1189:ThirdParty/FreeRTOS/tasks.c ****         {
1190:ThirdParty/FreeRTOS/tasks.c ****             prvDeleteTCB( pxTCB );
 810              		.loc 1 1190 13
 811 00b2 F868     		ldr	r0, [r7, #12]
 812 00b4 FFF7FEFF 		bl	prvDeleteTCB
 813              	.L36:
1191:ThirdParty/FreeRTOS/tasks.c ****         }
1192:ThirdParty/FreeRTOS/tasks.c **** 
1193:ThirdParty/FreeRTOS/tasks.c ****         /* Force a reschedule if it is the currently running task that has just
1194:ThirdParty/FreeRTOS/tasks.c ****          * been deleted. */
1195:ThirdParty/FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
 814              		.loc 1 1195 31
 815 00b8 184B     		ldr	r3, .L41+28
 816 00ba 1B68     		ldr	r3, [r3]
 817              		.loc 1 1195 11
 818 00bc 002B     		cmp	r3, #0
 819 00be 1BD0     		beq	.L40
1196:ThirdParty/FreeRTOS/tasks.c ****         {
1197:ThirdParty/FreeRTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
 820              		.loc 1 1197 23
 821 00c0 0F4B     		ldr	r3, .L41
 822 00c2 1B68     		ldr	r3, [r3]
 823              		.loc 1 1197 15
 824 00c4 FA68     		ldr	r2, [r7, #12]
 825 00c6 9A42     		cmp	r2, r3
 826 00c8 16D1     		bne	.L40
1198:ThirdParty/FreeRTOS/tasks.c ****             {
1199:ThirdParty/FreeRTOS/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
 827              		.loc 1 1199 17
 828 00ca 154B     		ldr	r3, .L41+32
 829 00cc 1B68     		ldr	r3, [r3]
 830 00ce 002B     		cmp	r3, #0
 831 00d0 0AD0     		beq	.L38
 832              	.LBB161:
 833              	.LBB162:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 834              		.loc 2 198 9
 835              		.syntax unified
 836              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 837 00d2 4FF05003 			mov r3, #80												
 838 00d6 83F31188 		msr basepri, r3											
 839 00da BFF36F8F 		isb														
 840 00de BFF34F8F 		dsb														
 841              	
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 40


 842              	@ 0 "" 2
 843              		.thumb
 844              		.syntax unified
 845 00e2 BB60     		str	r3, [r7, #8]
 846              		.loc 2 206 5
 847 00e4 00BF     		nop
 848              	.L39:
 849              	.LBE162:
 850              	.LBE161:
 851              		.loc 1 1199 17 discriminator 1
 852 00e6 FEE7     		b	.L39
 853              	.L38:
1200:ThirdParty/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 854              		.loc 1 1200 17
 855 00e8 0E4B     		ldr	r3, .L41+36
 856 00ea 4FF08052 		mov	r2, #268435456
 857 00ee 1A60     		str	r2, [r3]
 858              		.syntax unified
 859              	@ 1200 "ThirdParty/FreeRTOS/tasks.c" 1
 860 00f0 BFF34F8F 		dsb
 861              	@ 0 "" 2
 862              	@ 1200 "ThirdParty/FreeRTOS/tasks.c" 1
 863 00f4 BFF36F8F 		isb
 864              	@ 0 "" 2
 865              		.thumb
 866              		.syntax unified
 867              	.L40:
1201:ThirdParty/FreeRTOS/tasks.c ****             }
1202:ThirdParty/FreeRTOS/tasks.c ****             else
1203:ThirdParty/FreeRTOS/tasks.c ****             {
1204:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1205:ThirdParty/FreeRTOS/tasks.c ****             }
1206:ThirdParty/FreeRTOS/tasks.c ****         }
1207:ThirdParty/FreeRTOS/tasks.c ****     }
 868              		.loc 1 1207 5
 869 00f8 00BF     		nop
 870 00fa 1037     		adds	r7, r7, #16
 871              	.LCFI18:
 872              		.cfi_def_cfa_offset 8
 873 00fc BD46     		mov	sp, r7
 874              	.LCFI19:
 875              		.cfi_def_cfa_register 13
 876              		@ sp needed
 877 00fe 80BD     		pop	{r7, pc}
 878              	.L42:
 879              		.align	2
 880              	.L41:
 881 0100 00000000 		.word	pxCurrentTCB
 882 0104 00000000 		.word	pxReadyTasksLists
 883 0108 00000000 		.word	uxTopReadyPriority
 884 010c 00000000 		.word	uxTaskNumber
 885 0110 00000000 		.word	xTasksWaitingTermination
 886 0114 00000000 		.word	uxDeletedTasksWaitingCleanUp
 887 0118 00000000 		.word	uxCurrentNumberOfTasks
 888 011c 00000000 		.word	xSchedulerRunning
 889 0120 00000000 		.word	uxSchedulerSuspended
 890 0124 04ED00E0 		.word	-536810236
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 41


 891              		.cfi_endproc
 892              	.LFE8:
 894              		.section	.text.xTaskDelayUntil,"ax",%progbits
 895              		.align	1
 896              		.global	xTaskDelayUntil
 897              		.syntax unified
 898              		.thumb
 899              		.thumb_func
 901              	xTaskDelayUntil:
 902              	.LFB9:
1208:ThirdParty/FreeRTOS/tasks.c **** 
1209:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1210:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1211:ThirdParty/FreeRTOS/tasks.c **** 
1212:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskDelayUntil == 1 )
1213:ThirdParty/FreeRTOS/tasks.c **** 
1214:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
1215:ThirdParty/FreeRTOS/tasks.c ****                                 const TickType_t xTimeIncrement )
1216:ThirdParty/FreeRTOS/tasks.c ****     {
 903              		.loc 1 1216 5
 904              		.cfi_startproc
 905              		@ args = 0, pretend = 0, frame = 40
 906              		@ frame_needed = 1, uses_anonymous_args = 0
 907 0000 80B5     		push	{r7, lr}
 908              	.LCFI20:
 909              		.cfi_def_cfa_offset 8
 910              		.cfi_offset 7, -8
 911              		.cfi_offset 14, -4
 912 0002 8AB0     		sub	sp, sp, #40
 913              	.LCFI21:
 914              		.cfi_def_cfa_offset 48
 915 0004 00AF     		add	r7, sp, #0
 916              	.LCFI22:
 917              		.cfi_def_cfa_register 7
 918 0006 7860     		str	r0, [r7, #4]
 919 0008 3960     		str	r1, [r7]
1217:ThirdParty/FreeRTOS/tasks.c ****         TickType_t xTimeToWake;
1218:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 920              		.loc 1 1218 37
 921 000a 0023     		movs	r3, #0
 922 000c 7B62     		str	r3, [r7, #36]
1219:ThirdParty/FreeRTOS/tasks.c **** 
1220:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( pxPreviousWakeTime );
 923              		.loc 1 1220 9
 924 000e 7B68     		ldr	r3, [r7, #4]
 925 0010 002B     		cmp	r3, #0
 926 0012 0AD1     		bne	.L44
 927              	.LBB163:
 928              	.LBB164:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 929              		.loc 2 198 9
 930              		.syntax unified
 931              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 932 0014 4FF05003 			mov r3, #80												
 933 0018 83F31188 		msr basepri, r3											
 934 001c BFF36F8F 		isb														
 935 0020 BFF34F8F 		dsb														
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 42


 936              	
 937              	@ 0 "" 2
 938              		.thumb
 939              		.syntax unified
 940 0024 7B61     		str	r3, [r7, #20]
 941              		.loc 2 206 5
 942 0026 00BF     		nop
 943              	.L45:
 944              	.LBE164:
 945              	.LBE163:
 946              		.loc 1 1220 9 discriminator 1
 947 0028 FEE7     		b	.L45
 948              	.L44:
1221:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 949              		.loc 1 1221 9
 950 002a 3B68     		ldr	r3, [r7]
 951 002c 002B     		cmp	r3, #0
 952 002e 0AD1     		bne	.L46
 953              	.LBB165:
 954              	.LBB166:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 955              		.loc 2 198 9
 956              		.syntax unified
 957              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 958 0030 4FF05003 			mov r3, #80												
 959 0034 83F31188 		msr basepri, r3											
 960 0038 BFF36F8F 		isb														
 961 003c BFF34F8F 		dsb														
 962              	
 963              	@ 0 "" 2
 964              		.thumb
 965              		.syntax unified
 966 0040 3B61     		str	r3, [r7, #16]
 967              		.loc 2 206 5
 968 0042 00BF     		nop
 969              	.L47:
 970              	.LBE166:
 971              	.LBE165:
 972              		.loc 1 1221 9 discriminator 2
 973 0044 FEE7     		b	.L47
 974              	.L46:
1222:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 975              		.loc 1 1222 9
 976 0046 2A4B     		ldr	r3, .L56
 977 0048 1B68     		ldr	r3, [r3]
 978 004a 002B     		cmp	r3, #0
 979 004c 0AD0     		beq	.L48
 980              	.LBB167:
 981              	.LBB168:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 982              		.loc 2 198 9
 983              		.syntax unified
 984              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 985 004e 4FF05003 			mov r3, #80												
 986 0052 83F31188 		msr basepri, r3											
 987 0056 BFF36F8F 		isb														
 988 005a BFF34F8F 		dsb														
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 43


 989              	
 990              	@ 0 "" 2
 991              		.thumb
 992              		.syntax unified
 993 005e FB60     		str	r3, [r7, #12]
 994              		.loc 2 206 5
 995 0060 00BF     		nop
 996              	.L49:
 997              	.LBE168:
 998              	.LBE167:
 999              		.loc 1 1222 9 discriminator 3
 1000 0062 FEE7     		b	.L49
 1001              	.L48:
1223:ThirdParty/FreeRTOS/tasks.c **** 
1224:ThirdParty/FreeRTOS/tasks.c ****         vTaskSuspendAll();
 1002              		.loc 1 1224 9
 1003 0064 FFF7FEFF 		bl	vTaskSuspendAll
 1004              	.LBB169:
1225:ThirdParty/FreeRTOS/tasks.c ****         {
1226:ThirdParty/FreeRTOS/tasks.c ****             /* Minor optimisation.  The tick count cannot change in this
1227:ThirdParty/FreeRTOS/tasks.c ****              * block. */
1228:ThirdParty/FreeRTOS/tasks.c ****             const TickType_t xConstTickCount = xTickCount;
 1005              		.loc 1 1228 30
 1006 0068 224B     		ldr	r3, .L56+4
 1007 006a 1B68     		ldr	r3, [r3]
 1008 006c 3B62     		str	r3, [r7, #32]
1229:ThirdParty/FreeRTOS/tasks.c **** 
1230:ThirdParty/FreeRTOS/tasks.c ****             /* Generate the tick time at which the task wants to wake. */
1231:ThirdParty/FreeRTOS/tasks.c ****             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1009              		.loc 1 1231 27
 1010 006e 7B68     		ldr	r3, [r7, #4]
 1011 0070 1B68     		ldr	r3, [r3]
 1012              		.loc 1 1231 25
 1013 0072 3A68     		ldr	r2, [r7]
 1014 0074 1344     		add	r3, r3, r2
 1015 0076 FB61     		str	r3, [r7, #28]
1232:ThirdParty/FreeRTOS/tasks.c **** 
1233:ThirdParty/FreeRTOS/tasks.c ****             if( xConstTickCount < *pxPreviousWakeTime )
 1016              		.loc 1 1233 35
 1017 0078 7B68     		ldr	r3, [r7, #4]
 1018 007a 1B68     		ldr	r3, [r3]
 1019              		.loc 1 1233 15
 1020 007c 3A6A     		ldr	r2, [r7, #32]
 1021 007e 9A42     		cmp	r2, r3
 1022 0080 0BD2     		bcs	.L50
1234:ThirdParty/FreeRTOS/tasks.c ****             {
1235:ThirdParty/FreeRTOS/tasks.c ****                 /* The tick count has overflowed since this function was
1236:ThirdParty/FreeRTOS/tasks.c ****                  * lasted called.  In this case the only time we should ever
1237:ThirdParty/FreeRTOS/tasks.c ****                  * actually delay is if the wake time has also  overflowed,
1238:ThirdParty/FreeRTOS/tasks.c ****                  * and the wake time is greater than the tick time.  When this
1239:ThirdParty/FreeRTOS/tasks.c ****                  * is the case it is as if neither time had overflowed. */
1240:ThirdParty/FreeRTOS/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 1023              		.loc 1 1240 37
 1024 0082 7B68     		ldr	r3, [r7, #4]
 1025 0084 1B68     		ldr	r3, [r3]
 1026              		.loc 1 1240 19
 1027 0086 FA69     		ldr	r2, [r7, #28]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 44


 1028 0088 9A42     		cmp	r2, r3
 1029 008a 11D2     		bcs	.L51
 1030              		.loc 1 1240 59 discriminator 1
 1031 008c FA69     		ldr	r2, [r7, #28]
 1032 008e 3B6A     		ldr	r3, [r7, #32]
 1033 0090 9A42     		cmp	r2, r3
 1034 0092 0DD9     		bls	.L51
1241:ThirdParty/FreeRTOS/tasks.c ****                 {
1242:ThirdParty/FreeRTOS/tasks.c ****                     xShouldDelay = pdTRUE;
 1035              		.loc 1 1242 34
 1036 0094 0123     		movs	r3, #1
 1037 0096 7B62     		str	r3, [r7, #36]
 1038 0098 0AE0     		b	.L51
 1039              	.L50:
1243:ThirdParty/FreeRTOS/tasks.c ****                 }
1244:ThirdParty/FreeRTOS/tasks.c ****                 else
1245:ThirdParty/FreeRTOS/tasks.c ****                 {
1246:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1247:ThirdParty/FreeRTOS/tasks.c ****                 }
1248:ThirdParty/FreeRTOS/tasks.c ****             }
1249:ThirdParty/FreeRTOS/tasks.c ****             else
1250:ThirdParty/FreeRTOS/tasks.c ****             {
1251:ThirdParty/FreeRTOS/tasks.c ****                 /* The tick time has not overflowed.  In this case we will
1252:ThirdParty/FreeRTOS/tasks.c ****                  * delay if either the wake time has overflowed, and/or the
1253:ThirdParty/FreeRTOS/tasks.c ****                  * tick time is less than the wake time. */
1254:ThirdParty/FreeRTOS/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 1040              		.loc 1 1254 37
 1041 009a 7B68     		ldr	r3, [r7, #4]
 1042 009c 1B68     		ldr	r3, [r3]
 1043              		.loc 1 1254 19
 1044 009e FA69     		ldr	r2, [r7, #28]
 1045 00a0 9A42     		cmp	r2, r3
 1046 00a2 03D3     		bcc	.L52
 1047              		.loc 1 1254 59 discriminator 1
 1048 00a4 FA69     		ldr	r2, [r7, #28]
 1049 00a6 3B6A     		ldr	r3, [r7, #32]
 1050 00a8 9A42     		cmp	r2, r3
 1051 00aa 01D9     		bls	.L51
 1052              	.L52:
1255:ThirdParty/FreeRTOS/tasks.c ****                 {
1256:ThirdParty/FreeRTOS/tasks.c ****                     xShouldDelay = pdTRUE;
 1053              		.loc 1 1256 34
 1054 00ac 0123     		movs	r3, #1
 1055 00ae 7B62     		str	r3, [r7, #36]
 1056              	.L51:
1257:ThirdParty/FreeRTOS/tasks.c ****                 }
1258:ThirdParty/FreeRTOS/tasks.c ****                 else
1259:ThirdParty/FreeRTOS/tasks.c ****                 {
1260:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1261:ThirdParty/FreeRTOS/tasks.c ****                 }
1262:ThirdParty/FreeRTOS/tasks.c ****             }
1263:ThirdParty/FreeRTOS/tasks.c **** 
1264:ThirdParty/FreeRTOS/tasks.c ****             /* Update the wake time ready for the next call. */
1265:ThirdParty/FreeRTOS/tasks.c ****             *pxPreviousWakeTime = xTimeToWake;
 1057              		.loc 1 1265 33
 1058 00b0 7B68     		ldr	r3, [r7, #4]
 1059 00b2 FA69     		ldr	r2, [r7, #28]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 45


 1060 00b4 1A60     		str	r2, [r3]
1266:ThirdParty/FreeRTOS/tasks.c **** 
1267:ThirdParty/FreeRTOS/tasks.c ****             if( xShouldDelay != pdFALSE )
 1061              		.loc 1 1267 15
 1062 00b6 7B6A     		ldr	r3, [r7, #36]
 1063 00b8 002B     		cmp	r3, #0
 1064 00ba 06D0     		beq	.L53
1268:ThirdParty/FreeRTOS/tasks.c ****             {
1269:ThirdParty/FreeRTOS/tasks.c ****                 traceTASK_DELAY_UNTIL( xTimeToWake );
1270:ThirdParty/FreeRTOS/tasks.c **** 
1271:ThirdParty/FreeRTOS/tasks.c ****                 /* prvAddCurrentTaskToDelayedList() needs the block time, not
1272:ThirdParty/FreeRTOS/tasks.c ****                  * the time to wake, so subtract the current tick count. */
1273:ThirdParty/FreeRTOS/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 1065              		.loc 1 1273 17
 1066 00bc FA69     		ldr	r2, [r7, #28]
 1067 00be 3B6A     		ldr	r3, [r7, #32]
 1068 00c0 D31A     		subs	r3, r2, r3
 1069 00c2 0021     		movs	r1, #0
 1070 00c4 1846     		mov	r0, r3
 1071 00c6 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 1072              	.L53:
 1073              	.LBE169:
1274:ThirdParty/FreeRTOS/tasks.c ****             }
1275:ThirdParty/FreeRTOS/tasks.c ****             else
1276:ThirdParty/FreeRTOS/tasks.c ****             {
1277:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1278:ThirdParty/FreeRTOS/tasks.c ****             }
1279:ThirdParty/FreeRTOS/tasks.c ****         }
1280:ThirdParty/FreeRTOS/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
 1074              		.loc 1 1280 27
 1075 00ca FFF7FEFF 		bl	xTaskResumeAll
 1076 00ce B861     		str	r0, [r7, #24]
1281:ThirdParty/FreeRTOS/tasks.c **** 
1282:ThirdParty/FreeRTOS/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1283:ThirdParty/FreeRTOS/tasks.c ****          * have put ourselves to sleep. */
1284:ThirdParty/FreeRTOS/tasks.c ****         if( xAlreadyYielded == pdFALSE )
 1077              		.loc 1 1284 11
 1078 00d0 BB69     		ldr	r3, [r7, #24]
 1079 00d2 002B     		cmp	r3, #0
 1080 00d4 07D1     		bne	.L54
1285:ThirdParty/FreeRTOS/tasks.c ****         {
1286:ThirdParty/FreeRTOS/tasks.c ****             portYIELD_WITHIN_API();
 1081              		.loc 1 1286 13
 1082 00d6 084B     		ldr	r3, .L56+8
 1083 00d8 4FF08052 		mov	r2, #268435456
 1084 00dc 1A60     		str	r2, [r3]
 1085              		.syntax unified
 1086              	@ 1286 "ThirdParty/FreeRTOS/tasks.c" 1
 1087 00de BFF34F8F 		dsb
 1088              	@ 0 "" 2
 1089              	@ 1286 "ThirdParty/FreeRTOS/tasks.c" 1
 1090 00e2 BFF36F8F 		isb
 1091              	@ 0 "" 2
 1092              		.thumb
 1093              		.syntax unified
 1094              	.L54:
1287:ThirdParty/FreeRTOS/tasks.c ****         }
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 46


1288:ThirdParty/FreeRTOS/tasks.c ****         else
1289:ThirdParty/FreeRTOS/tasks.c ****         {
1290:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1291:ThirdParty/FreeRTOS/tasks.c ****         }
1292:ThirdParty/FreeRTOS/tasks.c **** 
1293:ThirdParty/FreeRTOS/tasks.c ****         return xShouldDelay;
 1095              		.loc 1 1293 16
 1096 00e6 7B6A     		ldr	r3, [r7, #36]
1294:ThirdParty/FreeRTOS/tasks.c ****     }
 1097              		.loc 1 1294 5
 1098 00e8 1846     		mov	r0, r3
 1099 00ea 2837     		adds	r7, r7, #40
 1100              	.LCFI23:
 1101              		.cfi_def_cfa_offset 8
 1102 00ec BD46     		mov	sp, r7
 1103              	.LCFI24:
 1104              		.cfi_def_cfa_register 13
 1105              		@ sp needed
 1106 00ee 80BD     		pop	{r7, pc}
 1107              	.L57:
 1108              		.align	2
 1109              	.L56:
 1110 00f0 00000000 		.word	uxSchedulerSuspended
 1111 00f4 00000000 		.word	xTickCount
 1112 00f8 04ED00E0 		.word	-536810236
 1113              		.cfi_endproc
 1114              	.LFE9:
 1116              		.section	.text.vTaskDelay,"ax",%progbits
 1117              		.align	1
 1118              		.global	vTaskDelay
 1119              		.syntax unified
 1120              		.thumb
 1121              		.thumb_func
 1123              	vTaskDelay:
 1124              	.LFB10:
1295:ThirdParty/FreeRTOS/tasks.c **** 
1296:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskDelayUntil */
1297:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1298:ThirdParty/FreeRTOS/tasks.c **** 
1299:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1300:ThirdParty/FreeRTOS/tasks.c **** 
1301:ThirdParty/FreeRTOS/tasks.c ****     void vTaskDelay( const TickType_t xTicksToDelay )
1302:ThirdParty/FreeRTOS/tasks.c ****     {
 1125              		.loc 1 1302 5
 1126              		.cfi_startproc
 1127              		@ args = 0, pretend = 0, frame = 16
 1128              		@ frame_needed = 1, uses_anonymous_args = 0
 1129 0000 80B5     		push	{r7, lr}
 1130              	.LCFI25:
 1131              		.cfi_def_cfa_offset 8
 1132              		.cfi_offset 7, -8
 1133              		.cfi_offset 14, -4
 1134 0002 84B0     		sub	sp, sp, #16
 1135              	.LCFI26:
 1136              		.cfi_def_cfa_offset 24
 1137 0004 00AF     		add	r7, sp, #0
 1138              	.LCFI27:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 47


 1139              		.cfi_def_cfa_register 7
 1140 0006 7860     		str	r0, [r7, #4]
1303:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 1141              		.loc 1 1303 20
 1142 0008 0023     		movs	r3, #0
 1143 000a FB60     		str	r3, [r7, #12]
1304:ThirdParty/FreeRTOS/tasks.c **** 
1305:ThirdParty/FreeRTOS/tasks.c ****         /* A delay time of zero just forces a reschedule. */
1306:ThirdParty/FreeRTOS/tasks.c ****         if( xTicksToDelay > ( TickType_t ) 0U )
 1144              		.loc 1 1306 11
 1145 000c 7B68     		ldr	r3, [r7, #4]
 1146 000e 002B     		cmp	r3, #0
 1147 0010 17D0     		beq	.L59
1307:ThirdParty/FreeRTOS/tasks.c ****         {
1308:ThirdParty/FreeRTOS/tasks.c ****             configASSERT( uxSchedulerSuspended == 0 );
 1148              		.loc 1 1308 13
 1149 0012 134B     		ldr	r3, .L64
 1150 0014 1B68     		ldr	r3, [r3]
 1151 0016 002B     		cmp	r3, #0
 1152 0018 0AD0     		beq	.L60
 1153              	.LBB170:
 1154              	.LBB171:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1155              		.loc 2 198 9
 1156              		.syntax unified
 1157              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1158 001a 4FF05003 			mov r3, #80												
 1159 001e 83F31188 		msr basepri, r3											
 1160 0022 BFF36F8F 		isb														
 1161 0026 BFF34F8F 		dsb														
 1162              	
 1163              	@ 0 "" 2
 1164              		.thumb
 1165              		.syntax unified
 1166 002a BB60     		str	r3, [r7, #8]
 1167              		.loc 2 206 5
 1168 002c 00BF     		nop
 1169              	.L61:
 1170              	.LBE171:
 1171              	.LBE170:
 1172              		.loc 1 1308 13 discriminator 1
 1173 002e FEE7     		b	.L61
 1174              	.L60:
1309:ThirdParty/FreeRTOS/tasks.c ****             vTaskSuspendAll();
 1175              		.loc 1 1309 13
 1176 0030 FFF7FEFF 		bl	vTaskSuspendAll
1310:ThirdParty/FreeRTOS/tasks.c ****             {
1311:ThirdParty/FreeRTOS/tasks.c ****                 traceTASK_DELAY();
1312:ThirdParty/FreeRTOS/tasks.c **** 
1313:ThirdParty/FreeRTOS/tasks.c ****                 /* A task that is removed from the event list while the
1314:ThirdParty/FreeRTOS/tasks.c ****                  * scheduler is suspended will not get placed in the ready
1315:ThirdParty/FreeRTOS/tasks.c ****                  * list or removed from the blocked list until the scheduler
1316:ThirdParty/FreeRTOS/tasks.c ****                  * is resumed.
1317:ThirdParty/FreeRTOS/tasks.c ****                  *
1318:ThirdParty/FreeRTOS/tasks.c ****                  * This task cannot be in an event list as it is the currently
1319:ThirdParty/FreeRTOS/tasks.c ****                  * executing task. */
1320:ThirdParty/FreeRTOS/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 48


 1177              		.loc 1 1320 17
 1178 0034 0021     		movs	r1, #0
 1179 0036 7868     		ldr	r0, [r7, #4]
 1180 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1321:ThirdParty/FreeRTOS/tasks.c ****             }
1322:ThirdParty/FreeRTOS/tasks.c ****             xAlreadyYielded = xTaskResumeAll();
 1181              		.loc 1 1322 31
 1182 003c FFF7FEFF 		bl	xTaskResumeAll
 1183 0040 F860     		str	r0, [r7, #12]
 1184              	.L59:
1323:ThirdParty/FreeRTOS/tasks.c ****         }
1324:ThirdParty/FreeRTOS/tasks.c ****         else
1325:ThirdParty/FreeRTOS/tasks.c ****         {
1326:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1327:ThirdParty/FreeRTOS/tasks.c ****         }
1328:ThirdParty/FreeRTOS/tasks.c **** 
1329:ThirdParty/FreeRTOS/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1330:ThirdParty/FreeRTOS/tasks.c ****          * have put ourselves to sleep. */
1331:ThirdParty/FreeRTOS/tasks.c ****         if( xAlreadyYielded == pdFALSE )
 1185              		.loc 1 1331 11
 1186 0042 FB68     		ldr	r3, [r7, #12]
 1187 0044 002B     		cmp	r3, #0
 1188 0046 07D1     		bne	.L63
1332:ThirdParty/FreeRTOS/tasks.c ****         {
1333:ThirdParty/FreeRTOS/tasks.c ****             portYIELD_WITHIN_API();
 1189              		.loc 1 1333 13
 1190 0048 064B     		ldr	r3, .L64+4
 1191 004a 4FF08052 		mov	r2, #268435456
 1192 004e 1A60     		str	r2, [r3]
 1193              		.syntax unified
 1194              	@ 1333 "ThirdParty/FreeRTOS/tasks.c" 1
 1195 0050 BFF34F8F 		dsb
 1196              	@ 0 "" 2
 1197              	@ 1333 "ThirdParty/FreeRTOS/tasks.c" 1
 1198 0054 BFF36F8F 		isb
 1199              	@ 0 "" 2
 1200              		.thumb
 1201              		.syntax unified
 1202              	.L63:
1334:ThirdParty/FreeRTOS/tasks.c ****         }
1335:ThirdParty/FreeRTOS/tasks.c ****         else
1336:ThirdParty/FreeRTOS/tasks.c ****         {
1337:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1338:ThirdParty/FreeRTOS/tasks.c ****         }
1339:ThirdParty/FreeRTOS/tasks.c ****     }
 1203              		.loc 1 1339 5
 1204 0058 00BF     		nop
 1205 005a 1037     		adds	r7, r7, #16
 1206              	.LCFI28:
 1207              		.cfi_def_cfa_offset 8
 1208 005c BD46     		mov	sp, r7
 1209              	.LCFI29:
 1210              		.cfi_def_cfa_register 13
 1211              		@ sp needed
 1212 005e 80BD     		pop	{r7, pc}
 1213              	.L65:
 1214              		.align	2
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 49


 1215              	.L64:
 1216 0060 00000000 		.word	uxSchedulerSuspended
 1217 0064 04ED00E0 		.word	-536810236
 1218              		.cfi_endproc
 1219              	.LFE10:
 1221              		.section	.text.eTaskGetState,"ax",%progbits
 1222              		.align	1
 1223              		.global	eTaskGetState
 1224              		.syntax unified
 1225              		.thumb
 1226              		.thumb_func
 1228              	eTaskGetState:
 1229              	.LFB11:
1340:ThirdParty/FreeRTOS/tasks.c **** 
1341:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1342:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1343:ThirdParty/FreeRTOS/tasks.c **** 
1344:ThirdParty/FreeRTOS/tasks.c **** #if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDe
1345:ThirdParty/FreeRTOS/tasks.c **** 
1346:ThirdParty/FreeRTOS/tasks.c ****     eTaskState eTaskGetState( TaskHandle_t xTask )
1347:ThirdParty/FreeRTOS/tasks.c ****     {
 1230              		.loc 1 1347 5
 1231              		.cfi_startproc
 1232              		@ args = 0, pretend = 0, frame = 40
 1233              		@ frame_needed = 1, uses_anonymous_args = 0
 1234 0000 80B5     		push	{r7, lr}
 1235              	.LCFI30:
 1236              		.cfi_def_cfa_offset 8
 1237              		.cfi_offset 7, -8
 1238              		.cfi_offset 14, -4
 1239 0002 8AB0     		sub	sp, sp, #40
 1240              	.LCFI31:
 1241              		.cfi_def_cfa_offset 48
 1242 0004 00AF     		add	r7, sp, #0
 1243              	.LCFI32:
 1244              		.cfi_def_cfa_register 7
 1245 0006 7860     		str	r0, [r7, #4]
1348:ThirdParty/FreeRTOS/tasks.c ****         eTaskState eReturn;
1349:ThirdParty/FreeRTOS/tasks.c ****         List_t const * pxStateList;
1350:ThirdParty/FreeRTOS/tasks.c ****         List_t const * pxDelayedList;
1351:ThirdParty/FreeRTOS/tasks.c ****         List_t const * pxOverflowedDelayedList;
1352:ThirdParty/FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
 1246              		.loc 1 1352 29
 1247 0008 7B68     		ldr	r3, [r7, #4]
 1248 000a FB61     		str	r3, [r7, #28]
1353:ThirdParty/FreeRTOS/tasks.c **** 
1354:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( pxTCB );
 1249              		.loc 1 1354 9
 1250 000c FB69     		ldr	r3, [r7, #28]
 1251 000e 002B     		cmp	r3, #0
 1252 0010 0AD1     		bne	.L67
 1253              	.LBB172:
 1254              	.LBB173:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1255              		.loc 2 198 9
 1256              		.syntax unified
 1257              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 50


 1258 0012 4FF05003 			mov r3, #80												
 1259 0016 83F31188 		msr basepri, r3											
 1260 001a BFF36F8F 		isb														
 1261 001e BFF34F8F 		dsb														
 1262              	
 1263              	@ 0 "" 2
 1264              		.thumb
 1265              		.syntax unified
 1266 0022 FB60     		str	r3, [r7, #12]
 1267              		.loc 2 206 5
 1268 0024 00BF     		nop
 1269              	.L68:
 1270              	.LBE173:
 1271              	.LBE172:
 1272              		.loc 1 1354 9 discriminator 1
 1273 0026 FEE7     		b	.L68
 1274              	.L67:
1355:ThirdParty/FreeRTOS/tasks.c **** 
1356:ThirdParty/FreeRTOS/tasks.c ****         if( pxTCB == pxCurrentTCB )
 1275              		.loc 1 1356 19
 1276 0028 2D4B     		ldr	r3, .L82
 1277 002a 1B68     		ldr	r3, [r3]
 1278              		.loc 1 1356 11
 1279 002c FA69     		ldr	r2, [r7, #28]
 1280 002e 9A42     		cmp	r2, r3
 1281 0030 03D1     		bne	.L69
1357:ThirdParty/FreeRTOS/tasks.c ****         {
1358:ThirdParty/FreeRTOS/tasks.c ****             /* The task calling this function is querying its own state. */
1359:ThirdParty/FreeRTOS/tasks.c ****             eReturn = eRunning;
 1282              		.loc 1 1359 21
 1283 0032 0023     		movs	r3, #0
 1284 0034 87F82730 		strb	r3, [r7, #39]
 1285 0038 4BE0     		b	.L70
 1286              	.L69:
1360:ThirdParty/FreeRTOS/tasks.c ****         }
1361:ThirdParty/FreeRTOS/tasks.c ****         else
1362:ThirdParty/FreeRTOS/tasks.c ****         {
1363:ThirdParty/FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
 1287              		.loc 1 1363 13
 1288 003a FFF7FEFF 		bl	vPortEnterCritical
1364:ThirdParty/FreeRTOS/tasks.c ****             {
1365:ThirdParty/FreeRTOS/tasks.c ****                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1289              		.loc 1 1365 29
 1290 003e FB69     		ldr	r3, [r7, #28]
 1291 0040 5B69     		ldr	r3, [r3, #20]
 1292 0042 BB61     		str	r3, [r7, #24]
1366:ThirdParty/FreeRTOS/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
 1293              		.loc 1 1366 31
 1294 0044 274B     		ldr	r3, .L82+4
 1295 0046 1B68     		ldr	r3, [r3]
 1296 0048 7B61     		str	r3, [r7, #20]
1367:ThirdParty/FreeRTOS/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1297              		.loc 1 1367 41
 1298 004a 274B     		ldr	r3, .L82+8
 1299 004c 1B68     		ldr	r3, [r3]
 1300 004e 3B61     		str	r3, [r7, #16]
1368:ThirdParty/FreeRTOS/tasks.c ****             }
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 51


1369:ThirdParty/FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
 1301              		.loc 1 1369 13
 1302 0050 FFF7FEFF 		bl	vPortExitCritical
1370:ThirdParty/FreeRTOS/tasks.c **** 
1371:ThirdParty/FreeRTOS/tasks.c ****             if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 1303              		.loc 1 1371 15
 1304 0054 BA69     		ldr	r2, [r7, #24]
 1305 0056 7B69     		ldr	r3, [r7, #20]
 1306 0058 9A42     		cmp	r2, r3
 1307 005a 03D0     		beq	.L71
 1308              		.loc 1 1371 50 discriminator 1
 1309 005c BA69     		ldr	r2, [r7, #24]
 1310 005e 3B69     		ldr	r3, [r7, #16]
 1311 0060 9A42     		cmp	r2, r3
 1312 0062 03D1     		bne	.L72
 1313              	.L71:
1372:ThirdParty/FreeRTOS/tasks.c ****             {
1373:ThirdParty/FreeRTOS/tasks.c ****                 /* The task being queried is referenced from one of the Blocked
1374:ThirdParty/FreeRTOS/tasks.c ****                  * lists. */
1375:ThirdParty/FreeRTOS/tasks.c ****                 eReturn = eBlocked;
 1314              		.loc 1 1375 25
 1315 0064 0223     		movs	r3, #2
 1316 0066 87F82730 		strb	r3, [r7, #39]
 1317 006a 32E0     		b	.L70
 1318              	.L72:
1376:ThirdParty/FreeRTOS/tasks.c ****             }
1377:ThirdParty/FreeRTOS/tasks.c **** 
1378:ThirdParty/FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
1379:ThirdParty/FreeRTOS/tasks.c ****                 else if( pxStateList == &xSuspendedTaskList )
 1319              		.loc 1 1379 24
 1320 006c BB69     		ldr	r3, [r7, #24]
 1321 006e 1F4A     		ldr	r2, .L82+12
 1322 0070 9342     		cmp	r3, r2
 1323 0072 20D1     		bne	.L73
1380:ThirdParty/FreeRTOS/tasks.c ****                 {
1381:ThirdParty/FreeRTOS/tasks.c ****                     /* The task being queried is referenced from the suspended
1382:ThirdParty/FreeRTOS/tasks.c ****                      * list.  Is it genuinely suspended or is it blocked
1383:ThirdParty/FreeRTOS/tasks.c ****                      * indefinitely? */
1384:ThirdParty/FreeRTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1324              		.loc 1 1384 25
 1325 0074 FB69     		ldr	r3, [r7, #28]
 1326 0076 9B6A     		ldr	r3, [r3, #40]
 1327              		.loc 1 1384 23
 1328 0078 002B     		cmp	r3, #0
 1329 007a 18D1     		bne	.L74
 1330              	.LBB174:
1385:ThirdParty/FreeRTOS/tasks.c ****                     {
1386:ThirdParty/FreeRTOS/tasks.c ****                         #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1387:ThirdParty/FreeRTOS/tasks.c ****                         {
1388:ThirdParty/FreeRTOS/tasks.c ****                             BaseType_t x;
1389:ThirdParty/FreeRTOS/tasks.c **** 
1390:ThirdParty/FreeRTOS/tasks.c ****                             /* The task does not appear on the event list item of
1391:ThirdParty/FreeRTOS/tasks.c ****                              * and of the RTOS objects, but could still be in the
1392:ThirdParty/FreeRTOS/tasks.c ****                              * blocked state if it is waiting on its notification
1393:ThirdParty/FreeRTOS/tasks.c ****                              * rather than waiting on an object.  If not, is
1394:ThirdParty/FreeRTOS/tasks.c ****                              * suspended. */
1395:ThirdParty/FreeRTOS/tasks.c ****                             eReturn = eSuspended;
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 52


 1331              		.loc 1 1395 37
 1332 007c 0323     		movs	r3, #3
 1333 007e 87F82730 		strb	r3, [r7, #39]
1396:ThirdParty/FreeRTOS/tasks.c **** 
1397:ThirdParty/FreeRTOS/tasks.c ****                             for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 1334              		.loc 1 1397 36
 1335 0082 0023     		movs	r3, #0
 1336 0084 3B62     		str	r3, [r7, #32]
 1337              		.loc 1 1397 29
 1338 0086 0EE0     		b	.L75
 1339              	.L78:
1398:ThirdParty/FreeRTOS/tasks.c ****                             {
1399:ThirdParty/FreeRTOS/tasks.c ****                                 if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 1340              		.loc 1 1399 57
 1341 0088 FA69     		ldr	r2, [r7, #28]
 1342 008a 3B6A     		ldr	r3, [r7, #32]
 1343 008c 1344     		add	r3, r3, r2
 1344 008e 5433     		adds	r3, r3, #84
 1345 0090 1B78     		ldrb	r3, [r3]
 1346 0092 DBB2     		uxtb	r3, r3
 1347              		.loc 1 1399 35
 1348 0094 012B     		cmp	r3, #1
 1349 0096 03D1     		bne	.L76
1400:ThirdParty/FreeRTOS/tasks.c ****                                 {
1401:ThirdParty/FreeRTOS/tasks.c ****                                     eReturn = eBlocked;
 1350              		.loc 1 1401 45
 1351 0098 0223     		movs	r3, #2
 1352 009a 87F82730 		strb	r3, [r7, #39]
1402:ThirdParty/FreeRTOS/tasks.c ****                                     break;
 1353              		.loc 1 1402 37
 1354 009e 18E0     		b	.L70
 1355              	.L76:
1397:ThirdParty/FreeRTOS/tasks.c ****                             {
 1356              		.loc 1 1397 85 discriminator 2
 1357 00a0 3B6A     		ldr	r3, [r7, #32]
 1358 00a2 0133     		adds	r3, r3, #1
 1359 00a4 3B62     		str	r3, [r7, #32]
 1360              	.L75:
1397:ThirdParty/FreeRTOS/tasks.c ****                             {
 1361              		.loc 1 1397 29 discriminator 1
 1362 00a6 3B6A     		ldr	r3, [r7, #32]
 1363 00a8 002B     		cmp	r3, #0
 1364 00aa EDDD     		ble	.L78
 1365 00ac 11E0     		b	.L70
 1366              	.L74:
 1367              	.LBE174:
1403:ThirdParty/FreeRTOS/tasks.c ****                                 }
1404:ThirdParty/FreeRTOS/tasks.c ****                             }
1405:ThirdParty/FreeRTOS/tasks.c ****                         }
1406:ThirdParty/FreeRTOS/tasks.c ****                         #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1407:ThirdParty/FreeRTOS/tasks.c ****                         {
1408:ThirdParty/FreeRTOS/tasks.c ****                             eReturn = eSuspended;
1409:ThirdParty/FreeRTOS/tasks.c ****                         }
1410:ThirdParty/FreeRTOS/tasks.c ****                         #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1411:ThirdParty/FreeRTOS/tasks.c ****                     }
1412:ThirdParty/FreeRTOS/tasks.c ****                     else
1413:ThirdParty/FreeRTOS/tasks.c ****                     {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 53


1414:ThirdParty/FreeRTOS/tasks.c ****                         eReturn = eBlocked;
 1368              		.loc 1 1414 33
 1369 00ae 0223     		movs	r3, #2
 1370 00b0 87F82730 		strb	r3, [r7, #39]
 1371 00b4 0DE0     		b	.L70
 1372              	.L73:
1415:ThirdParty/FreeRTOS/tasks.c ****                     }
1416:ThirdParty/FreeRTOS/tasks.c ****                 }
1417:ThirdParty/FreeRTOS/tasks.c ****             #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */
1418:ThirdParty/FreeRTOS/tasks.c **** 
1419:ThirdParty/FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
1420:ThirdParty/FreeRTOS/tasks.c ****                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1373              		.loc 1 1420 24
 1374 00b6 BB69     		ldr	r3, [r7, #24]
 1375 00b8 0D4A     		ldr	r2, .L82+16
 1376 00ba 9342     		cmp	r3, r2
 1377 00bc 02D0     		beq	.L79
 1378              		.loc 1 1420 71 discriminator 1
 1379 00be BB69     		ldr	r3, [r7, #24]
 1380 00c0 002B     		cmp	r3, #0
 1381 00c2 03D1     		bne	.L80
 1382              	.L79:
1421:ThirdParty/FreeRTOS/tasks.c ****                 {
1422:ThirdParty/FreeRTOS/tasks.c ****                     /* The task being queried is referenced from the deleted
1423:ThirdParty/FreeRTOS/tasks.c ****                      * tasks list, or it is not referenced from any lists at
1424:ThirdParty/FreeRTOS/tasks.c ****                      * all. */
1425:ThirdParty/FreeRTOS/tasks.c ****                     eReturn = eDeleted;
 1383              		.loc 1 1425 29
 1384 00c4 0423     		movs	r3, #4
 1385 00c6 87F82730 		strb	r3, [r7, #39]
 1386 00ca 02E0     		b	.L70
 1387              	.L80:
1426:ThirdParty/FreeRTOS/tasks.c ****                 }
1427:ThirdParty/FreeRTOS/tasks.c ****             #endif
1428:ThirdParty/FreeRTOS/tasks.c **** 
1429:ThirdParty/FreeRTOS/tasks.c ****             else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer
1430:ThirdParty/FreeRTOS/tasks.c ****             {
1431:ThirdParty/FreeRTOS/tasks.c ****                 /* If the task is not in any other state, it must be in the
1432:ThirdParty/FreeRTOS/tasks.c ****                  * Ready (including pending ready) state. */
1433:ThirdParty/FreeRTOS/tasks.c ****                 eReturn = eReady;
 1388              		.loc 1 1433 25
 1389 00cc 0123     		movs	r3, #1
 1390 00ce 87F82730 		strb	r3, [r7, #39]
 1391              	.L70:
1434:ThirdParty/FreeRTOS/tasks.c ****             }
1435:ThirdParty/FreeRTOS/tasks.c ****         }
1436:ThirdParty/FreeRTOS/tasks.c **** 
1437:ThirdParty/FreeRTOS/tasks.c ****         return eReturn;
 1392              		.loc 1 1437 16
 1393 00d2 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
1438:ThirdParty/FreeRTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1394              		.loc 1 1438 5
 1395 00d6 1846     		mov	r0, r3
 1396 00d8 2837     		adds	r7, r7, #40
 1397              	.LCFI33:
 1398              		.cfi_def_cfa_offset 8
 1399 00da BD46     		mov	sp, r7
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 54


 1400              	.LCFI34:
 1401              		.cfi_def_cfa_register 13
 1402              		@ sp needed
 1403 00dc 80BD     		pop	{r7, pc}
 1404              	.L83:
 1405 00de 00BF     		.align	2
 1406              	.L82:
 1407 00e0 00000000 		.word	pxCurrentTCB
 1408 00e4 00000000 		.word	pxDelayedTaskList
 1409 00e8 00000000 		.word	pxOverflowDelayedTaskList
 1410 00ec 00000000 		.word	xSuspendedTaskList
 1411 00f0 00000000 		.word	xTasksWaitingTermination
 1412              		.cfi_endproc
 1413              	.LFE11:
 1415              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1416              		.align	1
 1417              		.global	uxTaskPriorityGet
 1418              		.syntax unified
 1419              		.thumb
 1420              		.thumb_func
 1422              	uxTaskPriorityGet:
 1423              	.LFB12:
1439:ThirdParty/FreeRTOS/tasks.c **** 
1440:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1441:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1442:ThirdParty/FreeRTOS/tasks.c **** 
1443:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1444:ThirdParty/FreeRTOS/tasks.c **** 
1445:ThirdParty/FreeRTOS/tasks.c ****     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1446:ThirdParty/FreeRTOS/tasks.c ****     {
 1424              		.loc 1 1446 5
 1425              		.cfi_startproc
 1426              		@ args = 0, pretend = 0, frame = 16
 1427              		@ frame_needed = 1, uses_anonymous_args = 0
 1428 0000 80B5     		push	{r7, lr}
 1429              	.LCFI35:
 1430              		.cfi_def_cfa_offset 8
 1431              		.cfi_offset 7, -8
 1432              		.cfi_offset 14, -4
 1433 0002 84B0     		sub	sp, sp, #16
 1434              	.LCFI36:
 1435              		.cfi_def_cfa_offset 24
 1436 0004 00AF     		add	r7, sp, #0
 1437              	.LCFI37:
 1438              		.cfi_def_cfa_register 7
 1439 0006 7860     		str	r0, [r7, #4]
1447:ThirdParty/FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
1448:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
1449:ThirdParty/FreeRTOS/tasks.c **** 
1450:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 1440              		.loc 1 1450 9
 1441 0008 FFF7FEFF 		bl	vPortEnterCritical
1451:ThirdParty/FreeRTOS/tasks.c ****         {
1452:ThirdParty/FreeRTOS/tasks.c ****             /* If null is passed in here then it is the priority of the task
1453:ThirdParty/FreeRTOS/tasks.c ****              * that called uxTaskPriorityGet() that is being queried. */
1454:ThirdParty/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
 1442              		.loc 1 1454 21
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 55


 1443 000c 7B68     		ldr	r3, [r7, #4]
 1444 000e 002B     		cmp	r3, #0
 1445 0010 02D1     		bne	.L85
 1446              		.loc 1 1454 21 is_stmt 0 discriminator 1
 1447 0012 074B     		ldr	r3, .L88
 1448 0014 1B68     		ldr	r3, [r3]
 1449 0016 00E0     		b	.L86
 1450              	.L85:
 1451              		.loc 1 1454 21 discriminator 2
 1452 0018 7B68     		ldr	r3, [r7, #4]
 1453              	.L86:
 1454              		.loc 1 1454 19 is_stmt 1 discriminator 4
 1455 001a FB60     		str	r3, [r7, #12]
1455:ThirdParty/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1456              		.loc 1 1455 22 discriminator 4
 1457 001c FB68     		ldr	r3, [r7, #12]
 1458 001e DB6A     		ldr	r3, [r3, #44]
 1459 0020 BB60     		str	r3, [r7, #8]
1456:ThirdParty/FreeRTOS/tasks.c ****         }
1457:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
 1460              		.loc 1 1457 9 discriminator 4
 1461 0022 FFF7FEFF 		bl	vPortExitCritical
1458:ThirdParty/FreeRTOS/tasks.c **** 
1459:ThirdParty/FreeRTOS/tasks.c ****         return uxReturn;
 1462              		.loc 1 1459 16 discriminator 4
 1463 0026 BB68     		ldr	r3, [r7, #8]
1460:ThirdParty/FreeRTOS/tasks.c ****     }
 1464              		.loc 1 1460 5 discriminator 4
 1465 0028 1846     		mov	r0, r3
 1466 002a 1037     		adds	r7, r7, #16
 1467              	.LCFI38:
 1468              		.cfi_def_cfa_offset 8
 1469 002c BD46     		mov	sp, r7
 1470              	.LCFI39:
 1471              		.cfi_def_cfa_register 13
 1472              		@ sp needed
 1473 002e 80BD     		pop	{r7, pc}
 1474              	.L89:
 1475              		.align	2
 1476              	.L88:
 1477 0030 00000000 		.word	pxCurrentTCB
 1478              		.cfi_endproc
 1479              	.LFE12:
 1481              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1482              		.align	1
 1483              		.global	uxTaskPriorityGetFromISR
 1484              		.syntax unified
 1485              		.thumb
 1486              		.thumb_func
 1488              	uxTaskPriorityGetFromISR:
 1489              	.LFB13:
1461:ThirdParty/FreeRTOS/tasks.c **** 
1462:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1463:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1464:ThirdParty/FreeRTOS/tasks.c **** 
1465:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1466:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 56


1467:ThirdParty/FreeRTOS/tasks.c ****     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1468:ThirdParty/FreeRTOS/tasks.c ****     {
 1490              		.loc 1 1468 5
 1491              		.cfi_startproc
 1492              		@ args = 0, pretend = 0, frame = 32
 1493              		@ frame_needed = 1, uses_anonymous_args = 0
 1494 0000 80B5     		push	{r7, lr}
 1495              	.LCFI40:
 1496              		.cfi_def_cfa_offset 8
 1497              		.cfi_offset 7, -8
 1498              		.cfi_offset 14, -4
 1499 0002 88B0     		sub	sp, sp, #32
 1500              	.LCFI41:
 1501              		.cfi_def_cfa_offset 40
 1502 0004 00AF     		add	r7, sp, #0
 1503              	.LCFI42:
 1504              		.cfi_def_cfa_register 7
 1505 0006 7860     		str	r0, [r7, #4]
1469:ThirdParty/FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
1470:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxReturn, uxSavedInterruptState;
1471:ThirdParty/FreeRTOS/tasks.c **** 
1472:ThirdParty/FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1473:ThirdParty/FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1474:ThirdParty/FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1475:ThirdParty/FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1476:ThirdParty/FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1477:ThirdParty/FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
1478:ThirdParty/FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1479:ThirdParty/FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1480:ThirdParty/FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
1481:ThirdParty/FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1482:ThirdParty/FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1483:ThirdParty/FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1484:ThirdParty/FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1485:ThirdParty/FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1486:ThirdParty/FreeRTOS/tasks.c ****          * provided on the following link:
1487:ThirdParty/FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1488:ThirdParty/FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1506              		.loc 1 1488 9
 1507 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1508              	.LBB175:
 1509              	.LBB176:
 207:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 208:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 209:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 210:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 211:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 212:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 213:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 214:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 1510              		.loc 2 214 9
 1511              		.syntax unified
 1512              	@ 214 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1513 000c EFF31182 			mrs r2, basepri											
 1514 0010 4FF05003 		mov r3, #80												
 1515 0014 83F31188 		msr basepri, r3											
 1516 0018 BFF36F8F 		isb														
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 57


 1517 001c BFF34F8F 		dsb														
 1518              	
 1519              	@ 0 "" 2
 1520              		.thumb
 1521              		.syntax unified
 1522 0020 3A61     		str	r2, [r7, #16]
 1523 0022 FB60     		str	r3, [r7, #12]
 215:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 216:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mrs %0, basepri											\n"\
 217:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mov %1, %2												\n"\
 218:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %1											\n"\
 219:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	isb														\n"\
 220:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	dsb														\n"\
 221:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 222:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         );
 223:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 224:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 225:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****          * warnings. */
 226:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         return ulOriginalBASEPRI;
 1524              		.loc 2 226 16
 1525 0024 3B69     		ldr	r3, [r7, #16]
 1526              	.LBE176:
 1527              	.LBE175:
1489:ThirdParty/FreeRTOS/tasks.c **** 
1490:ThirdParty/FreeRTOS/tasks.c ****         uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1528              		.loc 1 1490 33
 1529 0026 FB61     		str	r3, [r7, #28]
1491:ThirdParty/FreeRTOS/tasks.c ****         {
1492:ThirdParty/FreeRTOS/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1493:ThirdParty/FreeRTOS/tasks.c ****              * task that is being queried. */
1494:ThirdParty/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
 1530              		.loc 1 1494 21
 1531 0028 7B68     		ldr	r3, [r7, #4]
 1532 002a 002B     		cmp	r3, #0
 1533 002c 02D1     		bne	.L92
 1534              		.loc 1 1494 21 is_stmt 0 discriminator 1
 1535 002e 094B     		ldr	r3, .L95
 1536 0030 1B68     		ldr	r3, [r3]
 1537 0032 00E0     		b	.L93
 1538              	.L92:
 1539              		.loc 1 1494 21 discriminator 2
 1540 0034 7B68     		ldr	r3, [r7, #4]
 1541              	.L93:
 1542              		.loc 1 1494 19 is_stmt 1 discriminator 4
 1543 0036 BB61     		str	r3, [r7, #24]
1495:ThirdParty/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1544              		.loc 1 1495 22 discriminator 4
 1545 0038 BB69     		ldr	r3, [r7, #24]
 1546 003a DB6A     		ldr	r3, [r3, #44]
 1547 003c 7B61     		str	r3, [r7, #20]
 1548 003e FB69     		ldr	r3, [r7, #28]
 1549 0040 BB60     		str	r3, [r7, #8]
 1550              	.LBB177:
 1551              	.LBB178:
 227:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 228:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 229:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 58


 230:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 231:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 232:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 1552              		.loc 2 232 9 discriminator 4
 1553 0042 BB68     		ldr	r3, [r7, #8]
 1554              		.syntax unified
 1555              	@ 232 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1556 0044 83F31188 			msr basepri, r3	
 1557              	@ 0 "" 2
 233:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 234:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
 235:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         );
 236:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 1558              		.loc 2 236 5 discriminator 4
 1559              		.thumb
 1560              		.syntax unified
 1561 0048 00BF     		nop
 1562              	.LBE178:
 1563              	.LBE177:
1496:ThirdParty/FreeRTOS/tasks.c ****         }
1497:ThirdParty/FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1498:ThirdParty/FreeRTOS/tasks.c **** 
1499:ThirdParty/FreeRTOS/tasks.c ****         return uxReturn;
 1564              		.loc 1 1499 16 discriminator 4
 1565 004a 7B69     		ldr	r3, [r7, #20]
1500:ThirdParty/FreeRTOS/tasks.c ****     }
 1566              		.loc 1 1500 5 discriminator 4
 1567 004c 1846     		mov	r0, r3
 1568 004e 2037     		adds	r7, r7, #32
 1569              	.LCFI43:
 1570              		.cfi_def_cfa_offset 8
 1571 0050 BD46     		mov	sp, r7
 1572              	.LCFI44:
 1573              		.cfi_def_cfa_register 13
 1574              		@ sp needed
 1575 0052 80BD     		pop	{r7, pc}
 1576              	.L96:
 1577              		.align	2
 1578              	.L95:
 1579 0054 00000000 		.word	pxCurrentTCB
 1580              		.cfi_endproc
 1581              	.LFE13:
 1583              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1584              		.align	1
 1585              		.global	vTaskPrioritySet
 1586              		.syntax unified
 1587              		.thumb
 1588              		.thumb_func
 1590              	vTaskPrioritySet:
 1591              	.LFB14:
1501:ThirdParty/FreeRTOS/tasks.c **** 
1502:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1503:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1504:ThirdParty/FreeRTOS/tasks.c **** 
1505:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1506:ThirdParty/FreeRTOS/tasks.c **** 
1507:ThirdParty/FreeRTOS/tasks.c ****     void vTaskPrioritySet( TaskHandle_t xTask,
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 59


1508:ThirdParty/FreeRTOS/tasks.c ****                            UBaseType_t uxNewPriority )
1509:ThirdParty/FreeRTOS/tasks.c ****     {
 1592              		.loc 1 1509 5
 1593              		.cfi_startproc
 1594              		@ args = 0, pretend = 0, frame = 32
 1595              		@ frame_needed = 1, uses_anonymous_args = 0
 1596 0000 80B5     		push	{r7, lr}
 1597              	.LCFI45:
 1598              		.cfi_def_cfa_offset 8
 1599              		.cfi_offset 7, -8
 1600              		.cfi_offset 14, -4
 1601 0002 88B0     		sub	sp, sp, #32
 1602              	.LCFI46:
 1603              		.cfi_def_cfa_offset 40
 1604 0004 00AF     		add	r7, sp, #0
 1605              	.LCFI47:
 1606              		.cfi_def_cfa_register 7
 1607 0006 7860     		str	r0, [r7, #4]
 1608 0008 3960     		str	r1, [r7]
1510:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
1511:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1512:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1609              		.loc 1 1512 20
 1610 000a 0023     		movs	r3, #0
 1611 000c FB61     		str	r3, [r7, #28]
1513:ThirdParty/FreeRTOS/tasks.c **** 
1514:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxNewPriority < configMAX_PRIORITIES );
 1612              		.loc 1 1514 9
 1613 000e 3B68     		ldr	r3, [r7]
 1614 0010 042B     		cmp	r3, #4
 1615 0012 0AD9     		bls	.L98
 1616              	.LBB179:
 1617              	.LBB180:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1618              		.loc 2 198 9
 1619              		.syntax unified
 1620              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1621 0014 4FF05003 			mov r3, #80												
 1622 0018 83F31188 		msr basepri, r3											
 1623 001c BFF36F8F 		isb														
 1624 0020 BFF34F8F 		dsb														
 1625              	
 1626              	@ 0 "" 2
 1627              		.thumb
 1628              		.syntax unified
 1629 0024 BB60     		str	r3, [r7, #8]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1630              		.loc 2 206 5
 1631 0026 00BF     		nop
 1632              	.L99:
 1633              	.LBE180:
 1634              	.LBE179:
 1635              		.loc 1 1514 9 discriminator 1
 1636 0028 FEE7     		b	.L99
 1637              	.L98:
1515:ThirdParty/FreeRTOS/tasks.c **** 
1516:ThirdParty/FreeRTOS/tasks.c ****         /* Ensure the new priority is valid. */
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 60


1517:ThirdParty/FreeRTOS/tasks.c ****         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1638              		.loc 1 1517 11
 1639 002a 3B68     		ldr	r3, [r7]
 1640 002c 042B     		cmp	r3, #4
 1641 002e 01D9     		bls	.L100
1518:ThirdParty/FreeRTOS/tasks.c ****         {
1519:ThirdParty/FreeRTOS/tasks.c ****             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1642              		.loc 1 1519 27
 1643 0030 0423     		movs	r3, #4
 1644 0032 3B60     		str	r3, [r7]
 1645              	.L100:
1520:ThirdParty/FreeRTOS/tasks.c ****         }
1521:ThirdParty/FreeRTOS/tasks.c ****         else
1522:ThirdParty/FreeRTOS/tasks.c ****         {
1523:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1524:ThirdParty/FreeRTOS/tasks.c ****         }
1525:ThirdParty/FreeRTOS/tasks.c **** 
1526:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 1646              		.loc 1 1526 9
 1647 0034 FFF7FEFF 		bl	vPortEnterCritical
1527:ThirdParty/FreeRTOS/tasks.c ****         {
1528:ThirdParty/FreeRTOS/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1529:ThirdParty/FreeRTOS/tasks.c ****              * task that is being changed. */
1530:ThirdParty/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
 1648              		.loc 1 1530 21
 1649 0038 7B68     		ldr	r3, [r7, #4]
 1650 003a 002B     		cmp	r3, #0
 1651 003c 02D1     		bne	.L101
 1652              		.loc 1 1530 21 is_stmt 0 discriminator 1
 1653 003e 504B     		ldr	r3, .L109
 1654 0040 1B68     		ldr	r3, [r3]
 1655 0042 00E0     		b	.L102
 1656              	.L101:
 1657              		.loc 1 1530 21 discriminator 2
 1658 0044 7B68     		ldr	r3, [r7, #4]
 1659              	.L102:
 1660              		.loc 1 1530 19 is_stmt 1 discriminator 4
 1661 0046 BB61     		str	r3, [r7, #24]
1531:ThirdParty/FreeRTOS/tasks.c **** 
1532:ThirdParty/FreeRTOS/tasks.c ****             traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1533:ThirdParty/FreeRTOS/tasks.c **** 
1534:ThirdParty/FreeRTOS/tasks.c ****             #if ( configUSE_MUTEXES == 1 )
1535:ThirdParty/FreeRTOS/tasks.c ****             {
1536:ThirdParty/FreeRTOS/tasks.c ****                 uxCurrentBasePriority = pxTCB->uxBasePriority;
 1662              		.loc 1 1536 39 discriminator 4
 1663 0048 BB69     		ldr	r3, [r7, #24]
 1664 004a 9B6C     		ldr	r3, [r3, #72]
 1665 004c 7B61     		str	r3, [r7, #20]
1537:ThirdParty/FreeRTOS/tasks.c ****             }
1538:ThirdParty/FreeRTOS/tasks.c ****             #else
1539:ThirdParty/FreeRTOS/tasks.c ****             {
1540:ThirdParty/FreeRTOS/tasks.c ****                 uxCurrentBasePriority = pxTCB->uxPriority;
1541:ThirdParty/FreeRTOS/tasks.c ****             }
1542:ThirdParty/FreeRTOS/tasks.c ****             #endif
1543:ThirdParty/FreeRTOS/tasks.c **** 
1544:ThirdParty/FreeRTOS/tasks.c ****             if( uxCurrentBasePriority != uxNewPriority )
 1666              		.loc 1 1544 15 discriminator 4
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 61


 1667 004e 7A69     		ldr	r2, [r7, #20]
 1668 0050 3B68     		ldr	r3, [r7]
 1669 0052 9A42     		cmp	r2, r3
 1670 0054 00F08D80 		beq	.L103
1545:ThirdParty/FreeRTOS/tasks.c ****             {
1546:ThirdParty/FreeRTOS/tasks.c ****                 /* The priority change may have readied a task of higher
1547:ThirdParty/FreeRTOS/tasks.c ****                  * priority than the calling task. */
1548:ThirdParty/FreeRTOS/tasks.c ****                 if( uxNewPriority > uxCurrentBasePriority )
 1671              		.loc 1 1548 19
 1672 0058 3A68     		ldr	r2, [r7]
 1673 005a 7B69     		ldr	r3, [r7, #20]
 1674 005c 9A42     		cmp	r2, r3
 1675 005e 0DD9     		bls	.L104
1549:ThirdParty/FreeRTOS/tasks.c ****                 {
1550:ThirdParty/FreeRTOS/tasks.c ****                     if( pxTCB != pxCurrentTCB )
 1676              		.loc 1 1550 31
 1677 0060 474B     		ldr	r3, .L109
 1678 0062 1B68     		ldr	r3, [r3]
 1679              		.loc 1 1550 23
 1680 0064 BA69     		ldr	r2, [r7, #24]
 1681 0066 9A42     		cmp	r2, r3
 1682 0068 0FD0     		beq	.L105
1551:ThirdParty/FreeRTOS/tasks.c ****                     {
1552:ThirdParty/FreeRTOS/tasks.c ****                         /* The priority of a task other than the currently
1553:ThirdParty/FreeRTOS/tasks.c ****                          * running task is being raised.  Is the priority being
1554:ThirdParty/FreeRTOS/tasks.c ****                          * raised above that of the running task? */
1555:ThirdParty/FreeRTOS/tasks.c ****                         if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1683              		.loc 1 1555 58
 1684 006a 454B     		ldr	r3, .L109
 1685 006c 1B68     		ldr	r3, [r3]
 1686 006e DB6A     		ldr	r3, [r3, #44]
 1687              		.loc 1 1555 27
 1688 0070 3A68     		ldr	r2, [r7]
 1689 0072 9A42     		cmp	r2, r3
 1690 0074 09D3     		bcc	.L105
1556:ThirdParty/FreeRTOS/tasks.c ****                         {
1557:ThirdParty/FreeRTOS/tasks.c ****                             xYieldRequired = pdTRUE;
 1691              		.loc 1 1557 44
 1692 0076 0123     		movs	r3, #1
 1693 0078 FB61     		str	r3, [r7, #28]
 1694 007a 06E0     		b	.L105
 1695              	.L104:
1558:ThirdParty/FreeRTOS/tasks.c ****                         }
1559:ThirdParty/FreeRTOS/tasks.c ****                         else
1560:ThirdParty/FreeRTOS/tasks.c ****                         {
1561:ThirdParty/FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1562:ThirdParty/FreeRTOS/tasks.c ****                         }
1563:ThirdParty/FreeRTOS/tasks.c ****                     }
1564:ThirdParty/FreeRTOS/tasks.c ****                     else
1565:ThirdParty/FreeRTOS/tasks.c ****                     {
1566:ThirdParty/FreeRTOS/tasks.c ****                         /* The priority of the running task is being raised,
1567:ThirdParty/FreeRTOS/tasks.c ****                          * but the running task must already be the highest
1568:ThirdParty/FreeRTOS/tasks.c ****                          * priority task able to run so no yield is required. */
1569:ThirdParty/FreeRTOS/tasks.c ****                     }
1570:ThirdParty/FreeRTOS/tasks.c ****                 }
1571:ThirdParty/FreeRTOS/tasks.c ****                 else if( pxTCB == pxCurrentTCB )
 1696              		.loc 1 1571 32
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 62


 1697 007c 404B     		ldr	r3, .L109
 1698 007e 1B68     		ldr	r3, [r3]
 1699              		.loc 1 1571 24
 1700 0080 BA69     		ldr	r2, [r7, #24]
 1701 0082 9A42     		cmp	r2, r3
 1702 0084 01D1     		bne	.L105
1572:ThirdParty/FreeRTOS/tasks.c ****                 {
1573:ThirdParty/FreeRTOS/tasks.c ****                     /* Setting the priority of the running task down means
1574:ThirdParty/FreeRTOS/tasks.c ****                      * there may now be another task of higher priority that
1575:ThirdParty/FreeRTOS/tasks.c ****                      * is ready to execute. */
1576:ThirdParty/FreeRTOS/tasks.c ****                     xYieldRequired = pdTRUE;
 1703              		.loc 1 1576 36
 1704 0086 0123     		movs	r3, #1
 1705 0088 FB61     		str	r3, [r7, #28]
 1706              	.L105:
1577:ThirdParty/FreeRTOS/tasks.c ****                 }
1578:ThirdParty/FreeRTOS/tasks.c ****                 else
1579:ThirdParty/FreeRTOS/tasks.c ****                 {
1580:ThirdParty/FreeRTOS/tasks.c ****                     /* Setting the priority of any other task down does not
1581:ThirdParty/FreeRTOS/tasks.c ****                      * require a yield as the running task must be above the
1582:ThirdParty/FreeRTOS/tasks.c ****                      * new priority of the task being modified. */
1583:ThirdParty/FreeRTOS/tasks.c ****                 }
1584:ThirdParty/FreeRTOS/tasks.c **** 
1585:ThirdParty/FreeRTOS/tasks.c ****                 /* Remember the ready list the task might be referenced from
1586:ThirdParty/FreeRTOS/tasks.c ****                  * before its uxPriority member is changed so the
1587:ThirdParty/FreeRTOS/tasks.c ****                  * taskRESET_READY_PRIORITY() macro can function correctly. */
1588:ThirdParty/FreeRTOS/tasks.c ****                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1707              		.loc 1 1588 39
 1708 008a BB69     		ldr	r3, [r7, #24]
 1709 008c DB6A     		ldr	r3, [r3, #44]
 1710 008e 3B61     		str	r3, [r7, #16]
1589:ThirdParty/FreeRTOS/tasks.c **** 
1590:ThirdParty/FreeRTOS/tasks.c ****                 #if ( configUSE_MUTEXES == 1 )
1591:ThirdParty/FreeRTOS/tasks.c ****                 {
1592:ThirdParty/FreeRTOS/tasks.c ****                     /* Only change the priority being used if the task is not
1593:ThirdParty/FreeRTOS/tasks.c ****                      * currently using an inherited priority. */
1594:ThirdParty/FreeRTOS/tasks.c ****                     if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1711              		.loc 1 1594 30
 1712 0090 BB69     		ldr	r3, [r7, #24]
 1713 0092 9A6C     		ldr	r2, [r3, #72]
 1714              		.loc 1 1594 55
 1715 0094 BB69     		ldr	r3, [r7, #24]
 1716 0096 DB6A     		ldr	r3, [r3, #44]
 1717              		.loc 1 1594 23
 1718 0098 9A42     		cmp	r2, r3
 1719 009a 02D1     		bne	.L106
1595:ThirdParty/FreeRTOS/tasks.c ****                     {
1596:ThirdParty/FreeRTOS/tasks.c ****                         pxTCB->uxPriority = uxNewPriority;
 1720              		.loc 1 1596 43
 1721 009c BB69     		ldr	r3, [r7, #24]
 1722 009e 3A68     		ldr	r2, [r7]
 1723 00a0 DA62     		str	r2, [r3, #44]
 1724              	.L106:
1597:ThirdParty/FreeRTOS/tasks.c ****                     }
1598:ThirdParty/FreeRTOS/tasks.c ****                     else
1599:ThirdParty/FreeRTOS/tasks.c ****                     {
1600:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 63


1601:ThirdParty/FreeRTOS/tasks.c ****                     }
1602:ThirdParty/FreeRTOS/tasks.c **** 
1603:ThirdParty/FreeRTOS/tasks.c ****                     /* The base priority gets set whatever. */
1604:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB->uxBasePriority = uxNewPriority;
 1725              		.loc 1 1604 43
 1726 00a2 BB69     		ldr	r3, [r7, #24]
 1727 00a4 3A68     		ldr	r2, [r7]
 1728 00a6 9A64     		str	r2, [r3, #72]
1605:ThirdParty/FreeRTOS/tasks.c ****                 }
1606:ThirdParty/FreeRTOS/tasks.c ****                 #else /* if ( configUSE_MUTEXES == 1 ) */
1607:ThirdParty/FreeRTOS/tasks.c ****                 {
1608:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB->uxPriority = uxNewPriority;
1609:ThirdParty/FreeRTOS/tasks.c ****                 }
1610:ThirdParty/FreeRTOS/tasks.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1611:ThirdParty/FreeRTOS/tasks.c **** 
1612:ThirdParty/FreeRTOS/tasks.c ****                 /* Only reset the event list item value if the value is not
1613:ThirdParty/FreeRTOS/tasks.c ****                  * being used for anything else. */
1614:ThirdParty/FreeRTOS/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_V
 1729              		.loc 1 1614 23
 1730 00a8 BB69     		ldr	r3, [r7, #24]
 1731 00aa 9B69     		ldr	r3, [r3, #24]
 1732              		.loc 1 1614 19
 1733 00ac 002B     		cmp	r3, #0
 1734 00ae 04DB     		blt	.L107
1615:ThirdParty/FreeRTOS/tasks.c ****                 {
1616:ThirdParty/FreeRTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX
 1735              		.loc 1 1616 21
 1736 00b0 3B68     		ldr	r3, [r7]
 1737 00b2 C3F10502 		rsb	r2, r3, #5
 1738 00b6 BB69     		ldr	r3, [r7, #24]
 1739 00b8 9A61     		str	r2, [r3, #24]
 1740              	.L107:
1617:ThirdParty/FreeRTOS/tasks.c ****                 }
1618:ThirdParty/FreeRTOS/tasks.c ****                 else
1619:ThirdParty/FreeRTOS/tasks.c ****                 {
1620:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1621:ThirdParty/FreeRTOS/tasks.c ****                 }
1622:ThirdParty/FreeRTOS/tasks.c **** 
1623:ThirdParty/FreeRTOS/tasks.c ****                 /* If the task is in the blocked or suspended list we need do
1624:ThirdParty/FreeRTOS/tasks.c ****                  * nothing more than change its priority variable. However, if
1625:ThirdParty/FreeRTOS/tasks.c ****                  * the task is in a ready list it needs to be removed and placed
1626:ThirdParty/FreeRTOS/tasks.c ****                  * in the list appropriate to its new priority. */
1627:ThirdParty/FreeRTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( px
 1741              		.loc 1 1627 21
 1742 00ba BB69     		ldr	r3, [r7, #24]
 1743 00bc 5969     		ldr	r1, [r3, #20]
 1744 00be 3A69     		ldr	r2, [r7, #16]
 1745 00c0 1346     		mov	r3, r2
 1746 00c2 9B00     		lsls	r3, r3, #2
 1747 00c4 1344     		add	r3, r3, r2
 1748 00c6 9B00     		lsls	r3, r3, #2
 1749 00c8 2E4A     		ldr	r2, .L109+4
 1750 00ca 1344     		add	r3, r3, r2
 1751              		.loc 1 1627 19
 1752 00cc 9942     		cmp	r1, r3
 1753 00ce 50D1     		bne	.L103
1628:ThirdParty/FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 64


1629:ThirdParty/FreeRTOS/tasks.c ****                     /* The task is currently in its ready list - remove before
1630:ThirdParty/FreeRTOS/tasks.c ****                      * adding it to its new ready list.  As we are in a critical
1631:ThirdParty/FreeRTOS/tasks.c ****                      * section we can do this even if the scheduler is suspended. */
1632:ThirdParty/FreeRTOS/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1754              		.loc 1 1632 25
 1755 00d0 BB69     		ldr	r3, [r7, #24]
 1756 00d2 0433     		adds	r3, r3, #4
 1757 00d4 1846     		mov	r0, r3
 1758 00d6 FFF7FEFF 		bl	uxListRemove
 1759 00da 0346     		mov	r3, r0
 1760              		.loc 1 1632 23
 1761 00dc 002B     		cmp	r3, #0
 1762 00de 09D1     		bne	.L108
1633:ThirdParty/FreeRTOS/tasks.c ****                     {
1634:ThirdParty/FreeRTOS/tasks.c ****                         /* It is known that the task is in its ready list so
1635:ThirdParty/FreeRTOS/tasks.c ****                          * there is no need to check again and the port level
1636:ThirdParty/FreeRTOS/tasks.c ****                          * reset macro can be called directly. */
1637:ThirdParty/FreeRTOS/tasks.c ****                         portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1763              		.loc 1 1637 25
 1764 00e0 0122     		movs	r2, #1
 1765 00e2 3B69     		ldr	r3, [r7, #16]
 1766 00e4 02FA03F3 		lsl	r3, r2, r3
 1767 00e8 DA43     		mvns	r2, r3
 1768 00ea 274B     		ldr	r3, .L109+8
 1769 00ec 1B68     		ldr	r3, [r3]
 1770 00ee 1340     		ands	r3, r3, r2
 1771 00f0 254A     		ldr	r2, .L109+8
 1772 00f2 1360     		str	r3, [r2]
 1773              	.L108:
1638:ThirdParty/FreeRTOS/tasks.c ****                     }
1639:ThirdParty/FreeRTOS/tasks.c ****                     else
1640:ThirdParty/FreeRTOS/tasks.c ****                     {
1641:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1642:ThirdParty/FreeRTOS/tasks.c ****                     }
1643:ThirdParty/FreeRTOS/tasks.c **** 
1644:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1774              		.loc 1 1644 21
 1775 00f4 BB69     		ldr	r3, [r7, #24]
 1776 00f6 DB6A     		ldr	r3, [r3, #44]
 1777 00f8 0122     		movs	r2, #1
 1778 00fa 9A40     		lsls	r2, r2, r3
 1779 00fc 224B     		ldr	r3, .L109+8
 1780 00fe 1B68     		ldr	r3, [r3]
 1781 0100 1343     		orrs	r3, r3, r2
 1782 0102 214A     		ldr	r2, .L109+8
 1783 0104 1360     		str	r3, [r2]
 1784              	.LBB181:
 1785 0106 BB69     		ldr	r3, [r7, #24]
 1786 0108 DA6A     		ldr	r2, [r3, #44]
 1787 010a 1E49     		ldr	r1, .L109+4
 1788 010c 1346     		mov	r3, r2
 1789 010e 9B00     		lsls	r3, r3, #2
 1790 0110 1344     		add	r3, r3, r2
 1791 0112 9B00     		lsls	r3, r3, #2
 1792 0114 0B44     		add	r3, r3, r1
 1793 0116 0433     		adds	r3, r3, #4
 1794 0118 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 65


 1795 011a FB60     		str	r3, [r7, #12]
 1796 011c BB69     		ldr	r3, [r7, #24]
 1797 011e FA68     		ldr	r2, [r7, #12]
 1798 0120 9A60     		str	r2, [r3, #8]
 1799 0122 FB68     		ldr	r3, [r7, #12]
 1800 0124 9A68     		ldr	r2, [r3, #8]
 1801 0126 BB69     		ldr	r3, [r7, #24]
 1802 0128 DA60     		str	r2, [r3, #12]
 1803 012a FB68     		ldr	r3, [r7, #12]
 1804 012c 9B68     		ldr	r3, [r3, #8]
 1805 012e BA69     		ldr	r2, [r7, #24]
 1806 0130 0432     		adds	r2, r2, #4
 1807 0132 5A60     		str	r2, [r3, #4]
 1808 0134 BB69     		ldr	r3, [r7, #24]
 1809 0136 1A1D     		adds	r2, r3, #4
 1810 0138 FB68     		ldr	r3, [r7, #12]
 1811 013a 9A60     		str	r2, [r3, #8]
 1812 013c BB69     		ldr	r3, [r7, #24]
 1813 013e DA6A     		ldr	r2, [r3, #44]
 1814 0140 1346     		mov	r3, r2
 1815 0142 9B00     		lsls	r3, r3, #2
 1816 0144 1344     		add	r3, r3, r2
 1817 0146 9B00     		lsls	r3, r3, #2
 1818 0148 0E4A     		ldr	r2, .L109+4
 1819 014a 1A44     		add	r2, r2, r3
 1820 014c BB69     		ldr	r3, [r7, #24]
 1821 014e 5A61     		str	r2, [r3, #20]
 1822 0150 BB69     		ldr	r3, [r7, #24]
 1823 0152 DA6A     		ldr	r2, [r3, #44]
 1824 0154 0B49     		ldr	r1, .L109+4
 1825 0156 1346     		mov	r3, r2
 1826 0158 9B00     		lsls	r3, r3, #2
 1827 015a 1344     		add	r3, r3, r2
 1828 015c 9B00     		lsls	r3, r3, #2
 1829 015e 0B44     		add	r3, r3, r1
 1830 0160 1B68     		ldr	r3, [r3]
 1831 0162 591C     		adds	r1, r3, #1
 1832 0164 0748     		ldr	r0, .L109+4
 1833 0166 1346     		mov	r3, r2
 1834 0168 9B00     		lsls	r3, r3, #2
 1835 016a 1344     		add	r3, r3, r2
 1836 016c 9B00     		lsls	r3, r3, #2
 1837 016e 0344     		add	r3, r3, r0
 1838 0170 1960     		str	r1, [r3]
 1839              	.L103:
 1840              	.LBE181:
1645:ThirdParty/FreeRTOS/tasks.c ****                 }
1646:ThirdParty/FreeRTOS/tasks.c ****                 else
1647:ThirdParty/FreeRTOS/tasks.c ****                 {
1648:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1649:ThirdParty/FreeRTOS/tasks.c ****                 }
1650:ThirdParty/FreeRTOS/tasks.c **** 
1651:ThirdParty/FreeRTOS/tasks.c ****                 if( xYieldRequired != pdFALSE )
1652:ThirdParty/FreeRTOS/tasks.c ****                 {
1653:ThirdParty/FreeRTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
1654:ThirdParty/FreeRTOS/tasks.c ****                 }
1655:ThirdParty/FreeRTOS/tasks.c ****                 else
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 66


1656:ThirdParty/FreeRTOS/tasks.c ****                 {
1657:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1658:ThirdParty/FreeRTOS/tasks.c ****                 }
1659:ThirdParty/FreeRTOS/tasks.c **** 
1660:ThirdParty/FreeRTOS/tasks.c ****                 /* Remove compiler warning about unused variables when the port
1661:ThirdParty/FreeRTOS/tasks.c ****                  * optimised task selection is not being used. */
1662:ThirdParty/FreeRTOS/tasks.c ****                 ( void ) uxPriorityUsedOnEntry;
1663:ThirdParty/FreeRTOS/tasks.c ****             }
1664:ThirdParty/FreeRTOS/tasks.c ****         }
1665:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
 1841              		.loc 1 1665 9
 1842 0172 FFF7FEFF 		bl	vPortExitCritical
1666:ThirdParty/FreeRTOS/tasks.c ****     }
 1843              		.loc 1 1666 5
 1844 0176 00BF     		nop
 1845 0178 2037     		adds	r7, r7, #32
 1846              	.LCFI48:
 1847              		.cfi_def_cfa_offset 8
 1848 017a BD46     		mov	sp, r7
 1849              	.LCFI49:
 1850              		.cfi_def_cfa_register 13
 1851              		@ sp needed
 1852 017c 80BD     		pop	{r7, pc}
 1853              	.L110:
 1854 017e 00BF     		.align	2
 1855              	.L109:
 1856 0180 00000000 		.word	pxCurrentTCB
 1857 0184 00000000 		.word	pxReadyTasksLists
 1858 0188 00000000 		.word	uxTopReadyPriority
 1859              		.cfi_endproc
 1860              	.LFE14:
 1862              		.section	.text.vTaskSuspend,"ax",%progbits
 1863              		.align	1
 1864              		.global	vTaskSuspend
 1865              		.syntax unified
 1866              		.thumb
 1867              		.thumb_func
 1869              	vTaskSuspend:
 1870              	.LFB15:
1667:ThirdParty/FreeRTOS/tasks.c **** 
1668:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1669:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1670:ThirdParty/FreeRTOS/tasks.c **** 
1671:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1672:ThirdParty/FreeRTOS/tasks.c **** 
1673:ThirdParty/FreeRTOS/tasks.c ****     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1674:ThirdParty/FreeRTOS/tasks.c ****     {
 1871              		.loc 1 1674 5
 1872              		.cfi_startproc
 1873              		@ args = 0, pretend = 0, frame = 24
 1874              		@ frame_needed = 1, uses_anonymous_args = 0
 1875 0000 80B5     		push	{r7, lr}
 1876              	.LCFI50:
 1877              		.cfi_def_cfa_offset 8
 1878              		.cfi_offset 7, -8
 1879              		.cfi_offset 14, -4
 1880 0002 86B0     		sub	sp, sp, #24
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 67


 1881              	.LCFI51:
 1882              		.cfi_def_cfa_offset 32
 1883 0004 00AF     		add	r7, sp, #0
 1884              	.LCFI52:
 1885              		.cfi_def_cfa_register 7
 1886 0006 7860     		str	r0, [r7, #4]
1675:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
1676:ThirdParty/FreeRTOS/tasks.c **** 
1677:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 1887              		.loc 1 1677 9
 1888 0008 FFF7FEFF 		bl	vPortEnterCritical
1678:ThirdParty/FreeRTOS/tasks.c ****         {
1679:ThirdParty/FreeRTOS/tasks.c ****             /* If null is passed in here then it is the running task that is
1680:ThirdParty/FreeRTOS/tasks.c ****              * being suspended. */
1681:ThirdParty/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1889              		.loc 1 1681 21
 1890 000c 7B68     		ldr	r3, [r7, #4]
 1891 000e 002B     		cmp	r3, #0
 1892 0010 02D1     		bne	.L112
 1893              		.loc 1 1681 21 is_stmt 0 discriminator 1
 1894 0012 434B     		ldr	r3, .L126
 1895 0014 1B68     		ldr	r3, [r3]
 1896 0016 00E0     		b	.L113
 1897              	.L112:
 1898              		.loc 1 1681 21 discriminator 2
 1899 0018 7B68     		ldr	r3, [r7, #4]
 1900              	.L113:
 1901              		.loc 1 1681 19 is_stmt 1 discriminator 4
 1902 001a 3B61     		str	r3, [r7, #16]
1682:ThirdParty/FreeRTOS/tasks.c **** 
1683:ThirdParty/FreeRTOS/tasks.c ****             traceTASK_SUSPEND( pxTCB );
1684:ThirdParty/FreeRTOS/tasks.c **** 
1685:ThirdParty/FreeRTOS/tasks.c ****             /* Remove task from the ready/delayed list and place in the
1686:ThirdParty/FreeRTOS/tasks.c ****              * suspended list. */
1687:ThirdParty/FreeRTOS/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1903              		.loc 1 1687 17 discriminator 4
 1904 001c 3B69     		ldr	r3, [r7, #16]
 1905 001e 0433     		adds	r3, r3, #4
 1906 0020 1846     		mov	r0, r3
 1907 0022 FFF7FEFF 		bl	uxListRemove
 1908 0026 0346     		mov	r3, r0
 1909              		.loc 1 1687 15 discriminator 4
 1910 0028 002B     		cmp	r3, #0
 1911 002a 15D1     		bne	.L114
1688:ThirdParty/FreeRTOS/tasks.c ****             {
1689:ThirdParty/FreeRTOS/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1912              		.loc 1 1689 17
 1913 002c 3B69     		ldr	r3, [r7, #16]
 1914 002e DA6A     		ldr	r2, [r3, #44]
 1915 0030 3C49     		ldr	r1, .L126+4
 1916 0032 1346     		mov	r3, r2
 1917 0034 9B00     		lsls	r3, r3, #2
 1918 0036 1344     		add	r3, r3, r2
 1919 0038 9B00     		lsls	r3, r3, #2
 1920 003a 0B44     		add	r3, r3, r1
 1921 003c 1B68     		ldr	r3, [r3]
 1922 003e 002B     		cmp	r3, #0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 68


 1923 0040 0AD1     		bne	.L114
 1924              		.loc 1 1689 17 is_stmt 0 discriminator 1
 1925 0042 3B69     		ldr	r3, [r7, #16]
 1926 0044 DB6A     		ldr	r3, [r3, #44]
 1927 0046 0122     		movs	r2, #1
 1928 0048 02FA03F3 		lsl	r3, r2, r3
 1929 004c DA43     		mvns	r2, r3
 1930 004e 364B     		ldr	r3, .L126+8
 1931 0050 1B68     		ldr	r3, [r3]
 1932 0052 1340     		ands	r3, r3, r2
 1933 0054 344A     		ldr	r2, .L126+8
 1934 0056 1360     		str	r3, [r2]
 1935              	.L114:
1690:ThirdParty/FreeRTOS/tasks.c ****             }
1691:ThirdParty/FreeRTOS/tasks.c ****             else
1692:ThirdParty/FreeRTOS/tasks.c ****             {
1693:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1694:ThirdParty/FreeRTOS/tasks.c ****             }
1695:ThirdParty/FreeRTOS/tasks.c **** 
1696:ThirdParty/FreeRTOS/tasks.c ****             /* Is the task waiting on an event also? */
1697:ThirdParty/FreeRTOS/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1936              		.loc 1 1697 17 is_stmt 1
 1937 0058 3B69     		ldr	r3, [r7, #16]
 1938 005a 9B6A     		ldr	r3, [r3, #40]
 1939              		.loc 1 1697 15
 1940 005c 002B     		cmp	r3, #0
 1941 005e 04D0     		beq	.L115
1698:ThirdParty/FreeRTOS/tasks.c ****             {
1699:ThirdParty/FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1942              		.loc 1 1699 26
 1943 0060 3B69     		ldr	r3, [r7, #16]
 1944 0062 1833     		adds	r3, r3, #24
 1945 0064 1846     		mov	r0, r3
 1946 0066 FFF7FEFF 		bl	uxListRemove
 1947              	.L115:
1700:ThirdParty/FreeRTOS/tasks.c ****             }
1701:ThirdParty/FreeRTOS/tasks.c ****             else
1702:ThirdParty/FreeRTOS/tasks.c ****             {
1703:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1704:ThirdParty/FreeRTOS/tasks.c ****             }
1705:ThirdParty/FreeRTOS/tasks.c **** 
1706:ThirdParty/FreeRTOS/tasks.c ****             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1948              		.loc 1 1706 13
 1949 006a 3B69     		ldr	r3, [r7, #16]
 1950 006c 0433     		adds	r3, r3, #4
 1951 006e 1946     		mov	r1, r3
 1952 0070 2E48     		ldr	r0, .L126+12
 1953 0072 FFF7FEFF 		bl	vListInsertEnd
 1954              	.LBB182:
1707:ThirdParty/FreeRTOS/tasks.c **** 
1708:ThirdParty/FreeRTOS/tasks.c ****             #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1709:ThirdParty/FreeRTOS/tasks.c ****             {
1710:ThirdParty/FreeRTOS/tasks.c ****                 BaseType_t x;
1711:ThirdParty/FreeRTOS/tasks.c **** 
1712:ThirdParty/FreeRTOS/tasks.c ****                 for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 1955              		.loc 1 1712 24
 1956 0076 0023     		movs	r3, #0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 69


 1957 0078 7B61     		str	r3, [r7, #20]
 1958              		.loc 1 1712 17
 1959 007a 10E0     		b	.L116
 1960              	.L118:
1713:ThirdParty/FreeRTOS/tasks.c ****                 {
1714:ThirdParty/FreeRTOS/tasks.c ****                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 1961              		.loc 1 1714 45
 1962 007c 3A69     		ldr	r2, [r7, #16]
 1963 007e 7B69     		ldr	r3, [r7, #20]
 1964 0080 1344     		add	r3, r3, r2
 1965 0082 5433     		adds	r3, r3, #84
 1966 0084 1B78     		ldrb	r3, [r3]
 1967 0086 DBB2     		uxtb	r3, r3
 1968              		.loc 1 1714 23
 1969 0088 012B     		cmp	r3, #1
 1970 008a 05D1     		bne	.L117
1715:ThirdParty/FreeRTOS/tasks.c ****                     {
1716:ThirdParty/FreeRTOS/tasks.c ****                         /* The task was blocked to wait for a notification, but is
1717:ThirdParty/FreeRTOS/tasks.c ****                          * now suspended, so no notification was received. */
1718:ThirdParty/FreeRTOS/tasks.c ****                         pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 1971              		.loc 1 1718 51
 1972 008c 3A69     		ldr	r2, [r7, #16]
 1973 008e 7B69     		ldr	r3, [r7, #20]
 1974 0090 1344     		add	r3, r3, r2
 1975 0092 5433     		adds	r3, r3, #84
 1976 0094 0022     		movs	r2, #0
 1977 0096 1A70     		strb	r2, [r3]
 1978              	.L117:
1712:ThirdParty/FreeRTOS/tasks.c ****                 {
 1979              		.loc 1 1712 73 discriminator 2
 1980 0098 7B69     		ldr	r3, [r7, #20]
 1981 009a 0133     		adds	r3, r3, #1
 1982 009c 7B61     		str	r3, [r7, #20]
 1983              	.L116:
1712:ThirdParty/FreeRTOS/tasks.c ****                 {
 1984              		.loc 1 1712 17 discriminator 1
 1985 009e 7B69     		ldr	r3, [r7, #20]
 1986 00a0 002B     		cmp	r3, #0
 1987 00a2 EBDD     		ble	.L118
 1988              	.LBE182:
1719:ThirdParty/FreeRTOS/tasks.c ****                     }
1720:ThirdParty/FreeRTOS/tasks.c ****                 }
1721:ThirdParty/FreeRTOS/tasks.c ****             }
1722:ThirdParty/FreeRTOS/tasks.c ****             #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1723:ThirdParty/FreeRTOS/tasks.c ****         }
1724:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
 1989              		.loc 1 1724 9
 1990 00a4 FFF7FEFF 		bl	vPortExitCritical
1725:ThirdParty/FreeRTOS/tasks.c **** 
1726:ThirdParty/FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
 1991              		.loc 1 1726 31
 1992 00a8 214B     		ldr	r3, .L126+16
 1993 00aa 1B68     		ldr	r3, [r3]
 1994              		.loc 1 1726 11
 1995 00ac 002B     		cmp	r3, #0
 1996 00ae 05D0     		beq	.L119
1727:ThirdParty/FreeRTOS/tasks.c ****         {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 70


1728:ThirdParty/FreeRTOS/tasks.c ****             /* Reset the next expected unblock time in case it referred to the
1729:ThirdParty/FreeRTOS/tasks.c ****              * task that is now in the Suspended state. */
1730:ThirdParty/FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
 1997              		.loc 1 1730 13
 1998 00b0 FFF7FEFF 		bl	vPortEnterCritical
1731:ThirdParty/FreeRTOS/tasks.c ****             {
1732:ThirdParty/FreeRTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
 1999              		.loc 1 1732 17
 2000 00b4 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1733:ThirdParty/FreeRTOS/tasks.c ****             }
1734:ThirdParty/FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
 2001              		.loc 1 1734 13
 2002 00b8 FFF7FEFF 		bl	vPortExitCritical
 2003              	.L119:
1735:ThirdParty/FreeRTOS/tasks.c ****         }
1736:ThirdParty/FreeRTOS/tasks.c ****         else
1737:ThirdParty/FreeRTOS/tasks.c ****         {
1738:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1739:ThirdParty/FreeRTOS/tasks.c ****         }
1740:ThirdParty/FreeRTOS/tasks.c **** 
1741:ThirdParty/FreeRTOS/tasks.c ****         if( pxTCB == pxCurrentTCB )
 2004              		.loc 1 1741 19
 2005 00bc 184B     		ldr	r3, .L126
 2006 00be 1B68     		ldr	r3, [r3]
 2007              		.loc 1 1741 11
 2008 00c0 3A69     		ldr	r2, [r7, #16]
 2009 00c2 9A42     		cmp	r2, r3
 2010 00c4 27D1     		bne	.L125
1742:ThirdParty/FreeRTOS/tasks.c ****         {
1743:ThirdParty/FreeRTOS/tasks.c ****             if( xSchedulerRunning != pdFALSE )
 2011              		.loc 1 1743 35
 2012 00c6 1A4B     		ldr	r3, .L126+16
 2013 00c8 1B68     		ldr	r3, [r3]
 2014              		.loc 1 1743 15
 2015 00ca 002B     		cmp	r3, #0
 2016 00cc 17D0     		beq	.L121
1744:ThirdParty/FreeRTOS/tasks.c ****             {
1745:ThirdParty/FreeRTOS/tasks.c ****                 /* The current task has just been suspended. */
1746:ThirdParty/FreeRTOS/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
 2017              		.loc 1 1746 17
 2018 00ce 194B     		ldr	r3, .L126+20
 2019 00d0 1B68     		ldr	r3, [r3]
 2020 00d2 002B     		cmp	r3, #0
 2021 00d4 0AD0     		beq	.L122
 2022              	.LBB183:
 2023              	.LBB184:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2024              		.loc 2 198 9
 2025              		.syntax unified
 2026              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2027 00d6 4FF05003 			mov r3, #80												
 2028 00da 83F31188 		msr basepri, r3											
 2029 00de BFF36F8F 		isb														
 2030 00e2 BFF34F8F 		dsb														
 2031              	
 2032              	@ 0 "" 2
 2033              		.thumb
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 71


 2034              		.syntax unified
 2035 00e6 FB60     		str	r3, [r7, #12]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2036              		.loc 2 206 5
 2037 00e8 00BF     		nop
 2038              	.L123:
 2039              	.LBE184:
 2040              	.LBE183:
 2041              		.loc 1 1746 17 discriminator 1
 2042 00ea FEE7     		b	.L123
 2043              	.L122:
1747:ThirdParty/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 2044              		.loc 1 1747 17
 2045 00ec 124B     		ldr	r3, .L126+24
 2046 00ee 4FF08052 		mov	r2, #268435456
 2047 00f2 1A60     		str	r2, [r3]
 2048              		.syntax unified
 2049              	@ 1747 "ThirdParty/FreeRTOS/tasks.c" 1
 2050 00f4 BFF34F8F 		dsb
 2051              	@ 0 "" 2
 2052              	@ 1747 "ThirdParty/FreeRTOS/tasks.c" 1
 2053 00f8 BFF36F8F 		isb
 2054              	@ 0 "" 2
1748:ThirdParty/FreeRTOS/tasks.c ****             }
1749:ThirdParty/FreeRTOS/tasks.c ****             else
1750:ThirdParty/FreeRTOS/tasks.c ****             {
1751:ThirdParty/FreeRTOS/tasks.c ****                 /* The scheduler is not running, but the task that was pointed
1752:ThirdParty/FreeRTOS/tasks.c ****                  * to by pxCurrentTCB has just been suspended and pxCurrentTCB
1753:ThirdParty/FreeRTOS/tasks.c ****                  * must be adjusted to point to a different task. */
1754:ThirdParty/FreeRTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*li
1755:ThirdParty/FreeRTOS/tasks.c ****                 {
1756:ThirdParty/FreeRTOS/tasks.c ****                     /* No other tasks are ready, so set pxCurrentTCB back to
1757:ThirdParty/FreeRTOS/tasks.c ****                      * NULL so when the next task is created pxCurrentTCB will
1758:ThirdParty/FreeRTOS/tasks.c ****                      * be set to point to it no matter what its relative priority
1759:ThirdParty/FreeRTOS/tasks.c ****                      * is. */
1760:ThirdParty/FreeRTOS/tasks.c ****                     pxCurrentTCB = NULL;
1761:ThirdParty/FreeRTOS/tasks.c ****                 }
1762:ThirdParty/FreeRTOS/tasks.c ****                 else
1763:ThirdParty/FreeRTOS/tasks.c ****                 {
1764:ThirdParty/FreeRTOS/tasks.c ****                     vTaskSwitchContext();
1765:ThirdParty/FreeRTOS/tasks.c ****                 }
1766:ThirdParty/FreeRTOS/tasks.c ****             }
1767:ThirdParty/FreeRTOS/tasks.c ****         }
1768:ThirdParty/FreeRTOS/tasks.c ****         else
1769:ThirdParty/FreeRTOS/tasks.c ****         {
1770:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1771:ThirdParty/FreeRTOS/tasks.c ****         }
1772:ThirdParty/FreeRTOS/tasks.c ****     }
 2055              		.loc 1 1772 5
 2056              		.thumb
 2057              		.syntax unified
 2058 00fc 0BE0     		b	.L125
 2059              	.L121:
1754:ThirdParty/FreeRTOS/tasks.c ****                 {
 2060              		.loc 1 1754 21
 2061 00fe 0B4B     		ldr	r3, .L126+12
 2062 0100 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 72


1754:ThirdParty/FreeRTOS/tasks.c ****                 {
 2063              		.loc 1 1754 68
 2064 0102 0E4B     		ldr	r3, .L126+28
 2065 0104 1B68     		ldr	r3, [r3]
1754:ThirdParty/FreeRTOS/tasks.c ****                 {
 2066              		.loc 1 1754 19
 2067 0106 9A42     		cmp	r2, r3
 2068 0108 03D1     		bne	.L124
1760:ThirdParty/FreeRTOS/tasks.c ****                 }
 2069              		.loc 1 1760 34
 2070 010a 054B     		ldr	r3, .L126
 2071 010c 0022     		movs	r2, #0
 2072 010e 1A60     		str	r2, [r3]
 2073              		.loc 1 1772 5
 2074 0110 01E0     		b	.L125
 2075              	.L124:
1764:ThirdParty/FreeRTOS/tasks.c ****                 }
 2076              		.loc 1 1764 21
 2077 0112 FFF7FEFF 		bl	vTaskSwitchContext
 2078              	.L125:
 2079              		.loc 1 1772 5
 2080 0116 00BF     		nop
 2081 0118 1837     		adds	r7, r7, #24
 2082              	.LCFI53:
 2083              		.cfi_def_cfa_offset 8
 2084 011a BD46     		mov	sp, r7
 2085              	.LCFI54:
 2086              		.cfi_def_cfa_register 13
 2087              		@ sp needed
 2088 011c 80BD     		pop	{r7, pc}
 2089              	.L127:
 2090 011e 00BF     		.align	2
 2091              	.L126:
 2092 0120 00000000 		.word	pxCurrentTCB
 2093 0124 00000000 		.word	pxReadyTasksLists
 2094 0128 00000000 		.word	uxTopReadyPriority
 2095 012c 00000000 		.word	xSuspendedTaskList
 2096 0130 00000000 		.word	xSchedulerRunning
 2097 0134 00000000 		.word	uxSchedulerSuspended
 2098 0138 04ED00E0 		.word	-536810236
 2099 013c 00000000 		.word	uxCurrentNumberOfTasks
 2100              		.cfi_endproc
 2101              	.LFE15:
 2103              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 2104              		.align	1
 2105              		.syntax unified
 2106              		.thumb
 2107              		.thumb_func
 2109              	prvTaskIsTaskSuspended:
 2110              	.LFB16:
1773:ThirdParty/FreeRTOS/tasks.c **** 
1774:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1775:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1776:ThirdParty/FreeRTOS/tasks.c **** 
1777:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1778:ThirdParty/FreeRTOS/tasks.c **** 
1779:ThirdParty/FreeRTOS/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 73


1780:ThirdParty/FreeRTOS/tasks.c ****     {
 2111              		.loc 1 1780 5
 2112              		.cfi_startproc
 2113              		@ args = 0, pretend = 0, frame = 24
 2114              		@ frame_needed = 1, uses_anonymous_args = 0
 2115              		@ link register save eliminated.
 2116 0000 80B4     		push	{r7}
 2117              	.LCFI55:
 2118              		.cfi_def_cfa_offset 4
 2119              		.cfi_offset 7, -4
 2120 0002 87B0     		sub	sp, sp, #28
 2121              	.LCFI56:
 2122              		.cfi_def_cfa_offset 32
 2123 0004 00AF     		add	r7, sp, #0
 2124              	.LCFI57:
 2125              		.cfi_def_cfa_register 7
 2126 0006 7860     		str	r0, [r7, #4]
1781:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 2127              		.loc 1 1781 20
 2128 0008 0023     		movs	r3, #0
 2129 000a 7B61     		str	r3, [r7, #20]
1782:ThirdParty/FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
 2130              		.loc 1 1782 29
 2131 000c 7B68     		ldr	r3, [r7, #4]
 2132 000e 3B61     		str	r3, [r7, #16]
1783:ThirdParty/FreeRTOS/tasks.c **** 
1784:ThirdParty/FreeRTOS/tasks.c ****         /* Accesses xPendingReadyList so must be called from a critical
1785:ThirdParty/FreeRTOS/tasks.c ****          * section. */
1786:ThirdParty/FreeRTOS/tasks.c **** 
1787:ThirdParty/FreeRTOS/tasks.c ****         /* It does not make sense to check if the calling task is suspended. */
1788:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( xTask );
 2133              		.loc 1 1788 9
 2134 0010 7B68     		ldr	r3, [r7, #4]
 2135 0012 002B     		cmp	r3, #0
 2136 0014 0AD1     		bne	.L129
 2137              	.LBB185:
 2138              	.LBB186:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2139              		.loc 2 198 9
 2140              		.syntax unified
 2141              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2142 0016 4FF05003 			mov r3, #80												
 2143 001a 83F31188 		msr basepri, r3											
 2144 001e BFF36F8F 		isb														
 2145 0022 BFF34F8F 		dsb														
 2146              	
 2147              	@ 0 "" 2
 2148              		.thumb
 2149              		.syntax unified
 2150 0026 FB60     		str	r3, [r7, #12]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2151              		.loc 2 206 5
 2152 0028 00BF     		nop
 2153              	.L130:
 2154              	.LBE186:
 2155              	.LBE185:
 2156              		.loc 1 1788 9 discriminator 1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 74


 2157 002a FEE7     		b	.L130
 2158              	.L129:
1789:ThirdParty/FreeRTOS/tasks.c **** 
1790:ThirdParty/FreeRTOS/tasks.c ****         /* Is the task being resumed actually in the suspended list? */
1791:ThirdParty/FreeRTOS/tasks.c ****         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 2159              		.loc 1 1791 13
 2160 002c 3B69     		ldr	r3, [r7, #16]
 2161 002e 5B69     		ldr	r3, [r3, #20]
 2162              		.loc 1 1791 11
 2163 0030 0A4A     		ldr	r2, .L133
 2164 0032 9342     		cmp	r3, r2
 2165 0034 0AD1     		bne	.L131
1792:ThirdParty/FreeRTOS/tasks.c ****         {
1793:ThirdParty/FreeRTOS/tasks.c ****             /* Has the task already been resumed from within an ISR? */
1794:ThirdParty/FreeRTOS/tasks.c ****             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALS
 2166              		.loc 1 1794 17
 2167 0036 3B69     		ldr	r3, [r7, #16]
 2168 0038 9B6A     		ldr	r3, [r3, #40]
 2169              		.loc 1 1794 15
 2170 003a 094A     		ldr	r2, .L133+4
 2171 003c 9342     		cmp	r3, r2
 2172 003e 05D0     		beq	.L131
1795:ThirdParty/FreeRTOS/tasks.c ****             {
1796:ThirdParty/FreeRTOS/tasks.c ****                 /* Is it in the suspended list because it is in the Suspended
1797:ThirdParty/FreeRTOS/tasks.c ****                  * state, or because is is blocked with no timeout? */
1798:ThirdParty/FreeRTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint
 2173              		.loc 1 1798 21
 2174 0040 3B69     		ldr	r3, [r7, #16]
 2175 0042 9B6A     		ldr	r3, [r3, #40]
 2176              		.loc 1 1798 19
 2177 0044 002B     		cmp	r3, #0
 2178 0046 01D1     		bne	.L131
1799:ThirdParty/FreeRTOS/tasks.c ****                 {
1800:ThirdParty/FreeRTOS/tasks.c ****                     xReturn = pdTRUE;
 2179              		.loc 1 1800 29
 2180 0048 0123     		movs	r3, #1
 2181 004a 7B61     		str	r3, [r7, #20]
 2182              	.L131:
1801:ThirdParty/FreeRTOS/tasks.c ****                 }
1802:ThirdParty/FreeRTOS/tasks.c ****                 else
1803:ThirdParty/FreeRTOS/tasks.c ****                 {
1804:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1805:ThirdParty/FreeRTOS/tasks.c ****                 }
1806:ThirdParty/FreeRTOS/tasks.c ****             }
1807:ThirdParty/FreeRTOS/tasks.c ****             else
1808:ThirdParty/FreeRTOS/tasks.c ****             {
1809:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1810:ThirdParty/FreeRTOS/tasks.c ****             }
1811:ThirdParty/FreeRTOS/tasks.c ****         }
1812:ThirdParty/FreeRTOS/tasks.c ****         else
1813:ThirdParty/FreeRTOS/tasks.c ****         {
1814:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1815:ThirdParty/FreeRTOS/tasks.c ****         }
1816:ThirdParty/FreeRTOS/tasks.c **** 
1817:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
 2183              		.loc 1 1817 16
 2184 004c 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 75


1818:ThirdParty/FreeRTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 2185              		.loc 1 1818 5
 2186 004e 1846     		mov	r0, r3
 2187 0050 1C37     		adds	r7, r7, #28
 2188              	.LCFI58:
 2189              		.cfi_def_cfa_offset 4
 2190 0052 BD46     		mov	sp, r7
 2191              	.LCFI59:
 2192              		.cfi_def_cfa_register 13
 2193              		@ sp needed
 2194 0054 5DF8047B 		ldr	r7, [sp], #4
 2195              	.LCFI60:
 2196              		.cfi_restore 7
 2197              		.cfi_def_cfa_offset 0
 2198 0058 7047     		bx	lr
 2199              	.L134:
 2200 005a 00BF     		.align	2
 2201              	.L133:
 2202 005c 00000000 		.word	xSuspendedTaskList
 2203 0060 00000000 		.word	xPendingReadyList
 2204              		.cfi_endproc
 2205              	.LFE16:
 2207              		.section	.text.vTaskResume,"ax",%progbits
 2208              		.align	1
 2209              		.global	vTaskResume
 2210              		.syntax unified
 2211              		.thumb
 2212              		.thumb_func
 2214              	vTaskResume:
 2215              	.LFB17:
1819:ThirdParty/FreeRTOS/tasks.c **** 
1820:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1821:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1822:ThirdParty/FreeRTOS/tasks.c **** 
1823:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1824:ThirdParty/FreeRTOS/tasks.c **** 
1825:ThirdParty/FreeRTOS/tasks.c ****     void vTaskResume( TaskHandle_t xTaskToResume )
1826:ThirdParty/FreeRTOS/tasks.c ****     {
 2216              		.loc 1 1826 5
 2217              		.cfi_startproc
 2218              		@ args = 0, pretend = 0, frame = 24
 2219              		@ frame_needed = 1, uses_anonymous_args = 0
 2220 0000 80B5     		push	{r7, lr}
 2221              	.LCFI61:
 2222              		.cfi_def_cfa_offset 8
 2223              		.cfi_offset 7, -8
 2224              		.cfi_offset 14, -4
 2225 0002 86B0     		sub	sp, sp, #24
 2226              	.LCFI62:
 2227              		.cfi_def_cfa_offset 32
 2228 0004 00AF     		add	r7, sp, #0
 2229              	.LCFI63:
 2230              		.cfi_def_cfa_register 7
 2231 0006 7860     		str	r0, [r7, #4]
1827:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2232              		.loc 1 1827 23
 2233 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 76


 2234 000a 7B61     		str	r3, [r7, #20]
1828:ThirdParty/FreeRTOS/tasks.c **** 
1829:ThirdParty/FreeRTOS/tasks.c ****         /* It does not make sense to resume the calling task. */
1830:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( xTaskToResume );
 2235              		.loc 1 1830 9
 2236 000c 7B68     		ldr	r3, [r7, #4]
 2237 000e 002B     		cmp	r3, #0
 2238 0010 0AD1     		bne	.L136
 2239              	.LBB187:
 2240              	.LBB188:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2241              		.loc 2 198 9
 2242              		.syntax unified
 2243              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2244 0012 4FF05003 			mov r3, #80												
 2245 0016 83F31188 		msr basepri, r3											
 2246 001a BFF36F8F 		isb														
 2247 001e BFF34F8F 		dsb														
 2248              	
 2249              	@ 0 "" 2
 2250              		.thumb
 2251              		.syntax unified
 2252 0022 FB60     		str	r3, [r7, #12]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2253              		.loc 2 206 5
 2254 0024 00BF     		nop
 2255              	.L137:
 2256              	.LBE188:
 2257              	.LBE187:
 2258              		.loc 1 1830 9 discriminator 1
 2259 0026 FEE7     		b	.L137
 2260              	.L136:
1831:ThirdParty/FreeRTOS/tasks.c **** 
1832:ThirdParty/FreeRTOS/tasks.c ****         /* The parameter cannot be NULL as it is impossible to resume the
1833:ThirdParty/FreeRTOS/tasks.c ****          * currently executing task. */
1834:ThirdParty/FreeRTOS/tasks.c ****         if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 2261              		.loc 1 1834 21
 2262 0028 2D4B     		ldr	r3, .L141
 2263 002a 1B68     		ldr	r3, [r3]
 2264              		.loc 1 1834 11
 2265 002c 7A69     		ldr	r2, [r7, #20]
 2266 002e 9A42     		cmp	r2, r3
 2267 0030 52D0     		beq	.L140
 2268              		.loc 1 1834 39 discriminator 1
 2269 0032 7B69     		ldr	r3, [r7, #20]
 2270 0034 002B     		cmp	r3, #0
 2271 0036 4FD0     		beq	.L140
1835:ThirdParty/FreeRTOS/tasks.c ****         {
1836:ThirdParty/FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
 2272              		.loc 1 1836 13
 2273 0038 FFF7FEFF 		bl	vPortEnterCritical
1837:ThirdParty/FreeRTOS/tasks.c ****             {
1838:ThirdParty/FreeRTOS/tasks.c ****                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2274              		.loc 1 1838 21
 2275 003c 7869     		ldr	r0, [r7, #20]
 2276 003e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2277 0042 0346     		mov	r3, r0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 77


 2278              		.loc 1 1838 19
 2279 0044 002B     		cmp	r3, #0
 2280 0046 45D0     		beq	.L139
1839:ThirdParty/FreeRTOS/tasks.c ****                 {
1840:ThirdParty/FreeRTOS/tasks.c ****                     traceTASK_RESUME( pxTCB );
1841:ThirdParty/FreeRTOS/tasks.c **** 
1842:ThirdParty/FreeRTOS/tasks.c ****                     /* The ready list can be accessed even if the scheduler is
1843:ThirdParty/FreeRTOS/tasks.c ****                      * suspended because this is inside a critical section. */
1844:ThirdParty/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2281              		.loc 1 1844 30
 2282 0048 7B69     		ldr	r3, [r7, #20]
 2283 004a 0433     		adds	r3, r3, #4
 2284 004c 1846     		mov	r0, r3
 2285 004e FFF7FEFF 		bl	uxListRemove
1845:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2286              		.loc 1 1845 21
 2287 0052 7B69     		ldr	r3, [r7, #20]
 2288 0054 DB6A     		ldr	r3, [r3, #44]
 2289 0056 0122     		movs	r2, #1
 2290 0058 9A40     		lsls	r2, r2, r3
 2291 005a 224B     		ldr	r3, .L141+4
 2292 005c 1B68     		ldr	r3, [r3]
 2293 005e 1343     		orrs	r3, r3, r2
 2294 0060 204A     		ldr	r2, .L141+4
 2295 0062 1360     		str	r3, [r2]
 2296              	.LBB189:
 2297 0064 7B69     		ldr	r3, [r7, #20]
 2298 0066 DA6A     		ldr	r2, [r3, #44]
 2299 0068 1F49     		ldr	r1, .L141+8
 2300 006a 1346     		mov	r3, r2
 2301 006c 9B00     		lsls	r3, r3, #2
 2302 006e 1344     		add	r3, r3, r2
 2303 0070 9B00     		lsls	r3, r3, #2
 2304 0072 0B44     		add	r3, r3, r1
 2305 0074 0433     		adds	r3, r3, #4
 2306 0076 1B68     		ldr	r3, [r3]
 2307 0078 3B61     		str	r3, [r7, #16]
 2308 007a 7B69     		ldr	r3, [r7, #20]
 2309 007c 3A69     		ldr	r2, [r7, #16]
 2310 007e 9A60     		str	r2, [r3, #8]
 2311 0080 3B69     		ldr	r3, [r7, #16]
 2312 0082 9A68     		ldr	r2, [r3, #8]
 2313 0084 7B69     		ldr	r3, [r7, #20]
 2314 0086 DA60     		str	r2, [r3, #12]
 2315 0088 3B69     		ldr	r3, [r7, #16]
 2316 008a 9B68     		ldr	r3, [r3, #8]
 2317 008c 7A69     		ldr	r2, [r7, #20]
 2318 008e 0432     		adds	r2, r2, #4
 2319 0090 5A60     		str	r2, [r3, #4]
 2320 0092 7B69     		ldr	r3, [r7, #20]
 2321 0094 1A1D     		adds	r2, r3, #4
 2322 0096 3B69     		ldr	r3, [r7, #16]
 2323 0098 9A60     		str	r2, [r3, #8]
 2324 009a 7B69     		ldr	r3, [r7, #20]
 2325 009c DA6A     		ldr	r2, [r3, #44]
 2326 009e 1346     		mov	r3, r2
 2327 00a0 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 78


 2328 00a2 1344     		add	r3, r3, r2
 2329 00a4 9B00     		lsls	r3, r3, #2
 2330 00a6 104A     		ldr	r2, .L141+8
 2331 00a8 1A44     		add	r2, r2, r3
 2332 00aa 7B69     		ldr	r3, [r7, #20]
 2333 00ac 5A61     		str	r2, [r3, #20]
 2334 00ae 7B69     		ldr	r3, [r7, #20]
 2335 00b0 DA6A     		ldr	r2, [r3, #44]
 2336 00b2 0D49     		ldr	r1, .L141+8
 2337 00b4 1346     		mov	r3, r2
 2338 00b6 9B00     		lsls	r3, r3, #2
 2339 00b8 1344     		add	r3, r3, r2
 2340 00ba 9B00     		lsls	r3, r3, #2
 2341 00bc 0B44     		add	r3, r3, r1
 2342 00be 1B68     		ldr	r3, [r3]
 2343 00c0 591C     		adds	r1, r3, #1
 2344 00c2 0948     		ldr	r0, .L141+8
 2345 00c4 1346     		mov	r3, r2
 2346 00c6 9B00     		lsls	r3, r3, #2
 2347 00c8 1344     		add	r3, r3, r2
 2348 00ca 9B00     		lsls	r3, r3, #2
 2349 00cc 0344     		add	r3, r3, r0
 2350 00ce 1960     		str	r1, [r3]
 2351              	.LBE189:
1846:ThirdParty/FreeRTOS/tasks.c **** 
1847:ThirdParty/FreeRTOS/tasks.c ****                     /* A higher priority task may have just been resumed. */
1848:ThirdParty/FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2352              		.loc 1 1848 58
 2353 00d0 034B     		ldr	r3, .L141
 2354 00d2 1B68     		ldr	r3, [r3]
 2355              	.L139:
1849:ThirdParty/FreeRTOS/tasks.c ****                     {
1850:ThirdParty/FreeRTOS/tasks.c ****                         /* This yield may not cause the task just resumed to run,
1851:ThirdParty/FreeRTOS/tasks.c ****                          * but will leave the lists in the correct state for the
1852:ThirdParty/FreeRTOS/tasks.c ****                          * next yield. */
1853:ThirdParty/FreeRTOS/tasks.c ****                         taskYIELD_IF_USING_PREEMPTION();
1854:ThirdParty/FreeRTOS/tasks.c ****                     }
1855:ThirdParty/FreeRTOS/tasks.c ****                     else
1856:ThirdParty/FreeRTOS/tasks.c ****                     {
1857:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1858:ThirdParty/FreeRTOS/tasks.c ****                     }
1859:ThirdParty/FreeRTOS/tasks.c ****                 }
1860:ThirdParty/FreeRTOS/tasks.c ****                 else
1861:ThirdParty/FreeRTOS/tasks.c ****                 {
1862:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1863:ThirdParty/FreeRTOS/tasks.c ****                 }
1864:ThirdParty/FreeRTOS/tasks.c ****             }
1865:ThirdParty/FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
 2356              		.loc 1 1865 13
 2357 00d4 FFF7FEFF 		bl	vPortExitCritical
 2358              	.L140:
1866:ThirdParty/FreeRTOS/tasks.c ****         }
1867:ThirdParty/FreeRTOS/tasks.c ****         else
1868:ThirdParty/FreeRTOS/tasks.c ****         {
1869:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1870:ThirdParty/FreeRTOS/tasks.c ****         }
1871:ThirdParty/FreeRTOS/tasks.c ****     }
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 79


 2359              		.loc 1 1871 5
 2360 00d8 00BF     		nop
 2361 00da 1837     		adds	r7, r7, #24
 2362              	.LCFI64:
 2363              		.cfi_def_cfa_offset 8
 2364 00dc BD46     		mov	sp, r7
 2365              	.LCFI65:
 2366              		.cfi_def_cfa_register 13
 2367              		@ sp needed
 2368 00de 80BD     		pop	{r7, pc}
 2369              	.L142:
 2370              		.align	2
 2371              	.L141:
 2372 00e0 00000000 		.word	pxCurrentTCB
 2373 00e4 00000000 		.word	uxTopReadyPriority
 2374 00e8 00000000 		.word	pxReadyTasksLists
 2375              		.cfi_endproc
 2376              	.LFE17:
 2378              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2379              		.align	1
 2380              		.global	xTaskResumeFromISR
 2381              		.syntax unified
 2382              		.thumb
 2383              		.thumb_func
 2385              	xTaskResumeFromISR:
 2386              	.LFB18:
1872:ThirdParty/FreeRTOS/tasks.c **** 
1873:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1874:ThirdParty/FreeRTOS/tasks.c **** 
1875:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1876:ThirdParty/FreeRTOS/tasks.c **** 
1877:ThirdParty/FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1878:ThirdParty/FreeRTOS/tasks.c **** 
1879:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1880:ThirdParty/FreeRTOS/tasks.c ****     {
 2387              		.loc 1 1880 5
 2388              		.cfi_startproc
 2389              		@ args = 0, pretend = 0, frame = 40
 2390              		@ frame_needed = 1, uses_anonymous_args = 0
 2391 0000 80B5     		push	{r7, lr}
 2392              	.LCFI66:
 2393              		.cfi_def_cfa_offset 8
 2394              		.cfi_offset 7, -8
 2395              		.cfi_offset 14, -4
 2396 0002 8AB0     		sub	sp, sp, #40
 2397              	.LCFI67:
 2398              		.cfi_def_cfa_offset 48
 2399 0004 00AF     		add	r7, sp, #0
 2400              	.LCFI68:
 2401              		.cfi_def_cfa_register 7
 2402 0006 7860     		str	r0, [r7, #4]
1881:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 2403              		.loc 1 1881 20
 2404 0008 0023     		movs	r3, #0
 2405 000a 7B62     		str	r3, [r7, #36]
1882:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2406              		.loc 1 1882 23
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 80


 2407 000c 7B68     		ldr	r3, [r7, #4]
 2408 000e 3B62     		str	r3, [r7, #32]
1883:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
1884:ThirdParty/FreeRTOS/tasks.c **** 
1885:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( xTaskToResume );
 2409              		.loc 1 1885 9
 2410 0010 7B68     		ldr	r3, [r7, #4]
 2411 0012 002B     		cmp	r3, #0
 2412 0014 0AD1     		bne	.L144
 2413              	.LBB190:
 2414              	.LBB191:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2415              		.loc 2 198 9
 2416              		.syntax unified
 2417              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2418 0016 4FF05003 			mov r3, #80												
 2419 001a 83F31188 		msr basepri, r3											
 2420 001e BFF36F8F 		isb														
 2421 0022 BFF34F8F 		dsb														
 2422              	
 2423              	@ 0 "" 2
 2424              		.thumb
 2425              		.syntax unified
 2426 0026 7B61     		str	r3, [r7, #20]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2427              		.loc 2 206 5
 2428 0028 00BF     		nop
 2429              	.L145:
 2430              	.LBE191:
 2431              	.LBE190:
 2432              		.loc 1 1885 9 discriminator 1
 2433 002a FEE7     		b	.L145
 2434              	.L144:
1886:ThirdParty/FreeRTOS/tasks.c **** 
1887:ThirdParty/FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1888:ThirdParty/FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1889:ThirdParty/FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1890:ThirdParty/FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1891:ThirdParty/FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1892:ThirdParty/FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
1893:ThirdParty/FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1894:ThirdParty/FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1895:ThirdParty/FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
1896:ThirdParty/FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1897:ThirdParty/FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1898:ThirdParty/FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1899:ThirdParty/FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1900:ThirdParty/FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1901:ThirdParty/FreeRTOS/tasks.c ****          * provided on the following link:
1902:ThirdParty/FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1903:ThirdParty/FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2435              		.loc 1 1903 9
 2436 002c FFF7FEFF 		bl	vPortValidateInterruptPriority
 2437              	.LBB192:
 2438              	.LBB193:
 214:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2439              		.loc 2 214 9
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 81


 2440              		.syntax unified
 2441              	@ 214 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2442 0030 EFF31182 			mrs r2, basepri											
 2443 0034 4FF05003 		mov r3, #80												
 2444 0038 83F31188 		msr basepri, r3											
 2445 003c BFF36F8F 		isb														
 2446 0040 BFF34F8F 		dsb														
 2447              	
 2448              	@ 0 "" 2
 2449              		.thumb
 2450              		.syntax unified
 2451 0044 3A61     		str	r2, [r7, #16]
 2452 0046 FB60     		str	r3, [r7, #12]
 226:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 2453              		.loc 2 226 16
 2454 0048 3B69     		ldr	r3, [r7, #16]
 2455              	.LBE193:
 2456              	.LBE192:
1904:ThirdParty/FreeRTOS/tasks.c **** 
1905:ThirdParty/FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2457              		.loc 1 1905 34
 2458 004a FB61     		str	r3, [r7, #28]
1906:ThirdParty/FreeRTOS/tasks.c ****         {
1907:ThirdParty/FreeRTOS/tasks.c ****             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2459              		.loc 1 1907 17
 2460 004c 386A     		ldr	r0, [r7, #32]
 2461 004e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2462 0052 0346     		mov	r3, r0
 2463              		.loc 1 1907 15
 2464 0054 002B     		cmp	r3, #0
 2465 0056 5AD0     		beq	.L147
1908:ThirdParty/FreeRTOS/tasks.c ****             {
1909:ThirdParty/FreeRTOS/tasks.c ****                 traceTASK_RESUME_FROM_ISR( pxTCB );
1910:ThirdParty/FreeRTOS/tasks.c **** 
1911:ThirdParty/FreeRTOS/tasks.c ****                 /* Check the ready lists can be accessed. */
1912:ThirdParty/FreeRTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2466              		.loc 1 1912 42
 2467 0058 324B     		ldr	r3, .L151
 2468 005a 1B68     		ldr	r3, [r3]
 2469              		.loc 1 1912 19
 2470 005c 002B     		cmp	r3, #0
 2471 005e 50D1     		bne	.L148
1913:ThirdParty/FreeRTOS/tasks.c ****                 {
1914:ThirdParty/FreeRTOS/tasks.c ****                     /* Ready lists can be accessed so move the task from the
1915:ThirdParty/FreeRTOS/tasks.c ****                      * suspended list to the ready list directly. */
1916:ThirdParty/FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2472              		.loc 1 1916 30
 2473 0060 3B6A     		ldr	r3, [r7, #32]
 2474 0062 DA6A     		ldr	r2, [r3, #44]
 2475              		.loc 1 1916 58
 2476 0064 304B     		ldr	r3, .L151+4
 2477 0066 1B68     		ldr	r3, [r3]
 2478 0068 DB6A     		ldr	r3, [r3, #44]
 2479              		.loc 1 1916 23
 2480 006a 9A42     		cmp	r2, r3
 2481 006c 04D3     		bcc	.L149
1917:ThirdParty/FreeRTOS/tasks.c ****                     {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 82


1918:ThirdParty/FreeRTOS/tasks.c ****                         xYieldRequired = pdTRUE;
 2482              		.loc 1 1918 40
 2483 006e 0123     		movs	r3, #1
 2484 0070 7B62     		str	r3, [r7, #36]
1919:ThirdParty/FreeRTOS/tasks.c **** 
1920:ThirdParty/FreeRTOS/tasks.c ****                         /* Mark that a yield is pending in case the user is not
1921:ThirdParty/FreeRTOS/tasks.c ****                          * using the return value to initiate a context switch
1922:ThirdParty/FreeRTOS/tasks.c ****                          * from the ISR using portYIELD_FROM_ISR. */
1923:ThirdParty/FreeRTOS/tasks.c ****                         xYieldPending = pdTRUE;
 2485              		.loc 1 1923 39
 2486 0072 2E4B     		ldr	r3, .L151+8
 2487 0074 0122     		movs	r2, #1
 2488 0076 1A60     		str	r2, [r3]
 2489              	.L149:
1924:ThirdParty/FreeRTOS/tasks.c ****                     }
1925:ThirdParty/FreeRTOS/tasks.c ****                     else
1926:ThirdParty/FreeRTOS/tasks.c ****                     {
1927:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1928:ThirdParty/FreeRTOS/tasks.c ****                     }
1929:ThirdParty/FreeRTOS/tasks.c **** 
1930:ThirdParty/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2490              		.loc 1 1930 30
 2491 0078 3B6A     		ldr	r3, [r7, #32]
 2492 007a 0433     		adds	r3, r3, #4
 2493 007c 1846     		mov	r0, r3
 2494 007e FFF7FEFF 		bl	uxListRemove
1931:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2495              		.loc 1 1931 21
 2496 0082 3B6A     		ldr	r3, [r7, #32]
 2497 0084 DB6A     		ldr	r3, [r3, #44]
 2498 0086 0122     		movs	r2, #1
 2499 0088 9A40     		lsls	r2, r2, r3
 2500 008a 294B     		ldr	r3, .L151+12
 2501 008c 1B68     		ldr	r3, [r3]
 2502 008e 1343     		orrs	r3, r3, r2
 2503 0090 274A     		ldr	r2, .L151+12
 2504 0092 1360     		str	r3, [r2]
 2505              	.LBB194:
 2506 0094 3B6A     		ldr	r3, [r7, #32]
 2507 0096 DA6A     		ldr	r2, [r3, #44]
 2508 0098 2649     		ldr	r1, .L151+16
 2509 009a 1346     		mov	r3, r2
 2510 009c 9B00     		lsls	r3, r3, #2
 2511 009e 1344     		add	r3, r3, r2
 2512 00a0 9B00     		lsls	r3, r3, #2
 2513 00a2 0B44     		add	r3, r3, r1
 2514 00a4 0433     		adds	r3, r3, #4
 2515 00a6 1B68     		ldr	r3, [r3]
 2516 00a8 BB61     		str	r3, [r7, #24]
 2517 00aa 3B6A     		ldr	r3, [r7, #32]
 2518 00ac BA69     		ldr	r2, [r7, #24]
 2519 00ae 9A60     		str	r2, [r3, #8]
 2520 00b0 BB69     		ldr	r3, [r7, #24]
 2521 00b2 9A68     		ldr	r2, [r3, #8]
 2522 00b4 3B6A     		ldr	r3, [r7, #32]
 2523 00b6 DA60     		str	r2, [r3, #12]
 2524 00b8 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 83


 2525 00ba 9B68     		ldr	r3, [r3, #8]
 2526 00bc 3A6A     		ldr	r2, [r7, #32]
 2527 00be 0432     		adds	r2, r2, #4
 2528 00c0 5A60     		str	r2, [r3, #4]
 2529 00c2 3B6A     		ldr	r3, [r7, #32]
 2530 00c4 1A1D     		adds	r2, r3, #4
 2531 00c6 BB69     		ldr	r3, [r7, #24]
 2532 00c8 9A60     		str	r2, [r3, #8]
 2533 00ca 3B6A     		ldr	r3, [r7, #32]
 2534 00cc DA6A     		ldr	r2, [r3, #44]
 2535 00ce 1346     		mov	r3, r2
 2536 00d0 9B00     		lsls	r3, r3, #2
 2537 00d2 1344     		add	r3, r3, r2
 2538 00d4 9B00     		lsls	r3, r3, #2
 2539 00d6 174A     		ldr	r2, .L151+16
 2540 00d8 1A44     		add	r2, r2, r3
 2541 00da 3B6A     		ldr	r3, [r7, #32]
 2542 00dc 5A61     		str	r2, [r3, #20]
 2543 00de 3B6A     		ldr	r3, [r7, #32]
 2544 00e0 DA6A     		ldr	r2, [r3, #44]
 2545 00e2 1449     		ldr	r1, .L151+16
 2546 00e4 1346     		mov	r3, r2
 2547 00e6 9B00     		lsls	r3, r3, #2
 2548 00e8 1344     		add	r3, r3, r2
 2549 00ea 9B00     		lsls	r3, r3, #2
 2550 00ec 0B44     		add	r3, r3, r1
 2551 00ee 1B68     		ldr	r3, [r3]
 2552 00f0 591C     		adds	r1, r3, #1
 2553 00f2 1048     		ldr	r0, .L151+16
 2554 00f4 1346     		mov	r3, r2
 2555 00f6 9B00     		lsls	r3, r3, #2
 2556 00f8 1344     		add	r3, r3, r2
 2557 00fa 9B00     		lsls	r3, r3, #2
 2558 00fc 0344     		add	r3, r3, r0
 2559 00fe 1960     		str	r1, [r3]
 2560              	.LBE194:
 2561 0100 05E0     		b	.L147
 2562              	.L148:
1932:ThirdParty/FreeRTOS/tasks.c ****                 }
1933:ThirdParty/FreeRTOS/tasks.c ****                 else
1934:ThirdParty/FreeRTOS/tasks.c ****                 {
1935:ThirdParty/FreeRTOS/tasks.c ****                     /* The delayed or ready lists cannot be accessed so the task
1936:ThirdParty/FreeRTOS/tasks.c ****                      * is held in the pending ready list until the scheduler is
1937:ThirdParty/FreeRTOS/tasks.c ****                      * unsuspended. */
1938:ThirdParty/FreeRTOS/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2563              		.loc 1 1938 21
 2564 0102 3B6A     		ldr	r3, [r7, #32]
 2565 0104 1833     		adds	r3, r3, #24
 2566 0106 1946     		mov	r1, r3
 2567 0108 0B48     		ldr	r0, .L151+20
 2568 010a FFF7FEFF 		bl	vListInsertEnd
 2569              	.L147:
 2570 010e FB69     		ldr	r3, [r7, #28]
 2571 0110 BB60     		str	r3, [r7, #8]
 2572              	.LBB195:
 2573              	.LBB196:
 232:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 84


 2574              		.loc 2 232 9
 2575 0112 BB68     		ldr	r3, [r7, #8]
 2576              		.syntax unified
 2577              	@ 232 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2578 0114 83F31188 			msr basepri, r3	
 2579              	@ 0 "" 2
 2580              		.loc 2 236 5
 2581              		.thumb
 2582              		.syntax unified
 2583 0118 00BF     		nop
 2584              	.LBE196:
 2585              	.LBE195:
1939:ThirdParty/FreeRTOS/tasks.c ****                 }
1940:ThirdParty/FreeRTOS/tasks.c ****             }
1941:ThirdParty/FreeRTOS/tasks.c ****             else
1942:ThirdParty/FreeRTOS/tasks.c ****             {
1943:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1944:ThirdParty/FreeRTOS/tasks.c ****             }
1945:ThirdParty/FreeRTOS/tasks.c ****         }
1946:ThirdParty/FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1947:ThirdParty/FreeRTOS/tasks.c **** 
1948:ThirdParty/FreeRTOS/tasks.c ****         return xYieldRequired;
 2586              		.loc 1 1948 16
 2587 011a 7B6A     		ldr	r3, [r7, #36]
1949:ThirdParty/FreeRTOS/tasks.c ****     }
 2588              		.loc 1 1949 5
 2589 011c 1846     		mov	r0, r3
 2590 011e 2837     		adds	r7, r7, #40
 2591              	.LCFI69:
 2592              		.cfi_def_cfa_offset 8
 2593 0120 BD46     		mov	sp, r7
 2594              	.LCFI70:
 2595              		.cfi_def_cfa_register 13
 2596              		@ sp needed
 2597 0122 80BD     		pop	{r7, pc}
 2598              	.L152:
 2599              		.align	2
 2600              	.L151:
 2601 0124 00000000 		.word	uxSchedulerSuspended
 2602 0128 00000000 		.word	pxCurrentTCB
 2603 012c 00000000 		.word	xYieldPending
 2604 0130 00000000 		.word	uxTopReadyPriority
 2605 0134 00000000 		.word	pxReadyTasksLists
 2606 0138 00000000 		.word	xPendingReadyList
 2607              		.cfi_endproc
 2608              	.LFE18:
 2610              		.section	.rodata
 2611              		.align	2
 2612              	.LC0:
 2613 0000 49444C45 		.ascii	"IDLE\000"
 2613      00
 2614              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2615              		.align	1
 2616              		.global	vTaskStartScheduler
 2617              		.syntax unified
 2618              		.thumb
 2619              		.thumb_func
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 85


 2621              	vTaskStartScheduler:
 2622              	.LFB19:
1950:ThirdParty/FreeRTOS/tasks.c **** 
1951:ThirdParty/FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1952:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1953:ThirdParty/FreeRTOS/tasks.c **** 
1954:ThirdParty/FreeRTOS/tasks.c **** void vTaskStartScheduler( void )
1955:ThirdParty/FreeRTOS/tasks.c **** {
 2623              		.loc 1 1955 1
 2624              		.cfi_startproc
 2625              		@ args = 0, pretend = 0, frame = 16
 2626              		@ frame_needed = 1, uses_anonymous_args = 0
 2627 0000 80B5     		push	{r7, lr}
 2628              	.LCFI71:
 2629              		.cfi_def_cfa_offset 8
 2630              		.cfi_offset 7, -8
 2631              		.cfi_offset 14, -4
 2632 0002 86B0     		sub	sp, sp, #24
 2633              	.LCFI72:
 2634              		.cfi_def_cfa_offset 32
 2635 0004 02AF     		add	r7, sp, #8
 2636              	.LCFI73:
 2637              		.cfi_def_cfa 7, 24
1956:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xReturn;
1957:ThirdParty/FreeRTOS/tasks.c **** 
1958:ThirdParty/FreeRTOS/tasks.c ****     /* Add the idle task at the lowest priority. */
1959:ThirdParty/FreeRTOS/tasks.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
1960:ThirdParty/FreeRTOS/tasks.c ****     {
1961:ThirdParty/FreeRTOS/tasks.c ****         StaticTask_t * pxIdleTaskTCBBuffer = NULL;
1962:ThirdParty/FreeRTOS/tasks.c ****         StackType_t * pxIdleTaskStackBuffer = NULL;
1963:ThirdParty/FreeRTOS/tasks.c ****         uint32_t ulIdleTaskStackSize;
1964:ThirdParty/FreeRTOS/tasks.c **** 
1965:ThirdParty/FreeRTOS/tasks.c ****         /* The Idle task is created using user provided RAM - obtain the
1966:ThirdParty/FreeRTOS/tasks.c ****          * address of the RAM then create the idle task. */
1967:ThirdParty/FreeRTOS/tasks.c ****         vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskSta
1968:ThirdParty/FreeRTOS/tasks.c ****         xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
1969:ThirdParty/FreeRTOS/tasks.c ****                                              configIDLE_TASK_NAME,
1970:ThirdParty/FreeRTOS/tasks.c ****                                              ulIdleTaskStackSize,
1971:ThirdParty/FreeRTOS/tasks.c ****                                              ( void * ) NULL,       /*lint !e961.  The cast is not 
1972:ThirdParty/FreeRTOS/tasks.c ****                                              portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY
1973:ThirdParty/FreeRTOS/tasks.c ****                                              pxIdleTaskStackBuffer,
1974:ThirdParty/FreeRTOS/tasks.c ****                                              pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, j
1975:ThirdParty/FreeRTOS/tasks.c **** 
1976:ThirdParty/FreeRTOS/tasks.c ****         if( xIdleTaskHandle != NULL )
1977:ThirdParty/FreeRTOS/tasks.c ****         {
1978:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pdPASS;
1979:ThirdParty/FreeRTOS/tasks.c ****         }
1980:ThirdParty/FreeRTOS/tasks.c ****         else
1981:ThirdParty/FreeRTOS/tasks.c ****         {
1982:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pdFAIL;
1983:ThirdParty/FreeRTOS/tasks.c ****         }
1984:ThirdParty/FreeRTOS/tasks.c ****     }
1985:ThirdParty/FreeRTOS/tasks.c ****     #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
1986:ThirdParty/FreeRTOS/tasks.c ****     {
1987:ThirdParty/FreeRTOS/tasks.c ****         /* The Idle task is being created using dynamically allocated RAM. */
1988:ThirdParty/FreeRTOS/tasks.c ****         xReturn = xTaskCreate( prvIdleTask,
 2638              		.loc 1 1988 19
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 86


 2639 0006 204B     		ldr	r3, .L158
 2640 0008 0193     		str	r3, [sp, #4]
 2641 000a 0023     		movs	r3, #0
 2642 000c 0093     		str	r3, [sp]
 2643 000e 0023     		movs	r3, #0
 2644 0010 8222     		movs	r2, #130
 2645 0012 1E49     		ldr	r1, .L158+4
 2646 0014 1E48     		ldr	r0, .L158+8
 2647 0016 FFF7FEFF 		bl	xTaskCreate
 2648 001a F860     		str	r0, [r7, #12]
1989:ThirdParty/FreeRTOS/tasks.c ****                                configIDLE_TASK_NAME,
1990:ThirdParty/FreeRTOS/tasks.c ****                                configMINIMAL_STACK_SIZE,
1991:ThirdParty/FreeRTOS/tasks.c ****                                ( void * ) NULL,
1992:ThirdParty/FreeRTOS/tasks.c ****                                portPRIVILEGE_BIT,  /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_
1993:ThirdParty/FreeRTOS/tasks.c ****                                &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is
1994:ThirdParty/FreeRTOS/tasks.c ****     }
1995:ThirdParty/FreeRTOS/tasks.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
1996:ThirdParty/FreeRTOS/tasks.c **** 
1997:ThirdParty/FreeRTOS/tasks.c ****     #if ( configUSE_TIMERS == 1 )
1998:ThirdParty/FreeRTOS/tasks.c ****     {
1999:ThirdParty/FreeRTOS/tasks.c ****         if( xReturn == pdPASS )
 2649              		.loc 1 1999 11
 2650 001c FB68     		ldr	r3, [r7, #12]
 2651 001e 012B     		cmp	r3, #1
 2652 0020 02D1     		bne	.L154
2000:ThirdParty/FreeRTOS/tasks.c ****         {
2001:ThirdParty/FreeRTOS/tasks.c ****             xReturn = xTimerCreateTimerTask();
 2653              		.loc 1 2001 23
 2654 0022 FFF7FEFF 		bl	xTimerCreateTimerTask
 2655 0026 F860     		str	r0, [r7, #12]
 2656              	.L154:
2002:ThirdParty/FreeRTOS/tasks.c ****         }
2003:ThirdParty/FreeRTOS/tasks.c ****         else
2004:ThirdParty/FreeRTOS/tasks.c ****         {
2005:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2006:ThirdParty/FreeRTOS/tasks.c ****         }
2007:ThirdParty/FreeRTOS/tasks.c ****     }
2008:ThirdParty/FreeRTOS/tasks.c ****     #endif /* configUSE_TIMERS */
2009:ThirdParty/FreeRTOS/tasks.c **** 
2010:ThirdParty/FreeRTOS/tasks.c ****     if( xReturn == pdPASS )
 2657              		.loc 1 2010 7
 2658 0028 FB68     		ldr	r3, [r7, #12]
 2659 002a 012B     		cmp	r3, #1
 2660 002c 16D1     		bne	.L155
 2661              	.LBB197:
 2662              	.LBB198:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2663              		.loc 2 198 9
 2664              		.syntax unified
 2665              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2666 002e 4FF05003 			mov r3, #80												
 2667 0032 83F31188 		msr basepri, r3											
 2668 0036 BFF36F8F 		isb														
 2669 003a BFF34F8F 		dsb														
 2670              	
 2671              	@ 0 "" 2
 2672              		.thumb
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 87


 2673              		.syntax unified
 2674 003e BB60     		str	r3, [r7, #8]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2675              		.loc 2 206 5
 2676 0040 00BF     		nop
 2677              	.LBE198:
 2678              	.LBE197:
2011:ThirdParty/FreeRTOS/tasks.c ****     {
2012:ThirdParty/FreeRTOS/tasks.c ****         /* freertos_tasks_c_additions_init() should only be called if the user
2013:ThirdParty/FreeRTOS/tasks.c ****          * definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2014:ThirdParty/FreeRTOS/tasks.c ****          * the only macro called by the function. */
2015:ThirdParty/FreeRTOS/tasks.c ****         #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2016:ThirdParty/FreeRTOS/tasks.c ****         {
2017:ThirdParty/FreeRTOS/tasks.c ****             freertos_tasks_c_additions_init();
2018:ThirdParty/FreeRTOS/tasks.c ****         }
2019:ThirdParty/FreeRTOS/tasks.c ****         #endif
2020:ThirdParty/FreeRTOS/tasks.c **** 
2021:ThirdParty/FreeRTOS/tasks.c ****         /* Interrupts are turned off here, to ensure a tick does not occur
2022:ThirdParty/FreeRTOS/tasks.c ****          * before or during the call to xPortStartScheduler().  The stacks of
2023:ThirdParty/FreeRTOS/tasks.c ****          * the created tasks contain a status word with interrupts switched on
2024:ThirdParty/FreeRTOS/tasks.c ****          * so interrupts will automatically get re-enabled when the first task
2025:ThirdParty/FreeRTOS/tasks.c ****          * starts to run. */
2026:ThirdParty/FreeRTOS/tasks.c ****         portDISABLE_INTERRUPTS();
2027:ThirdParty/FreeRTOS/tasks.c **** 
2028:ThirdParty/FreeRTOS/tasks.c ****         #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
2029:ThirdParty/FreeRTOS/tasks.c ****         {
2030:ThirdParty/FreeRTOS/tasks.c ****             /* Switch C-Runtime's TLS Block to point to the TLS
2031:ThirdParty/FreeRTOS/tasks.c ****              * block specific to the task that will run first. */
2032:ThirdParty/FreeRTOS/tasks.c ****             configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
2033:ThirdParty/FreeRTOS/tasks.c ****         }
2034:ThirdParty/FreeRTOS/tasks.c ****         #endif
2035:ThirdParty/FreeRTOS/tasks.c **** 
2036:ThirdParty/FreeRTOS/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
 2679              		.loc 1 2036 30
 2680 0042 144B     		ldr	r3, .L158+12
 2681 0044 4FF0FF32 		mov	r2, #-1
 2682 0048 1A60     		str	r2, [r3]
2037:ThirdParty/FreeRTOS/tasks.c ****         xSchedulerRunning = pdTRUE;
 2683              		.loc 1 2037 27
 2684 004a 134B     		ldr	r3, .L158+16
 2685 004c 0122     		movs	r2, #1
 2686 004e 1A60     		str	r2, [r3]
2038:ThirdParty/FreeRTOS/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2687              		.loc 1 2038 20
 2688 0050 124B     		ldr	r3, .L158+20
 2689 0052 0022     		movs	r2, #0
 2690 0054 1A60     		str	r2, [r3]
2039:ThirdParty/FreeRTOS/tasks.c **** 
2040:ThirdParty/FreeRTOS/tasks.c ****         /* If configGENERATE_RUN_TIME_STATS is defined then the following
2041:ThirdParty/FreeRTOS/tasks.c ****          * macro must be defined to configure the timer/counter used to generate
2042:ThirdParty/FreeRTOS/tasks.c ****          * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2043:ThirdParty/FreeRTOS/tasks.c ****          * is set to 0 and the following line fails to build then ensure you do not
2044:ThirdParty/FreeRTOS/tasks.c ****          * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2045:ThirdParty/FreeRTOS/tasks.c ****          * FreeRTOSConfig.h file. */
2046:ThirdParty/FreeRTOS/tasks.c ****         portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2047:ThirdParty/FreeRTOS/tasks.c **** 
2048:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 88


2049:ThirdParty/FreeRTOS/tasks.c **** 
2050:ThirdParty/FreeRTOS/tasks.c ****         /* Setting up the timer tick is hardware specific and thus in the
2051:ThirdParty/FreeRTOS/tasks.c ****          * portable interface. */
2052:ThirdParty/FreeRTOS/tasks.c ****         xPortStartScheduler();
 2691              		.loc 1 2052 9
 2692 0056 FFF7FEFF 		bl	xPortStartScheduler
 2693 005a 0EE0     		b	.L156
 2694              	.L155:
2053:ThirdParty/FreeRTOS/tasks.c **** 
2054:ThirdParty/FreeRTOS/tasks.c ****         /* In most cases, xPortStartScheduler() will not return. If it
2055:ThirdParty/FreeRTOS/tasks.c ****          * returns pdTRUE then there was not enough heap memory available
2056:ThirdParty/FreeRTOS/tasks.c ****          * to create either the Idle or the Timer task. If it returned
2057:ThirdParty/FreeRTOS/tasks.c ****          * pdFALSE, then the application called xTaskEndScheduler().
2058:ThirdParty/FreeRTOS/tasks.c ****          * Most ports don't implement xTaskEndScheduler() as there is
2059:ThirdParty/FreeRTOS/tasks.c ****          * nothing to return to. */
2060:ThirdParty/FreeRTOS/tasks.c ****     }
2061:ThirdParty/FreeRTOS/tasks.c ****     else
2062:ThirdParty/FreeRTOS/tasks.c ****     {
2063:ThirdParty/FreeRTOS/tasks.c ****         /* This line will only be reached if the kernel could not be started,
2064:ThirdParty/FreeRTOS/tasks.c ****          * because there was not enough FreeRTOS heap to create the idle task
2065:ThirdParty/FreeRTOS/tasks.c ****          * or the timer task. */
2066:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 2695              		.loc 1 2066 9
 2696 005c FB68     		ldr	r3, [r7, #12]
 2697 005e B3F1FF3F 		cmp	r3, #-1
 2698 0062 0AD1     		bne	.L156
 2699              	.LBB199:
 2700              	.LBB200:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2701              		.loc 2 198 9
 2702              		.syntax unified
 2703              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2704 0064 4FF05003 			mov r3, #80												
 2705 0068 83F31188 		msr basepri, r3											
 2706 006c BFF36F8F 		isb														
 2707 0070 BFF34F8F 		dsb														
 2708              	
 2709              	@ 0 "" 2
 2710              		.thumb
 2711              		.syntax unified
 2712 0074 7B60     		str	r3, [r7, #4]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2713              		.loc 2 206 5
 2714 0076 00BF     		nop
 2715              	.L157:
 2716              	.LBE200:
 2717              	.LBE199:
 2718              		.loc 1 2066 9 discriminator 1
 2719 0078 FEE7     		b	.L157
 2720              	.L156:
2067:ThirdParty/FreeRTOS/tasks.c ****     }
2068:ThirdParty/FreeRTOS/tasks.c **** 
2069:ThirdParty/FreeRTOS/tasks.c ****     /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2070:ThirdParty/FreeRTOS/tasks.c ****      * meaning xIdleTaskHandle is not used anywhere else. */
2071:ThirdParty/FreeRTOS/tasks.c ****     ( void ) xIdleTaskHandle;
2072:ThirdParty/FreeRTOS/tasks.c **** 
2073:ThirdParty/FreeRTOS/tasks.c ****     /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 89


2074:ThirdParty/FreeRTOS/tasks.c ****      * from getting optimized out as it is no longer used by the kernel. */
2075:ThirdParty/FreeRTOS/tasks.c ****     ( void ) uxTopUsedPriority;
 2721              		.loc 1 2075 5
 2722 007a 094B     		ldr	r3, .L158+24
 2723 007c 1B68     		ldr	r3, [r3]
2076:ThirdParty/FreeRTOS/tasks.c **** }
 2724              		.loc 1 2076 1
 2725 007e 00BF     		nop
 2726 0080 1037     		adds	r7, r7, #16
 2727              	.LCFI74:
 2728              		.cfi_def_cfa_offset 8
 2729 0082 BD46     		mov	sp, r7
 2730              	.LCFI75:
 2731              		.cfi_def_cfa_register 13
 2732              		@ sp needed
 2733 0084 80BD     		pop	{r7, pc}
 2734              	.L159:
 2735 0086 00BF     		.align	2
 2736              	.L158:
 2737 0088 00000000 		.word	xIdleTaskHandle
 2738 008c 00000000 		.word	.LC0
 2739 0090 00000000 		.word	prvIdleTask
 2740 0094 00000000 		.word	xNextTaskUnblockTime
 2741 0098 00000000 		.word	xSchedulerRunning
 2742 009c 00000000 		.word	xTickCount
 2743 00a0 00000000 		.word	uxTopUsedPriority
 2744              		.cfi_endproc
 2745              	.LFE19:
 2747              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2748              		.align	1
 2749              		.global	vTaskEndScheduler
 2750              		.syntax unified
 2751              		.thumb
 2752              		.thumb_func
 2754              	vTaskEndScheduler:
 2755              	.LFB20:
2077:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2078:ThirdParty/FreeRTOS/tasks.c **** 
2079:ThirdParty/FreeRTOS/tasks.c **** void vTaskEndScheduler( void )
2080:ThirdParty/FreeRTOS/tasks.c **** {
 2756              		.loc 1 2080 1
 2757              		.cfi_startproc
 2758              		@ args = 0, pretend = 0, frame = 8
 2759              		@ frame_needed = 1, uses_anonymous_args = 0
 2760 0000 80B5     		push	{r7, lr}
 2761              	.LCFI76:
 2762              		.cfi_def_cfa_offset 8
 2763              		.cfi_offset 7, -8
 2764              		.cfi_offset 14, -4
 2765 0002 82B0     		sub	sp, sp, #8
 2766              	.LCFI77:
 2767              		.cfi_def_cfa_offset 16
 2768 0004 00AF     		add	r7, sp, #0
 2769              	.LCFI78:
 2770              		.cfi_def_cfa_register 7
 2771              	.LBB201:
 2772              	.LBB202:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 90


 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2773              		.loc 2 198 9
 2774              		.syntax unified
 2775              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2776 0006 4FF05003 			mov r3, #80												
 2777 000a 83F31188 		msr basepri, r3											
 2778 000e BFF36F8F 		isb														
 2779 0012 BFF34F8F 		dsb														
 2780              	
 2781              	@ 0 "" 2
 2782              		.thumb
 2783              		.syntax unified
 2784 0016 7B60     		str	r3, [r7, #4]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2785              		.loc 2 206 5
 2786 0018 00BF     		nop
 2787              	.LBE202:
 2788              	.LBE201:
2081:ThirdParty/FreeRTOS/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
2082:ThirdParty/FreeRTOS/tasks.c ****      * routine so the original ISRs can be restored if necessary.  The port
2083:ThirdParty/FreeRTOS/tasks.c ****      * layer must ensure interrupts enable  bit is left in the correct state. */
2084:ThirdParty/FreeRTOS/tasks.c ****     portDISABLE_INTERRUPTS();
2085:ThirdParty/FreeRTOS/tasks.c ****     xSchedulerRunning = pdFALSE;
 2789              		.loc 1 2085 23
 2790 001a 044B     		ldr	r3, .L161
 2791 001c 0022     		movs	r2, #0
 2792 001e 1A60     		str	r2, [r3]
2086:ThirdParty/FreeRTOS/tasks.c ****     vPortEndScheduler();
 2793              		.loc 1 2086 5
 2794 0020 FFF7FEFF 		bl	vPortEndScheduler
2087:ThirdParty/FreeRTOS/tasks.c **** }
 2795              		.loc 1 2087 1
 2796 0024 00BF     		nop
 2797 0026 0837     		adds	r7, r7, #8
 2798              	.LCFI79:
 2799              		.cfi_def_cfa_offset 8
 2800 0028 BD46     		mov	sp, r7
 2801              	.LCFI80:
 2802              		.cfi_def_cfa_register 13
 2803              		@ sp needed
 2804 002a 80BD     		pop	{r7, pc}
 2805              	.L162:
 2806              		.align	2
 2807              	.L161:
 2808 002c 00000000 		.word	xSchedulerRunning
 2809              		.cfi_endproc
 2810              	.LFE20:
 2812              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2813              		.align	1
 2814              		.global	vTaskSuspendAll
 2815              		.syntax unified
 2816              		.thumb
 2817              		.thumb_func
 2819              	vTaskSuspendAll:
 2820              	.LFB21:
2088:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2089:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 91


2090:ThirdParty/FreeRTOS/tasks.c **** void vTaskSuspendAll( void )
2091:ThirdParty/FreeRTOS/tasks.c **** {
 2821              		.loc 1 2091 1
 2822              		.cfi_startproc
 2823              		@ args = 0, pretend = 0, frame = 0
 2824              		@ frame_needed = 1, uses_anonymous_args = 0
 2825              		@ link register save eliminated.
 2826 0000 80B4     		push	{r7}
 2827              	.LCFI81:
 2828              		.cfi_def_cfa_offset 4
 2829              		.cfi_offset 7, -4
 2830 0002 00AF     		add	r7, sp, #0
 2831              	.LCFI82:
 2832              		.cfi_def_cfa_register 7
2092:ThirdParty/FreeRTOS/tasks.c ****     /* A critical section is not required as the variable is of type
2093:ThirdParty/FreeRTOS/tasks.c ****      * BaseType_t.  Please read Richard Barry's reply in the following link to a
2094:ThirdParty/FreeRTOS/tasks.c ****      * post in the FreeRTOS support forum before reporting this as a bug! -
2095:ThirdParty/FreeRTOS/tasks.c ****      * https://goo.gl/wu4acr */
2096:ThirdParty/FreeRTOS/tasks.c **** 
2097:ThirdParty/FreeRTOS/tasks.c ****     /* portSOFTWARE_BARRIER() is only implemented for emulated/simulated ports that
2098:ThirdParty/FreeRTOS/tasks.c ****      * do not otherwise exhibit real time behaviour. */
2099:ThirdParty/FreeRTOS/tasks.c ****     portSOFTWARE_BARRIER();
2100:ThirdParty/FreeRTOS/tasks.c **** 
2101:ThirdParty/FreeRTOS/tasks.c ****     /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2102:ThirdParty/FreeRTOS/tasks.c ****      * is used to allow calls to vTaskSuspendAll() to nest. */
2103:ThirdParty/FreeRTOS/tasks.c ****     ++uxSchedulerSuspended;
 2833              		.loc 1 2103 5
 2834 0004 044B     		ldr	r3, .L164
 2835 0006 1B68     		ldr	r3, [r3]
 2836 0008 0133     		adds	r3, r3, #1
 2837 000a 034A     		ldr	r2, .L164
 2838 000c 1360     		str	r3, [r2]
2104:ThirdParty/FreeRTOS/tasks.c **** 
2105:ThirdParty/FreeRTOS/tasks.c ****     /* Enforces ordering for ports and optimised compilers that may otherwise place
2106:ThirdParty/FreeRTOS/tasks.c ****      * the above increment elsewhere. */
2107:ThirdParty/FreeRTOS/tasks.c ****     portMEMORY_BARRIER();
 2839              		.loc 1 2107 5
2108:ThirdParty/FreeRTOS/tasks.c **** }
 2840              		.loc 1 2108 1
 2841 000e 00BF     		nop
 2842 0010 BD46     		mov	sp, r7
 2843              	.LCFI83:
 2844              		.cfi_def_cfa_register 13
 2845              		@ sp needed
 2846 0012 5DF8047B 		ldr	r7, [sp], #4
 2847              	.LCFI84:
 2848              		.cfi_restore 7
 2849              		.cfi_def_cfa_offset 0
 2850 0016 7047     		bx	lr
 2851              	.L165:
 2852              		.align	2
 2853              	.L164:
 2854 0018 00000000 		.word	uxSchedulerSuspended
 2855              		.cfi_endproc
 2856              	.LFE21:
 2858              		.section	.text.xTaskResumeAll,"ax",%progbits
 2859              		.align	1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 92


 2860              		.global	xTaskResumeAll
 2861              		.syntax unified
 2862              		.thumb
 2863              		.thumb_func
 2865              	xTaskResumeAll:
 2866              	.LFB22:
2109:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2110:ThirdParty/FreeRTOS/tasks.c **** 
2111:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2112:ThirdParty/FreeRTOS/tasks.c **** 
2113:ThirdParty/FreeRTOS/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void )
2114:ThirdParty/FreeRTOS/tasks.c ****     {
2115:ThirdParty/FreeRTOS/tasks.c ****         TickType_t xReturn;
2116:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2117:ThirdParty/FreeRTOS/tasks.c **** 
2118:ThirdParty/FreeRTOS/tasks.c ****         /* uxHigherPriorityReadyTasks takes care of the case where
2119:ThirdParty/FreeRTOS/tasks.c ****          * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2120:ThirdParty/FreeRTOS/tasks.c ****          * task that are in the Ready state, even though the idle task is
2121:ThirdParty/FreeRTOS/tasks.c ****          * running. */
2122:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2123:ThirdParty/FreeRTOS/tasks.c ****         {
2124:ThirdParty/FreeRTOS/tasks.c ****             if( uxTopReadyPriority > tskIDLE_PRIORITY )
2125:ThirdParty/FreeRTOS/tasks.c ****             {
2126:ThirdParty/FreeRTOS/tasks.c ****                 uxHigherPriorityReadyTasks = pdTRUE;
2127:ThirdParty/FreeRTOS/tasks.c ****             }
2128:ThirdParty/FreeRTOS/tasks.c ****         }
2129:ThirdParty/FreeRTOS/tasks.c ****         #else
2130:ThirdParty/FreeRTOS/tasks.c ****         {
2131:ThirdParty/FreeRTOS/tasks.c ****             const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2132:ThirdParty/FreeRTOS/tasks.c **** 
2133:ThirdParty/FreeRTOS/tasks.c ****             /* When port optimised task selection is used the uxTopReadyPriority
2134:ThirdParty/FreeRTOS/tasks.c ****              * variable is used as a bit map.  If bits other than the least
2135:ThirdParty/FreeRTOS/tasks.c ****              * significant bit are set then there are tasks that have a priority
2136:ThirdParty/FreeRTOS/tasks.c ****              * above the idle priority that are in the Ready state.  This takes
2137:ThirdParty/FreeRTOS/tasks.c ****              * care of the case where the co-operative scheduler is in use. */
2138:ThirdParty/FreeRTOS/tasks.c ****             if( uxTopReadyPriority > uxLeastSignificantBit )
2139:ThirdParty/FreeRTOS/tasks.c ****             {
2140:ThirdParty/FreeRTOS/tasks.c ****                 uxHigherPriorityReadyTasks = pdTRUE;
2141:ThirdParty/FreeRTOS/tasks.c ****             }
2142:ThirdParty/FreeRTOS/tasks.c ****         }
2143:ThirdParty/FreeRTOS/tasks.c ****         #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */
2144:ThirdParty/FreeRTOS/tasks.c **** 
2145:ThirdParty/FreeRTOS/tasks.c ****         if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2146:ThirdParty/FreeRTOS/tasks.c ****         {
2147:ThirdParty/FreeRTOS/tasks.c ****             xReturn = 0;
2148:ThirdParty/FreeRTOS/tasks.c ****         }
2149:ThirdParty/FreeRTOS/tasks.c ****         else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2150:ThirdParty/FreeRTOS/tasks.c ****         {
2151:ThirdParty/FreeRTOS/tasks.c ****             /* There are other idle priority tasks in the ready state.  If
2152:ThirdParty/FreeRTOS/tasks.c ****              * time slicing is used then the very next tick interrupt must be
2153:ThirdParty/FreeRTOS/tasks.c ****              * processed. */
2154:ThirdParty/FreeRTOS/tasks.c ****             xReturn = 0;
2155:ThirdParty/FreeRTOS/tasks.c ****         }
2156:ThirdParty/FreeRTOS/tasks.c ****         else if( uxHigherPriorityReadyTasks != pdFALSE )
2157:ThirdParty/FreeRTOS/tasks.c ****         {
2158:ThirdParty/FreeRTOS/tasks.c ****             /* There are tasks in the Ready state that have a priority above the
2159:ThirdParty/FreeRTOS/tasks.c ****              * idle priority.  This path can only be reached if
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 93


2160:ThirdParty/FreeRTOS/tasks.c ****              * configUSE_PREEMPTION is 0. */
2161:ThirdParty/FreeRTOS/tasks.c ****             xReturn = 0;
2162:ThirdParty/FreeRTOS/tasks.c ****         }
2163:ThirdParty/FreeRTOS/tasks.c ****         else
2164:ThirdParty/FreeRTOS/tasks.c ****         {
2165:ThirdParty/FreeRTOS/tasks.c ****             xReturn = xNextTaskUnblockTime - xTickCount;
2166:ThirdParty/FreeRTOS/tasks.c ****         }
2167:ThirdParty/FreeRTOS/tasks.c **** 
2168:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
2169:ThirdParty/FreeRTOS/tasks.c ****     }
2170:ThirdParty/FreeRTOS/tasks.c **** 
2171:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2172:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2173:ThirdParty/FreeRTOS/tasks.c **** 
2174:ThirdParty/FreeRTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
2175:ThirdParty/FreeRTOS/tasks.c **** {
 2867              		.loc 1 2175 1
 2868              		.cfi_startproc
 2869              		@ args = 0, pretend = 0, frame = 32
 2870              		@ frame_needed = 1, uses_anonymous_args = 0
 2871 0000 80B5     		push	{r7, lr}
 2872              	.LCFI85:
 2873              		.cfi_def_cfa_offset 8
 2874              		.cfi_offset 7, -8
 2875              		.cfi_offset 14, -4
 2876 0002 88B0     		sub	sp, sp, #32
 2877              	.LCFI86:
 2878              		.cfi_def_cfa_offset 40
 2879 0004 00AF     		add	r7, sp, #0
 2880              	.LCFI87:
 2881              		.cfi_def_cfa_register 7
2176:ThirdParty/FreeRTOS/tasks.c ****     TCB_t * pxTCB = NULL;
 2882              		.loc 1 2176 13
 2883 0006 0023     		movs	r3, #0
 2884 0008 FB61     		str	r3, [r7, #28]
2177:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 2885              		.loc 1 2177 16
 2886 000a 0023     		movs	r3, #0
 2887 000c 7B61     		str	r3, [r7, #20]
2178:ThirdParty/FreeRTOS/tasks.c **** 
2179:ThirdParty/FreeRTOS/tasks.c ****     /* If uxSchedulerSuspended is zero then this function does not match a
2180:ThirdParty/FreeRTOS/tasks.c ****      * previous call to vTaskSuspendAll(). */
2181:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended );
 2888              		.loc 1 2181 5
 2889 000e 6B4B     		ldr	r3, .L179
 2890 0010 1B68     		ldr	r3, [r3]
 2891 0012 002B     		cmp	r3, #0
 2892 0014 0AD1     		bne	.L167
 2893              	.LBB203:
 2894              	.LBB204:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2895              		.loc 2 198 9
 2896              		.syntax unified
 2897              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2898 0016 4FF05003 			mov r3, #80												
 2899 001a 83F31188 		msr basepri, r3											
 2900 001e BFF36F8F 		isb														
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 94


 2901 0022 BFF34F8F 		dsb														
 2902              	
 2903              	@ 0 "" 2
 2904              		.thumb
 2905              		.syntax unified
 2906 0026 7B60     		str	r3, [r7, #4]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2907              		.loc 2 206 5
 2908 0028 00BF     		nop
 2909              	.L168:
 2910              	.LBE204:
 2911              	.LBE203:
 2912              		.loc 1 2181 5 discriminator 1
 2913 002a FEE7     		b	.L168
 2914              	.L167:
2182:ThirdParty/FreeRTOS/tasks.c **** 
2183:ThirdParty/FreeRTOS/tasks.c ****     /* It is possible that an ISR caused a task to be removed from an event
2184:ThirdParty/FreeRTOS/tasks.c ****      * list while the scheduler was suspended.  If this was the case then the
2185:ThirdParty/FreeRTOS/tasks.c ****      * removed task will have been added to the xPendingReadyList.  Once the
2186:ThirdParty/FreeRTOS/tasks.c ****      * scheduler has been resumed it is safe to move all the pending ready
2187:ThirdParty/FreeRTOS/tasks.c ****      * tasks from this list into their appropriate ready list. */
2188:ThirdParty/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 2915              		.loc 1 2188 5
 2916 002c FFF7FEFF 		bl	vPortEnterCritical
2189:ThirdParty/FreeRTOS/tasks.c ****     {
2190:ThirdParty/FreeRTOS/tasks.c ****         --uxSchedulerSuspended;
 2917              		.loc 1 2190 9
 2918 0030 624B     		ldr	r3, .L179
 2919 0032 1B68     		ldr	r3, [r3]
 2920 0034 013B     		subs	r3, r3, #1
 2921 0036 614A     		ldr	r2, .L179
 2922 0038 1360     		str	r3, [r2]
2191:ThirdParty/FreeRTOS/tasks.c **** 
2192:ThirdParty/FreeRTOS/tasks.c ****         if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2923              		.loc 1 2192 34
 2924 003a 604B     		ldr	r3, .L179
 2925 003c 1B68     		ldr	r3, [r3]
 2926              		.loc 1 2192 11
 2927 003e 002B     		cmp	r3, #0
 2928 0040 40F0B480 		bne	.L169
2193:ThirdParty/FreeRTOS/tasks.c ****         {
2194:ThirdParty/FreeRTOS/tasks.c ****             if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2929              		.loc 1 2194 40
 2930 0044 5E4B     		ldr	r3, .L179+4
 2931 0046 1B68     		ldr	r3, [r3]
 2932              		.loc 1 2194 15
 2933 0048 002B     		cmp	r3, #0
 2934 004a 00F0AF80 		beq	.L169
2195:ThirdParty/FreeRTOS/tasks.c ****             {
2196:ThirdParty/FreeRTOS/tasks.c ****                 /* Move any readied tasks from the pending list into the
2197:ThirdParty/FreeRTOS/tasks.c ****                  * appropriate ready list. */
2198:ThirdParty/FreeRTOS/tasks.c ****                 while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2935              		.loc 1 2198 22
 2936 004e 8AE0     		b	.L170
 2937              	.L173:
2199:ThirdParty/FreeRTOS/tasks.c ****                 {
2200:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 vo
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 95


 2938              		.loc 1 2200 29
 2939 0050 5C4B     		ldr	r3, .L179+8
 2940 0052 DB68     		ldr	r3, [r3, #12]
 2941              		.loc 1 2200 27
 2942 0054 DB68     		ldr	r3, [r3, #12]
 2943 0056 FB61     		str	r3, [r7, #28]
 2944              	.LBB205:
2201:ThirdParty/FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 2945              		.loc 1 2201 21
 2946 0058 FB69     		ldr	r3, [r7, #28]
 2947 005a 9B6A     		ldr	r3, [r3, #40]
 2948 005c 3B61     		str	r3, [r7, #16]
 2949 005e FB69     		ldr	r3, [r7, #28]
 2950 0060 DB69     		ldr	r3, [r3, #28]
 2951 0062 FA69     		ldr	r2, [r7, #28]
 2952 0064 126A     		ldr	r2, [r2, #32]
 2953 0066 9A60     		str	r2, [r3, #8]
 2954 0068 FB69     		ldr	r3, [r7, #28]
 2955 006a 1B6A     		ldr	r3, [r3, #32]
 2956 006c FA69     		ldr	r2, [r7, #28]
 2957 006e D269     		ldr	r2, [r2, #28]
 2958 0070 5A60     		str	r2, [r3, #4]
 2959 0072 3B69     		ldr	r3, [r7, #16]
 2960 0074 5A68     		ldr	r2, [r3, #4]
 2961 0076 FB69     		ldr	r3, [r7, #28]
 2962 0078 1833     		adds	r3, r3, #24
 2963 007a 9A42     		cmp	r2, r3
 2964 007c 03D1     		bne	.L171
 2965              		.loc 1 2201 21 is_stmt 0 discriminator 1
 2966 007e FB69     		ldr	r3, [r7, #28]
 2967 0080 1A6A     		ldr	r2, [r3, #32]
 2968 0082 3B69     		ldr	r3, [r7, #16]
 2969 0084 5A60     		str	r2, [r3, #4]
 2970              	.L171:
 2971              		.loc 1 2201 21 discriminator 3
 2972 0086 FB69     		ldr	r3, [r7, #28]
 2973 0088 0022     		movs	r2, #0
 2974 008a 9A62     		str	r2, [r3, #40]
 2975 008c 3B69     		ldr	r3, [r7, #16]
 2976 008e 1B68     		ldr	r3, [r3]
 2977 0090 5A1E     		subs	r2, r3, #1
 2978 0092 3B69     		ldr	r3, [r7, #16]
 2979 0094 1A60     		str	r2, [r3]
 2980              	.LBE205:
2202:ThirdParty/FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 2981              		.loc 1 2202 21 is_stmt 1 discriminator 3
 2982              	.LBB206:
2203:ThirdParty/FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 2983              		.loc 1 2203 21 discriminator 3
 2984 0096 FB69     		ldr	r3, [r7, #28]
 2985 0098 5B69     		ldr	r3, [r3, #20]
 2986 009a FB60     		str	r3, [r7, #12]
 2987 009c FB69     		ldr	r3, [r7, #28]
 2988 009e 9B68     		ldr	r3, [r3, #8]
 2989 00a0 FA69     		ldr	r2, [r7, #28]
 2990 00a2 D268     		ldr	r2, [r2, #12]
 2991 00a4 9A60     		str	r2, [r3, #8]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 96


 2992 00a6 FB69     		ldr	r3, [r7, #28]
 2993 00a8 DB68     		ldr	r3, [r3, #12]
 2994 00aa FA69     		ldr	r2, [r7, #28]
 2995 00ac 9268     		ldr	r2, [r2, #8]
 2996 00ae 5A60     		str	r2, [r3, #4]
 2997 00b0 FB68     		ldr	r3, [r7, #12]
 2998 00b2 5A68     		ldr	r2, [r3, #4]
 2999 00b4 FB69     		ldr	r3, [r7, #28]
 3000 00b6 0433     		adds	r3, r3, #4
 3001 00b8 9A42     		cmp	r2, r3
 3002 00ba 03D1     		bne	.L172
 3003              		.loc 1 2203 21 is_stmt 0 discriminator 1
 3004 00bc FB69     		ldr	r3, [r7, #28]
 3005 00be DA68     		ldr	r2, [r3, #12]
 3006 00c0 FB68     		ldr	r3, [r7, #12]
 3007 00c2 5A60     		str	r2, [r3, #4]
 3008              	.L172:
 3009              		.loc 1 2203 21 discriminator 3
 3010 00c4 FB69     		ldr	r3, [r7, #28]
 3011 00c6 0022     		movs	r2, #0
 3012 00c8 5A61     		str	r2, [r3, #20]
 3013 00ca FB68     		ldr	r3, [r7, #12]
 3014 00cc 1B68     		ldr	r3, [r3]
 3015 00ce 5A1E     		subs	r2, r3, #1
 3016 00d0 FB68     		ldr	r3, [r7, #12]
 3017 00d2 1A60     		str	r2, [r3]
 3018              	.LBE206:
2204:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3019              		.loc 1 2204 21 is_stmt 1 discriminator 3
 3020 00d4 FB69     		ldr	r3, [r7, #28]
 3021 00d6 DB6A     		ldr	r3, [r3, #44]
 3022 00d8 0122     		movs	r2, #1
 3023 00da 9A40     		lsls	r2, r2, r3
 3024 00dc 3A4B     		ldr	r3, .L179+12
 3025 00de 1B68     		ldr	r3, [r3]
 3026 00e0 1343     		orrs	r3, r3, r2
 3027 00e2 394A     		ldr	r2, .L179+12
 3028 00e4 1360     		str	r3, [r2]
 3029              	.LBB207:
 3030 00e6 FB69     		ldr	r3, [r7, #28]
 3031 00e8 DA6A     		ldr	r2, [r3, #44]
 3032 00ea 3849     		ldr	r1, .L179+16
 3033 00ec 1346     		mov	r3, r2
 3034 00ee 9B00     		lsls	r3, r3, #2
 3035 00f0 1344     		add	r3, r3, r2
 3036 00f2 9B00     		lsls	r3, r3, #2
 3037 00f4 0B44     		add	r3, r3, r1
 3038 00f6 0433     		adds	r3, r3, #4
 3039 00f8 1B68     		ldr	r3, [r3]
 3040 00fa BB60     		str	r3, [r7, #8]
 3041 00fc FB69     		ldr	r3, [r7, #28]
 3042 00fe BA68     		ldr	r2, [r7, #8]
 3043 0100 9A60     		str	r2, [r3, #8]
 3044 0102 BB68     		ldr	r3, [r7, #8]
 3045 0104 9A68     		ldr	r2, [r3, #8]
 3046 0106 FB69     		ldr	r3, [r7, #28]
 3047 0108 DA60     		str	r2, [r3, #12]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 97


 3048 010a BB68     		ldr	r3, [r7, #8]
 3049 010c 9B68     		ldr	r3, [r3, #8]
 3050 010e FA69     		ldr	r2, [r7, #28]
 3051 0110 0432     		adds	r2, r2, #4
 3052 0112 5A60     		str	r2, [r3, #4]
 3053 0114 FB69     		ldr	r3, [r7, #28]
 3054 0116 1A1D     		adds	r2, r3, #4
 3055 0118 BB68     		ldr	r3, [r7, #8]
 3056 011a 9A60     		str	r2, [r3, #8]
 3057 011c FB69     		ldr	r3, [r7, #28]
 3058 011e DA6A     		ldr	r2, [r3, #44]
 3059 0120 1346     		mov	r3, r2
 3060 0122 9B00     		lsls	r3, r3, #2
 3061 0124 1344     		add	r3, r3, r2
 3062 0126 9B00     		lsls	r3, r3, #2
 3063 0128 284A     		ldr	r2, .L179+16
 3064 012a 1A44     		add	r2, r2, r3
 3065 012c FB69     		ldr	r3, [r7, #28]
 3066 012e 5A61     		str	r2, [r3, #20]
 3067 0130 FB69     		ldr	r3, [r7, #28]
 3068 0132 DA6A     		ldr	r2, [r3, #44]
 3069 0134 2549     		ldr	r1, .L179+16
 3070 0136 1346     		mov	r3, r2
 3071 0138 9B00     		lsls	r3, r3, #2
 3072 013a 1344     		add	r3, r3, r2
 3073 013c 9B00     		lsls	r3, r3, #2
 3074 013e 0B44     		add	r3, r3, r1
 3075 0140 1B68     		ldr	r3, [r3]
 3076 0142 591C     		adds	r1, r3, #1
 3077 0144 2148     		ldr	r0, .L179+16
 3078 0146 1346     		mov	r3, r2
 3079 0148 9B00     		lsls	r3, r3, #2
 3080 014a 1344     		add	r3, r3, r2
 3081 014c 9B00     		lsls	r3, r3, #2
 3082 014e 0344     		add	r3, r3, r0
 3083 0150 1960     		str	r1, [r3]
 3084              	.LBE207:
2205:ThirdParty/FreeRTOS/tasks.c **** 
2206:ThirdParty/FreeRTOS/tasks.c ****                     /* If the moved task has a priority higher than or equal to
2207:ThirdParty/FreeRTOS/tasks.c ****                      * the current task then a yield must be performed. */
2208:ThirdParty/FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3085              		.loc 1 2208 30 discriminator 3
 3086 0152 FB69     		ldr	r3, [r7, #28]
 3087 0154 DA6A     		ldr	r2, [r3, #44]
 3088              		.loc 1 2208 58 discriminator 3
 3089 0156 1E4B     		ldr	r3, .L179+20
 3090 0158 1B68     		ldr	r3, [r3]
 3091 015a DB6A     		ldr	r3, [r3, #44]
 3092              		.loc 1 2208 23 discriminator 3
 3093 015c 9A42     		cmp	r2, r3
 3094 015e 02D3     		bcc	.L170
2209:ThirdParty/FreeRTOS/tasks.c ****                     {
2210:ThirdParty/FreeRTOS/tasks.c ****                         xYieldPending = pdTRUE;
 3095              		.loc 1 2210 39
 3096 0160 1C4B     		ldr	r3, .L179+24
 3097 0162 0122     		movs	r2, #1
 3098 0164 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 98


 3099              	.L170:
2198:ThirdParty/FreeRTOS/tasks.c ****                 {
 3100              		.loc 1 2198 24
 3101 0166 174B     		ldr	r3, .L179+8
 3102 0168 1B68     		ldr	r3, [r3]
2198:ThirdParty/FreeRTOS/tasks.c ****                 {
 3103              		.loc 1 2198 22
 3104 016a 002B     		cmp	r3, #0
 3105 016c 7FF470AF 		bne	.L173
2211:ThirdParty/FreeRTOS/tasks.c ****                     }
2212:ThirdParty/FreeRTOS/tasks.c ****                     else
2213:ThirdParty/FreeRTOS/tasks.c ****                     {
2214:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2215:ThirdParty/FreeRTOS/tasks.c ****                     }
2216:ThirdParty/FreeRTOS/tasks.c ****                 }
2217:ThirdParty/FreeRTOS/tasks.c **** 
2218:ThirdParty/FreeRTOS/tasks.c ****                 if( pxTCB != NULL )
 3106              		.loc 1 2218 19
 3107 0170 FB69     		ldr	r3, [r7, #28]
 3108 0172 002B     		cmp	r3, #0
 3109 0174 01D0     		beq	.L174
2219:ThirdParty/FreeRTOS/tasks.c ****                 {
2220:ThirdParty/FreeRTOS/tasks.c ****                     /* A task was unblocked while the scheduler was suspended,
2221:ThirdParty/FreeRTOS/tasks.c ****                      * which may have prevented the next unblock time from being
2222:ThirdParty/FreeRTOS/tasks.c ****                      * re-calculated, in which case re-calculate it now.  Mainly
2223:ThirdParty/FreeRTOS/tasks.c ****                      * important for low power tickless implementations, where
2224:ThirdParty/FreeRTOS/tasks.c ****                      * this can prevent an unnecessary exit from low power
2225:ThirdParty/FreeRTOS/tasks.c ****                      * state. */
2226:ThirdParty/FreeRTOS/tasks.c ****                     prvResetNextTaskUnblockTime();
 3110              		.loc 1 2226 21
 3111 0176 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3112              	.L174:
 3113              	.LBB208:
2227:ThirdParty/FreeRTOS/tasks.c ****                 }
2228:ThirdParty/FreeRTOS/tasks.c **** 
2229:ThirdParty/FreeRTOS/tasks.c ****                 /* If any ticks occurred while the scheduler was suspended then
2230:ThirdParty/FreeRTOS/tasks.c ****                  * they should be processed now.  This ensures the tick count does
2231:ThirdParty/FreeRTOS/tasks.c ****                  * not  slip, and that any delayed tasks are resumed at the correct
2232:ThirdParty/FreeRTOS/tasks.c ****                  * time. */
2233:ThirdParty/FreeRTOS/tasks.c ****                 {
2234:ThirdParty/FreeRTOS/tasks.c ****                     TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 3114              		.loc 1 2234 32
 3115 017a 174B     		ldr	r3, .L179+28
 3116 017c 1B68     		ldr	r3, [r3]
 3117 017e BB61     		str	r3, [r7, #24]
2235:ThirdParty/FreeRTOS/tasks.c **** 
2236:ThirdParty/FreeRTOS/tasks.c ****                     if( xPendedCounts > ( TickType_t ) 0U )
 3118              		.loc 1 2236 23
 3119 0180 BB69     		ldr	r3, [r7, #24]
 3120 0182 002B     		cmp	r3, #0
 3121 0184 10D0     		beq	.L175
 3122              	.L177:
2237:ThirdParty/FreeRTOS/tasks.c ****                     {
2238:ThirdParty/FreeRTOS/tasks.c ****                         do
2239:ThirdParty/FreeRTOS/tasks.c ****                         {
2240:ThirdParty/FreeRTOS/tasks.c ****                             if( xTaskIncrementTick() != pdFALSE )
 3123              		.loc 1 2240 33
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 99


 3124 0186 FFF7FEFF 		bl	xTaskIncrementTick
 3125 018a 0346     		mov	r3, r0
 3126              		.loc 1 2240 31
 3127 018c 002B     		cmp	r3, #0
 3128 018e 02D0     		beq	.L176
2241:ThirdParty/FreeRTOS/tasks.c ****                             {
2242:ThirdParty/FreeRTOS/tasks.c ****                                 xYieldPending = pdTRUE;
 3129              		.loc 1 2242 47
 3130 0190 104B     		ldr	r3, .L179+24
 3131 0192 0122     		movs	r2, #1
 3132 0194 1A60     		str	r2, [r3]
 3133              	.L176:
2243:ThirdParty/FreeRTOS/tasks.c ****                             }
2244:ThirdParty/FreeRTOS/tasks.c ****                             else
2245:ThirdParty/FreeRTOS/tasks.c ****                             {
2246:ThirdParty/FreeRTOS/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2247:ThirdParty/FreeRTOS/tasks.c ****                             }
2248:ThirdParty/FreeRTOS/tasks.c **** 
2249:ThirdParty/FreeRTOS/tasks.c ****                             --xPendedCounts;
 3134              		.loc 1 2249 29
 3135 0196 BB69     		ldr	r3, [r7, #24]
 3136 0198 013B     		subs	r3, r3, #1
 3137 019a BB61     		str	r3, [r7, #24]
2250:ThirdParty/FreeRTOS/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
 3138              		.loc 1 2250 25
 3139 019c BB69     		ldr	r3, [r7, #24]
 3140 019e 002B     		cmp	r3, #0
 3141 01a0 F1D1     		bne	.L177
2251:ThirdParty/FreeRTOS/tasks.c **** 
2252:ThirdParty/FreeRTOS/tasks.c ****                         xPendedTicks = 0;
 3142              		.loc 1 2252 38
 3143 01a2 0D4B     		ldr	r3, .L179+28
 3144 01a4 0022     		movs	r2, #0
 3145 01a6 1A60     		str	r2, [r3]
 3146              	.L175:
 3147              	.LBE208:
2253:ThirdParty/FreeRTOS/tasks.c ****                     }
2254:ThirdParty/FreeRTOS/tasks.c ****                     else
2255:ThirdParty/FreeRTOS/tasks.c ****                     {
2256:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2257:ThirdParty/FreeRTOS/tasks.c ****                     }
2258:ThirdParty/FreeRTOS/tasks.c ****                 }
2259:ThirdParty/FreeRTOS/tasks.c **** 
2260:ThirdParty/FreeRTOS/tasks.c ****                 if( xYieldPending != pdFALSE )
 3148              		.loc 1 2260 35
 3149 01a8 0A4B     		ldr	r3, .L179+24
 3150 01aa 1B68     		ldr	r3, [r3]
 3151              	.L169:
2261:ThirdParty/FreeRTOS/tasks.c ****                 {
2262:ThirdParty/FreeRTOS/tasks.c ****                     #if ( configUSE_PREEMPTION != 0 )
2263:ThirdParty/FreeRTOS/tasks.c ****                     {
2264:ThirdParty/FreeRTOS/tasks.c ****                         xAlreadyYielded = pdTRUE;
2265:ThirdParty/FreeRTOS/tasks.c ****                     }
2266:ThirdParty/FreeRTOS/tasks.c ****                     #endif
2267:ThirdParty/FreeRTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
2268:ThirdParty/FreeRTOS/tasks.c ****                 }
2269:ThirdParty/FreeRTOS/tasks.c ****                 else
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 100


2270:ThirdParty/FreeRTOS/tasks.c ****                 {
2271:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2272:ThirdParty/FreeRTOS/tasks.c ****                 }
2273:ThirdParty/FreeRTOS/tasks.c ****             }
2274:ThirdParty/FreeRTOS/tasks.c ****         }
2275:ThirdParty/FreeRTOS/tasks.c ****         else
2276:ThirdParty/FreeRTOS/tasks.c ****         {
2277:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2278:ThirdParty/FreeRTOS/tasks.c ****         }
2279:ThirdParty/FreeRTOS/tasks.c ****     }
2280:ThirdParty/FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
 3152              		.loc 1 2280 5
 3153 01ac FFF7FEFF 		bl	vPortExitCritical
2281:ThirdParty/FreeRTOS/tasks.c **** 
2282:ThirdParty/FreeRTOS/tasks.c ****     return xAlreadyYielded;
 3154              		.loc 1 2282 12
 3155 01b0 7B69     		ldr	r3, [r7, #20]
2283:ThirdParty/FreeRTOS/tasks.c **** }
 3156              		.loc 1 2283 1
 3157 01b2 1846     		mov	r0, r3
 3158 01b4 2037     		adds	r7, r7, #32
 3159              	.LCFI88:
 3160              		.cfi_def_cfa_offset 8
 3161 01b6 BD46     		mov	sp, r7
 3162              	.LCFI89:
 3163              		.cfi_def_cfa_register 13
 3164              		@ sp needed
 3165 01b8 80BD     		pop	{r7, pc}
 3166              	.L180:
 3167 01ba 00BF     		.align	2
 3168              	.L179:
 3169 01bc 00000000 		.word	uxSchedulerSuspended
 3170 01c0 00000000 		.word	uxCurrentNumberOfTasks
 3171 01c4 00000000 		.word	xPendingReadyList
 3172 01c8 00000000 		.word	uxTopReadyPriority
 3173 01cc 00000000 		.word	pxReadyTasksLists
 3174 01d0 00000000 		.word	pxCurrentTCB
 3175 01d4 00000000 		.word	xYieldPending
 3176 01d8 00000000 		.word	xPendedTicks
 3177              		.cfi_endproc
 3178              	.LFE22:
 3180              		.section	.text.xTaskGetTickCount,"ax",%progbits
 3181              		.align	1
 3182              		.global	xTaskGetTickCount
 3183              		.syntax unified
 3184              		.thumb
 3185              		.thumb_func
 3187              	xTaskGetTickCount:
 3188              	.LFB23:
2284:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2285:ThirdParty/FreeRTOS/tasks.c **** 
2286:ThirdParty/FreeRTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
2287:ThirdParty/FreeRTOS/tasks.c **** {
 3189              		.loc 1 2287 1
 3190              		.cfi_startproc
 3191              		@ args = 0, pretend = 0, frame = 8
 3192              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 101


 3193              		@ link register save eliminated.
 3194 0000 80B4     		push	{r7}
 3195              	.LCFI90:
 3196              		.cfi_def_cfa_offset 4
 3197              		.cfi_offset 7, -4
 3198 0002 83B0     		sub	sp, sp, #12
 3199              	.LCFI91:
 3200              		.cfi_def_cfa_offset 16
 3201 0004 00AF     		add	r7, sp, #0
 3202              	.LCFI92:
 3203              		.cfi_def_cfa_register 7
2288:ThirdParty/FreeRTOS/tasks.c ****     TickType_t xTicks;
2289:ThirdParty/FreeRTOS/tasks.c **** 
2290:ThirdParty/FreeRTOS/tasks.c ****     /* Critical section required if running on a 16 bit processor. */
2291:ThirdParty/FreeRTOS/tasks.c ****     portTICK_TYPE_ENTER_CRITICAL();
2292:ThirdParty/FreeRTOS/tasks.c ****     {
2293:ThirdParty/FreeRTOS/tasks.c ****         xTicks = xTickCount;
 3204              		.loc 1 2293 16
 3205 0006 054B     		ldr	r3, .L183
 3206 0008 1B68     		ldr	r3, [r3]
 3207 000a 7B60     		str	r3, [r7, #4]
2294:ThirdParty/FreeRTOS/tasks.c ****     }
2295:ThirdParty/FreeRTOS/tasks.c ****     portTICK_TYPE_EXIT_CRITICAL();
2296:ThirdParty/FreeRTOS/tasks.c **** 
2297:ThirdParty/FreeRTOS/tasks.c ****     return xTicks;
 3208              		.loc 1 2297 12
 3209 000c 7B68     		ldr	r3, [r7, #4]
2298:ThirdParty/FreeRTOS/tasks.c **** }
 3210              		.loc 1 2298 1
 3211 000e 1846     		mov	r0, r3
 3212 0010 0C37     		adds	r7, r7, #12
 3213              	.LCFI93:
 3214              		.cfi_def_cfa_offset 4
 3215 0012 BD46     		mov	sp, r7
 3216              	.LCFI94:
 3217              		.cfi_def_cfa_register 13
 3218              		@ sp needed
 3219 0014 5DF8047B 		ldr	r7, [sp], #4
 3220              	.LCFI95:
 3221              		.cfi_restore 7
 3222              		.cfi_def_cfa_offset 0
 3223 0018 7047     		bx	lr
 3224              	.L184:
 3225 001a 00BF     		.align	2
 3226              	.L183:
 3227 001c 00000000 		.word	xTickCount
 3228              		.cfi_endproc
 3229              	.LFE23:
 3231              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 3232              		.align	1
 3233              		.global	xTaskGetTickCountFromISR
 3234              		.syntax unified
 3235              		.thumb
 3236              		.thumb_func
 3238              	xTaskGetTickCountFromISR:
 3239              	.LFB24:
2299:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 102


2300:ThirdParty/FreeRTOS/tasks.c **** 
2301:ThirdParty/FreeRTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2302:ThirdParty/FreeRTOS/tasks.c **** {
 3240              		.loc 1 2302 1
 3241              		.cfi_startproc
 3242              		@ args = 0, pretend = 0, frame = 8
 3243              		@ frame_needed = 1, uses_anonymous_args = 0
 3244 0000 80B5     		push	{r7, lr}
 3245              	.LCFI96:
 3246              		.cfi_def_cfa_offset 8
 3247              		.cfi_offset 7, -8
 3248              		.cfi_offset 14, -4
 3249 0002 82B0     		sub	sp, sp, #8
 3250              	.LCFI97:
 3251              		.cfi_def_cfa_offset 16
 3252 0004 00AF     		add	r7, sp, #0
 3253              	.LCFI98:
 3254              		.cfi_def_cfa_register 7
2303:ThirdParty/FreeRTOS/tasks.c ****     TickType_t xReturn;
2304:ThirdParty/FreeRTOS/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
2305:ThirdParty/FreeRTOS/tasks.c **** 
2306:ThirdParty/FreeRTOS/tasks.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2307:ThirdParty/FreeRTOS/tasks.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2308:ThirdParty/FreeRTOS/tasks.c ****      * above the maximum system call priority are kept permanently enabled, even
2309:ThirdParty/FreeRTOS/tasks.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2310:ThirdParty/FreeRTOS/tasks.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2311:ThirdParty/FreeRTOS/tasks.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2312:ThirdParty/FreeRTOS/tasks.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2313:ThirdParty/FreeRTOS/tasks.c ****      * assigned a priority above the configured maximum system call priority.
2314:ThirdParty/FreeRTOS/tasks.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2315:ThirdParty/FreeRTOS/tasks.c ****      * that have been assigned a priority at or (logically) below the maximum
2316:ThirdParty/FreeRTOS/tasks.c ****      * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
2317:ThirdParty/FreeRTOS/tasks.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2318:ThirdParty/FreeRTOS/tasks.c ****      * More information (albeit Cortex-M specific) is provided on the following
2319:ThirdParty/FreeRTOS/tasks.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2320:ThirdParty/FreeRTOS/tasks.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3255              		.loc 1 2320 5
 3256 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2321:ThirdParty/FreeRTOS/tasks.c **** 
2322:ThirdParty/FreeRTOS/tasks.c ****     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 3257              		.loc 1 2322 28
 3258 000a 0023     		movs	r3, #0
 3259 000c 7B60     		str	r3, [r7, #4]
2323:ThirdParty/FreeRTOS/tasks.c ****     {
2324:ThirdParty/FreeRTOS/tasks.c ****         xReturn = xTickCount;
 3260              		.loc 1 2324 17
 3261 000e 044B     		ldr	r3, .L187
 3262 0010 1B68     		ldr	r3, [r3]
 3263 0012 3B60     		str	r3, [r7]
2325:ThirdParty/FreeRTOS/tasks.c ****     }
2326:ThirdParty/FreeRTOS/tasks.c ****     portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2327:ThirdParty/FreeRTOS/tasks.c **** 
2328:ThirdParty/FreeRTOS/tasks.c ****     return xReturn;
 3264              		.loc 1 2328 12
 3265 0014 3B68     		ldr	r3, [r7]
2329:ThirdParty/FreeRTOS/tasks.c **** }
 3266              		.loc 1 2329 1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 103


 3267 0016 1846     		mov	r0, r3
 3268 0018 0837     		adds	r7, r7, #8
 3269              	.LCFI99:
 3270              		.cfi_def_cfa_offset 8
 3271 001a BD46     		mov	sp, r7
 3272              	.LCFI100:
 3273              		.cfi_def_cfa_register 13
 3274              		@ sp needed
 3275 001c 80BD     		pop	{r7, pc}
 3276              	.L188:
 3277 001e 00BF     		.align	2
 3278              	.L187:
 3279 0020 00000000 		.word	xTickCount
 3280              		.cfi_endproc
 3281              	.LFE24:
 3283              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 3284              		.align	1
 3285              		.global	uxTaskGetNumberOfTasks
 3286              		.syntax unified
 3287              		.thumb
 3288              		.thumb_func
 3290              	uxTaskGetNumberOfTasks:
 3291              	.LFB25:
2330:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2331:ThirdParty/FreeRTOS/tasks.c **** 
2332:ThirdParty/FreeRTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2333:ThirdParty/FreeRTOS/tasks.c **** {
 3292              		.loc 1 2333 1
 3293              		.cfi_startproc
 3294              		@ args = 0, pretend = 0, frame = 0
 3295              		@ frame_needed = 1, uses_anonymous_args = 0
 3296              		@ link register save eliminated.
 3297 0000 80B4     		push	{r7}
 3298              	.LCFI101:
 3299              		.cfi_def_cfa_offset 4
 3300              		.cfi_offset 7, -4
 3301 0002 00AF     		add	r7, sp, #0
 3302              	.LCFI102:
 3303              		.cfi_def_cfa_register 7
2334:ThirdParty/FreeRTOS/tasks.c ****     /* A critical section is not required because the variables are of type
2335:ThirdParty/FreeRTOS/tasks.c ****      * BaseType_t. */
2336:ThirdParty/FreeRTOS/tasks.c ****     return uxCurrentNumberOfTasks;
 3304              		.loc 1 2336 12
 3305 0004 034B     		ldr	r3, .L191
 3306 0006 1B68     		ldr	r3, [r3]
2337:ThirdParty/FreeRTOS/tasks.c **** }
 3307              		.loc 1 2337 1
 3308 0008 1846     		mov	r0, r3
 3309 000a BD46     		mov	sp, r7
 3310              	.LCFI103:
 3311              		.cfi_def_cfa_register 13
 3312              		@ sp needed
 3313 000c 5DF8047B 		ldr	r7, [sp], #4
 3314              	.LCFI104:
 3315              		.cfi_restore 7
 3316              		.cfi_def_cfa_offset 0
 3317 0010 7047     		bx	lr
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 104


 3318              	.L192:
 3319 0012 00BF     		.align	2
 3320              	.L191:
 3321 0014 00000000 		.word	uxCurrentNumberOfTasks
 3322              		.cfi_endproc
 3323              	.LFE25:
 3325              		.section	.text.pcTaskGetName,"ax",%progbits
 3326              		.align	1
 3327              		.global	pcTaskGetName
 3328              		.syntax unified
 3329              		.thumb
 3330              		.thumb_func
 3332              	pcTaskGetName:
 3333              	.LFB26:
2338:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2339:ThirdParty/FreeRTOS/tasks.c **** 
2340:ThirdParty/FreeRTOS/tasks.c **** char * pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed f
2341:ThirdParty/FreeRTOS/tasks.c **** {
 3334              		.loc 1 2341 1
 3335              		.cfi_startproc
 3336              		@ args = 0, pretend = 0, frame = 16
 3337              		@ frame_needed = 1, uses_anonymous_args = 0
 3338              		@ link register save eliminated.
 3339 0000 80B4     		push	{r7}
 3340              	.LCFI105:
 3341              		.cfi_def_cfa_offset 4
 3342              		.cfi_offset 7, -4
 3343 0002 85B0     		sub	sp, sp, #20
 3344              	.LCFI106:
 3345              		.cfi_def_cfa_offset 24
 3346 0004 00AF     		add	r7, sp, #0
 3347              	.LCFI107:
 3348              		.cfi_def_cfa_register 7
 3349 0006 7860     		str	r0, [r7, #4]
2342:ThirdParty/FreeRTOS/tasks.c ****     TCB_t * pxTCB;
2343:ThirdParty/FreeRTOS/tasks.c **** 
2344:ThirdParty/FreeRTOS/tasks.c ****     /* If null is passed in here then the name of the calling task is being
2345:ThirdParty/FreeRTOS/tasks.c ****      * queried. */
2346:ThirdParty/FreeRTOS/tasks.c ****     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 3350              		.loc 1 2346 13
 3351 0008 7B68     		ldr	r3, [r7, #4]
 3352 000a 002B     		cmp	r3, #0
 3353 000c 02D1     		bne	.L194
 3354              		.loc 1 2346 13 is_stmt 0 discriminator 1
 3355 000e 0D4B     		ldr	r3, .L199
 3356 0010 1B68     		ldr	r3, [r3]
 3357 0012 00E0     		b	.L195
 3358              	.L194:
 3359              		.loc 1 2346 13 discriminator 2
 3360 0014 7B68     		ldr	r3, [r7, #4]
 3361              	.L195:
 3362              		.loc 1 2346 11 is_stmt 1 discriminator 4
 3363 0016 FB60     		str	r3, [r7, #12]
2347:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxTCB );
 3364              		.loc 1 2347 5 discriminator 4
 3365 0018 FB68     		ldr	r3, [r7, #12]
 3366 001a 002B     		cmp	r3, #0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 105


 3367 001c 0AD1     		bne	.L196
 3368              	.LBB209:
 3369              	.LBB210:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3370              		.loc 2 198 9
 3371              		.syntax unified
 3372              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3373 001e 4FF05003 			mov r3, #80												
 3374 0022 83F31188 		msr basepri, r3											
 3375 0026 BFF36F8F 		isb														
 3376 002a BFF34F8F 		dsb														
 3377              	
 3378              	@ 0 "" 2
 3379              		.thumb
 3380              		.syntax unified
 3381 002e BB60     		str	r3, [r7, #8]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3382              		.loc 2 206 5
 3383 0030 00BF     		nop
 3384              	.L197:
 3385              	.LBE210:
 3386              	.LBE209:
 3387              		.loc 1 2347 5 discriminator 1
 3388 0032 FEE7     		b	.L197
 3389              	.L196:
2348:ThirdParty/FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 3390              		.loc 1 2348 12
 3391 0034 FB68     		ldr	r3, [r7, #12]
 3392 0036 3433     		adds	r3, r3, #52
2349:ThirdParty/FreeRTOS/tasks.c **** }
 3393              		.loc 1 2349 1
 3394 0038 1846     		mov	r0, r3
 3395 003a 1437     		adds	r7, r7, #20
 3396              	.LCFI108:
 3397              		.cfi_def_cfa_offset 4
 3398 003c BD46     		mov	sp, r7
 3399              	.LCFI109:
 3400              		.cfi_def_cfa_register 13
 3401              		@ sp needed
 3402 003e 5DF8047B 		ldr	r7, [sp], #4
 3403              	.LCFI110:
 3404              		.cfi_restore 7
 3405              		.cfi_def_cfa_offset 0
 3406 0042 7047     		bx	lr
 3407              	.L200:
 3408              		.align	2
 3409              	.L199:
 3410 0044 00000000 		.word	pxCurrentTCB
 3411              		.cfi_endproc
 3412              	.LFE26:
 3414              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 3415              		.align	1
 3416              		.global	uxTaskGetSystemState
 3417              		.syntax unified
 3418              		.thumb
 3419              		.thumb_func
 3421              	uxTaskGetSystemState:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 106


 3422              	.LFB27:
2350:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2351:ThirdParty/FreeRTOS/tasks.c **** 
2352:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2353:ThirdParty/FreeRTOS/tasks.c **** 
2354:ThirdParty/FreeRTOS/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
2355:ThirdParty/FreeRTOS/tasks.c ****                                                      const char pcNameToQuery[] )
2356:ThirdParty/FreeRTOS/tasks.c ****     {
2357:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxNextTCB;
2358:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxFirstTCB;
2359:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxReturn = NULL;
2360:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t x;
2361:ThirdParty/FreeRTOS/tasks.c ****         char cNextChar;
2362:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xBreakLoop;
2363:ThirdParty/FreeRTOS/tasks.c **** 
2364:ThirdParty/FreeRTOS/tasks.c ****         /* This function is called with the scheduler suspended. */
2365:ThirdParty/FreeRTOS/tasks.c **** 
2366:ThirdParty/FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2367:ThirdParty/FreeRTOS/tasks.c ****         {
2368:ThirdParty/FreeRTOS/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
2369:ThirdParty/FreeRTOS/tasks.c **** 
2370:ThirdParty/FreeRTOS/tasks.c ****             do
2371:ThirdParty/FreeRTOS/tasks.c ****             {
2372:ThirdParty/FreeRTOS/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
2373:ThirdParty/FreeRTOS/tasks.c **** 
2374:ThirdParty/FreeRTOS/tasks.c ****                 /* Check each character in the name looking for a match or
2375:ThirdParty/FreeRTOS/tasks.c ****                  * mismatch. */
2376:ThirdParty/FreeRTOS/tasks.c ****                 xBreakLoop = pdFALSE;
2377:ThirdParty/FreeRTOS/tasks.c **** 
2378:ThirdParty/FreeRTOS/tasks.c ****                 for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2379:ThirdParty/FreeRTOS/tasks.c ****                 {
2380:ThirdParty/FreeRTOS/tasks.c ****                     cNextChar = pxNextTCB->pcTaskName[ x ];
2381:ThirdParty/FreeRTOS/tasks.c **** 
2382:ThirdParty/FreeRTOS/tasks.c ****                     if( cNextChar != pcNameToQuery[ x ] )
2383:ThirdParty/FreeRTOS/tasks.c ****                     {
2384:ThirdParty/FreeRTOS/tasks.c ****                         /* Characters didn't match. */
2385:ThirdParty/FreeRTOS/tasks.c ****                         xBreakLoop = pdTRUE;
2386:ThirdParty/FreeRTOS/tasks.c ****                     }
2387:ThirdParty/FreeRTOS/tasks.c ****                     else if( cNextChar == ( char ) 0x00 )
2388:ThirdParty/FreeRTOS/tasks.c ****                     {
2389:ThirdParty/FreeRTOS/tasks.c ****                         /* Both strings terminated, a match must have been
2390:ThirdParty/FreeRTOS/tasks.c ****                          * found. */
2391:ThirdParty/FreeRTOS/tasks.c ****                         pxReturn = pxNextTCB;
2392:ThirdParty/FreeRTOS/tasks.c ****                         xBreakLoop = pdTRUE;
2393:ThirdParty/FreeRTOS/tasks.c ****                     }
2394:ThirdParty/FreeRTOS/tasks.c ****                     else
2395:ThirdParty/FreeRTOS/tasks.c ****                     {
2396:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2397:ThirdParty/FreeRTOS/tasks.c ****                     }
2398:ThirdParty/FreeRTOS/tasks.c **** 
2399:ThirdParty/FreeRTOS/tasks.c ****                     if( xBreakLoop != pdFALSE )
2400:ThirdParty/FreeRTOS/tasks.c ****                     {
2401:ThirdParty/FreeRTOS/tasks.c ****                         break;
2402:ThirdParty/FreeRTOS/tasks.c ****                     }
2403:ThirdParty/FreeRTOS/tasks.c ****                 }
2404:ThirdParty/FreeRTOS/tasks.c **** 
2405:ThirdParty/FreeRTOS/tasks.c ****                 if( pxReturn != NULL )
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 107


2406:ThirdParty/FreeRTOS/tasks.c ****                 {
2407:ThirdParty/FreeRTOS/tasks.c ****                     /* The handle has been found. */
2408:ThirdParty/FreeRTOS/tasks.c ****                     break;
2409:ThirdParty/FreeRTOS/tasks.c ****                 }
2410:ThirdParty/FreeRTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
2411:ThirdParty/FreeRTOS/tasks.c ****         }
2412:ThirdParty/FreeRTOS/tasks.c ****         else
2413:ThirdParty/FreeRTOS/tasks.c ****         {
2414:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2415:ThirdParty/FreeRTOS/tasks.c ****         }
2416:ThirdParty/FreeRTOS/tasks.c **** 
2417:ThirdParty/FreeRTOS/tasks.c ****         return pxReturn;
2418:ThirdParty/FreeRTOS/tasks.c ****     }
2419:ThirdParty/FreeRTOS/tasks.c **** 
2420:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2421:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2422:ThirdParty/FreeRTOS/tasks.c **** 
2423:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2424:ThirdParty/FreeRTOS/tasks.c **** 
2425:ThirdParty/FreeRTOS/tasks.c ****     TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types a
2426:ThirdParty/FreeRTOS/tasks.c ****     {
2427:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
2428:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
2429:ThirdParty/FreeRTOS/tasks.c **** 
2430:ThirdParty/FreeRTOS/tasks.c ****         /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2431:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2432:ThirdParty/FreeRTOS/tasks.c **** 
2433:ThirdParty/FreeRTOS/tasks.c ****         vTaskSuspendAll();
2434:ThirdParty/FreeRTOS/tasks.c ****         {
2435:ThirdParty/FreeRTOS/tasks.c ****             /* Search the ready lists. */
2436:ThirdParty/FreeRTOS/tasks.c ****             do
2437:ThirdParty/FreeRTOS/tasks.c ****             {
2438:ThirdParty/FreeRTOS/tasks.c ****                 uxQueue--;
2439:ThirdParty/FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
2440:ThirdParty/FreeRTOS/tasks.c **** 
2441:ThirdParty/FreeRTOS/tasks.c ****                 if( pxTCB != NULL )
2442:ThirdParty/FreeRTOS/tasks.c ****                 {
2443:ThirdParty/FreeRTOS/tasks.c ****                     /* Found the handle. */
2444:ThirdParty/FreeRTOS/tasks.c ****                     break;
2445:ThirdParty/FreeRTOS/tasks.c ****                 }
2446:ThirdParty/FreeRTOS/tasks.c ****             } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as 
2447:ThirdParty/FreeRTOS/tasks.c **** 
2448:ThirdParty/FreeRTOS/tasks.c ****             /* Search the delayed lists. */
2449:ThirdParty/FreeRTOS/tasks.c ****             if( pxTCB == NULL )
2450:ThirdParty/FreeRTOS/tasks.c ****             {
2451:ThirdParty/FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQ
2452:ThirdParty/FreeRTOS/tasks.c ****             }
2453:ThirdParty/FreeRTOS/tasks.c **** 
2454:ThirdParty/FreeRTOS/tasks.c ****             if( pxTCB == NULL )
2455:ThirdParty/FreeRTOS/tasks.c ****             {
2456:ThirdParty/FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, p
2457:ThirdParty/FreeRTOS/tasks.c ****             }
2458:ThirdParty/FreeRTOS/tasks.c **** 
2459:ThirdParty/FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
2460:ThirdParty/FreeRTOS/tasks.c ****             {
2461:ThirdParty/FreeRTOS/tasks.c ****                 if( pxTCB == NULL )
2462:ThirdParty/FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 108


2463:ThirdParty/FreeRTOS/tasks.c ****                     /* Search the suspended list. */
2464:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2465:ThirdParty/FreeRTOS/tasks.c ****                 }
2466:ThirdParty/FreeRTOS/tasks.c ****             }
2467:ThirdParty/FreeRTOS/tasks.c ****             #endif
2468:ThirdParty/FreeRTOS/tasks.c **** 
2469:ThirdParty/FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
2470:ThirdParty/FreeRTOS/tasks.c ****             {
2471:ThirdParty/FreeRTOS/tasks.c ****                 if( pxTCB == NULL )
2472:ThirdParty/FreeRTOS/tasks.c ****                 {
2473:ThirdParty/FreeRTOS/tasks.c ****                     /* Search the deleted list. */
2474:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQu
2475:ThirdParty/FreeRTOS/tasks.c ****                 }
2476:ThirdParty/FreeRTOS/tasks.c ****             }
2477:ThirdParty/FreeRTOS/tasks.c ****             #endif
2478:ThirdParty/FreeRTOS/tasks.c ****         }
2479:ThirdParty/FreeRTOS/tasks.c ****         ( void ) xTaskResumeAll();
2480:ThirdParty/FreeRTOS/tasks.c **** 
2481:ThirdParty/FreeRTOS/tasks.c ****         return pxTCB;
2482:ThirdParty/FreeRTOS/tasks.c ****     }
2483:ThirdParty/FreeRTOS/tasks.c **** 
2484:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2485:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2486:ThirdParty/FreeRTOS/tasks.c **** 
2487:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2488:ThirdParty/FreeRTOS/tasks.c **** 
2489:ThirdParty/FreeRTOS/tasks.c ****     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
2490:ThirdParty/FreeRTOS/tasks.c ****                                       const UBaseType_t uxArraySize,
2491:ThirdParty/FreeRTOS/tasks.c ****                                       configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
2492:ThirdParty/FreeRTOS/tasks.c ****     {
 3423              		.loc 1 2492 5
 3424              		.cfi_startproc
 3425              		@ args = 0, pretend = 0, frame = 24
 3426              		@ frame_needed = 1, uses_anonymous_args = 0
 3427 0000 80B5     		push	{r7, lr}
 3428              	.LCFI111:
 3429              		.cfi_def_cfa_offset 8
 3430              		.cfi_offset 7, -8
 3431              		.cfi_offset 14, -4
 3432 0002 86B0     		sub	sp, sp, #24
 3433              	.LCFI112:
 3434              		.cfi_def_cfa_offset 32
 3435 0004 00AF     		add	r7, sp, #0
 3436              	.LCFI113:
 3437              		.cfi_def_cfa_register 7
 3438 0006 F860     		str	r0, [r7, #12]
 3439 0008 B960     		str	r1, [r7, #8]
 3440 000a 7A60     		str	r2, [r7, #4]
2493:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3441              		.loc 1 2493 21
 3442 000c 0023     		movs	r3, #0
 3443 000e 7B61     		str	r3, [r7, #20]
 3444              		.loc 1 2493 33
 3445 0010 0523     		movs	r3, #5
 3446 0012 3B61     		str	r3, [r7, #16]
2494:ThirdParty/FreeRTOS/tasks.c **** 
2495:ThirdParty/FreeRTOS/tasks.c ****         vTaskSuspendAll();
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 109


 3447              		.loc 1 2495 9
 3448 0014 FFF7FEFF 		bl	vTaskSuspendAll
2496:ThirdParty/FreeRTOS/tasks.c ****         {
2497:ThirdParty/FreeRTOS/tasks.c ****             /* Is there a space in the array for each task in the system? */
2498:ThirdParty/FreeRTOS/tasks.c ****             if( uxArraySize >= uxCurrentNumberOfTasks )
 3449              		.loc 1 2498 29
 3450 0018 3A4B     		ldr	r3, .L205
 3451 001a 1B68     		ldr	r3, [r3]
 3452              		.loc 1 2498 15
 3453 001c BA68     		ldr	r2, [r7, #8]
 3454 001e 9A42     		cmp	r2, r3
 3455 0020 68D3     		bcc	.L202
 3456              	.L203:
2499:ThirdParty/FreeRTOS/tasks.c ****             {
2500:ThirdParty/FreeRTOS/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2501:ThirdParty/FreeRTOS/tasks.c ****                  * task in the Ready state. */
2502:ThirdParty/FreeRTOS/tasks.c ****                 do
2503:ThirdParty/FreeRTOS/tasks.c ****                 {
2504:ThirdParty/FreeRTOS/tasks.c ****                     uxQueue--;
 3457              		.loc 1 2504 28 discriminator 1
 3458 0022 3B69     		ldr	r3, [r7, #16]
 3459 0024 013B     		subs	r3, r3, #1
 3460 0026 3B61     		str	r3, [r7, #16]
2505:ThirdParty/FreeRTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
 3461              		.loc 1 2505 81 discriminator 1
 3462 0028 7A69     		ldr	r2, [r7, #20]
 3463 002a 1346     		mov	r3, r2
 3464 002c DB00     		lsls	r3, r3, #3
 3465 002e 1344     		add	r3, r3, r2
 3466 0030 9B00     		lsls	r3, r3, #2
 3467 0032 1A46     		mov	r2, r3
 3468              		.loc 1 2505 31 discriminator 1
 3469 0034 FB68     		ldr	r3, [r7, #12]
 3470 0036 9818     		adds	r0, r3, r2
 3471 0038 3A69     		ldr	r2, [r7, #16]
 3472 003a 1346     		mov	r3, r2
 3473 003c 9B00     		lsls	r3, r3, #2
 3474 003e 1344     		add	r3, r3, r2
 3475 0040 9B00     		lsls	r3, r3, #2
 3476 0042 314A     		ldr	r2, .L205+4
 3477 0044 1344     		add	r3, r3, r2
 3478 0046 0122     		movs	r2, #1
 3479 0048 1946     		mov	r1, r3
 3480 004a FFF7FEFF 		bl	prvListTasksWithinSingleList
 3481 004e 0246     		mov	r2, r0
 3482              		.loc 1 2505 28 discriminator 1
 3483 0050 7B69     		ldr	r3, [r7, #20]
 3484 0052 1344     		add	r3, r3, r2
 3485 0054 7B61     		str	r3, [r7, #20]
2506:ThirdParty/FreeRTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 3486              		.loc 1 2506 17 discriminator 1
 3487 0056 3B69     		ldr	r3, [r7, #16]
 3488 0058 002B     		cmp	r3, #0
 3489 005a E2D1     		bne	.L203
2507:ThirdParty/FreeRTOS/tasks.c **** 
2508:ThirdParty/FreeRTOS/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2509:ThirdParty/FreeRTOS/tasks.c ****                  * task in the Blocked state. */
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 110


2510:ThirdParty/FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 3490              		.loc 1 2510 77
 3491 005c 7A69     		ldr	r2, [r7, #20]
 3492 005e 1346     		mov	r3, r2
 3493 0060 DB00     		lsls	r3, r3, #3
 3494 0062 1344     		add	r3, r3, r2
 3495 0064 9B00     		lsls	r3, r3, #2
 3496 0066 1A46     		mov	r2, r3
 3497              		.loc 1 2510 27
 3498 0068 FB68     		ldr	r3, [r7, #12]
 3499 006a 1344     		add	r3, r3, r2
 3500 006c 274A     		ldr	r2, .L205+8
 3501 006e 1168     		ldr	r1, [r2]
 3502 0070 0222     		movs	r2, #2
 3503 0072 1846     		mov	r0, r3
 3504 0074 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3505 0078 0246     		mov	r2, r0
 3506              		.loc 1 2510 24
 3507 007a 7B69     		ldr	r3, [r7, #20]
 3508 007c 1344     		add	r3, r3, r2
 3509 007e 7B61     		str	r3, [r7, #20]
2511:ThirdParty/FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 3510              		.loc 1 2511 77
 3511 0080 7A69     		ldr	r2, [r7, #20]
 3512 0082 1346     		mov	r3, r2
 3513 0084 DB00     		lsls	r3, r3, #3
 3514 0086 1344     		add	r3, r3, r2
 3515 0088 9B00     		lsls	r3, r3, #2
 3516 008a 1A46     		mov	r2, r3
 3517              		.loc 1 2511 27
 3518 008c FB68     		ldr	r3, [r7, #12]
 3519 008e 1344     		add	r3, r3, r2
 3520 0090 1F4A     		ldr	r2, .L205+12
 3521 0092 1168     		ldr	r1, [r2]
 3522 0094 0222     		movs	r2, #2
 3523 0096 1846     		mov	r0, r3
 3524 0098 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3525 009c 0246     		mov	r2, r0
 3526              		.loc 1 2511 24
 3527 009e 7B69     		ldr	r3, [r7, #20]
 3528 00a0 1344     		add	r3, r3, r2
 3529 00a2 7B61     		str	r3, [r7, #20]
2512:ThirdParty/FreeRTOS/tasks.c **** 
2513:ThirdParty/FreeRTOS/tasks.c ****                 #if ( INCLUDE_vTaskDelete == 1 )
2514:ThirdParty/FreeRTOS/tasks.c ****                 {
2515:ThirdParty/FreeRTOS/tasks.c ****                     /* Fill in an TaskStatus_t structure with information on
2516:ThirdParty/FreeRTOS/tasks.c ****                      * each task that has been deleted but not yet cleaned up. */
2517:ThirdParty/FreeRTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTas
 3530              		.loc 1 2517 81
 3531 00a4 7A69     		ldr	r2, [r7, #20]
 3532 00a6 1346     		mov	r3, r2
 3533 00a8 DB00     		lsls	r3, r3, #3
 3534 00aa 1344     		add	r3, r3, r2
 3535 00ac 9B00     		lsls	r3, r3, #2
 3536 00ae 1A46     		mov	r2, r3
 3537              		.loc 1 2517 31
 3538 00b0 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 111


 3539 00b2 1344     		add	r3, r3, r2
 3540 00b4 0422     		movs	r2, #4
 3541 00b6 1749     		ldr	r1, .L205+16
 3542 00b8 1846     		mov	r0, r3
 3543 00ba FFF7FEFF 		bl	prvListTasksWithinSingleList
 3544 00be 0246     		mov	r2, r0
 3545              		.loc 1 2517 28
 3546 00c0 7B69     		ldr	r3, [r7, #20]
 3547 00c2 1344     		add	r3, r3, r2
 3548 00c4 7B61     		str	r3, [r7, #20]
2518:ThirdParty/FreeRTOS/tasks.c ****                 }
2519:ThirdParty/FreeRTOS/tasks.c ****                 #endif
2520:ThirdParty/FreeRTOS/tasks.c **** 
2521:ThirdParty/FreeRTOS/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
2522:ThirdParty/FreeRTOS/tasks.c ****                 {
2523:ThirdParty/FreeRTOS/tasks.c ****                     /* Fill in an TaskStatus_t structure with information on
2524:ThirdParty/FreeRTOS/tasks.c ****                      * each task in the Suspended state. */
2525:ThirdParty/FreeRTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSus
 3549              		.loc 1 2525 81
 3550 00c6 7A69     		ldr	r2, [r7, #20]
 3551 00c8 1346     		mov	r3, r2
 3552 00ca DB00     		lsls	r3, r3, #3
 3553 00cc 1344     		add	r3, r3, r2
 3554 00ce 9B00     		lsls	r3, r3, #2
 3555 00d0 1A46     		mov	r2, r3
 3556              		.loc 1 2525 31
 3557 00d2 FB68     		ldr	r3, [r7, #12]
 3558 00d4 1344     		add	r3, r3, r2
 3559 00d6 0322     		movs	r2, #3
 3560 00d8 0F49     		ldr	r1, .L205+20
 3561 00da 1846     		mov	r0, r3
 3562 00dc FFF7FEFF 		bl	prvListTasksWithinSingleList
 3563 00e0 0246     		mov	r2, r0
 3564              		.loc 1 2525 28
 3565 00e2 7B69     		ldr	r3, [r7, #20]
 3566 00e4 1344     		add	r3, r3, r2
 3567 00e6 7B61     		str	r3, [r7, #20]
2526:ThirdParty/FreeRTOS/tasks.c ****                 }
2527:ThirdParty/FreeRTOS/tasks.c ****                 #endif
2528:ThirdParty/FreeRTOS/tasks.c **** 
2529:ThirdParty/FreeRTOS/tasks.c ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
2530:ThirdParty/FreeRTOS/tasks.c ****                 {
2531:ThirdParty/FreeRTOS/tasks.c ****                     if( pulTotalRunTime != NULL )
2532:ThirdParty/FreeRTOS/tasks.c ****                     {
2533:ThirdParty/FreeRTOS/tasks.c ****                         #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2534:ThirdParty/FreeRTOS/tasks.c ****                             portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2535:ThirdParty/FreeRTOS/tasks.c ****                         #else
2536:ThirdParty/FreeRTOS/tasks.c ****                             *pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2537:ThirdParty/FreeRTOS/tasks.c ****                         #endif
2538:ThirdParty/FreeRTOS/tasks.c ****                     }
2539:ThirdParty/FreeRTOS/tasks.c ****                 }
2540:ThirdParty/FreeRTOS/tasks.c ****                 #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2541:ThirdParty/FreeRTOS/tasks.c ****                 {
2542:ThirdParty/FreeRTOS/tasks.c ****                     if( pulTotalRunTime != NULL )
 3568              		.loc 1 2542 23
 3569 00e8 7B68     		ldr	r3, [r7, #4]
 3570 00ea 002B     		cmp	r3, #0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 112


 3571 00ec 02D0     		beq	.L202
2543:ThirdParty/FreeRTOS/tasks.c ****                     {
2544:ThirdParty/FreeRTOS/tasks.c ****                         *pulTotalRunTime = 0;
 3572              		.loc 1 2544 42
 3573 00ee 7B68     		ldr	r3, [r7, #4]
 3574 00f0 0022     		movs	r2, #0
 3575 00f2 1A60     		str	r2, [r3]
 3576              	.L202:
2545:ThirdParty/FreeRTOS/tasks.c ****                     }
2546:ThirdParty/FreeRTOS/tasks.c ****                 }
2547:ThirdParty/FreeRTOS/tasks.c ****                 #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2548:ThirdParty/FreeRTOS/tasks.c ****             }
2549:ThirdParty/FreeRTOS/tasks.c ****             else
2550:ThirdParty/FreeRTOS/tasks.c ****             {
2551:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2552:ThirdParty/FreeRTOS/tasks.c ****             }
2553:ThirdParty/FreeRTOS/tasks.c ****         }
2554:ThirdParty/FreeRTOS/tasks.c ****         ( void ) xTaskResumeAll();
 3577              		.loc 1 2554 18
 3578 00f4 FFF7FEFF 		bl	xTaskResumeAll
2555:ThirdParty/FreeRTOS/tasks.c **** 
2556:ThirdParty/FreeRTOS/tasks.c ****         return uxTask;
 3579              		.loc 1 2556 16
 3580 00f8 7B69     		ldr	r3, [r7, #20]
2557:ThirdParty/FreeRTOS/tasks.c ****     }
 3581              		.loc 1 2557 5
 3582 00fa 1846     		mov	r0, r3
 3583 00fc 1837     		adds	r7, r7, #24
 3584              	.LCFI114:
 3585              		.cfi_def_cfa_offset 8
 3586 00fe BD46     		mov	sp, r7
 3587              	.LCFI115:
 3588              		.cfi_def_cfa_register 13
 3589              		@ sp needed
 3590 0100 80BD     		pop	{r7, pc}
 3591              	.L206:
 3592 0102 00BF     		.align	2
 3593              	.L205:
 3594 0104 00000000 		.word	uxCurrentNumberOfTasks
 3595 0108 00000000 		.word	pxReadyTasksLists
 3596 010c 00000000 		.word	pxDelayedTaskList
 3597 0110 00000000 		.word	pxOverflowDelayedTaskList
 3598 0114 00000000 		.word	xTasksWaitingTermination
 3599 0118 00000000 		.word	xSuspendedTaskList
 3600              		.cfi_endproc
 3601              	.LFE27:
 3603              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3604              		.align	1
 3605              		.global	xTaskCatchUpTicks
 3606              		.syntax unified
 3607              		.thumb
 3608              		.thumb_func
 3610              	xTaskCatchUpTicks:
 3611              	.LFB28:
2558:ThirdParty/FreeRTOS/tasks.c **** 
2559:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2560:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 113


2561:ThirdParty/FreeRTOS/tasks.c **** 
2562:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2563:ThirdParty/FreeRTOS/tasks.c **** 
2564:ThirdParty/FreeRTOS/tasks.c ****     TaskHandle_t xTaskGetIdleTaskHandle( void )
2565:ThirdParty/FreeRTOS/tasks.c ****     {
2566:ThirdParty/FreeRTOS/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2567:ThirdParty/FreeRTOS/tasks.c ****          * started, then xIdleTaskHandle will be NULL. */
2568:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( ( xIdleTaskHandle != NULL ) );
2569:ThirdParty/FreeRTOS/tasks.c ****         return xIdleTaskHandle;
2570:ThirdParty/FreeRTOS/tasks.c ****     }
2571:ThirdParty/FreeRTOS/tasks.c **** 
2572:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2573:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2574:ThirdParty/FreeRTOS/tasks.c **** 
2575:ThirdParty/FreeRTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2576:ThirdParty/FreeRTOS/tasks.c ****  * This is to ensure vTaskStepTick() is available when user defined low power mode
2577:ThirdParty/FreeRTOS/tasks.c ****  * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2578:ThirdParty/FreeRTOS/tasks.c ****  * 1. */
2579:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2580:ThirdParty/FreeRTOS/tasks.c **** 
2581:ThirdParty/FreeRTOS/tasks.c ****     void vTaskStepTick( TickType_t xTicksToJump )
2582:ThirdParty/FreeRTOS/tasks.c ****     {
2583:ThirdParty/FreeRTOS/tasks.c ****         /* Correct the tick count value after a period during which the tick
2584:ThirdParty/FreeRTOS/tasks.c ****          * was suppressed.  Note this does *not* call the tick hook function for
2585:ThirdParty/FreeRTOS/tasks.c ****          * each stepped tick. */
2586:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2587:ThirdParty/FreeRTOS/tasks.c **** 
2588:ThirdParty/FreeRTOS/tasks.c ****         if( ( xTickCount + xTicksToJump ) == xNextTaskUnblockTime )
2589:ThirdParty/FreeRTOS/tasks.c ****         {
2590:ThirdParty/FreeRTOS/tasks.c ****             /* Arrange for xTickCount to reach xNextTaskUnblockTime in
2591:ThirdParty/FreeRTOS/tasks.c ****              * xTaskIncrementTick() when the scheduler resumes.  This ensures
2592:ThirdParty/FreeRTOS/tasks.c ****              * that any delayed tasks are resumed at the correct time. */
2593:ThirdParty/FreeRTOS/tasks.c ****             configASSERT( uxSchedulerSuspended );
2594:ThirdParty/FreeRTOS/tasks.c ****             configASSERT( xTicksToJump != ( TickType_t ) 0 );
2595:ThirdParty/FreeRTOS/tasks.c **** 
2596:ThirdParty/FreeRTOS/tasks.c ****             /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
2597:ThirdParty/FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
2598:ThirdParty/FreeRTOS/tasks.c ****             {
2599:ThirdParty/FreeRTOS/tasks.c ****                 xPendedTicks++;
2600:ThirdParty/FreeRTOS/tasks.c ****             }
2601:ThirdParty/FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
2602:ThirdParty/FreeRTOS/tasks.c ****             xTicksToJump--;
2603:ThirdParty/FreeRTOS/tasks.c ****         }
2604:ThirdParty/FreeRTOS/tasks.c ****         else
2605:ThirdParty/FreeRTOS/tasks.c ****         {
2606:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2607:ThirdParty/FreeRTOS/tasks.c ****         }
2608:ThirdParty/FreeRTOS/tasks.c **** 
2609:ThirdParty/FreeRTOS/tasks.c ****         xTickCount += xTicksToJump;
2610:ThirdParty/FreeRTOS/tasks.c ****         traceINCREASE_TICK_COUNT( xTicksToJump );
2611:ThirdParty/FreeRTOS/tasks.c ****     }
2612:ThirdParty/FreeRTOS/tasks.c **** 
2613:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2614:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2615:ThirdParty/FreeRTOS/tasks.c **** 
2616:ThirdParty/FreeRTOS/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2617:ThirdParty/FreeRTOS/tasks.c **** {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 114


 3612              		.loc 1 2617 1
 3613              		.cfi_startproc
 3614              		@ args = 0, pretend = 0, frame = 16
 3615              		@ frame_needed = 1, uses_anonymous_args = 0
 3616 0000 80B5     		push	{r7, lr}
 3617              	.LCFI116:
 3618              		.cfi_def_cfa_offset 8
 3619              		.cfi_offset 7, -8
 3620              		.cfi_offset 14, -4
 3621 0002 84B0     		sub	sp, sp, #16
 3622              	.LCFI117:
 3623              		.cfi_def_cfa_offset 24
 3624 0004 00AF     		add	r7, sp, #0
 3625              	.LCFI118:
 3626              		.cfi_def_cfa_register 7
 3627 0006 7860     		str	r0, [r7, #4]
2618:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xYieldOccurred;
2619:ThirdParty/FreeRTOS/tasks.c **** 
2620:ThirdParty/FreeRTOS/tasks.c ****     /* Must not be called with the scheduler suspended as the implementation
2621:ThirdParty/FreeRTOS/tasks.c ****      * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2622:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended == 0 );
 3628              		.loc 1 2622 5
 3629 0008 114B     		ldr	r3, .L211
 3630 000a 1B68     		ldr	r3, [r3]
 3631 000c 002B     		cmp	r3, #0
 3632 000e 0AD0     		beq	.L208
 3633              	.LBB211:
 3634              	.LBB212:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3635              		.loc 2 198 9
 3636              		.syntax unified
 3637              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3638 0010 4FF05003 			mov r3, #80												
 3639 0014 83F31188 		msr basepri, r3											
 3640 0018 BFF36F8F 		isb														
 3641 001c BFF34F8F 		dsb														
 3642              	
 3643              	@ 0 "" 2
 3644              		.thumb
 3645              		.syntax unified
 3646 0020 BB60     		str	r3, [r7, #8]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3647              		.loc 2 206 5
 3648 0022 00BF     		nop
 3649              	.L209:
 3650              	.LBE212:
 3651              	.LBE211:
 3652              		.loc 1 2622 5 discriminator 1
 3653 0024 FEE7     		b	.L209
 3654              	.L208:
2623:ThirdParty/FreeRTOS/tasks.c **** 
2624:ThirdParty/FreeRTOS/tasks.c ****     /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2625:ThirdParty/FreeRTOS/tasks.c ****      * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2626:ThirdParty/FreeRTOS/tasks.c ****     vTaskSuspendAll();
 3655              		.loc 1 2626 5
 3656 0026 FFF7FEFF 		bl	vTaskSuspendAll
2627:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 115


2628:ThirdParty/FreeRTOS/tasks.c ****     /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
2629:ThirdParty/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 3657              		.loc 1 2629 5
 3658 002a FFF7FEFF 		bl	vPortEnterCritical
2630:ThirdParty/FreeRTOS/tasks.c ****     {
2631:ThirdParty/FreeRTOS/tasks.c ****         xPendedTicks += xTicksToCatchUp;
 3659              		.loc 1 2631 22
 3660 002e 094B     		ldr	r3, .L211+4
 3661 0030 1A68     		ldr	r2, [r3]
 3662 0032 7B68     		ldr	r3, [r7, #4]
 3663 0034 1344     		add	r3, r3, r2
 3664 0036 074A     		ldr	r2, .L211+4
 3665 0038 1360     		str	r3, [r2]
2632:ThirdParty/FreeRTOS/tasks.c ****     }
2633:ThirdParty/FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
 3666              		.loc 1 2633 5
 3667 003a FFF7FEFF 		bl	vPortExitCritical
2634:ThirdParty/FreeRTOS/tasks.c ****     xYieldOccurred = xTaskResumeAll();
 3668              		.loc 1 2634 22
 3669 003e FFF7FEFF 		bl	xTaskResumeAll
 3670 0042 F860     		str	r0, [r7, #12]
2635:ThirdParty/FreeRTOS/tasks.c **** 
2636:ThirdParty/FreeRTOS/tasks.c ****     return xYieldOccurred;
 3671              		.loc 1 2636 12
 3672 0044 FB68     		ldr	r3, [r7, #12]
2637:ThirdParty/FreeRTOS/tasks.c **** }
 3673              		.loc 1 2637 1
 3674 0046 1846     		mov	r0, r3
 3675 0048 1037     		adds	r7, r7, #16
 3676              	.LCFI119:
 3677              		.cfi_def_cfa_offset 8
 3678 004a BD46     		mov	sp, r7
 3679              	.LCFI120:
 3680              		.cfi_def_cfa_register 13
 3681              		@ sp needed
 3682 004c 80BD     		pop	{r7, pc}
 3683              	.L212:
 3684 004e 00BF     		.align	2
 3685              	.L211:
 3686 0050 00000000 		.word	uxSchedulerSuspended
 3687 0054 00000000 		.word	xPendedTicks
 3688              		.cfi_endproc
 3689              	.LFE28:
 3691              		.section	.text.xTaskIncrementTick,"ax",%progbits
 3692              		.align	1
 3693              		.global	xTaskIncrementTick
 3694              		.syntax unified
 3695              		.thumb
 3696              		.thumb_func
 3698              	xTaskIncrementTick:
 3699              	.LFB29:
2638:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2639:ThirdParty/FreeRTOS/tasks.c **** 
2640:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2641:ThirdParty/FreeRTOS/tasks.c **** 
2642:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2643:ThirdParty/FreeRTOS/tasks.c ****     {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 116


2644:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB = xTask;
2645:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn;
2646:ThirdParty/FreeRTOS/tasks.c **** 
2647:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( pxTCB );
2648:ThirdParty/FreeRTOS/tasks.c **** 
2649:ThirdParty/FreeRTOS/tasks.c ****         vTaskSuspendAll();
2650:ThirdParty/FreeRTOS/tasks.c ****         {
2651:ThirdParty/FreeRTOS/tasks.c ****             /* A task can only be prematurely removed from the Blocked state if
2652:ThirdParty/FreeRTOS/tasks.c ****              * it is actually in the Blocked state. */
2653:ThirdParty/FreeRTOS/tasks.c ****             if( eTaskGetState( xTask ) == eBlocked )
2654:ThirdParty/FreeRTOS/tasks.c ****             {
2655:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdPASS;
2656:ThirdParty/FreeRTOS/tasks.c **** 
2657:ThirdParty/FreeRTOS/tasks.c ****                 /* Remove the reference to the task from the blocked list.  An
2658:ThirdParty/FreeRTOS/tasks.c ****                  * interrupt won't touch the xStateListItem because the
2659:ThirdParty/FreeRTOS/tasks.c ****                  * scheduler is suspended. */
2660:ThirdParty/FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2661:ThirdParty/FreeRTOS/tasks.c **** 
2662:ThirdParty/FreeRTOS/tasks.c ****                 /* Is the task waiting on an event also?  If so remove it from
2663:ThirdParty/FreeRTOS/tasks.c ****                  * the event list too.  Interrupts can touch the event list item,
2664:ThirdParty/FreeRTOS/tasks.c ****                  * even though the scheduler is suspended, so a critical section
2665:ThirdParty/FreeRTOS/tasks.c ****                  * is used. */
2666:ThirdParty/FreeRTOS/tasks.c ****                 taskENTER_CRITICAL();
2667:ThirdParty/FreeRTOS/tasks.c ****                 {
2668:ThirdParty/FreeRTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2669:ThirdParty/FreeRTOS/tasks.c ****                     {
2670:ThirdParty/FreeRTOS/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2671:ThirdParty/FreeRTOS/tasks.c **** 
2672:ThirdParty/FreeRTOS/tasks.c ****                         /* This lets the task know it was forcibly removed from the
2673:ThirdParty/FreeRTOS/tasks.c ****                          * blocked state so it should not re-evaluate its block time and
2674:ThirdParty/FreeRTOS/tasks.c ****                          * then block again. */
2675:ThirdParty/FreeRTOS/tasks.c ****                         pxTCB->ucDelayAborted = pdTRUE;
2676:ThirdParty/FreeRTOS/tasks.c ****                     }
2677:ThirdParty/FreeRTOS/tasks.c ****                     else
2678:ThirdParty/FreeRTOS/tasks.c ****                     {
2679:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2680:ThirdParty/FreeRTOS/tasks.c ****                     }
2681:ThirdParty/FreeRTOS/tasks.c ****                 }
2682:ThirdParty/FreeRTOS/tasks.c ****                 taskEXIT_CRITICAL();
2683:ThirdParty/FreeRTOS/tasks.c **** 
2684:ThirdParty/FreeRTOS/tasks.c ****                 /* Place the unblocked task into the appropriate ready list. */
2685:ThirdParty/FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
2686:ThirdParty/FreeRTOS/tasks.c **** 
2687:ThirdParty/FreeRTOS/tasks.c ****                 /* A task being unblocked cannot cause an immediate context
2688:ThirdParty/FreeRTOS/tasks.c ****                  * switch if preemption is turned off. */
2689:ThirdParty/FreeRTOS/tasks.c ****                 #if ( configUSE_PREEMPTION == 1 )
2690:ThirdParty/FreeRTOS/tasks.c ****                 {
2691:ThirdParty/FreeRTOS/tasks.c ****                     /* Preemption is on, but a context switch should only be
2692:ThirdParty/FreeRTOS/tasks.c ****                      * performed if the unblocked task has a priority that is
2693:ThirdParty/FreeRTOS/tasks.c ****                      * higher than the currently executing task. */
2694:ThirdParty/FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2695:ThirdParty/FreeRTOS/tasks.c ****                     {
2696:ThirdParty/FreeRTOS/tasks.c ****                         /* Pend the yield to be performed when the scheduler
2697:ThirdParty/FreeRTOS/tasks.c ****                          * is unsuspended. */
2698:ThirdParty/FreeRTOS/tasks.c ****                         xYieldPending = pdTRUE;
2699:ThirdParty/FreeRTOS/tasks.c ****                     }
2700:ThirdParty/FreeRTOS/tasks.c ****                     else
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 117


2701:ThirdParty/FreeRTOS/tasks.c ****                     {
2702:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2703:ThirdParty/FreeRTOS/tasks.c ****                     }
2704:ThirdParty/FreeRTOS/tasks.c ****                 }
2705:ThirdParty/FreeRTOS/tasks.c ****                 #endif /* configUSE_PREEMPTION */
2706:ThirdParty/FreeRTOS/tasks.c ****             }
2707:ThirdParty/FreeRTOS/tasks.c ****             else
2708:ThirdParty/FreeRTOS/tasks.c ****             {
2709:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdFAIL;
2710:ThirdParty/FreeRTOS/tasks.c ****             }
2711:ThirdParty/FreeRTOS/tasks.c ****         }
2712:ThirdParty/FreeRTOS/tasks.c ****         ( void ) xTaskResumeAll();
2713:ThirdParty/FreeRTOS/tasks.c **** 
2714:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
2715:ThirdParty/FreeRTOS/tasks.c ****     }
2716:ThirdParty/FreeRTOS/tasks.c **** 
2717:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2718:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2719:ThirdParty/FreeRTOS/tasks.c **** 
2720:ThirdParty/FreeRTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
2721:ThirdParty/FreeRTOS/tasks.c **** {
 3700              		.loc 1 2721 1
 3701              		.cfi_startproc
 3702              		@ args = 0, pretend = 0, frame = 40
 3703              		@ frame_needed = 1, uses_anonymous_args = 0
 3704 0000 80B5     		push	{r7, lr}
 3705              	.LCFI121:
 3706              		.cfi_def_cfa_offset 8
 3707              		.cfi_offset 7, -8
 3708              		.cfi_offset 14, -4
 3709 0002 8AB0     		sub	sp, sp, #40
 3710              	.LCFI122:
 3711              		.cfi_def_cfa_offset 48
 3712 0004 00AF     		add	r7, sp, #0
 3713              	.LCFI123:
 3714              		.cfi_def_cfa_register 7
2722:ThirdParty/FreeRTOS/tasks.c ****     TCB_t * pxTCB;
2723:ThirdParty/FreeRTOS/tasks.c ****     TickType_t xItemValue;
2724:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
 3715              		.loc 1 2724 16
 3716 0006 0023     		movs	r3, #0
 3717 0008 7B62     		str	r3, [r7, #36]
2725:ThirdParty/FreeRTOS/tasks.c **** 
2726:ThirdParty/FreeRTOS/tasks.c ****     /* Called by the portable layer each time a tick interrupt occurs.
2727:ThirdParty/FreeRTOS/tasks.c ****      * Increments the tick then checks to see if the new tick value will cause any
2728:ThirdParty/FreeRTOS/tasks.c ****      * tasks to be unblocked. */
2729:ThirdParty/FreeRTOS/tasks.c ****     traceTASK_INCREMENT_TICK( xTickCount );
2730:ThirdParty/FreeRTOS/tasks.c **** 
2731:ThirdParty/FreeRTOS/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3718              		.loc 1 2731 30
 3719 000a 6E4B     		ldr	r3, .L227
 3720 000c 1B68     		ldr	r3, [r3]
 3721              		.loc 1 2731 7
 3722 000e 002B     		cmp	r3, #0
 3723 0010 40F0CD80 		bne	.L214
 3724              	.LBB213:
2732:ThirdParty/FreeRTOS/tasks.c ****     {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 118


2733:ThirdParty/FreeRTOS/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this
2734:ThirdParty/FreeRTOS/tasks.c ****          * block. */
2735:ThirdParty/FreeRTOS/tasks.c ****         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3725              		.loc 1 2735 55
 3726 0014 6C4B     		ldr	r3, .L227+4
 3727 0016 1B68     		ldr	r3, [r3]
 3728              		.loc 1 2735 26
 3729 0018 0133     		adds	r3, r3, #1
 3730 001a 3B62     		str	r3, [r7, #32]
2736:ThirdParty/FreeRTOS/tasks.c **** 
2737:ThirdParty/FreeRTOS/tasks.c ****         /* Increment the RTOS tick, switching the delayed and overflowed
2738:ThirdParty/FreeRTOS/tasks.c ****          * delayed lists if it wraps to 0. */
2739:ThirdParty/FreeRTOS/tasks.c ****         xTickCount = xConstTickCount;
 3731              		.loc 1 2739 20
 3732 001c 6A4A     		ldr	r2, .L227+4
 3733 001e 3B6A     		ldr	r3, [r7, #32]
 3734 0020 1360     		str	r3, [r2]
2740:ThirdParty/FreeRTOS/tasks.c **** 
2741:ThirdParty/FreeRTOS/tasks.c ****         if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to fa
 3735              		.loc 1 2741 11
 3736 0022 3B6A     		ldr	r3, [r7, #32]
 3737 0024 002B     		cmp	r3, #0
 3738 0026 20D1     		bne	.L215
 3739              	.LBB214:
2742:ThirdParty/FreeRTOS/tasks.c ****         {
2743:ThirdParty/FreeRTOS/tasks.c ****             taskSWITCH_DELAYED_LISTS();
 3740              		.loc 1 2743 13
 3741 0028 684B     		ldr	r3, .L227+8
 3742 002a 1B68     		ldr	r3, [r3]
 3743 002c 1B68     		ldr	r3, [r3]
 3744 002e 002B     		cmp	r3, #0
 3745 0030 0AD0     		beq	.L216
 3746              	.LBB215:
 3747              	.LBB216:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3748              		.loc 2 198 9
 3749              		.syntax unified
 3750              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3751 0032 4FF05003 			mov r3, #80												
 3752 0036 83F31188 		msr basepri, r3											
 3753 003a BFF36F8F 		isb														
 3754 003e BFF34F8F 		dsb														
 3755              	
 3756              	@ 0 "" 2
 3757              		.thumb
 3758              		.syntax unified
 3759 0042 7B60     		str	r3, [r7, #4]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3760              		.loc 2 206 5
 3761 0044 00BF     		nop
 3762              	.L217:
 3763              	.LBE216:
 3764              	.LBE215:
 3765              		.loc 1 2743 13 discriminator 1
 3766 0046 FEE7     		b	.L217
 3767              	.L216:
 3768              		.loc 1 2743 13 is_stmt 0 discriminator 2
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 119


 3769 0048 604B     		ldr	r3, .L227+8
 3770 004a 1B68     		ldr	r3, [r3]
 3771 004c FB61     		str	r3, [r7, #28]
 3772 004e 604B     		ldr	r3, .L227+12
 3773 0050 1B68     		ldr	r3, [r3]
 3774 0052 5E4A     		ldr	r2, .L227+8
 3775 0054 1360     		str	r3, [r2]
 3776 0056 5E4A     		ldr	r2, .L227+12
 3777 0058 FB69     		ldr	r3, [r7, #28]
 3778 005a 1360     		str	r3, [r2]
 3779 005c 5D4B     		ldr	r3, .L227+16
 3780 005e 1B68     		ldr	r3, [r3]
 3781 0060 0133     		adds	r3, r3, #1
 3782 0062 5C4A     		ldr	r2, .L227+16
 3783 0064 1360     		str	r3, [r2]
 3784 0066 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3785              	.L215:
 3786              	.LBE214:
2744:ThirdParty/FreeRTOS/tasks.c ****         }
2745:ThirdParty/FreeRTOS/tasks.c ****         else
2746:ThirdParty/FreeRTOS/tasks.c ****         {
2747:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2748:ThirdParty/FreeRTOS/tasks.c ****         }
2749:ThirdParty/FreeRTOS/tasks.c **** 
2750:ThirdParty/FreeRTOS/tasks.c ****         /* See if this tick has made a timeout expire.  Tasks are stored in
2751:ThirdParty/FreeRTOS/tasks.c ****          * the  queue in the order of their wake time - meaning once one task
2752:ThirdParty/FreeRTOS/tasks.c ****          * has been found whose block time has not expired there is no need to
2753:ThirdParty/FreeRTOS/tasks.c ****          * look any further down the list. */
2754:ThirdParty/FreeRTOS/tasks.c ****         if( xConstTickCount >= xNextTaskUnblockTime )
 3787              		.loc 1 2754 29 is_stmt 1
 3788 006a 5B4B     		ldr	r3, .L227+20
 3789 006c 1B68     		ldr	r3, [r3]
 3790              		.loc 1 2754 11
 3791 006e 3A6A     		ldr	r2, [r7, #32]
 3792 0070 9A42     		cmp	r2, r3
 3793 0072 C0F0A180 		bcc	.L225
 3794              	.L224:
2755:ThirdParty/FreeRTOS/tasks.c ****         {
2756:ThirdParty/FreeRTOS/tasks.c ****             for( ; ; )
2757:ThirdParty/FreeRTOS/tasks.c ****             {
2758:ThirdParty/FreeRTOS/tasks.c ****                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3795              		.loc 1 2758 21
 3796 0076 554B     		ldr	r3, .L227+8
 3797 0078 1B68     		ldr	r3, [r3]
 3798 007a 1B68     		ldr	r3, [r3]
 3799              		.loc 1 2758 19
 3800 007c 002B     		cmp	r3, #0
 3801 007e 04D1     		bne	.L219
2759:ThirdParty/FreeRTOS/tasks.c ****                 {
2760:ThirdParty/FreeRTOS/tasks.c ****                     /* The delayed list is empty.  Set xNextTaskUnblockTime
2761:ThirdParty/FreeRTOS/tasks.c ****                      * to the maximum possible value so it is extremely
2762:ThirdParty/FreeRTOS/tasks.c ****                      * unlikely that the
2763:ThirdParty/FreeRTOS/tasks.c ****                      * if( xTickCount >= xNextTaskUnblockTime ) test will pass
2764:ThirdParty/FreeRTOS/tasks.c ****                      * next time through. */
2765:ThirdParty/FreeRTOS/tasks.c ****                     xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts
 3802              		.loc 1 2765 42
 3803 0080 554B     		ldr	r3, .L227+20
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 120


 3804 0082 4FF0FF32 		mov	r2, #-1
 3805 0086 1A60     		str	r2, [r3]
2766:ThirdParty/FreeRTOS/tasks.c ****                     break;
 3806              		.loc 1 2766 21
 3807 0088 96E0     		b	.L225
 3808              	.L219:
2767:ThirdParty/FreeRTOS/tasks.c ****                 }
2768:ThirdParty/FreeRTOS/tasks.c ****                 else
2769:ThirdParty/FreeRTOS/tasks.c ****                 {
2770:ThirdParty/FreeRTOS/tasks.c ****                     /* The delayed list is not empty, get the value of the
2771:ThirdParty/FreeRTOS/tasks.c ****                      * item at the head of the delayed list.  This is the time
2772:ThirdParty/FreeRTOS/tasks.c ****                      * at which the task at the head of the delayed list must
2773:ThirdParty/FreeRTOS/tasks.c ****                      * be removed from the Blocked state. */
2774:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * 
 3809              		.loc 1 2774 29
 3810 008a 504B     		ldr	r3, .L227+8
 3811 008c 1B68     		ldr	r3, [r3]
 3812 008e DB68     		ldr	r3, [r3, #12]
 3813              		.loc 1 2774 27
 3814 0090 DB68     		ldr	r3, [r3, #12]
 3815 0092 BB61     		str	r3, [r7, #24]
2775:ThirdParty/FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3816              		.loc 1 2775 32
 3817 0094 BB69     		ldr	r3, [r7, #24]
 3818 0096 5B68     		ldr	r3, [r3, #4]
 3819 0098 7B61     		str	r3, [r7, #20]
2776:ThirdParty/FreeRTOS/tasks.c **** 
2777:ThirdParty/FreeRTOS/tasks.c ****                     if( xConstTickCount < xItemValue )
 3820              		.loc 1 2777 23
 3821 009a 3A6A     		ldr	r2, [r7, #32]
 3822 009c 7B69     		ldr	r3, [r7, #20]
 3823 009e 9A42     		cmp	r2, r3
 3824 00a0 03D2     		bcs	.L220
2778:ThirdParty/FreeRTOS/tasks.c ****                     {
2779:ThirdParty/FreeRTOS/tasks.c ****                         /* It is not time to unblock this item yet, but the
2780:ThirdParty/FreeRTOS/tasks.c ****                          * item value is the time at which the task at the head
2781:ThirdParty/FreeRTOS/tasks.c ****                          * of the blocked list must be removed from the Blocked
2782:ThirdParty/FreeRTOS/tasks.c ****                          * state -  so record the item value in
2783:ThirdParty/FreeRTOS/tasks.c ****                          * xNextTaskUnblockTime. */
2784:ThirdParty/FreeRTOS/tasks.c ****                         xNextTaskUnblockTime = xItemValue;
 3825              		.loc 1 2784 46
 3826 00a2 4D4A     		ldr	r2, .L227+20
 3827 00a4 7B69     		ldr	r3, [r7, #20]
 3828 00a6 1360     		str	r3, [r2]
2785:ThirdParty/FreeRTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 3829              		.loc 1 2785 25
 3830 00a8 86E0     		b	.L225
 3831              	.L220:
 3832              	.LBB217:
2786:ThirdParty/FreeRTOS/tasks.c ****                     }
2787:ThirdParty/FreeRTOS/tasks.c ****                     else
2788:ThirdParty/FreeRTOS/tasks.c ****                     {
2789:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2790:ThirdParty/FreeRTOS/tasks.c ****                     }
2791:ThirdParty/FreeRTOS/tasks.c **** 
2792:ThirdParty/FreeRTOS/tasks.c ****                     /* It is time to remove the item from the Blocked state. */
2793:ThirdParty/FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 121


 3833              		.loc 1 2793 21
 3834 00aa BB69     		ldr	r3, [r7, #24]
 3835 00ac 5B69     		ldr	r3, [r3, #20]
 3836 00ae 3B61     		str	r3, [r7, #16]
 3837 00b0 BB69     		ldr	r3, [r7, #24]
 3838 00b2 9B68     		ldr	r3, [r3, #8]
 3839 00b4 BA69     		ldr	r2, [r7, #24]
 3840 00b6 D268     		ldr	r2, [r2, #12]
 3841 00b8 9A60     		str	r2, [r3, #8]
 3842 00ba BB69     		ldr	r3, [r7, #24]
 3843 00bc DB68     		ldr	r3, [r3, #12]
 3844 00be BA69     		ldr	r2, [r7, #24]
 3845 00c0 9268     		ldr	r2, [r2, #8]
 3846 00c2 5A60     		str	r2, [r3, #4]
 3847 00c4 3B69     		ldr	r3, [r7, #16]
 3848 00c6 5A68     		ldr	r2, [r3, #4]
 3849 00c8 BB69     		ldr	r3, [r7, #24]
 3850 00ca 0433     		adds	r3, r3, #4
 3851 00cc 9A42     		cmp	r2, r3
 3852 00ce 03D1     		bne	.L221
 3853              		.loc 1 2793 21 is_stmt 0 discriminator 1
 3854 00d0 BB69     		ldr	r3, [r7, #24]
 3855 00d2 DA68     		ldr	r2, [r3, #12]
 3856 00d4 3B69     		ldr	r3, [r7, #16]
 3857 00d6 5A60     		str	r2, [r3, #4]
 3858              	.L221:
 3859              		.loc 1 2793 21 discriminator 3
 3860 00d8 BB69     		ldr	r3, [r7, #24]
 3861 00da 0022     		movs	r2, #0
 3862 00dc 5A61     		str	r2, [r3, #20]
 3863 00de 3B69     		ldr	r3, [r7, #16]
 3864 00e0 1B68     		ldr	r3, [r3]
 3865 00e2 5A1E     		subs	r2, r3, #1
 3866 00e4 3B69     		ldr	r3, [r7, #16]
 3867 00e6 1A60     		str	r2, [r3]
 3868              	.LBE217:
2794:ThirdParty/FreeRTOS/tasks.c **** 
2795:ThirdParty/FreeRTOS/tasks.c ****                     /* Is the task waiting on an event also?  If so remove
2796:ThirdParty/FreeRTOS/tasks.c ****                      * it from the event list. */
2797:ThirdParty/FreeRTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3869              		.loc 1 2797 25 is_stmt 1 discriminator 3
 3870 00e8 BB69     		ldr	r3, [r7, #24]
 3871 00ea 9B6A     		ldr	r3, [r3, #40]
 3872              		.loc 1 2797 23 discriminator 3
 3873 00ec 002B     		cmp	r3, #0
 3874 00ee 1ED0     		beq	.L222
 3875              	.LBB218:
2798:ThirdParty/FreeRTOS/tasks.c ****                     {
2799:ThirdParty/FreeRTOS/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 3876              		.loc 1 2799 25
 3877 00f0 BB69     		ldr	r3, [r7, #24]
 3878 00f2 9B6A     		ldr	r3, [r3, #40]
 3879 00f4 FB60     		str	r3, [r7, #12]
 3880 00f6 BB69     		ldr	r3, [r7, #24]
 3881 00f8 DB69     		ldr	r3, [r3, #28]
 3882 00fa BA69     		ldr	r2, [r7, #24]
 3883 00fc 126A     		ldr	r2, [r2, #32]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 122


 3884 00fe 9A60     		str	r2, [r3, #8]
 3885 0100 BB69     		ldr	r3, [r7, #24]
 3886 0102 1B6A     		ldr	r3, [r3, #32]
 3887 0104 BA69     		ldr	r2, [r7, #24]
 3888 0106 D269     		ldr	r2, [r2, #28]
 3889 0108 5A60     		str	r2, [r3, #4]
 3890 010a FB68     		ldr	r3, [r7, #12]
 3891 010c 5A68     		ldr	r2, [r3, #4]
 3892 010e BB69     		ldr	r3, [r7, #24]
 3893 0110 1833     		adds	r3, r3, #24
 3894 0112 9A42     		cmp	r2, r3
 3895 0114 03D1     		bne	.L223
 3896              		.loc 1 2799 25 is_stmt 0 discriminator 1
 3897 0116 BB69     		ldr	r3, [r7, #24]
 3898 0118 1A6A     		ldr	r2, [r3, #32]
 3899 011a FB68     		ldr	r3, [r7, #12]
 3900 011c 5A60     		str	r2, [r3, #4]
 3901              	.L223:
 3902              		.loc 1 2799 25 discriminator 3
 3903 011e BB69     		ldr	r3, [r7, #24]
 3904 0120 0022     		movs	r2, #0
 3905 0122 9A62     		str	r2, [r3, #40]
 3906 0124 FB68     		ldr	r3, [r7, #12]
 3907 0126 1B68     		ldr	r3, [r3]
 3908 0128 5A1E     		subs	r2, r3, #1
 3909 012a FB68     		ldr	r3, [r7, #12]
 3910 012c 1A60     		str	r2, [r3]
 3911              	.L222:
 3912              	.LBE218:
2800:ThirdParty/FreeRTOS/tasks.c ****                     }
2801:ThirdParty/FreeRTOS/tasks.c ****                     else
2802:ThirdParty/FreeRTOS/tasks.c ****                     {
2803:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2804:ThirdParty/FreeRTOS/tasks.c ****                     }
2805:ThirdParty/FreeRTOS/tasks.c **** 
2806:ThirdParty/FreeRTOS/tasks.c ****                     /* Place the unblocked task into the appropriate ready
2807:ThirdParty/FreeRTOS/tasks.c ****                      * list. */
2808:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3913              		.loc 1 2808 21 is_stmt 1
 3914 012e BB69     		ldr	r3, [r7, #24]
 3915 0130 DB6A     		ldr	r3, [r3, #44]
 3916 0132 0122     		movs	r2, #1
 3917 0134 9A40     		lsls	r2, r2, r3
 3918 0136 294B     		ldr	r3, .L227+24
 3919 0138 1B68     		ldr	r3, [r3]
 3920 013a 1343     		orrs	r3, r3, r2
 3921 013c 274A     		ldr	r2, .L227+24
 3922 013e 1360     		str	r3, [r2]
 3923              	.LBB219:
 3924 0140 BB69     		ldr	r3, [r7, #24]
 3925 0142 DA6A     		ldr	r2, [r3, #44]
 3926 0144 2649     		ldr	r1, .L227+28
 3927 0146 1346     		mov	r3, r2
 3928 0148 9B00     		lsls	r3, r3, #2
 3929 014a 1344     		add	r3, r3, r2
 3930 014c 9B00     		lsls	r3, r3, #2
 3931 014e 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 123


 3932 0150 0433     		adds	r3, r3, #4
 3933 0152 1B68     		ldr	r3, [r3]
 3934 0154 BB60     		str	r3, [r7, #8]
 3935 0156 BB69     		ldr	r3, [r7, #24]
 3936 0158 BA68     		ldr	r2, [r7, #8]
 3937 015a 9A60     		str	r2, [r3, #8]
 3938 015c BB68     		ldr	r3, [r7, #8]
 3939 015e 9A68     		ldr	r2, [r3, #8]
 3940 0160 BB69     		ldr	r3, [r7, #24]
 3941 0162 DA60     		str	r2, [r3, #12]
 3942 0164 BB68     		ldr	r3, [r7, #8]
 3943 0166 9B68     		ldr	r3, [r3, #8]
 3944 0168 BA69     		ldr	r2, [r7, #24]
 3945 016a 0432     		adds	r2, r2, #4
 3946 016c 5A60     		str	r2, [r3, #4]
 3947 016e BB69     		ldr	r3, [r7, #24]
 3948 0170 1A1D     		adds	r2, r3, #4
 3949 0172 BB68     		ldr	r3, [r7, #8]
 3950 0174 9A60     		str	r2, [r3, #8]
 3951 0176 BB69     		ldr	r3, [r7, #24]
 3952 0178 DA6A     		ldr	r2, [r3, #44]
 3953 017a 1346     		mov	r3, r2
 3954 017c 9B00     		lsls	r3, r3, #2
 3955 017e 1344     		add	r3, r3, r2
 3956 0180 9B00     		lsls	r3, r3, #2
 3957 0182 174A     		ldr	r2, .L227+28
 3958 0184 1A44     		add	r2, r2, r3
 3959 0186 BB69     		ldr	r3, [r7, #24]
 3960 0188 5A61     		str	r2, [r3, #20]
 3961 018a BB69     		ldr	r3, [r7, #24]
 3962 018c DA6A     		ldr	r2, [r3, #44]
 3963 018e 1449     		ldr	r1, .L227+28
 3964 0190 1346     		mov	r3, r2
 3965 0192 9B00     		lsls	r3, r3, #2
 3966 0194 1344     		add	r3, r3, r2
 3967 0196 9B00     		lsls	r3, r3, #2
 3968 0198 0B44     		add	r3, r3, r1
 3969 019a 1B68     		ldr	r3, [r3]
 3970 019c 591C     		adds	r1, r3, #1
 3971 019e 1048     		ldr	r0, .L227+28
 3972 01a0 1346     		mov	r3, r2
 3973 01a2 9B00     		lsls	r3, r3, #2
 3974 01a4 1344     		add	r3, r3, r2
 3975 01a6 9B00     		lsls	r3, r3, #2
 3976 01a8 0344     		add	r3, r3, r0
 3977 01aa 1960     		str	r1, [r3]
 3978              	.LBE219:
2758:ThirdParty/FreeRTOS/tasks.c ****                 {
 3979              		.loc 1 2758 19
 3980 01ac 63E7     		b	.L224
 3981              	.L214:
 3982              	.LBE213:
2809:ThirdParty/FreeRTOS/tasks.c **** 
2810:ThirdParty/FreeRTOS/tasks.c ****                     /* A task being unblocked cannot cause an immediate
2811:ThirdParty/FreeRTOS/tasks.c ****                      * context switch if preemption is turned off. */
2812:ThirdParty/FreeRTOS/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
2813:ThirdParty/FreeRTOS/tasks.c ****                     {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 124


2814:ThirdParty/FreeRTOS/tasks.c ****                         /* Preemption is on, but a context switch should
2815:ThirdParty/FreeRTOS/tasks.c ****                          * only be performed if the unblocked task's
2816:ThirdParty/FreeRTOS/tasks.c ****                          * priority is higher than the currently executing
2817:ThirdParty/FreeRTOS/tasks.c ****                          * task.
2818:ThirdParty/FreeRTOS/tasks.c ****                          * The case of equal priority tasks sharing
2819:ThirdParty/FreeRTOS/tasks.c ****                          * processing time (which happens when both
2820:ThirdParty/FreeRTOS/tasks.c ****                          * preemption and time slicing are on) is
2821:ThirdParty/FreeRTOS/tasks.c ****                          * handled below.*/
2822:ThirdParty/FreeRTOS/tasks.c ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2823:ThirdParty/FreeRTOS/tasks.c ****                         {
2824:ThirdParty/FreeRTOS/tasks.c ****                             xSwitchRequired = pdTRUE;
2825:ThirdParty/FreeRTOS/tasks.c ****                         }
2826:ThirdParty/FreeRTOS/tasks.c ****                         else
2827:ThirdParty/FreeRTOS/tasks.c ****                         {
2828:ThirdParty/FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
2829:ThirdParty/FreeRTOS/tasks.c ****                         }
2830:ThirdParty/FreeRTOS/tasks.c ****                     }
2831:ThirdParty/FreeRTOS/tasks.c ****                     #endif /* configUSE_PREEMPTION */
2832:ThirdParty/FreeRTOS/tasks.c ****                 }
2833:ThirdParty/FreeRTOS/tasks.c ****             }
2834:ThirdParty/FreeRTOS/tasks.c ****         }
2835:ThirdParty/FreeRTOS/tasks.c **** 
2836:ThirdParty/FreeRTOS/tasks.c ****         /* Tasks of equal priority to the currently running task will share
2837:ThirdParty/FreeRTOS/tasks.c ****          * processing time (time slice) if preemption is on, and the application
2838:ThirdParty/FreeRTOS/tasks.c ****          * writer has not explicitly turned time slicing off. */
2839:ThirdParty/FreeRTOS/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2840:ThirdParty/FreeRTOS/tasks.c ****         {
2841:ThirdParty/FreeRTOS/tasks.c ****             if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( U
2842:ThirdParty/FreeRTOS/tasks.c ****             {
2843:ThirdParty/FreeRTOS/tasks.c ****                 xSwitchRequired = pdTRUE;
2844:ThirdParty/FreeRTOS/tasks.c ****             }
2845:ThirdParty/FreeRTOS/tasks.c ****             else
2846:ThirdParty/FreeRTOS/tasks.c ****             {
2847:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2848:ThirdParty/FreeRTOS/tasks.c ****             }
2849:ThirdParty/FreeRTOS/tasks.c ****         }
2850:ThirdParty/FreeRTOS/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2851:ThirdParty/FreeRTOS/tasks.c **** 
2852:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2853:ThirdParty/FreeRTOS/tasks.c ****         {
2854:ThirdParty/FreeRTOS/tasks.c ****             /* Guard against the tick hook being called when the pended tick
2855:ThirdParty/FreeRTOS/tasks.c ****              * count is being unwound (when the scheduler is being unlocked). */
2856:ThirdParty/FreeRTOS/tasks.c ****             if( xPendedTicks == ( TickType_t ) 0 )
2857:ThirdParty/FreeRTOS/tasks.c ****             {
2858:ThirdParty/FreeRTOS/tasks.c ****                 vApplicationTickHook();
2859:ThirdParty/FreeRTOS/tasks.c ****             }
2860:ThirdParty/FreeRTOS/tasks.c ****             else
2861:ThirdParty/FreeRTOS/tasks.c ****             {
2862:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2863:ThirdParty/FreeRTOS/tasks.c ****             }
2864:ThirdParty/FreeRTOS/tasks.c ****         }
2865:ThirdParty/FreeRTOS/tasks.c ****         #endif /* configUSE_TICK_HOOK */
2866:ThirdParty/FreeRTOS/tasks.c **** 
2867:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
2868:ThirdParty/FreeRTOS/tasks.c ****         {
2869:ThirdParty/FreeRTOS/tasks.c ****             if( xYieldPending != pdFALSE )
2870:ThirdParty/FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 125


2871:ThirdParty/FreeRTOS/tasks.c ****                 xSwitchRequired = pdTRUE;
2872:ThirdParty/FreeRTOS/tasks.c ****             }
2873:ThirdParty/FreeRTOS/tasks.c ****             else
2874:ThirdParty/FreeRTOS/tasks.c ****             {
2875:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2876:ThirdParty/FreeRTOS/tasks.c ****             }
2877:ThirdParty/FreeRTOS/tasks.c ****         }
2878:ThirdParty/FreeRTOS/tasks.c ****         #endif /* configUSE_PREEMPTION */
2879:ThirdParty/FreeRTOS/tasks.c ****     }
2880:ThirdParty/FreeRTOS/tasks.c ****     else
2881:ThirdParty/FreeRTOS/tasks.c ****     {
2882:ThirdParty/FreeRTOS/tasks.c ****         ++xPendedTicks;
 3983              		.loc 1 2882 9
 3984 01ae 0D4B     		ldr	r3, .L227+32
 3985 01b0 1B68     		ldr	r3, [r3]
 3986 01b2 0133     		adds	r3, r3, #1
 3987 01b4 0B4A     		ldr	r2, .L227+32
 3988 01b6 1360     		str	r3, [r2]
 3989              	.L225:
2883:ThirdParty/FreeRTOS/tasks.c **** 
2884:ThirdParty/FreeRTOS/tasks.c ****         /* The tick hook gets called at regular intervals, even if the
2885:ThirdParty/FreeRTOS/tasks.c ****          * scheduler is locked. */
2886:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2887:ThirdParty/FreeRTOS/tasks.c ****         {
2888:ThirdParty/FreeRTOS/tasks.c ****             vApplicationTickHook();
2889:ThirdParty/FreeRTOS/tasks.c ****         }
2890:ThirdParty/FreeRTOS/tasks.c ****         #endif
2891:ThirdParty/FreeRTOS/tasks.c ****     }
2892:ThirdParty/FreeRTOS/tasks.c **** 
2893:ThirdParty/FreeRTOS/tasks.c ****     return xSwitchRequired;
 3990              		.loc 1 2893 12
 3991 01b8 7B6A     		ldr	r3, [r7, #36]
2894:ThirdParty/FreeRTOS/tasks.c **** }
 3992              		.loc 1 2894 1
 3993 01ba 1846     		mov	r0, r3
 3994 01bc 2837     		adds	r7, r7, #40
 3995              	.LCFI124:
 3996              		.cfi_def_cfa_offset 8
 3997 01be BD46     		mov	sp, r7
 3998              	.LCFI125:
 3999              		.cfi_def_cfa_register 13
 4000              		@ sp needed
 4001 01c0 80BD     		pop	{r7, pc}
 4002              	.L228:
 4003 01c2 00BF     		.align	2
 4004              	.L227:
 4005 01c4 00000000 		.word	uxSchedulerSuspended
 4006 01c8 00000000 		.word	xTickCount
 4007 01cc 00000000 		.word	pxDelayedTaskList
 4008 01d0 00000000 		.word	pxOverflowDelayedTaskList
 4009 01d4 00000000 		.word	xNumOfOverflows
 4010 01d8 00000000 		.word	xNextTaskUnblockTime
 4011 01dc 00000000 		.word	uxTopReadyPriority
 4012 01e0 00000000 		.word	pxReadyTasksLists
 4013 01e4 00000000 		.word	xPendedTicks
 4014              		.cfi_endproc
 4015              	.LFE29:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 126


 4017              		.section	.text.vTaskSwitchContext,"ax",%progbits
 4018              		.align	1
 4019              		.global	vTaskSwitchContext
 4020              		.syntax unified
 4021              		.thumb
 4022              		.thumb_func
 4024              	vTaskSwitchContext:
 4025              	.LFB30:
2895:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2896:ThirdParty/FreeRTOS/tasks.c **** 
2897:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2898:ThirdParty/FreeRTOS/tasks.c **** 
2899:ThirdParty/FreeRTOS/tasks.c ****     void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
2900:ThirdParty/FreeRTOS/tasks.c ****                                      TaskHookFunction_t pxHookFunction )
2901:ThirdParty/FreeRTOS/tasks.c ****     {
2902:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * xTCB;
2903:ThirdParty/FreeRTOS/tasks.c **** 
2904:ThirdParty/FreeRTOS/tasks.c ****         /* If xTask is NULL then it is the task hook of the calling task that is
2905:ThirdParty/FreeRTOS/tasks.c ****          * getting set. */
2906:ThirdParty/FreeRTOS/tasks.c ****         if( xTask == NULL )
2907:ThirdParty/FreeRTOS/tasks.c ****         {
2908:ThirdParty/FreeRTOS/tasks.c ****             xTCB = ( TCB_t * ) pxCurrentTCB;
2909:ThirdParty/FreeRTOS/tasks.c ****         }
2910:ThirdParty/FreeRTOS/tasks.c ****         else
2911:ThirdParty/FreeRTOS/tasks.c ****         {
2912:ThirdParty/FreeRTOS/tasks.c ****             xTCB = xTask;
2913:ThirdParty/FreeRTOS/tasks.c ****         }
2914:ThirdParty/FreeRTOS/tasks.c **** 
2915:ThirdParty/FreeRTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2916:ThirdParty/FreeRTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2917:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
2918:ThirdParty/FreeRTOS/tasks.c ****         {
2919:ThirdParty/FreeRTOS/tasks.c ****             xTCB->pxTaskTag = pxHookFunction;
2920:ThirdParty/FreeRTOS/tasks.c ****         }
2921:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
2922:ThirdParty/FreeRTOS/tasks.c ****     }
2923:ThirdParty/FreeRTOS/tasks.c **** 
2924:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2925:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2926:ThirdParty/FreeRTOS/tasks.c **** 
2927:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2928:ThirdParty/FreeRTOS/tasks.c **** 
2929:ThirdParty/FreeRTOS/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2930:ThirdParty/FreeRTOS/tasks.c ****     {
2931:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
2932:ThirdParty/FreeRTOS/tasks.c ****         TaskHookFunction_t xReturn;
2933:ThirdParty/FreeRTOS/tasks.c **** 
2934:ThirdParty/FreeRTOS/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2935:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2936:ThirdParty/FreeRTOS/tasks.c **** 
2937:ThirdParty/FreeRTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2938:ThirdParty/FreeRTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2939:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
2940:ThirdParty/FreeRTOS/tasks.c ****         {
2941:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2942:ThirdParty/FreeRTOS/tasks.c ****         }
2943:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 127


2944:ThirdParty/FreeRTOS/tasks.c **** 
2945:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
2946:ThirdParty/FreeRTOS/tasks.c ****     }
2947:ThirdParty/FreeRTOS/tasks.c **** 
2948:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2949:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2950:ThirdParty/FreeRTOS/tasks.c **** 
2951:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2952:ThirdParty/FreeRTOS/tasks.c **** 
2953:ThirdParty/FreeRTOS/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2954:ThirdParty/FreeRTOS/tasks.c ****     {
2955:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
2956:ThirdParty/FreeRTOS/tasks.c ****         TaskHookFunction_t xReturn;
2957:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
2958:ThirdParty/FreeRTOS/tasks.c **** 
2959:ThirdParty/FreeRTOS/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2960:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2961:ThirdParty/FreeRTOS/tasks.c **** 
2962:ThirdParty/FreeRTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2963:ThirdParty/FreeRTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2964:ThirdParty/FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2965:ThirdParty/FreeRTOS/tasks.c ****         {
2966:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2967:ThirdParty/FreeRTOS/tasks.c ****         }
2968:ThirdParty/FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2969:ThirdParty/FreeRTOS/tasks.c **** 
2970:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
2971:ThirdParty/FreeRTOS/tasks.c ****     }
2972:ThirdParty/FreeRTOS/tasks.c **** 
2973:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2974:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2975:ThirdParty/FreeRTOS/tasks.c **** 
2976:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2977:ThirdParty/FreeRTOS/tasks.c **** 
2978:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
2979:ThirdParty/FreeRTOS/tasks.c ****                                              void * pvParameter )
2980:ThirdParty/FreeRTOS/tasks.c ****     {
2981:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * xTCB;
2982:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn;
2983:ThirdParty/FreeRTOS/tasks.c **** 
2984:ThirdParty/FreeRTOS/tasks.c ****         /* If xTask is NULL then we are calling our own task hook. */
2985:ThirdParty/FreeRTOS/tasks.c ****         if( xTask == NULL )
2986:ThirdParty/FreeRTOS/tasks.c ****         {
2987:ThirdParty/FreeRTOS/tasks.c ****             xTCB = pxCurrentTCB;
2988:ThirdParty/FreeRTOS/tasks.c ****         }
2989:ThirdParty/FreeRTOS/tasks.c ****         else
2990:ThirdParty/FreeRTOS/tasks.c ****         {
2991:ThirdParty/FreeRTOS/tasks.c ****             xTCB = xTask;
2992:ThirdParty/FreeRTOS/tasks.c ****         }
2993:ThirdParty/FreeRTOS/tasks.c **** 
2994:ThirdParty/FreeRTOS/tasks.c ****         if( xTCB->pxTaskTag != NULL )
2995:ThirdParty/FreeRTOS/tasks.c ****         {
2996:ThirdParty/FreeRTOS/tasks.c ****             xReturn = xTCB->pxTaskTag( pvParameter );
2997:ThirdParty/FreeRTOS/tasks.c ****         }
2998:ThirdParty/FreeRTOS/tasks.c ****         else
2999:ThirdParty/FreeRTOS/tasks.c ****         {
3000:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pdFAIL;
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 128


3001:ThirdParty/FreeRTOS/tasks.c ****         }
3002:ThirdParty/FreeRTOS/tasks.c **** 
3003:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
3004:ThirdParty/FreeRTOS/tasks.c ****     }
3005:ThirdParty/FreeRTOS/tasks.c **** 
3006:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
3007:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3008:ThirdParty/FreeRTOS/tasks.c **** 
3009:ThirdParty/FreeRTOS/tasks.c **** void vTaskSwitchContext( void )
3010:ThirdParty/FreeRTOS/tasks.c **** {
 4026              		.loc 1 3010 1
 4027              		.cfi_startproc
 4028              		@ args = 0, pretend = 0, frame = 24
 4029              		@ frame_needed = 1, uses_anonymous_args = 0
 4030              		@ link register save eliminated.
 4031 0000 80B4     		push	{r7}
 4032              	.LCFI126:
 4033              		.cfi_def_cfa_offset 4
 4034              		.cfi_offset 7, -4
 4035 0002 87B0     		sub	sp, sp, #28
 4036              	.LCFI127:
 4037              		.cfi_def_cfa_offset 32
 4038 0004 00AF     		add	r7, sp, #0
 4039              	.LCFI128:
 4040              		.cfi_def_cfa_register 7
3011:ThirdParty/FreeRTOS/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 4041              		.loc 1 3011 30
 4042 0006 274B     		ldr	r3, .L237
 4043 0008 1B68     		ldr	r3, [r3]
 4044              		.loc 1 3011 7
 4045 000a 002B     		cmp	r3, #0
 4046 000c 03D0     		beq	.L230
3012:ThirdParty/FreeRTOS/tasks.c ****     {
3013:ThirdParty/FreeRTOS/tasks.c ****         /* The scheduler is currently suspended - do not allow a context
3014:ThirdParty/FreeRTOS/tasks.c ****          * switch. */
3015:ThirdParty/FreeRTOS/tasks.c ****         xYieldPending = pdTRUE;
 4047              		.loc 1 3015 23
 4048 000e 264B     		ldr	r3, .L237+4
 4049 0010 0122     		movs	r2, #1
 4050 0012 1A60     		str	r2, [r3]
3016:ThirdParty/FreeRTOS/tasks.c ****     }
3017:ThirdParty/FreeRTOS/tasks.c ****     else
3018:ThirdParty/FreeRTOS/tasks.c ****     {
3019:ThirdParty/FreeRTOS/tasks.c ****         xYieldPending = pdFALSE;
3020:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
3021:ThirdParty/FreeRTOS/tasks.c **** 
3022:ThirdParty/FreeRTOS/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3023:ThirdParty/FreeRTOS/tasks.c ****         {
3024:ThirdParty/FreeRTOS/tasks.c ****             #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3025:ThirdParty/FreeRTOS/tasks.c ****                 portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3026:ThirdParty/FreeRTOS/tasks.c ****             #else
3027:ThirdParty/FreeRTOS/tasks.c ****                 ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3028:ThirdParty/FreeRTOS/tasks.c ****             #endif
3029:ThirdParty/FreeRTOS/tasks.c **** 
3030:ThirdParty/FreeRTOS/tasks.c ****             /* Add the amount of time the task has been running to the
3031:ThirdParty/FreeRTOS/tasks.c ****              * accumulated time so far.  The time the task started running was
3032:ThirdParty/FreeRTOS/tasks.c ****              * stored in ulTaskSwitchedInTime.  Note that there is no overflow
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 129


3033:ThirdParty/FreeRTOS/tasks.c ****              * protection here so count values are only valid until the timer
3034:ThirdParty/FreeRTOS/tasks.c ****              * overflows.  The guard against negative values is to protect
3035:ThirdParty/FreeRTOS/tasks.c ****              * against suspect run time stat counter implementations - which
3036:ThirdParty/FreeRTOS/tasks.c ****              * are provided by the application, not the kernel. */
3037:ThirdParty/FreeRTOS/tasks.c ****             if( ulTotalRunTime > ulTaskSwitchedInTime )
3038:ThirdParty/FreeRTOS/tasks.c ****             {
3039:ThirdParty/FreeRTOS/tasks.c ****                 pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3040:ThirdParty/FreeRTOS/tasks.c ****             }
3041:ThirdParty/FreeRTOS/tasks.c ****             else
3042:ThirdParty/FreeRTOS/tasks.c ****             {
3043:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3044:ThirdParty/FreeRTOS/tasks.c ****             }
3045:ThirdParty/FreeRTOS/tasks.c **** 
3046:ThirdParty/FreeRTOS/tasks.c ****             ulTaskSwitchedInTime = ulTotalRunTime;
3047:ThirdParty/FreeRTOS/tasks.c ****         }
3048:ThirdParty/FreeRTOS/tasks.c ****         #endif /* configGENERATE_RUN_TIME_STATS */
3049:ThirdParty/FreeRTOS/tasks.c **** 
3050:ThirdParty/FreeRTOS/tasks.c ****         /* Check for stack overflow, if configured. */
3051:ThirdParty/FreeRTOS/tasks.c ****         taskCHECK_FOR_STACK_OVERFLOW();
3052:ThirdParty/FreeRTOS/tasks.c **** 
3053:ThirdParty/FreeRTOS/tasks.c ****         /* Before the currently running task is switched out, save its errno. */
3054:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3055:ThirdParty/FreeRTOS/tasks.c ****         {
3056:ThirdParty/FreeRTOS/tasks.c ****             pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3057:ThirdParty/FreeRTOS/tasks.c ****         }
3058:ThirdParty/FreeRTOS/tasks.c ****         #endif
3059:ThirdParty/FreeRTOS/tasks.c **** 
3060:ThirdParty/FreeRTOS/tasks.c ****         /* Select a new task to run using either the generic C or port
3061:ThirdParty/FreeRTOS/tasks.c ****          * optimised asm code. */
3062:ThirdParty/FreeRTOS/tasks.c ****         taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with
3063:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
3064:ThirdParty/FreeRTOS/tasks.c **** 
3065:ThirdParty/FreeRTOS/tasks.c ****         /* After the new task is switched in, update the global errno. */
3066:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3067:ThirdParty/FreeRTOS/tasks.c ****         {
3068:ThirdParty/FreeRTOS/tasks.c ****             FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3069:ThirdParty/FreeRTOS/tasks.c ****         }
3070:ThirdParty/FreeRTOS/tasks.c ****         #endif
3071:ThirdParty/FreeRTOS/tasks.c **** 
3072:ThirdParty/FreeRTOS/tasks.c ****         #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
3073:ThirdParty/FreeRTOS/tasks.c ****         {
3074:ThirdParty/FreeRTOS/tasks.c ****             /* Switch C-Runtime's TLS Block to point to the TLS
3075:ThirdParty/FreeRTOS/tasks.c ****              * Block specific to this task. */
3076:ThirdParty/FreeRTOS/tasks.c ****             configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
3077:ThirdParty/FreeRTOS/tasks.c ****         }
3078:ThirdParty/FreeRTOS/tasks.c ****         #endif
3079:ThirdParty/FreeRTOS/tasks.c ****     }
3080:ThirdParty/FreeRTOS/tasks.c **** }
 4051              		.loc 1 3080 1
 4052 0014 3FE0     		b	.L236
 4053              	.L230:
3019:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
 4054              		.loc 1 3019 23
 4055 0016 244B     		ldr	r3, .L237+4
 4056 0018 0022     		movs	r2, #0
 4057 001a 1A60     		str	r2, [r3]
 4058              	.LBB220:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 130


3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 4059              		.loc 1 3062 9
 4060 001c 234B     		ldr	r3, .L237+8
 4061 001e 1B68     		ldr	r3, [r3]
 4062 0020 FB60     		str	r3, [r7, #12]
 4063              	.LBB221:
 4064              	.LBB222:
 136:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4065              		.loc 2 136 13
 4066 0022 FB68     		ldr	r3, [r7, #12]
 4067              		.syntax unified
 4068              	@ 136 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4069 0024 B3FA83F3 		clz r3, r3
 4070              	@ 0 "" 2
 4071              		.thumb
 4072              		.syntax unified
 4073 0028 FB72     		strb	r3, [r7, #11]
 138:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 4074              		.loc 2 138 20
 4075 002a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4076              	.LBE222:
 4077              	.LBE221:
3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 4078              		.loc 1 3062 9
 4079 002c C3F11F03 		rsb	r3, r3, #31
 4080 0030 7B61     		str	r3, [r7, #20]
 4081 0032 1F49     		ldr	r1, .L237+12
 4082 0034 7A69     		ldr	r2, [r7, #20]
 4083 0036 1346     		mov	r3, r2
 4084 0038 9B00     		lsls	r3, r3, #2
 4085 003a 1344     		add	r3, r3, r2
 4086 003c 9B00     		lsls	r3, r3, #2
 4087 003e 0B44     		add	r3, r3, r1
 4088 0040 1B68     		ldr	r3, [r3]
 4089 0042 002B     		cmp	r3, #0
 4090 0044 0AD1     		bne	.L233
 4091              	.LBB223:
 4092              	.LBB224:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4093              		.loc 2 198 9
 4094              		.syntax unified
 4095              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4096 0046 4FF05003 			mov r3, #80												
 4097 004a 83F31188 		msr basepri, r3											
 4098 004e BFF36F8F 		isb														
 4099 0052 BFF34F8F 		dsb														
 4100              	
 4101              	@ 0 "" 2
 4102              		.thumb
 4103              		.syntax unified
 4104 0056 7B60     		str	r3, [r7, #4]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4105              		.loc 2 206 5
 4106 0058 00BF     		nop
 4107              	.L234:
 4108              	.LBE224:
 4109              	.LBE223:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 131


3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 4110              		.loc 1 3062 9 discriminator 1
 4111 005a FEE7     		b	.L234
 4112              	.L233:
 4113              	.LBB225:
3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 4114              		.loc 1 3062 9 is_stmt 0 discriminator 2
 4115 005c 7A69     		ldr	r2, [r7, #20]
 4116 005e 1346     		mov	r3, r2
 4117 0060 9B00     		lsls	r3, r3, #2
 4118 0062 1344     		add	r3, r3, r2
 4119 0064 9B00     		lsls	r3, r3, #2
 4120 0066 124A     		ldr	r2, .L237+12
 4121 0068 1344     		add	r3, r3, r2
 4122 006a 3B61     		str	r3, [r7, #16]
 4123 006c 3B69     		ldr	r3, [r7, #16]
 4124 006e 5B68     		ldr	r3, [r3, #4]
 4125 0070 5A68     		ldr	r2, [r3, #4]
 4126 0072 3B69     		ldr	r3, [r7, #16]
 4127 0074 5A60     		str	r2, [r3, #4]
 4128 0076 3B69     		ldr	r3, [r7, #16]
 4129 0078 5A68     		ldr	r2, [r3, #4]
 4130 007a 3B69     		ldr	r3, [r7, #16]
 4131 007c 0833     		adds	r3, r3, #8
 4132 007e 9A42     		cmp	r2, r3
 4133 0080 04D1     		bne	.L235
3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 4134              		.loc 1 3062 9 discriminator 3
 4135 0082 3B69     		ldr	r3, [r7, #16]
 4136 0084 5B68     		ldr	r3, [r3, #4]
 4137 0086 5A68     		ldr	r2, [r3, #4]
 4138 0088 3B69     		ldr	r3, [r7, #16]
 4139 008a 5A60     		str	r2, [r3, #4]
 4140              	.L235:
3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 4141              		.loc 1 3062 9 discriminator 5
 4142 008c 3B69     		ldr	r3, [r7, #16]
 4143 008e 5B68     		ldr	r3, [r3, #4]
 4144 0090 DB68     		ldr	r3, [r3, #12]
 4145 0092 084A     		ldr	r2, .L237+16
 4146 0094 1360     		str	r3, [r2]
 4147              	.L236:
 4148              	.LBE225:
 4149              	.LBE220:
 4150              		.loc 1 3080 1 is_stmt 1
 4151 0096 00BF     		nop
 4152 0098 1C37     		adds	r7, r7, #28
 4153              	.LCFI129:
 4154              		.cfi_def_cfa_offset 4
 4155 009a BD46     		mov	sp, r7
 4156              	.LCFI130:
 4157              		.cfi_def_cfa_register 13
 4158              		@ sp needed
 4159 009c 5DF8047B 		ldr	r7, [sp], #4
 4160              	.LCFI131:
 4161              		.cfi_restore 7
 4162              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 132


 4163 00a0 7047     		bx	lr
 4164              	.L238:
 4165 00a2 00BF     		.align	2
 4166              	.L237:
 4167 00a4 00000000 		.word	uxSchedulerSuspended
 4168 00a8 00000000 		.word	xYieldPending
 4169 00ac 00000000 		.word	uxTopReadyPriority
 4170 00b0 00000000 		.word	pxReadyTasksLists
 4171 00b4 00000000 		.word	pxCurrentTCB
 4172              		.cfi_endproc
 4173              	.LFE30:
 4175              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 4176              		.align	1
 4177              		.global	vTaskPlaceOnEventList
 4178              		.syntax unified
 4179              		.thumb
 4180              		.thumb_func
 4182              	vTaskPlaceOnEventList:
 4183              	.LFB31:
3081:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3082:ThirdParty/FreeRTOS/tasks.c **** 
3083:ThirdParty/FreeRTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList,
3084:ThirdParty/FreeRTOS/tasks.c ****                             const TickType_t xTicksToWait )
3085:ThirdParty/FreeRTOS/tasks.c **** {
 4184              		.loc 1 3085 1
 4185              		.cfi_startproc
 4186              		@ args = 0, pretend = 0, frame = 16
 4187              		@ frame_needed = 1, uses_anonymous_args = 0
 4188 0000 80B5     		push	{r7, lr}
 4189              	.LCFI132:
 4190              		.cfi_def_cfa_offset 8
 4191              		.cfi_offset 7, -8
 4192              		.cfi_offset 14, -4
 4193 0002 84B0     		sub	sp, sp, #16
 4194              	.LCFI133:
 4195              		.cfi_def_cfa_offset 24
 4196 0004 00AF     		add	r7, sp, #0
 4197              	.LCFI134:
 4198              		.cfi_def_cfa_register 7
 4199 0006 7860     		str	r0, [r7, #4]
 4200 0008 3960     		str	r1, [r7]
3086:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 4201              		.loc 1 3086 5
 4202 000a 7B68     		ldr	r3, [r7, #4]
 4203 000c 002B     		cmp	r3, #0
 4204 000e 0AD1     		bne	.L240
 4205              	.LBB226:
 4206              	.LBB227:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4207              		.loc 2 198 9
 4208              		.syntax unified
 4209              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4210 0010 4FF05003 			mov r3, #80												
 4211 0014 83F31188 		msr basepri, r3											
 4212 0018 BFF36F8F 		isb														
 4213 001c BFF34F8F 		dsb														
 4214              	
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 133


 4215              	@ 0 "" 2
 4216              		.thumb
 4217              		.syntax unified
 4218 0020 FB60     		str	r3, [r7, #12]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4219              		.loc 2 206 5
 4220 0022 00BF     		nop
 4221              	.L241:
 4222              	.LBE227:
 4223              	.LBE226:
 4224              		.loc 1 3086 5 discriminator 1
 4225 0024 FEE7     		b	.L241
 4226              	.L240:
3087:ThirdParty/FreeRTOS/tasks.c **** 
3088:ThirdParty/FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3089:ThirdParty/FreeRTOS/tasks.c ****      * SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3090:ThirdParty/FreeRTOS/tasks.c **** 
3091:ThirdParty/FreeRTOS/tasks.c ****     /* Place the event list item of the TCB in the appropriate event list.
3092:ThirdParty/FreeRTOS/tasks.c ****      * This is placed in the list in priority order so the highest priority task
3093:ThirdParty/FreeRTOS/tasks.c ****      * is the first to be woken by the event.
3094:ThirdParty/FreeRTOS/tasks.c ****      *
3095:ThirdParty/FreeRTOS/tasks.c ****      * Note: Lists are sorted in ascending order by ListItem_t.xItemValue.
3096:ThirdParty/FreeRTOS/tasks.c ****      * Normally, the xItemValue of a TCB's ListItem_t members is:
3097:ThirdParty/FreeRTOS/tasks.c ****      *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
3098:ThirdParty/FreeRTOS/tasks.c ****      * Therefore, the event list is sorted in descending priority order.
3099:ThirdParty/FreeRTOS/tasks.c ****      *
3100:ThirdParty/FreeRTOS/tasks.c ****      * The queue that contains the event list is locked, preventing
3101:ThirdParty/FreeRTOS/tasks.c ****      * simultaneous access from interrupts. */
3102:ThirdParty/FreeRTOS/tasks.c ****     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4227              		.loc 1 3102 46
 4228 0026 074B     		ldr	r3, .L242
 4229 0028 1B68     		ldr	r3, [r3]
 4230              		.loc 1 3102 5
 4231 002a 1833     		adds	r3, r3, #24
 4232 002c 1946     		mov	r1, r3
 4233 002e 7868     		ldr	r0, [r7, #4]
 4234 0030 FFF7FEFF 		bl	vListInsert
3103:ThirdParty/FreeRTOS/tasks.c **** 
3104:ThirdParty/FreeRTOS/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4235              		.loc 1 3104 5
 4236 0034 0121     		movs	r1, #1
 4237 0036 3868     		ldr	r0, [r7]
 4238 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3105:ThirdParty/FreeRTOS/tasks.c **** }
 4239              		.loc 1 3105 1
 4240 003c 00BF     		nop
 4241 003e 1037     		adds	r7, r7, #16
 4242              	.LCFI135:
 4243              		.cfi_def_cfa_offset 8
 4244 0040 BD46     		mov	sp, r7
 4245              	.LCFI136:
 4246              		.cfi_def_cfa_register 13
 4247              		@ sp needed
 4248 0042 80BD     		pop	{r7, pc}
 4249              	.L243:
 4250              		.align	2
 4251              	.L242:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 134


 4252 0044 00000000 		.word	pxCurrentTCB
 4253              		.cfi_endproc
 4254              	.LFE31:
 4256              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4257              		.align	1
 4258              		.global	vTaskPlaceOnUnorderedEventList
 4259              		.syntax unified
 4260              		.thumb
 4261              		.thumb_func
 4263              	vTaskPlaceOnUnorderedEventList:
 4264              	.LFB32:
3106:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3107:ThirdParty/FreeRTOS/tasks.c **** 
3108:ThirdParty/FreeRTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
3109:ThirdParty/FreeRTOS/tasks.c ****                                      const TickType_t xItemValue,
3110:ThirdParty/FreeRTOS/tasks.c ****                                      const TickType_t xTicksToWait )
3111:ThirdParty/FreeRTOS/tasks.c **** {
 4265              		.loc 1 3111 1
 4266              		.cfi_startproc
 4267              		@ args = 0, pretend = 0, frame = 32
 4268              		@ frame_needed = 1, uses_anonymous_args = 0
 4269 0000 80B5     		push	{r7, lr}
 4270              	.LCFI137:
 4271              		.cfi_def_cfa_offset 8
 4272              		.cfi_offset 7, -8
 4273              		.cfi_offset 14, -4
 4274 0002 88B0     		sub	sp, sp, #32
 4275              	.LCFI138:
 4276              		.cfi_def_cfa_offset 40
 4277 0004 00AF     		add	r7, sp, #0
 4278              	.LCFI139:
 4279              		.cfi_def_cfa_register 7
 4280 0006 F860     		str	r0, [r7, #12]
 4281 0008 B960     		str	r1, [r7, #8]
 4282 000a 7A60     		str	r2, [r7, #4]
3112:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 4283              		.loc 1 3112 5
 4284 000c FB68     		ldr	r3, [r7, #12]
 4285 000e 002B     		cmp	r3, #0
 4286 0010 0AD1     		bne	.L245
 4287              	.LBB228:
 4288              	.LBB229:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4289              		.loc 2 198 9
 4290              		.syntax unified
 4291              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4292 0012 4FF05003 			mov r3, #80												
 4293 0016 83F31188 		msr basepri, r3											
 4294 001a BFF36F8F 		isb														
 4295 001e BFF34F8F 		dsb														
 4296              	
 4297              	@ 0 "" 2
 4298              		.thumb
 4299              		.syntax unified
 4300 0022 BB61     		str	r3, [r7, #24]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4301              		.loc 2 206 5
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 135


 4302 0024 00BF     		nop
 4303              	.L246:
 4304              	.LBE229:
 4305              	.LBE228:
 4306              		.loc 1 3112 5 discriminator 1
 4307 0026 FEE7     		b	.L246
 4308              	.L245:
3113:ThirdParty/FreeRTOS/tasks.c **** 
3114:ThirdParty/FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3115:ThirdParty/FreeRTOS/tasks.c ****      * the event groups implementation. */
3116:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended != 0 );
 4309              		.loc 1 3116 5
 4310 0028 1E4B     		ldr	r3, .L249
 4311 002a 1B68     		ldr	r3, [r3]
 4312 002c 002B     		cmp	r3, #0
 4313 002e 0AD1     		bne	.L247
 4314              	.LBB230:
 4315              	.LBB231:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4316              		.loc 2 198 9
 4317              		.syntax unified
 4318              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4319 0030 4FF05003 			mov r3, #80												
 4320 0034 83F31188 		msr basepri, r3											
 4321 0038 BFF36F8F 		isb														
 4322 003c BFF34F8F 		dsb														
 4323              	
 4324              	@ 0 "" 2
 4325              		.thumb
 4326              		.syntax unified
 4327 0040 7B61     		str	r3, [r7, #20]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4328              		.loc 2 206 5
 4329 0042 00BF     		nop
 4330              	.L248:
 4331              	.LBE231:
 4332              	.LBE230:
 4333              		.loc 1 3116 5 discriminator 2
 4334 0044 FEE7     		b	.L248
 4335              	.L247:
3117:ThirdParty/FreeRTOS/tasks.c **** 
3118:ThirdParty/FreeRTOS/tasks.c ****     /* Store the item value in the event list item.  It is safe to access the
3119:ThirdParty/FreeRTOS/tasks.c ****      * event list item here as interrupts won't access the event list item of a
3120:ThirdParty/FreeRTOS/tasks.c ****      * task that is not in the Blocked state. */
3121:ThirdParty/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VA
 4336              		.loc 1 3121 5
 4337 0046 184B     		ldr	r3, .L249+4
 4338 0048 1B68     		ldr	r3, [r3]
 4339 004a BA68     		ldr	r2, [r7, #8]
 4340 004c 42F00042 		orr	r2, r2, #-2147483648
 4341 0050 9A61     		str	r2, [r3, #24]
 4342              	.LBB232:
3122:ThirdParty/FreeRTOS/tasks.c **** 
3123:ThirdParty/FreeRTOS/tasks.c ****     /* Place the event list item of the TCB at the end of the appropriate event
3124:ThirdParty/FreeRTOS/tasks.c ****      * list.  It is safe to access the event list here because it is part of an
3125:ThirdParty/FreeRTOS/tasks.c ****      * event group implementation - and interrupts don't access event groups
3126:ThirdParty/FreeRTOS/tasks.c ****      * directly (instead they access them indirectly by pending function calls to
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 136


3127:ThirdParty/FreeRTOS/tasks.c ****      * the task level). */
3128:ThirdParty/FreeRTOS/tasks.c ****     listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4343              		.loc 1 3128 5
 4344 0052 FB68     		ldr	r3, [r7, #12]
 4345 0054 5B68     		ldr	r3, [r3, #4]
 4346 0056 FB61     		str	r3, [r7, #28]
 4347 0058 134B     		ldr	r3, .L249+4
 4348 005a 1B68     		ldr	r3, [r3]
 4349 005c FA69     		ldr	r2, [r7, #28]
 4350 005e DA61     		str	r2, [r3, #28]
 4351 0060 114B     		ldr	r3, .L249+4
 4352 0062 1B68     		ldr	r3, [r3]
 4353 0064 FA69     		ldr	r2, [r7, #28]
 4354 0066 9268     		ldr	r2, [r2, #8]
 4355 0068 1A62     		str	r2, [r3, #32]
 4356 006a 0F4B     		ldr	r3, .L249+4
 4357 006c 1A68     		ldr	r2, [r3]
 4358 006e FB69     		ldr	r3, [r7, #28]
 4359 0070 9B68     		ldr	r3, [r3, #8]
 4360 0072 1832     		adds	r2, r2, #24
 4361 0074 5A60     		str	r2, [r3, #4]
 4362 0076 0C4B     		ldr	r3, .L249+4
 4363 0078 1B68     		ldr	r3, [r3]
 4364 007a 03F11802 		add	r2, r3, #24
 4365 007e FB69     		ldr	r3, [r7, #28]
 4366 0080 9A60     		str	r2, [r3, #8]
 4367 0082 094B     		ldr	r3, .L249+4
 4368 0084 1B68     		ldr	r3, [r3]
 4369 0086 FA68     		ldr	r2, [r7, #12]
 4370 0088 9A62     		str	r2, [r3, #40]
 4371 008a FB68     		ldr	r3, [r7, #12]
 4372 008c 1B68     		ldr	r3, [r3]
 4373 008e 5A1C     		adds	r2, r3, #1
 4374 0090 FB68     		ldr	r3, [r7, #12]
 4375 0092 1A60     		str	r2, [r3]
 4376              	.LBE232:
3129:ThirdParty/FreeRTOS/tasks.c **** 
3130:ThirdParty/FreeRTOS/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4377              		.loc 1 3130 5
 4378 0094 0121     		movs	r1, #1
 4379 0096 7868     		ldr	r0, [r7, #4]
 4380 0098 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3131:ThirdParty/FreeRTOS/tasks.c **** }
 4381              		.loc 1 3131 1
 4382 009c 00BF     		nop
 4383 009e 2037     		adds	r7, r7, #32
 4384              	.LCFI140:
 4385              		.cfi_def_cfa_offset 8
 4386 00a0 BD46     		mov	sp, r7
 4387              	.LCFI141:
 4388              		.cfi_def_cfa_register 13
 4389              		@ sp needed
 4390 00a2 80BD     		pop	{r7, pc}
 4391              	.L250:
 4392              		.align	2
 4393              	.L249:
 4394 00a4 00000000 		.word	uxSchedulerSuspended
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 137


 4395 00a8 00000000 		.word	pxCurrentTCB
 4396              		.cfi_endproc
 4397              	.LFE32:
 4399              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4400              		.align	1
 4401              		.global	vTaskPlaceOnEventListRestricted
 4402              		.syntax unified
 4403              		.thumb
 4404              		.thumb_func
 4406              	vTaskPlaceOnEventListRestricted:
 4407              	.LFB33:
3132:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3133:ThirdParty/FreeRTOS/tasks.c **** 
3134:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TIMERS == 1 )
3135:ThirdParty/FreeRTOS/tasks.c **** 
3136:ThirdParty/FreeRTOS/tasks.c ****     void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
3137:ThirdParty/FreeRTOS/tasks.c ****                                           TickType_t xTicksToWait,
3138:ThirdParty/FreeRTOS/tasks.c ****                                           const BaseType_t xWaitIndefinitely )
3139:ThirdParty/FreeRTOS/tasks.c ****     {
 4408              		.loc 1 3139 5
 4409              		.cfi_startproc
 4410              		@ args = 0, pretend = 0, frame = 24
 4411              		@ frame_needed = 1, uses_anonymous_args = 0
 4412 0000 80B5     		push	{r7, lr}
 4413              	.LCFI142:
 4414              		.cfi_def_cfa_offset 8
 4415              		.cfi_offset 7, -8
 4416              		.cfi_offset 14, -4
 4417 0002 86B0     		sub	sp, sp, #24
 4418              	.LCFI143:
 4419              		.cfi_def_cfa_offset 32
 4420 0004 00AF     		add	r7, sp, #0
 4421              	.LCFI144:
 4422              		.cfi_def_cfa_register 7
 4423 0006 F860     		str	r0, [r7, #12]
 4424 0008 B960     		str	r1, [r7, #8]
 4425 000a 7A60     		str	r2, [r7, #4]
3140:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( pxEventList );
 4426              		.loc 1 3140 9
 4427 000c FB68     		ldr	r3, [r7, #12]
 4428 000e 002B     		cmp	r3, #0
 4429 0010 0AD1     		bne	.L252
 4430              	.LBB233:
 4431              	.LBB234:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4432              		.loc 2 198 9
 4433              		.syntax unified
 4434              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4435 0012 4FF05003 			mov r3, #80												
 4436 0016 83F31188 		msr basepri, r3											
 4437 001a BFF36F8F 		isb														
 4438 001e BFF34F8F 		dsb														
 4439              	
 4440              	@ 0 "" 2
 4441              		.thumb
 4442              		.syntax unified
 4443 0022 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 138


 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4444              		.loc 2 206 5
 4445 0024 00BF     		nop
 4446              	.L253:
 4447              	.LBE234:
 4448              	.LBE233:
 4449              		.loc 1 3140 9 discriminator 1
 4450 0026 FEE7     		b	.L253
 4451              	.L252:
 4452              	.LBB235:
3141:ThirdParty/FreeRTOS/tasks.c **** 
3142:ThirdParty/FreeRTOS/tasks.c ****         /* This function should not be called by application code hence the
3143:ThirdParty/FreeRTOS/tasks.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
3144:ThirdParty/FreeRTOS/tasks.c ****          * designed for use by kernel code, and has special calling requirements -
3145:ThirdParty/FreeRTOS/tasks.c ****          * it should be called with the scheduler suspended. */
3146:ThirdParty/FreeRTOS/tasks.c **** 
3147:ThirdParty/FreeRTOS/tasks.c **** 
3148:ThirdParty/FreeRTOS/tasks.c ****         /* Place the event list item of the TCB in the appropriate event list.
3149:ThirdParty/FreeRTOS/tasks.c ****          * In this case it is assume that this is the only task that is going to
3150:ThirdParty/FreeRTOS/tasks.c ****          * be waiting on this event list, so the faster vListInsertEnd() function
3151:ThirdParty/FreeRTOS/tasks.c ****          * can be used in place of vListInsert. */
3152:ThirdParty/FreeRTOS/tasks.c ****         listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4453              		.loc 1 3152 9
 4454 0028 FB68     		ldr	r3, [r7, #12]
 4455 002a 5B68     		ldr	r3, [r3, #4]
 4456 002c 7B61     		str	r3, [r7, #20]
 4457 002e 164B     		ldr	r3, .L255
 4458 0030 1B68     		ldr	r3, [r3]
 4459 0032 7A69     		ldr	r2, [r7, #20]
 4460 0034 DA61     		str	r2, [r3, #28]
 4461 0036 144B     		ldr	r3, .L255
 4462 0038 1B68     		ldr	r3, [r3]
 4463 003a 7A69     		ldr	r2, [r7, #20]
 4464 003c 9268     		ldr	r2, [r2, #8]
 4465 003e 1A62     		str	r2, [r3, #32]
 4466 0040 114B     		ldr	r3, .L255
 4467 0042 1A68     		ldr	r2, [r3]
 4468 0044 7B69     		ldr	r3, [r7, #20]
 4469 0046 9B68     		ldr	r3, [r3, #8]
 4470 0048 1832     		adds	r2, r2, #24
 4471 004a 5A60     		str	r2, [r3, #4]
 4472 004c 0E4B     		ldr	r3, .L255
 4473 004e 1B68     		ldr	r3, [r3]
 4474 0050 03F11802 		add	r2, r3, #24
 4475 0054 7B69     		ldr	r3, [r7, #20]
 4476 0056 9A60     		str	r2, [r3, #8]
 4477 0058 0B4B     		ldr	r3, .L255
 4478 005a 1B68     		ldr	r3, [r3]
 4479 005c FA68     		ldr	r2, [r7, #12]
 4480 005e 9A62     		str	r2, [r3, #40]
 4481 0060 FB68     		ldr	r3, [r7, #12]
 4482 0062 1B68     		ldr	r3, [r3]
 4483 0064 5A1C     		adds	r2, r3, #1
 4484 0066 FB68     		ldr	r3, [r7, #12]
 4485 0068 1A60     		str	r2, [r3]
 4486              	.LBE235:
3153:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 139


3154:ThirdParty/FreeRTOS/tasks.c ****         /* If the task should block indefinitely then set the block time to a
3155:ThirdParty/FreeRTOS/tasks.c ****          * value that will be recognised as an indefinite delay inside the
3156:ThirdParty/FreeRTOS/tasks.c ****          * prvAddCurrentTaskToDelayedList() function. */
3157:ThirdParty/FreeRTOS/tasks.c ****         if( xWaitIndefinitely != pdFALSE )
 4487              		.loc 1 3157 11
 4488 006a 7B68     		ldr	r3, [r7, #4]
 4489 006c 002B     		cmp	r3, #0
 4490 006e 02D0     		beq	.L254
3158:ThirdParty/FreeRTOS/tasks.c ****         {
3159:ThirdParty/FreeRTOS/tasks.c ****             xTicksToWait = portMAX_DELAY;
 4491              		.loc 1 3159 26
 4492 0070 4FF0FF33 		mov	r3, #-1
 4493 0074 BB60     		str	r3, [r7, #8]
 4494              	.L254:
3160:ThirdParty/FreeRTOS/tasks.c ****         }
3161:ThirdParty/FreeRTOS/tasks.c **** 
3162:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3163:ThirdParty/FreeRTOS/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4495              		.loc 1 3163 9
 4496 0076 7968     		ldr	r1, [r7, #4]
 4497 0078 B868     		ldr	r0, [r7, #8]
 4498 007a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3164:ThirdParty/FreeRTOS/tasks.c ****     }
 4499              		.loc 1 3164 5
 4500 007e 00BF     		nop
 4501 0080 1837     		adds	r7, r7, #24
 4502              	.LCFI145:
 4503              		.cfi_def_cfa_offset 8
 4504 0082 BD46     		mov	sp, r7
 4505              	.LCFI146:
 4506              		.cfi_def_cfa_register 13
 4507              		@ sp needed
 4508 0084 80BD     		pop	{r7, pc}
 4509              	.L256:
 4510 0086 00BF     		.align	2
 4511              	.L255:
 4512 0088 00000000 		.word	pxCurrentTCB
 4513              		.cfi_endproc
 4514              	.LFE33:
 4516              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4517              		.align	1
 4518              		.global	xTaskRemoveFromEventList
 4519              		.syntax unified
 4520              		.thumb
 4521              		.thumb_func
 4523              	xTaskRemoveFromEventList:
 4524              	.LFB34:
3165:ThirdParty/FreeRTOS/tasks.c **** 
3166:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TIMERS */
3167:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3168:ThirdParty/FreeRTOS/tasks.c **** 
3169:ThirdParty/FreeRTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3170:ThirdParty/FreeRTOS/tasks.c **** {
 4525              		.loc 1 3170 1
 4526              		.cfi_startproc
 4527              		@ args = 0, pretend = 0, frame = 40
 4528              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 140


 4529              		@ link register save eliminated.
 4530 0000 80B4     		push	{r7}
 4531              	.LCFI147:
 4532              		.cfi_def_cfa_offset 4
 4533              		.cfi_offset 7, -4
 4534 0002 8BB0     		sub	sp, sp, #44
 4535              	.LCFI148:
 4536              		.cfi_def_cfa_offset 48
 4537 0004 00AF     		add	r7, sp, #0
 4538              	.LCFI149:
 4539              		.cfi_def_cfa_register 7
 4540 0006 7860     		str	r0, [r7, #4]
3171:ThirdParty/FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
3172:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xReturn;
3173:ThirdParty/FreeRTOS/tasks.c **** 
3174:ThirdParty/FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3175:ThirdParty/FreeRTOS/tasks.c ****      * called from a critical section within an ISR. */
3176:ThirdParty/FreeRTOS/tasks.c **** 
3177:ThirdParty/FreeRTOS/tasks.c ****     /* The event list is sorted in priority order, so the first in the list can
3178:ThirdParty/FreeRTOS/tasks.c ****      * be removed as it is known to be the highest priority.  Remove the TCB from
3179:ThirdParty/FreeRTOS/tasks.c ****      * the delayed list, and add it to the ready list.
3180:ThirdParty/FreeRTOS/tasks.c ****      *
3181:ThirdParty/FreeRTOS/tasks.c ****      * If an event is for a queue that is locked then this function will never
3182:ThirdParty/FreeRTOS/tasks.c ****      * get called - the lock count on the queue will get modified instead.  This
3183:ThirdParty/FreeRTOS/tasks.c ****      * means exclusive access to the event list is guaranteed here.
3184:ThirdParty/FreeRTOS/tasks.c ****      *
3185:ThirdParty/FreeRTOS/tasks.c ****      * This function assumes that a check has already been made to ensure that
3186:ThirdParty/FreeRTOS/tasks.c ****      * pxEventList is not empty. */
3187:ThirdParty/FreeRTOS/tasks.c ****     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as th
 4541              		.loc 1 3187 22
 4542 0008 7B68     		ldr	r3, [r7, #4]
 4543 000a DB68     		ldr	r3, [r3, #12]
 4544              		.loc 1 3187 20
 4545 000c DB68     		ldr	r3, [r3, #12]
 4546 000e 3B62     		str	r3, [r7, #32]
3188:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4547              		.loc 1 3188 5
 4548 0010 3B6A     		ldr	r3, [r7, #32]
 4549 0012 002B     		cmp	r3, #0
 4550 0014 0AD1     		bne	.L258
 4551              	.LBB236:
 4552              	.LBB237:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4553              		.loc 2 198 9
 4554              		.syntax unified
 4555              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4556 0016 4FF05003 			mov r3, #80												
 4557 001a 83F31188 		msr basepri, r3											
 4558 001e BFF36F8F 		isb														
 4559 0022 BFF34F8F 		dsb														
 4560              	
 4561              	@ 0 "" 2
 4562              		.thumb
 4563              		.syntax unified
 4564 0026 FB60     		str	r3, [r7, #12]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4565              		.loc 2 206 5
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 141


 4566 0028 00BF     		nop
 4567              	.L259:
 4568              	.LBE237:
 4569              	.LBE236:
 4570              		.loc 1 3188 5 discriminator 1
 4571 002a FEE7     		b	.L259
 4572              	.L258:
 4573              	.LBB238:
3189:ThirdParty/FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 4574              		.loc 1 3189 5
 4575 002c 3B6A     		ldr	r3, [r7, #32]
 4576 002e 9B6A     		ldr	r3, [r3, #40]
 4577 0030 FB61     		str	r3, [r7, #28]
 4578 0032 3B6A     		ldr	r3, [r7, #32]
 4579 0034 DB69     		ldr	r3, [r3, #28]
 4580 0036 3A6A     		ldr	r2, [r7, #32]
 4581 0038 126A     		ldr	r2, [r2, #32]
 4582 003a 9A60     		str	r2, [r3, #8]
 4583 003c 3B6A     		ldr	r3, [r7, #32]
 4584 003e 1B6A     		ldr	r3, [r3, #32]
 4585 0040 3A6A     		ldr	r2, [r7, #32]
 4586 0042 D269     		ldr	r2, [r2, #28]
 4587 0044 5A60     		str	r2, [r3, #4]
 4588 0046 FB69     		ldr	r3, [r7, #28]
 4589 0048 5A68     		ldr	r2, [r3, #4]
 4590 004a 3B6A     		ldr	r3, [r7, #32]
 4591 004c 1833     		adds	r3, r3, #24
 4592 004e 9A42     		cmp	r2, r3
 4593 0050 03D1     		bne	.L260
 4594              		.loc 1 3189 5 is_stmt 0 discriminator 1
 4595 0052 3B6A     		ldr	r3, [r7, #32]
 4596 0054 1A6A     		ldr	r2, [r3, #32]
 4597 0056 FB69     		ldr	r3, [r7, #28]
 4598 0058 5A60     		str	r2, [r3, #4]
 4599              	.L260:
 4600              		.loc 1 3189 5 discriminator 3
 4601 005a 3B6A     		ldr	r3, [r7, #32]
 4602 005c 0022     		movs	r2, #0
 4603 005e 9A62     		str	r2, [r3, #40]
 4604 0060 FB69     		ldr	r3, [r7, #28]
 4605 0062 1B68     		ldr	r3, [r3]
 4606 0064 5A1E     		subs	r2, r3, #1
 4607 0066 FB69     		ldr	r3, [r7, #28]
 4608 0068 1A60     		str	r2, [r3]
 4609              	.LBE238:
3190:ThirdParty/FreeRTOS/tasks.c **** 
3191:ThirdParty/FreeRTOS/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4610              		.loc 1 3191 30 is_stmt 1 discriminator 3
 4611 006a 4A4B     		ldr	r3, .L267
 4612 006c 1B68     		ldr	r3, [r3]
 4613              		.loc 1 3191 7 discriminator 3
 4614 006e 002B     		cmp	r3, #0
 4615 0070 5ED1     		bne	.L261
 4616              	.LBB239:
3192:ThirdParty/FreeRTOS/tasks.c ****     {
3193:ThirdParty/FreeRTOS/tasks.c ****         listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 4617              		.loc 1 3193 9
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 142


 4618 0072 3B6A     		ldr	r3, [r7, #32]
 4619 0074 5B69     		ldr	r3, [r3, #20]
 4620 0076 7B61     		str	r3, [r7, #20]
 4621 0078 3B6A     		ldr	r3, [r7, #32]
 4622 007a 9B68     		ldr	r3, [r3, #8]
 4623 007c 3A6A     		ldr	r2, [r7, #32]
 4624 007e D268     		ldr	r2, [r2, #12]
 4625 0080 9A60     		str	r2, [r3, #8]
 4626 0082 3B6A     		ldr	r3, [r7, #32]
 4627 0084 DB68     		ldr	r3, [r3, #12]
 4628 0086 3A6A     		ldr	r2, [r7, #32]
 4629 0088 9268     		ldr	r2, [r2, #8]
 4630 008a 5A60     		str	r2, [r3, #4]
 4631 008c 7B69     		ldr	r3, [r7, #20]
 4632 008e 5A68     		ldr	r2, [r3, #4]
 4633 0090 3B6A     		ldr	r3, [r7, #32]
 4634 0092 0433     		adds	r3, r3, #4
 4635 0094 9A42     		cmp	r2, r3
 4636 0096 03D1     		bne	.L262
 4637              		.loc 1 3193 9 is_stmt 0 discriminator 1
 4638 0098 3B6A     		ldr	r3, [r7, #32]
 4639 009a DA68     		ldr	r2, [r3, #12]
 4640 009c 7B69     		ldr	r3, [r7, #20]
 4641 009e 5A60     		str	r2, [r3, #4]
 4642              	.L262:
 4643              		.loc 1 3193 9 discriminator 3
 4644 00a0 3B6A     		ldr	r3, [r7, #32]
 4645 00a2 0022     		movs	r2, #0
 4646 00a4 5A61     		str	r2, [r3, #20]
 4647 00a6 7B69     		ldr	r3, [r7, #20]
 4648 00a8 1B68     		ldr	r3, [r3]
 4649 00aa 5A1E     		subs	r2, r3, #1
 4650 00ac 7B69     		ldr	r3, [r7, #20]
 4651 00ae 1A60     		str	r2, [r3]
 4652              	.LBE239:
3194:ThirdParty/FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4653              		.loc 1 3194 9 is_stmt 1 discriminator 3
 4654 00b0 3B6A     		ldr	r3, [r7, #32]
 4655 00b2 DB6A     		ldr	r3, [r3, #44]
 4656 00b4 0122     		movs	r2, #1
 4657 00b6 9A40     		lsls	r2, r2, r3
 4658 00b8 374B     		ldr	r3, .L267+4
 4659 00ba 1B68     		ldr	r3, [r3]
 4660 00bc 1343     		orrs	r3, r3, r2
 4661 00be 364A     		ldr	r2, .L267+4
 4662 00c0 1360     		str	r3, [r2]
 4663              	.LBB240:
 4664 00c2 3B6A     		ldr	r3, [r7, #32]
 4665 00c4 DA6A     		ldr	r2, [r3, #44]
 4666 00c6 3549     		ldr	r1, .L267+8
 4667 00c8 1346     		mov	r3, r2
 4668 00ca 9B00     		lsls	r3, r3, #2
 4669 00cc 1344     		add	r3, r3, r2
 4670 00ce 9B00     		lsls	r3, r3, #2
 4671 00d0 0B44     		add	r3, r3, r1
 4672 00d2 0433     		adds	r3, r3, #4
 4673 00d4 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 143


 4674 00d6 3B61     		str	r3, [r7, #16]
 4675 00d8 3B6A     		ldr	r3, [r7, #32]
 4676 00da 3A69     		ldr	r2, [r7, #16]
 4677 00dc 9A60     		str	r2, [r3, #8]
 4678 00de 3B69     		ldr	r3, [r7, #16]
 4679 00e0 9A68     		ldr	r2, [r3, #8]
 4680 00e2 3B6A     		ldr	r3, [r7, #32]
 4681 00e4 DA60     		str	r2, [r3, #12]
 4682 00e6 3B69     		ldr	r3, [r7, #16]
 4683 00e8 9B68     		ldr	r3, [r3, #8]
 4684 00ea 3A6A     		ldr	r2, [r7, #32]
 4685 00ec 0432     		adds	r2, r2, #4
 4686 00ee 5A60     		str	r2, [r3, #4]
 4687 00f0 3B6A     		ldr	r3, [r7, #32]
 4688 00f2 1A1D     		adds	r2, r3, #4
 4689 00f4 3B69     		ldr	r3, [r7, #16]
 4690 00f6 9A60     		str	r2, [r3, #8]
 4691 00f8 3B6A     		ldr	r3, [r7, #32]
 4692 00fa DA6A     		ldr	r2, [r3, #44]
 4693 00fc 1346     		mov	r3, r2
 4694 00fe 9B00     		lsls	r3, r3, #2
 4695 0100 1344     		add	r3, r3, r2
 4696 0102 9B00     		lsls	r3, r3, #2
 4697 0104 254A     		ldr	r2, .L267+8
 4698 0106 1A44     		add	r2, r2, r3
 4699 0108 3B6A     		ldr	r3, [r7, #32]
 4700 010a 5A61     		str	r2, [r3, #20]
 4701 010c 3B6A     		ldr	r3, [r7, #32]
 4702 010e DA6A     		ldr	r2, [r3, #44]
 4703 0110 2249     		ldr	r1, .L267+8
 4704 0112 1346     		mov	r3, r2
 4705 0114 9B00     		lsls	r3, r3, #2
 4706 0116 1344     		add	r3, r3, r2
 4707 0118 9B00     		lsls	r3, r3, #2
 4708 011a 0B44     		add	r3, r3, r1
 4709 011c 1B68     		ldr	r3, [r3]
 4710 011e 591C     		adds	r1, r3, #1
 4711 0120 1E48     		ldr	r0, .L267+8
 4712 0122 1346     		mov	r3, r2
 4713 0124 9B00     		lsls	r3, r3, #2
 4714 0126 1344     		add	r3, r3, r2
 4715 0128 9B00     		lsls	r3, r3, #2
 4716 012a 0344     		add	r3, r3, r0
 4717 012c 1960     		str	r1, [r3]
 4718              	.LBE240:
 4719 012e 1BE0     		b	.L263
 4720              	.L261:
 4721              	.LBB241:
3195:ThirdParty/FreeRTOS/tasks.c **** 
3196:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3197:ThirdParty/FreeRTOS/tasks.c ****         {
3198:ThirdParty/FreeRTOS/tasks.c ****             /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3199:ThirdParty/FreeRTOS/tasks.c ****              * might be set to the blocked task's time out time.  If the task is
3200:ThirdParty/FreeRTOS/tasks.c ****              * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3201:ThirdParty/FreeRTOS/tasks.c ****              * normally left unchanged, because it is automatically reset to a new
3202:ThirdParty/FreeRTOS/tasks.c ****              * value when the tick count equals xNextTaskUnblockTime.  However if
3203:ThirdParty/FreeRTOS/tasks.c ****              * tickless idling is used it might be more important to enter sleep mode
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 144


3204:ThirdParty/FreeRTOS/tasks.c ****              * at the earliest possible time - so reset xNextTaskUnblockTime here to
3205:ThirdParty/FreeRTOS/tasks.c ****              * ensure it is updated at the earliest possible time. */
3206:ThirdParty/FreeRTOS/tasks.c ****             prvResetNextTaskUnblockTime();
3207:ThirdParty/FreeRTOS/tasks.c ****         }
3208:ThirdParty/FreeRTOS/tasks.c ****         #endif
3209:ThirdParty/FreeRTOS/tasks.c ****     }
3210:ThirdParty/FreeRTOS/tasks.c ****     else
3211:ThirdParty/FreeRTOS/tasks.c ****     {
3212:ThirdParty/FreeRTOS/tasks.c ****         /* The delayed and ready lists cannot be accessed, so hold this task
3213:ThirdParty/FreeRTOS/tasks.c ****          * pending until the scheduler is resumed. */
3214:ThirdParty/FreeRTOS/tasks.c ****         listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 4722              		.loc 1 3214 9
 4723 0130 1B4B     		ldr	r3, .L267+12
 4724 0132 5B68     		ldr	r3, [r3, #4]
 4725 0134 BB61     		str	r3, [r7, #24]
 4726 0136 3B6A     		ldr	r3, [r7, #32]
 4727 0138 BA69     		ldr	r2, [r7, #24]
 4728 013a DA61     		str	r2, [r3, #28]
 4729 013c BB69     		ldr	r3, [r7, #24]
 4730 013e 9A68     		ldr	r2, [r3, #8]
 4731 0140 3B6A     		ldr	r3, [r7, #32]
 4732 0142 1A62     		str	r2, [r3, #32]
 4733 0144 BB69     		ldr	r3, [r7, #24]
 4734 0146 9B68     		ldr	r3, [r3, #8]
 4735 0148 3A6A     		ldr	r2, [r7, #32]
 4736 014a 1832     		adds	r2, r2, #24
 4737 014c 5A60     		str	r2, [r3, #4]
 4738 014e 3B6A     		ldr	r3, [r7, #32]
 4739 0150 03F11802 		add	r2, r3, #24
 4740 0154 BB69     		ldr	r3, [r7, #24]
 4741 0156 9A60     		str	r2, [r3, #8]
 4742 0158 3B6A     		ldr	r3, [r7, #32]
 4743 015a 114A     		ldr	r2, .L267+12
 4744 015c 9A62     		str	r2, [r3, #40]
 4745 015e 104B     		ldr	r3, .L267+12
 4746 0160 1B68     		ldr	r3, [r3]
 4747 0162 0133     		adds	r3, r3, #1
 4748 0164 0E4A     		ldr	r2, .L267+12
 4749 0166 1360     		str	r3, [r2]
 4750              	.L263:
 4751              	.LBE241:
3215:ThirdParty/FreeRTOS/tasks.c ****     }
3216:ThirdParty/FreeRTOS/tasks.c **** 
3217:ThirdParty/FreeRTOS/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4752              		.loc 1 3217 23
 4753 0168 3B6A     		ldr	r3, [r7, #32]
 4754 016a DA6A     		ldr	r2, [r3, #44]
 4755              		.loc 1 3217 50
 4756 016c 0D4B     		ldr	r3, .L267+16
 4757 016e 1B68     		ldr	r3, [r3]
 4758 0170 DB6A     		ldr	r3, [r3, #44]
 4759              		.loc 1 3217 7
 4760 0172 9A42     		cmp	r2, r3
 4761 0174 05D9     		bls	.L264
3218:ThirdParty/FreeRTOS/tasks.c ****     {
3219:ThirdParty/FreeRTOS/tasks.c ****         /* Return true if the task removed from the event list has a higher
3220:ThirdParty/FreeRTOS/tasks.c ****          * priority than the calling task.  This allows the calling task to know if
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 145


3221:ThirdParty/FreeRTOS/tasks.c ****          * it should force a context switch now. */
3222:ThirdParty/FreeRTOS/tasks.c ****         xReturn = pdTRUE;
 4762              		.loc 1 3222 17
 4763 0176 0123     		movs	r3, #1
 4764 0178 7B62     		str	r3, [r7, #36]
3223:ThirdParty/FreeRTOS/tasks.c **** 
3224:ThirdParty/FreeRTOS/tasks.c ****         /* Mark that a yield is pending in case the user is not using the
3225:ThirdParty/FreeRTOS/tasks.c ****          * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3226:ThirdParty/FreeRTOS/tasks.c ****         xYieldPending = pdTRUE;
 4765              		.loc 1 3226 23
 4766 017a 0B4B     		ldr	r3, .L267+20
 4767 017c 0122     		movs	r2, #1
 4768 017e 1A60     		str	r2, [r3]
 4769 0180 01E0     		b	.L265
 4770              	.L264:
3227:ThirdParty/FreeRTOS/tasks.c ****     }
3228:ThirdParty/FreeRTOS/tasks.c ****     else
3229:ThirdParty/FreeRTOS/tasks.c ****     {
3230:ThirdParty/FreeRTOS/tasks.c ****         xReturn = pdFALSE;
 4771              		.loc 1 3230 17
 4772 0182 0023     		movs	r3, #0
 4773 0184 7B62     		str	r3, [r7, #36]
 4774              	.L265:
3231:ThirdParty/FreeRTOS/tasks.c ****     }
3232:ThirdParty/FreeRTOS/tasks.c **** 
3233:ThirdParty/FreeRTOS/tasks.c ****     return xReturn;
 4775              		.loc 1 3233 12
 4776 0186 7B6A     		ldr	r3, [r7, #36]
3234:ThirdParty/FreeRTOS/tasks.c **** }
 4777              		.loc 1 3234 1
 4778 0188 1846     		mov	r0, r3
 4779 018a 2C37     		adds	r7, r7, #44
 4780              	.LCFI150:
 4781              		.cfi_def_cfa_offset 4
 4782 018c BD46     		mov	sp, r7
 4783              	.LCFI151:
 4784              		.cfi_def_cfa_register 13
 4785              		@ sp needed
 4786 018e 5DF8047B 		ldr	r7, [sp], #4
 4787              	.LCFI152:
 4788              		.cfi_restore 7
 4789              		.cfi_def_cfa_offset 0
 4790 0192 7047     		bx	lr
 4791              	.L268:
 4792              		.align	2
 4793              	.L267:
 4794 0194 00000000 		.word	uxSchedulerSuspended
 4795 0198 00000000 		.word	uxTopReadyPriority
 4796 019c 00000000 		.word	pxReadyTasksLists
 4797 01a0 00000000 		.word	xPendingReadyList
 4798 01a4 00000000 		.word	pxCurrentTCB
 4799 01a8 00000000 		.word	xYieldPending
 4800              		.cfi_endproc
 4801              	.LFE34:
 4803              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4804              		.align	1
 4805              		.global	vTaskRemoveFromUnorderedEventList
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 146


 4806              		.syntax unified
 4807              		.thumb
 4808              		.thumb_func
 4810              	vTaskRemoveFromUnorderedEventList:
 4811              	.LFB35:
3235:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3236:ThirdParty/FreeRTOS/tasks.c **** 
3237:ThirdParty/FreeRTOS/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
3238:ThirdParty/FreeRTOS/tasks.c ****                                         const TickType_t xItemValue )
3239:ThirdParty/FreeRTOS/tasks.c **** {
 4812              		.loc 1 3239 1
 4813              		.cfi_startproc
 4814              		@ args = 0, pretend = 0, frame = 32
 4815              		@ frame_needed = 1, uses_anonymous_args = 0
 4816              		@ link register save eliminated.
 4817 0000 80B4     		push	{r7}
 4818              	.LCFI153:
 4819              		.cfi_def_cfa_offset 4
 4820              		.cfi_offset 7, -4
 4821 0002 89B0     		sub	sp, sp, #36
 4822              	.LCFI154:
 4823              		.cfi_def_cfa_offset 40
 4824 0004 00AF     		add	r7, sp, #0
 4825              	.LCFI155:
 4826              		.cfi_def_cfa_register 7
 4827 0006 7860     		str	r0, [r7, #4]
 4828 0008 3960     		str	r1, [r7]
3240:ThirdParty/FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
3241:ThirdParty/FreeRTOS/tasks.c **** 
3242:ThirdParty/FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3243:ThirdParty/FreeRTOS/tasks.c ****      * the event flags implementation. */
3244:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended != pdFALSE );
 4829              		.loc 1 3244 5
 4830 000a 584B     		ldr	r3, .L278
 4831 000c 1B68     		ldr	r3, [r3]
 4832 000e 002B     		cmp	r3, #0
 4833 0010 0AD1     		bne	.L270
 4834              	.LBB242:
 4835              	.LBB243:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4836              		.loc 2 198 9
 4837              		.syntax unified
 4838              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4839 0012 4FF05003 			mov r3, #80												
 4840 0016 83F31188 		msr basepri, r3											
 4841 001a BFF36F8F 		isb														
 4842 001e BFF34F8F 		dsb														
 4843              	
 4844              	@ 0 "" 2
 4845              		.thumb
 4846              		.syntax unified
 4847 0022 FB60     		str	r3, [r7, #12]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4848              		.loc 2 206 5
 4849 0024 00BF     		nop
 4850              	.L271:
 4851              	.LBE243:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 147


 4852              	.LBE242:
 4853              		.loc 1 3244 5 discriminator 1
 4854 0026 FEE7     		b	.L271
 4855              	.L270:
3245:ThirdParty/FreeRTOS/tasks.c **** 
3246:ThirdParty/FreeRTOS/tasks.c ****     /* Store the new item value in the event list. */
3247:ThirdParty/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 4856              		.loc 1 3247 5
 4857 0028 3B68     		ldr	r3, [r7]
 4858 002a 43F00042 		orr	r2, r3, #-2147483648
 4859 002e 7B68     		ldr	r3, [r7, #4]
 4860 0030 1A60     		str	r2, [r3]
3248:ThirdParty/FreeRTOS/tasks.c **** 
3249:ThirdParty/FreeRTOS/tasks.c ****     /* Remove the event list form the event flag.  Interrupts do not access
3250:ThirdParty/FreeRTOS/tasks.c ****      * event flags. */
3251:ThirdParty/FreeRTOS/tasks.c ****     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as th
 4861              		.loc 1 3251 20
 4862 0032 7B68     		ldr	r3, [r7, #4]
 4863 0034 DB68     		ldr	r3, [r3, #12]
 4864 0036 FB61     		str	r3, [r7, #28]
3252:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4865              		.loc 1 3252 5
 4866 0038 FB69     		ldr	r3, [r7, #28]
 4867 003a 002B     		cmp	r3, #0
 4868 003c 0AD1     		bne	.L272
 4869              	.LBB244:
 4870              	.LBB245:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4871              		.loc 2 198 9
 4872              		.syntax unified
 4873              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4874 003e 4FF05003 			mov r3, #80												
 4875 0042 83F31188 		msr basepri, r3											
 4876 0046 BFF36F8F 		isb														
 4877 004a BFF34F8F 		dsb														
 4878              	
 4879              	@ 0 "" 2
 4880              		.thumb
 4881              		.syntax unified
 4882 004e BB60     		str	r3, [r7, #8]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4883              		.loc 2 206 5
 4884 0050 00BF     		nop
 4885              	.L273:
 4886              	.LBE245:
 4887              	.LBE244:
 4888              		.loc 1 3252 5 discriminator 2
 4889 0052 FEE7     		b	.L273
 4890              	.L272:
 4891              	.LBB246:
3253:ThirdParty/FreeRTOS/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 4892              		.loc 1 3253 5
 4893 0054 7B68     		ldr	r3, [r7, #4]
 4894 0056 1B69     		ldr	r3, [r3, #16]
 4895 0058 BB61     		str	r3, [r7, #24]
 4896 005a 7B68     		ldr	r3, [r7, #4]
 4897 005c 5B68     		ldr	r3, [r3, #4]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 148


 4898 005e 7A68     		ldr	r2, [r7, #4]
 4899 0060 9268     		ldr	r2, [r2, #8]
 4900 0062 9A60     		str	r2, [r3, #8]
 4901 0064 7B68     		ldr	r3, [r7, #4]
 4902 0066 9B68     		ldr	r3, [r3, #8]
 4903 0068 7A68     		ldr	r2, [r7, #4]
 4904 006a 5268     		ldr	r2, [r2, #4]
 4905 006c 5A60     		str	r2, [r3, #4]
 4906 006e BB69     		ldr	r3, [r7, #24]
 4907 0070 5B68     		ldr	r3, [r3, #4]
 4908 0072 7A68     		ldr	r2, [r7, #4]
 4909 0074 9A42     		cmp	r2, r3
 4910 0076 03D1     		bne	.L274
 4911              		.loc 1 3253 5 is_stmt 0 discriminator 1
 4912 0078 7B68     		ldr	r3, [r7, #4]
 4913 007a 9A68     		ldr	r2, [r3, #8]
 4914 007c BB69     		ldr	r3, [r7, #24]
 4915 007e 5A60     		str	r2, [r3, #4]
 4916              	.L274:
 4917              		.loc 1 3253 5 discriminator 3
 4918 0080 7B68     		ldr	r3, [r7, #4]
 4919 0082 0022     		movs	r2, #0
 4920 0084 1A61     		str	r2, [r3, #16]
 4921 0086 BB69     		ldr	r3, [r7, #24]
 4922 0088 1B68     		ldr	r3, [r3]
 4923 008a 5A1E     		subs	r2, r3, #1
 4924 008c BB69     		ldr	r3, [r7, #24]
 4925 008e 1A60     		str	r2, [r3]
 4926              	.LBE246:
 4927              	.LBB247:
3254:ThirdParty/FreeRTOS/tasks.c **** 
3255:ThirdParty/FreeRTOS/tasks.c ****     #if ( configUSE_TICKLESS_IDLE != 0 )
3256:ThirdParty/FreeRTOS/tasks.c ****     {
3257:ThirdParty/FreeRTOS/tasks.c ****         /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3258:ThirdParty/FreeRTOS/tasks.c ****          * might be set to the blocked task's time out time.  If the task is
3259:ThirdParty/FreeRTOS/tasks.c ****          * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3260:ThirdParty/FreeRTOS/tasks.c ****          * normally left unchanged, because it is automatically reset to a new
3261:ThirdParty/FreeRTOS/tasks.c ****          * value when the tick count equals xNextTaskUnblockTime.  However if
3262:ThirdParty/FreeRTOS/tasks.c ****          * tickless idling is used it might be more important to enter sleep mode
3263:ThirdParty/FreeRTOS/tasks.c ****          * at the earliest possible time - so reset xNextTaskUnblockTime here to
3264:ThirdParty/FreeRTOS/tasks.c ****          * ensure it is updated at the earliest possible time. */
3265:ThirdParty/FreeRTOS/tasks.c ****         prvResetNextTaskUnblockTime();
3266:ThirdParty/FreeRTOS/tasks.c ****     }
3267:ThirdParty/FreeRTOS/tasks.c ****     #endif
3268:ThirdParty/FreeRTOS/tasks.c **** 
3269:ThirdParty/FreeRTOS/tasks.c ****     /* Remove the task from the delayed list and add it to the ready list.  The
3270:ThirdParty/FreeRTOS/tasks.c ****      * scheduler is suspended so interrupts will not be accessing the ready
3271:ThirdParty/FreeRTOS/tasks.c ****      * lists. */
3272:ThirdParty/FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 4928              		.loc 1 3272 5 is_stmt 1 discriminator 3
 4929 0090 FB69     		ldr	r3, [r7, #28]
 4930 0092 5B69     		ldr	r3, [r3, #20]
 4931 0094 7B61     		str	r3, [r7, #20]
 4932 0096 FB69     		ldr	r3, [r7, #28]
 4933 0098 9B68     		ldr	r3, [r3, #8]
 4934 009a FA69     		ldr	r2, [r7, #28]
 4935 009c D268     		ldr	r2, [r2, #12]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 149


 4936 009e 9A60     		str	r2, [r3, #8]
 4937 00a0 FB69     		ldr	r3, [r7, #28]
 4938 00a2 DB68     		ldr	r3, [r3, #12]
 4939 00a4 FA69     		ldr	r2, [r7, #28]
 4940 00a6 9268     		ldr	r2, [r2, #8]
 4941 00a8 5A60     		str	r2, [r3, #4]
 4942 00aa 7B69     		ldr	r3, [r7, #20]
 4943 00ac 5A68     		ldr	r2, [r3, #4]
 4944 00ae FB69     		ldr	r3, [r7, #28]
 4945 00b0 0433     		adds	r3, r3, #4
 4946 00b2 9A42     		cmp	r2, r3
 4947 00b4 03D1     		bne	.L275
 4948              		.loc 1 3272 5 is_stmt 0 discriminator 1
 4949 00b6 FB69     		ldr	r3, [r7, #28]
 4950 00b8 DA68     		ldr	r2, [r3, #12]
 4951 00ba 7B69     		ldr	r3, [r7, #20]
 4952 00bc 5A60     		str	r2, [r3, #4]
 4953              	.L275:
 4954              		.loc 1 3272 5 discriminator 3
 4955 00be FB69     		ldr	r3, [r7, #28]
 4956 00c0 0022     		movs	r2, #0
 4957 00c2 5A61     		str	r2, [r3, #20]
 4958 00c4 7B69     		ldr	r3, [r7, #20]
 4959 00c6 1B68     		ldr	r3, [r3]
 4960 00c8 5A1E     		subs	r2, r3, #1
 4961 00ca 7B69     		ldr	r3, [r7, #20]
 4962 00cc 1A60     		str	r2, [r3]
 4963              	.LBE247:
3273:ThirdParty/FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4964              		.loc 1 3273 5 is_stmt 1 discriminator 3
 4965 00ce FB69     		ldr	r3, [r7, #28]
 4966 00d0 DB6A     		ldr	r3, [r3, #44]
 4967 00d2 0122     		movs	r2, #1
 4968 00d4 9A40     		lsls	r2, r2, r3
 4969 00d6 264B     		ldr	r3, .L278+4
 4970 00d8 1B68     		ldr	r3, [r3]
 4971 00da 1343     		orrs	r3, r3, r2
 4972 00dc 244A     		ldr	r2, .L278+4
 4973 00de 1360     		str	r3, [r2]
 4974              	.LBB248:
 4975 00e0 FB69     		ldr	r3, [r7, #28]
 4976 00e2 DA6A     		ldr	r2, [r3, #44]
 4977 00e4 2349     		ldr	r1, .L278+8
 4978 00e6 1346     		mov	r3, r2
 4979 00e8 9B00     		lsls	r3, r3, #2
 4980 00ea 1344     		add	r3, r3, r2
 4981 00ec 9B00     		lsls	r3, r3, #2
 4982 00ee 0B44     		add	r3, r3, r1
 4983 00f0 0433     		adds	r3, r3, #4
 4984 00f2 1B68     		ldr	r3, [r3]
 4985 00f4 3B61     		str	r3, [r7, #16]
 4986 00f6 FB69     		ldr	r3, [r7, #28]
 4987 00f8 3A69     		ldr	r2, [r7, #16]
 4988 00fa 9A60     		str	r2, [r3, #8]
 4989 00fc 3B69     		ldr	r3, [r7, #16]
 4990 00fe 9A68     		ldr	r2, [r3, #8]
 4991 0100 FB69     		ldr	r3, [r7, #28]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 150


 4992 0102 DA60     		str	r2, [r3, #12]
 4993 0104 3B69     		ldr	r3, [r7, #16]
 4994 0106 9B68     		ldr	r3, [r3, #8]
 4995 0108 FA69     		ldr	r2, [r7, #28]
 4996 010a 0432     		adds	r2, r2, #4
 4997 010c 5A60     		str	r2, [r3, #4]
 4998 010e FB69     		ldr	r3, [r7, #28]
 4999 0110 1A1D     		adds	r2, r3, #4
 5000 0112 3B69     		ldr	r3, [r7, #16]
 5001 0114 9A60     		str	r2, [r3, #8]
 5002 0116 FB69     		ldr	r3, [r7, #28]
 5003 0118 DA6A     		ldr	r2, [r3, #44]
 5004 011a 1346     		mov	r3, r2
 5005 011c 9B00     		lsls	r3, r3, #2
 5006 011e 1344     		add	r3, r3, r2
 5007 0120 9B00     		lsls	r3, r3, #2
 5008 0122 144A     		ldr	r2, .L278+8
 5009 0124 1A44     		add	r2, r2, r3
 5010 0126 FB69     		ldr	r3, [r7, #28]
 5011 0128 5A61     		str	r2, [r3, #20]
 5012 012a FB69     		ldr	r3, [r7, #28]
 5013 012c DA6A     		ldr	r2, [r3, #44]
 5014 012e 1149     		ldr	r1, .L278+8
 5015 0130 1346     		mov	r3, r2
 5016 0132 9B00     		lsls	r3, r3, #2
 5017 0134 1344     		add	r3, r3, r2
 5018 0136 9B00     		lsls	r3, r3, #2
 5019 0138 0B44     		add	r3, r3, r1
 5020 013a 1B68     		ldr	r3, [r3]
 5021 013c 591C     		adds	r1, r3, #1
 5022 013e 0D48     		ldr	r0, .L278+8
 5023 0140 1346     		mov	r3, r2
 5024 0142 9B00     		lsls	r3, r3, #2
 5025 0144 1344     		add	r3, r3, r2
 5026 0146 9B00     		lsls	r3, r3, #2
 5027 0148 0344     		add	r3, r3, r0
 5028 014a 1960     		str	r1, [r3]
 5029              	.LBE248:
3274:ThirdParty/FreeRTOS/tasks.c **** 
3275:ThirdParty/FreeRTOS/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 5030              		.loc 1 3275 23 discriminator 3
 5031 014c FB69     		ldr	r3, [r7, #28]
 5032 014e DA6A     		ldr	r2, [r3, #44]
 5033              		.loc 1 3275 50 discriminator 3
 5034 0150 094B     		ldr	r3, .L278+12
 5035 0152 1B68     		ldr	r3, [r3]
 5036 0154 DB6A     		ldr	r3, [r3, #44]
 5037              		.loc 1 3275 7 discriminator 3
 5038 0156 9A42     		cmp	r2, r3
 5039 0158 02D9     		bls	.L277
3276:ThirdParty/FreeRTOS/tasks.c ****     {
3277:ThirdParty/FreeRTOS/tasks.c ****         /* The unblocked task has a priority above that of the calling task, so
3278:ThirdParty/FreeRTOS/tasks.c ****          * a context switch is required.  This function is called with the
3279:ThirdParty/FreeRTOS/tasks.c ****          * scheduler suspended so xYieldPending is set so the context switch
3280:ThirdParty/FreeRTOS/tasks.c ****          * occurs immediately that the scheduler is resumed (unsuspended). */
3281:ThirdParty/FreeRTOS/tasks.c ****         xYieldPending = pdTRUE;
 5040              		.loc 1 3281 23
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 151


 5041 015a 084B     		ldr	r3, .L278+16
 5042 015c 0122     		movs	r2, #1
 5043 015e 1A60     		str	r2, [r3]
 5044              	.L277:
3282:ThirdParty/FreeRTOS/tasks.c ****     }
3283:ThirdParty/FreeRTOS/tasks.c **** }
 5045              		.loc 1 3283 1
 5046 0160 00BF     		nop
 5047 0162 2437     		adds	r7, r7, #36
 5048              	.LCFI156:
 5049              		.cfi_def_cfa_offset 4
 5050 0164 BD46     		mov	sp, r7
 5051              	.LCFI157:
 5052              		.cfi_def_cfa_register 13
 5053              		@ sp needed
 5054 0166 5DF8047B 		ldr	r7, [sp], #4
 5055              	.LCFI158:
 5056              		.cfi_restore 7
 5057              		.cfi_def_cfa_offset 0
 5058 016a 7047     		bx	lr
 5059              	.L279:
 5060              		.align	2
 5061              	.L278:
 5062 016c 00000000 		.word	uxSchedulerSuspended
 5063 0170 00000000 		.word	uxTopReadyPriority
 5064 0174 00000000 		.word	pxReadyTasksLists
 5065 0178 00000000 		.word	pxCurrentTCB
 5066 017c 00000000 		.word	xYieldPending
 5067              		.cfi_endproc
 5068              	.LFE35:
 5070              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 5071              		.align	1
 5072              		.global	vTaskSetTimeOutState
 5073              		.syntax unified
 5074              		.thumb
 5075              		.thumb_func
 5077              	vTaskSetTimeOutState:
 5078              	.LFB36:
3284:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3285:ThirdParty/FreeRTOS/tasks.c **** 
3286:ThirdParty/FreeRTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3287:ThirdParty/FreeRTOS/tasks.c **** {
 5079              		.loc 1 3287 1
 5080              		.cfi_startproc
 5081              		@ args = 0, pretend = 0, frame = 16
 5082              		@ frame_needed = 1, uses_anonymous_args = 0
 5083 0000 80B5     		push	{r7, lr}
 5084              	.LCFI159:
 5085              		.cfi_def_cfa_offset 8
 5086              		.cfi_offset 7, -8
 5087              		.cfi_offset 14, -4
 5088 0002 84B0     		sub	sp, sp, #16
 5089              	.LCFI160:
 5090              		.cfi_def_cfa_offset 24
 5091 0004 00AF     		add	r7, sp, #0
 5092              	.LCFI161:
 5093              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 152


 5094 0006 7860     		str	r0, [r7, #4]
3288:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
 5095              		.loc 1 3288 5
 5096 0008 7B68     		ldr	r3, [r7, #4]
 5097 000a 002B     		cmp	r3, #0
 5098 000c 0AD1     		bne	.L281
 5099              	.LBB249:
 5100              	.LBB250:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5101              		.loc 2 198 9
 5102              		.syntax unified
 5103              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 5104 000e 4FF05003 			mov r3, #80												
 5105 0012 83F31188 		msr basepri, r3											
 5106 0016 BFF36F8F 		isb														
 5107 001a BFF34F8F 		dsb														
 5108              	
 5109              	@ 0 "" 2
 5110              		.thumb
 5111              		.syntax unified
 5112 001e FB60     		str	r3, [r7, #12]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 5113              		.loc 2 206 5
 5114 0020 00BF     		nop
 5115              	.L282:
 5116              	.LBE250:
 5117              	.LBE249:
 5118              		.loc 1 3288 5 discriminator 1
 5119 0022 FEE7     		b	.L282
 5120              	.L281:
3289:ThirdParty/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 5121              		.loc 1 3289 5
 5122 0024 FFF7FEFF 		bl	vPortEnterCritical
3290:ThirdParty/FreeRTOS/tasks.c ****     {
3291:ThirdParty/FreeRTOS/tasks.c ****         pxTimeOut->xOverflowCount = xNumOfOverflows;
 5123              		.loc 1 3291 35
 5124 0028 064B     		ldr	r3, .L283
 5125 002a 1A68     		ldr	r2, [r3]
 5126 002c 7B68     		ldr	r3, [r7, #4]
 5127 002e 1A60     		str	r2, [r3]
3292:ThirdParty/FreeRTOS/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 5128              		.loc 1 3292 36
 5129 0030 054B     		ldr	r3, .L283+4
 5130 0032 1A68     		ldr	r2, [r3]
 5131 0034 7B68     		ldr	r3, [r7, #4]
 5132 0036 5A60     		str	r2, [r3, #4]
3293:ThirdParty/FreeRTOS/tasks.c ****     }
3294:ThirdParty/FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
 5133              		.loc 1 3294 5
 5134 0038 FFF7FEFF 		bl	vPortExitCritical
3295:ThirdParty/FreeRTOS/tasks.c **** }
 5135              		.loc 1 3295 1
 5136 003c 00BF     		nop
 5137 003e 1037     		adds	r7, r7, #16
 5138              	.LCFI162:
 5139              		.cfi_def_cfa_offset 8
 5140 0040 BD46     		mov	sp, r7
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 153


 5141              	.LCFI163:
 5142              		.cfi_def_cfa_register 13
 5143              		@ sp needed
 5144 0042 80BD     		pop	{r7, pc}
 5145              	.L284:
 5146              		.align	2
 5147              	.L283:
 5148 0044 00000000 		.word	xNumOfOverflows
 5149 0048 00000000 		.word	xTickCount
 5150              		.cfi_endproc
 5151              	.LFE36:
 5153              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 5154              		.align	1
 5155              		.global	vTaskInternalSetTimeOutState
 5156              		.syntax unified
 5157              		.thumb
 5158              		.thumb_func
 5160              	vTaskInternalSetTimeOutState:
 5161              	.LFB37:
3296:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3297:ThirdParty/FreeRTOS/tasks.c **** 
3298:ThirdParty/FreeRTOS/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3299:ThirdParty/FreeRTOS/tasks.c **** {
 5162              		.loc 1 3299 1
 5163              		.cfi_startproc
 5164              		@ args = 0, pretend = 0, frame = 8
 5165              		@ frame_needed = 1, uses_anonymous_args = 0
 5166              		@ link register save eliminated.
 5167 0000 80B4     		push	{r7}
 5168              	.LCFI164:
 5169              		.cfi_def_cfa_offset 4
 5170              		.cfi_offset 7, -4
 5171 0002 83B0     		sub	sp, sp, #12
 5172              	.LCFI165:
 5173              		.cfi_def_cfa_offset 16
 5174 0004 00AF     		add	r7, sp, #0
 5175              	.LCFI166:
 5176              		.cfi_def_cfa_register 7
 5177 0006 7860     		str	r0, [r7, #4]
3300:ThirdParty/FreeRTOS/tasks.c ****     /* For internal use only as it does not use a critical section. */
3301:ThirdParty/FreeRTOS/tasks.c ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
 5178              		.loc 1 3301 31
 5179 0008 064B     		ldr	r3, .L286
 5180 000a 1A68     		ldr	r2, [r3]
 5181 000c 7B68     		ldr	r3, [r7, #4]
 5182 000e 1A60     		str	r2, [r3]
3302:ThirdParty/FreeRTOS/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 5183              		.loc 1 3302 32
 5184 0010 054B     		ldr	r3, .L286+4
 5185 0012 1A68     		ldr	r2, [r3]
 5186 0014 7B68     		ldr	r3, [r7, #4]
 5187 0016 5A60     		str	r2, [r3, #4]
3303:ThirdParty/FreeRTOS/tasks.c **** }
 5188              		.loc 1 3303 1
 5189 0018 00BF     		nop
 5190 001a 0C37     		adds	r7, r7, #12
 5191              	.LCFI167:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 154


 5192              		.cfi_def_cfa_offset 4
 5193 001c BD46     		mov	sp, r7
 5194              	.LCFI168:
 5195              		.cfi_def_cfa_register 13
 5196              		@ sp needed
 5197 001e 5DF8047B 		ldr	r7, [sp], #4
 5198              	.LCFI169:
 5199              		.cfi_restore 7
 5200              		.cfi_def_cfa_offset 0
 5201 0022 7047     		bx	lr
 5202              	.L287:
 5203              		.align	2
 5204              	.L286:
 5205 0024 00000000 		.word	xNumOfOverflows
 5206 0028 00000000 		.word	xTickCount
 5207              		.cfi_endproc
 5208              	.LFE37:
 5210              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 5211              		.align	1
 5212              		.global	xTaskCheckForTimeOut
 5213              		.syntax unified
 5214              		.thumb
 5215              		.thumb_func
 5217              	xTaskCheckForTimeOut:
 5218              	.LFB38:
3304:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3305:ThirdParty/FreeRTOS/tasks.c **** 
3306:ThirdParty/FreeRTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
3307:ThirdParty/FreeRTOS/tasks.c ****                                  TickType_t * const pxTicksToWait )
3308:ThirdParty/FreeRTOS/tasks.c **** {
 5219              		.loc 1 3308 1
 5220              		.cfi_startproc
 5221              		@ args = 0, pretend = 0, frame = 32
 5222              		@ frame_needed = 1, uses_anonymous_args = 0
 5223 0000 80B5     		push	{r7, lr}
 5224              	.LCFI170:
 5225              		.cfi_def_cfa_offset 8
 5226              		.cfi_offset 7, -8
 5227              		.cfi_offset 14, -4
 5228 0002 88B0     		sub	sp, sp, #32
 5229              	.LCFI171:
 5230              		.cfi_def_cfa_offset 40
 5231 0004 00AF     		add	r7, sp, #0
 5232              	.LCFI172:
 5233              		.cfi_def_cfa_register 7
 5234 0006 7860     		str	r0, [r7, #4]
 5235 0008 3960     		str	r1, [r7]
3309:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xReturn;
3310:ThirdParty/FreeRTOS/tasks.c **** 
3311:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
 5236              		.loc 1 3311 5
 5237 000a 7B68     		ldr	r3, [r7, #4]
 5238 000c 002B     		cmp	r3, #0
 5239 000e 0AD1     		bne	.L289
 5240              	.LBB251:
 5241              	.LBB252:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 155


 5242              		.loc 2 198 9
 5243              		.syntax unified
 5244              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 5245 0010 4FF05003 			mov r3, #80												
 5246 0014 83F31188 		msr basepri, r3											
 5247 0018 BFF36F8F 		isb														
 5248 001c BFF34F8F 		dsb														
 5249              	
 5250              	@ 0 "" 2
 5251              		.thumb
 5252              		.syntax unified
 5253 0020 3B61     		str	r3, [r7, #16]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 5254              		.loc 2 206 5
 5255 0022 00BF     		nop
 5256              	.L290:
 5257              	.LBE252:
 5258              	.LBE251:
 5259              		.loc 1 3311 5 discriminator 1
 5260 0024 FEE7     		b	.L290
 5261              	.L289:
3312:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 5262              		.loc 1 3312 5
 5263 0026 3B68     		ldr	r3, [r7]
 5264 0028 002B     		cmp	r3, #0
 5265 002a 0AD1     		bne	.L291
 5266              	.LBB253:
 5267              	.LBB254:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5268              		.loc 2 198 9
 5269              		.syntax unified
 5270              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 5271 002c 4FF05003 			mov r3, #80												
 5272 0030 83F31188 		msr basepri, r3											
 5273 0034 BFF36F8F 		isb														
 5274 0038 BFF34F8F 		dsb														
 5275              	
 5276              	@ 0 "" 2
 5277              		.thumb
 5278              		.syntax unified
 5279 003c FB60     		str	r3, [r7, #12]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 5280              		.loc 2 206 5
 5281 003e 00BF     		nop
 5282              	.L292:
 5283              	.LBE254:
 5284              	.LBE253:
 5285              		.loc 1 3312 5 discriminator 2
 5286 0040 FEE7     		b	.L292
 5287              	.L291:
3313:ThirdParty/FreeRTOS/tasks.c **** 
3314:ThirdParty/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 5288              		.loc 1 3314 5
 5289 0042 FFF7FEFF 		bl	vPortEnterCritical
 5290              	.LBB255:
3315:ThirdParty/FreeRTOS/tasks.c ****     {
3316:ThirdParty/FreeRTOS/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this block. */
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 156


3317:ThirdParty/FreeRTOS/tasks.c ****         const TickType_t xConstTickCount = xTickCount;
 5291              		.loc 1 3317 26
 5292 0046 1F4B     		ldr	r3, .L298
 5293 0048 1B68     		ldr	r3, [r3]
 5294 004a BB61     		str	r3, [r7, #24]
3318:ThirdParty/FreeRTOS/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 5295              		.loc 1 3318 68
 5296 004c 7B68     		ldr	r3, [r7, #4]
 5297 004e 5B68     		ldr	r3, [r3, #4]
 5298              		.loc 1 3318 26
 5299 0050 BA69     		ldr	r2, [r7, #24]
 5300 0052 D31A     		subs	r3, r2, r3
 5301 0054 7B61     		str	r3, [r7, #20]
3319:ThirdParty/FreeRTOS/tasks.c **** 
3320:ThirdParty/FreeRTOS/tasks.c ****         #if ( INCLUDE_xTaskAbortDelay == 1 )
3321:ThirdParty/FreeRTOS/tasks.c ****             if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3322:ThirdParty/FreeRTOS/tasks.c ****             {
3323:ThirdParty/FreeRTOS/tasks.c ****                 /* The delay was aborted, which is not the same as a time out,
3324:ThirdParty/FreeRTOS/tasks.c ****                  * but has the same result. */
3325:ThirdParty/FreeRTOS/tasks.c ****                 pxCurrentTCB->ucDelayAborted = pdFALSE;
3326:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
3327:ThirdParty/FreeRTOS/tasks.c ****             }
3328:ThirdParty/FreeRTOS/tasks.c ****             else
3329:ThirdParty/FreeRTOS/tasks.c ****         #endif
3330:ThirdParty/FreeRTOS/tasks.c **** 
3331:ThirdParty/FreeRTOS/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3332:ThirdParty/FreeRTOS/tasks.c ****             if( *pxTicksToWait == portMAX_DELAY )
 5302              		.loc 1 3332 17
 5303 0056 3B68     		ldr	r3, [r7]
 5304 0058 1B68     		ldr	r3, [r3]
 5305              		.loc 1 3332 15
 5306 005a B3F1FF3F 		cmp	r3, #-1
 5307 005e 02D1     		bne	.L293
3333:ThirdParty/FreeRTOS/tasks.c ****             {
3334:ThirdParty/FreeRTOS/tasks.c ****                 /* If INCLUDE_vTaskSuspend is set to 1 and the block time
3335:ThirdParty/FreeRTOS/tasks.c ****                  * specified is the maximum block time then the task should block
3336:ThirdParty/FreeRTOS/tasks.c ****                  * indefinitely, and therefore never time out. */
3337:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdFALSE;
 5308              		.loc 1 3337 25
 5309 0060 0023     		movs	r3, #0
 5310 0062 FB61     		str	r3, [r7, #28]
 5311 0064 26E0     		b	.L294
 5312              	.L293:
3338:ThirdParty/FreeRTOS/tasks.c ****             }
3339:ThirdParty/FreeRTOS/tasks.c ****             else
3340:ThirdParty/FreeRTOS/tasks.c ****         #endif
3341:ThirdParty/FreeRTOS/tasks.c **** 
3342:ThirdParty/FreeRTOS/tasks.c ****         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTi
 5313              		.loc 1 3342 43
 5314 0066 7B68     		ldr	r3, [r7, #4]
 5315 0068 1A68     		ldr	r2, [r3]
 5316              		.loc 1 3342 31
 5317 006a 174B     		ldr	r3, .L298+4
 5318 006c 1B68     		ldr	r3, [r3]
 5319              		.loc 1 3342 11
 5320 006e 9A42     		cmp	r2, r3
 5321 0070 0AD0     		beq	.L295
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 157


 5322              		.loc 1 3342 95 discriminator 1
 5323 0072 7B68     		ldr	r3, [r7, #4]
 5324 0074 5B68     		ldr	r3, [r3, #4]
 5325              		.loc 1 3342 62 discriminator 1
 5326 0076 BA69     		ldr	r2, [r7, #24]
 5327 0078 9A42     		cmp	r2, r3
 5328 007a 05D3     		bcc	.L295
3343:ThirdParty/FreeRTOS/tasks.c ****         {
3344:ThirdParty/FreeRTOS/tasks.c ****             /* The tick count is greater than the time at which
3345:ThirdParty/FreeRTOS/tasks.c ****              * vTaskSetTimeout() was called, but has also overflowed since
3346:ThirdParty/FreeRTOS/tasks.c ****              * vTaskSetTimeOut() was called.  It must have wrapped all the way
3347:ThirdParty/FreeRTOS/tasks.c ****              * around and gone past again. This passed since vTaskSetTimeout()
3348:ThirdParty/FreeRTOS/tasks.c ****              * was called. */
3349:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pdTRUE;
 5329              		.loc 1 3349 21
 5330 007c 0123     		movs	r3, #1
 5331 007e FB61     		str	r3, [r7, #28]
3350:ThirdParty/FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 5332              		.loc 1 3350 28
 5333 0080 3B68     		ldr	r3, [r7]
 5334 0082 0022     		movs	r2, #0
 5335 0084 1A60     		str	r2, [r3]
 5336 0086 15E0     		b	.L294
 5337              	.L295:
3351:ThirdParty/FreeRTOS/tasks.c ****         }
3352:ThirdParty/FreeRTOS/tasks.c ****         else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant wi
 5338              		.loc 1 3352 33
 5339 0088 3B68     		ldr	r3, [r7]
 5340 008a 1B68     		ldr	r3, [r3]
 5341              		.loc 1 3352 16
 5342 008c 7A69     		ldr	r2, [r7, #20]
 5343 008e 9A42     		cmp	r2, r3
 5344 0090 0BD2     		bcs	.L296
3353:ThirdParty/FreeRTOS/tasks.c ****         {
3354:ThirdParty/FreeRTOS/tasks.c ****             /* Not a genuine timeout. Adjust parameters for time remaining. */
3355:ThirdParty/FreeRTOS/tasks.c ****             *pxTicksToWait -= xElapsedTime;
 5345              		.loc 1 3355 28
 5346 0092 3B68     		ldr	r3, [r7]
 5347 0094 1A68     		ldr	r2, [r3]
 5348 0096 7B69     		ldr	r3, [r7, #20]
 5349 0098 D21A     		subs	r2, r2, r3
 5350 009a 3B68     		ldr	r3, [r7]
 5351 009c 1A60     		str	r2, [r3]
3356:ThirdParty/FreeRTOS/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 5352              		.loc 1 3356 13
 5353 009e 7868     		ldr	r0, [r7, #4]
 5354 00a0 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3357:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pdFALSE;
 5355              		.loc 1 3357 21
 5356 00a4 0023     		movs	r3, #0
 5357 00a6 FB61     		str	r3, [r7, #28]
 5358 00a8 04E0     		b	.L294
 5359              	.L296:
3358:ThirdParty/FreeRTOS/tasks.c ****         }
3359:ThirdParty/FreeRTOS/tasks.c ****         else
3360:ThirdParty/FreeRTOS/tasks.c ****         {
3361:ThirdParty/FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 158


 5360              		.loc 1 3361 28
 5361 00aa 3B68     		ldr	r3, [r7]
 5362 00ac 0022     		movs	r2, #0
 5363 00ae 1A60     		str	r2, [r3]
3362:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pdTRUE;
 5364              		.loc 1 3362 21
 5365 00b0 0123     		movs	r3, #1
 5366 00b2 FB61     		str	r3, [r7, #28]
 5367              	.L294:
 5368              	.LBE255:
3363:ThirdParty/FreeRTOS/tasks.c ****         }
3364:ThirdParty/FreeRTOS/tasks.c ****     }
3365:ThirdParty/FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
 5369              		.loc 1 3365 5
 5370 00b4 FFF7FEFF 		bl	vPortExitCritical
3366:ThirdParty/FreeRTOS/tasks.c **** 
3367:ThirdParty/FreeRTOS/tasks.c ****     return xReturn;
 5371              		.loc 1 3367 12
 5372 00b8 FB69     		ldr	r3, [r7, #28]
3368:ThirdParty/FreeRTOS/tasks.c **** }
 5373              		.loc 1 3368 1
 5374 00ba 1846     		mov	r0, r3
 5375 00bc 2037     		adds	r7, r7, #32
 5376              	.LCFI173:
 5377              		.cfi_def_cfa_offset 8
 5378 00be BD46     		mov	sp, r7
 5379              	.LCFI174:
 5380              		.cfi_def_cfa_register 13
 5381              		@ sp needed
 5382 00c0 80BD     		pop	{r7, pc}
 5383              	.L299:
 5384 00c2 00BF     		.align	2
 5385              	.L298:
 5386 00c4 00000000 		.word	xTickCount
 5387 00c8 00000000 		.word	xNumOfOverflows
 5388              		.cfi_endproc
 5389              	.LFE38:
 5391              		.section	.text.vTaskMissedYield,"ax",%progbits
 5392              		.align	1
 5393              		.global	vTaskMissedYield
 5394              		.syntax unified
 5395              		.thumb
 5396              		.thumb_func
 5398              	vTaskMissedYield:
 5399              	.LFB39:
3369:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3370:ThirdParty/FreeRTOS/tasks.c **** 
3371:ThirdParty/FreeRTOS/tasks.c **** void vTaskMissedYield( void )
3372:ThirdParty/FreeRTOS/tasks.c **** {
 5400              		.loc 1 3372 1
 5401              		.cfi_startproc
 5402              		@ args = 0, pretend = 0, frame = 0
 5403              		@ frame_needed = 1, uses_anonymous_args = 0
 5404              		@ link register save eliminated.
 5405 0000 80B4     		push	{r7}
 5406              	.LCFI175:
 5407              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 159


 5408              		.cfi_offset 7, -4
 5409 0002 00AF     		add	r7, sp, #0
 5410              	.LCFI176:
 5411              		.cfi_def_cfa_register 7
3373:ThirdParty/FreeRTOS/tasks.c ****     xYieldPending = pdTRUE;
 5412              		.loc 1 3373 19
 5413 0004 034B     		ldr	r3, .L301
 5414 0006 0122     		movs	r2, #1
 5415 0008 1A60     		str	r2, [r3]
3374:ThirdParty/FreeRTOS/tasks.c **** }
 5416              		.loc 1 3374 1
 5417 000a 00BF     		nop
 5418 000c BD46     		mov	sp, r7
 5419              	.LCFI177:
 5420              		.cfi_def_cfa_register 13
 5421              		@ sp needed
 5422 000e 5DF8047B 		ldr	r7, [sp], #4
 5423              	.LCFI178:
 5424              		.cfi_restore 7
 5425              		.cfi_def_cfa_offset 0
 5426 0012 7047     		bx	lr
 5427              	.L302:
 5428              		.align	2
 5429              	.L301:
 5430 0014 00000000 		.word	xYieldPending
 5431              		.cfi_endproc
 5432              	.LFE39:
 5434              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 5435              		.align	1
 5436              		.global	uxTaskGetTaskNumber
 5437              		.syntax unified
 5438              		.thumb
 5439              		.thumb_func
 5441              	uxTaskGetTaskNumber:
 5442              	.LFB40:
3375:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3376:ThirdParty/FreeRTOS/tasks.c **** 
3377:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3378:ThirdParty/FreeRTOS/tasks.c **** 
3379:ThirdParty/FreeRTOS/tasks.c ****     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3380:ThirdParty/FreeRTOS/tasks.c ****     {
 5443              		.loc 1 3380 5
 5444              		.cfi_startproc
 5445              		@ args = 0, pretend = 0, frame = 16
 5446              		@ frame_needed = 1, uses_anonymous_args = 0
 5447              		@ link register save eliminated.
 5448 0000 80B4     		push	{r7}
 5449              	.LCFI179:
 5450              		.cfi_def_cfa_offset 4
 5451              		.cfi_offset 7, -4
 5452 0002 85B0     		sub	sp, sp, #20
 5453              	.LCFI180:
 5454              		.cfi_def_cfa_offset 24
 5455 0004 00AF     		add	r7, sp, #0
 5456              	.LCFI181:
 5457              		.cfi_def_cfa_register 7
 5458 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 160


3381:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
3382:ThirdParty/FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
3383:ThirdParty/FreeRTOS/tasks.c **** 
3384:ThirdParty/FreeRTOS/tasks.c ****         if( xTask != NULL )
 5459              		.loc 1 3384 11
 5460 0008 7B68     		ldr	r3, [r7, #4]
 5461 000a 002B     		cmp	r3, #0
 5462 000c 05D0     		beq	.L304
3385:ThirdParty/FreeRTOS/tasks.c ****         {
3386:ThirdParty/FreeRTOS/tasks.c ****             pxTCB = xTask;
 5463              		.loc 1 3386 19
 5464 000e 7B68     		ldr	r3, [r7, #4]
 5465 0010 BB60     		str	r3, [r7, #8]
3387:ThirdParty/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
 5466              		.loc 1 3387 22
 5467 0012 BB68     		ldr	r3, [r7, #8]
 5468 0014 5B6C     		ldr	r3, [r3, #68]
 5469 0016 FB60     		str	r3, [r7, #12]
 5470 0018 01E0     		b	.L305
 5471              	.L304:
3388:ThirdParty/FreeRTOS/tasks.c ****         }
3389:ThirdParty/FreeRTOS/tasks.c ****         else
3390:ThirdParty/FreeRTOS/tasks.c ****         {
3391:ThirdParty/FreeRTOS/tasks.c ****             uxReturn = 0U;
 5472              		.loc 1 3391 22
 5473 001a 0023     		movs	r3, #0
 5474 001c FB60     		str	r3, [r7, #12]
 5475              	.L305:
3392:ThirdParty/FreeRTOS/tasks.c ****         }
3393:ThirdParty/FreeRTOS/tasks.c **** 
3394:ThirdParty/FreeRTOS/tasks.c ****         return uxReturn;
 5476              		.loc 1 3394 16
 5477 001e FB68     		ldr	r3, [r7, #12]
3395:ThirdParty/FreeRTOS/tasks.c ****     }
 5478              		.loc 1 3395 5
 5479 0020 1846     		mov	r0, r3
 5480 0022 1437     		adds	r7, r7, #20
 5481              	.LCFI182:
 5482              		.cfi_def_cfa_offset 4
 5483 0024 BD46     		mov	sp, r7
 5484              	.LCFI183:
 5485              		.cfi_def_cfa_register 13
 5486              		@ sp needed
 5487 0026 5DF8047B 		ldr	r7, [sp], #4
 5488              	.LCFI184:
 5489              		.cfi_restore 7
 5490              		.cfi_def_cfa_offset 0
 5491 002a 7047     		bx	lr
 5492              		.cfi_endproc
 5493              	.LFE40:
 5495              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 5496              		.align	1
 5497              		.global	vTaskSetTaskNumber
 5498              		.syntax unified
 5499              		.thumb
 5500              		.thumb_func
 5502              	vTaskSetTaskNumber:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 161


 5503              	.LFB41:
3396:ThirdParty/FreeRTOS/tasks.c **** 
3397:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3398:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3399:ThirdParty/FreeRTOS/tasks.c **** 
3400:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3401:ThirdParty/FreeRTOS/tasks.c **** 
3402:ThirdParty/FreeRTOS/tasks.c ****     void vTaskSetTaskNumber( TaskHandle_t xTask,
3403:ThirdParty/FreeRTOS/tasks.c ****                              const UBaseType_t uxHandle )
3404:ThirdParty/FreeRTOS/tasks.c ****     {
 5504              		.loc 1 3404 5
 5505              		.cfi_startproc
 5506              		@ args = 0, pretend = 0, frame = 16
 5507              		@ frame_needed = 1, uses_anonymous_args = 0
 5508              		@ link register save eliminated.
 5509 0000 80B4     		push	{r7}
 5510              	.LCFI185:
 5511              		.cfi_def_cfa_offset 4
 5512              		.cfi_offset 7, -4
 5513 0002 85B0     		sub	sp, sp, #20
 5514              	.LCFI186:
 5515              		.cfi_def_cfa_offset 24
 5516 0004 00AF     		add	r7, sp, #0
 5517              	.LCFI187:
 5518              		.cfi_def_cfa_register 7
 5519 0006 7860     		str	r0, [r7, #4]
 5520 0008 3960     		str	r1, [r7]
3405:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3406:ThirdParty/FreeRTOS/tasks.c **** 
3407:ThirdParty/FreeRTOS/tasks.c ****         if( xTask != NULL )
 5521              		.loc 1 3407 11
 5522 000a 7B68     		ldr	r3, [r7, #4]
 5523 000c 002B     		cmp	r3, #0
 5524 000e 04D0     		beq	.L309
3408:ThirdParty/FreeRTOS/tasks.c ****         {
3409:ThirdParty/FreeRTOS/tasks.c ****             pxTCB = xTask;
 5525              		.loc 1 3409 19
 5526 0010 7B68     		ldr	r3, [r7, #4]
 5527 0012 FB60     		str	r3, [r7, #12]
3410:ThirdParty/FreeRTOS/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
 5528              		.loc 1 3410 33
 5529 0014 FB68     		ldr	r3, [r7, #12]
 5530 0016 3A68     		ldr	r2, [r7]
 5531 0018 5A64     		str	r2, [r3, #68]
 5532              	.L309:
3411:ThirdParty/FreeRTOS/tasks.c ****         }
3412:ThirdParty/FreeRTOS/tasks.c ****     }
 5533              		.loc 1 3412 5
 5534 001a 00BF     		nop
 5535 001c 1437     		adds	r7, r7, #20
 5536              	.LCFI188:
 5537              		.cfi_def_cfa_offset 4
 5538 001e BD46     		mov	sp, r7
 5539              	.LCFI189:
 5540              		.cfi_def_cfa_register 13
 5541              		@ sp needed
 5542 0020 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 162


 5543              	.LCFI190:
 5544              		.cfi_restore 7
 5545              		.cfi_def_cfa_offset 0
 5546 0024 7047     		bx	lr
 5547              		.cfi_endproc
 5548              	.LFE41:
 5550              		.section	.text.prvIdleTask,"ax",%progbits
 5551              		.align	1
 5552              		.syntax unified
 5553              		.thumb
 5554              		.thumb_func
 5556              	prvIdleTask:
 5557              	.LFB42:
3413:ThirdParty/FreeRTOS/tasks.c **** 
3414:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3415:ThirdParty/FreeRTOS/tasks.c **** 
3416:ThirdParty/FreeRTOS/tasks.c **** /*
3417:ThirdParty/FreeRTOS/tasks.c ****  * -----------------------------------------------------------
3418:ThirdParty/FreeRTOS/tasks.c ****  * The Idle task.
3419:ThirdParty/FreeRTOS/tasks.c ****  * ----------------------------------------------------------
3420:ThirdParty/FreeRTOS/tasks.c ****  *
3421:ThirdParty/FreeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3422:ThirdParty/FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3423:ThirdParty/FreeRTOS/tasks.c ****  *
3424:ThirdParty/FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
3425:ThirdParty/FreeRTOS/tasks.c ****  *
3426:ThirdParty/FreeRTOS/tasks.c ****  */
3427:ThirdParty/FreeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3428:ThirdParty/FreeRTOS/tasks.c **** {
 5558              		.loc 1 3428 1
 5559              		.cfi_startproc
 5560              		@ args = 0, pretend = 0, frame = 8
 5561              		@ frame_needed = 1, uses_anonymous_args = 0
 5562 0000 80B5     		push	{r7, lr}
 5563              	.LCFI191:
 5564              		.cfi_def_cfa_offset 8
 5565              		.cfi_offset 7, -8
 5566              		.cfi_offset 14, -4
 5567 0002 82B0     		sub	sp, sp, #8
 5568              	.LCFI192:
 5569              		.cfi_def_cfa_offset 16
 5570 0004 00AF     		add	r7, sp, #0
 5571              	.LCFI193:
 5572              		.cfi_def_cfa_register 7
 5573 0006 7860     		str	r0, [r7, #4]
 5574              	.L311:
3429:ThirdParty/FreeRTOS/tasks.c ****     /* Stop warnings. */
3430:ThirdParty/FreeRTOS/tasks.c ****     ( void ) pvParameters;
3431:ThirdParty/FreeRTOS/tasks.c **** 
3432:ThirdParty/FreeRTOS/tasks.c ****     /** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3433:ThirdParty/FreeRTOS/tasks.c ****      * SCHEDULER IS STARTED. **/
3434:ThirdParty/FreeRTOS/tasks.c **** 
3435:ThirdParty/FreeRTOS/tasks.c ****     /* In case a task that has a secure context deletes itself, in which case
3436:ThirdParty/FreeRTOS/tasks.c ****      * the idle task is responsible for deleting the task's secure context, if
3437:ThirdParty/FreeRTOS/tasks.c ****      * any. */
3438:ThirdParty/FreeRTOS/tasks.c ****     portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3439:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 163


3440:ThirdParty/FreeRTOS/tasks.c ****     for( ; ; )
3441:ThirdParty/FreeRTOS/tasks.c ****     {
3442:ThirdParty/FreeRTOS/tasks.c ****         /* See if any tasks have deleted themselves - if so then the idle task
3443:ThirdParty/FreeRTOS/tasks.c ****          * is responsible for freeing the deleted task's TCB and stack. */
3444:ThirdParty/FreeRTOS/tasks.c ****         prvCheckTasksWaitingTermination();
 5575              		.loc 1 3444 9 discriminator 1
 5576 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3445:ThirdParty/FreeRTOS/tasks.c **** 
3446:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_PREEMPTION == 0 )
3447:ThirdParty/FreeRTOS/tasks.c ****         {
3448:ThirdParty/FreeRTOS/tasks.c ****             /* If we are not using preemption we keep forcing a task switch to
3449:ThirdParty/FreeRTOS/tasks.c ****              * see if any other task has become available.  If we are using
3450:ThirdParty/FreeRTOS/tasks.c ****              * preemption we don't need to do this as any task becoming available
3451:ThirdParty/FreeRTOS/tasks.c ****              * will automatically get the processor anyway. */
3452:ThirdParty/FreeRTOS/tasks.c ****             taskYIELD();
 5577              		.loc 1 3452 13 discriminator 1
 5578 000c 044B     		ldr	r3, .L312
 5579 000e 4FF08052 		mov	r2, #268435456
 5580 0012 1A60     		str	r2, [r3]
 5581              		.syntax unified
 5582              	@ 3452 "ThirdParty/FreeRTOS/tasks.c" 1
 5583 0014 BFF34F8F 		dsb
 5584              	@ 0 "" 2
 5585              	@ 3452 "ThirdParty/FreeRTOS/tasks.c" 1
 5586 0018 BFF36F8F 		isb
 5587              	@ 0 "" 2
3444:ThirdParty/FreeRTOS/tasks.c **** 
 5588              		.loc 1 3444 9 discriminator 1
 5589              		.thumb
 5590              		.syntax unified
 5591 001c F4E7     		b	.L311
 5592              	.L313:
 5593 001e 00BF     		.align	2
 5594              	.L312:
 5595 0020 04ED00E0 		.word	-536810236
 5596              		.cfi_endproc
 5597              	.LFE42:
 5599              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 5600              		.align	1
 5601              		.syntax unified
 5602              		.thumb
 5603              		.thumb_func
 5605              	prvInitialiseTaskLists:
 5606              	.LFB43:
3453:ThirdParty/FreeRTOS/tasks.c ****         }
3454:ThirdParty/FreeRTOS/tasks.c ****         #endif /* configUSE_PREEMPTION */
3455:ThirdParty/FreeRTOS/tasks.c **** 
3456:ThirdParty/FreeRTOS/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3457:ThirdParty/FreeRTOS/tasks.c ****         {
3458:ThirdParty/FreeRTOS/tasks.c ****             /* When using preemption tasks of equal priority will be
3459:ThirdParty/FreeRTOS/tasks.c ****              * timesliced.  If a task that is sharing the idle priority is ready
3460:ThirdParty/FreeRTOS/tasks.c ****              * to run then the idle task should yield before the end of the
3461:ThirdParty/FreeRTOS/tasks.c ****              * timeslice.
3462:ThirdParty/FreeRTOS/tasks.c ****              *
3463:ThirdParty/FreeRTOS/tasks.c ****              * A critical region is not required here as we are just reading from
3464:ThirdParty/FreeRTOS/tasks.c ****              * the list, and an occasional incorrect value will not matter.  If
3465:ThirdParty/FreeRTOS/tasks.c ****              * the ready list at the idle priority contains more than one task
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 164


3466:ThirdParty/FreeRTOS/tasks.c ****              * then a task other than the idle task is ready to execute. */
3467:ThirdParty/FreeRTOS/tasks.c ****             if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType
3468:ThirdParty/FreeRTOS/tasks.c ****             {
3469:ThirdParty/FreeRTOS/tasks.c ****                 taskYIELD();
3470:ThirdParty/FreeRTOS/tasks.c ****             }
3471:ThirdParty/FreeRTOS/tasks.c ****             else
3472:ThirdParty/FreeRTOS/tasks.c ****             {
3473:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3474:ThirdParty/FreeRTOS/tasks.c ****             }
3475:ThirdParty/FreeRTOS/tasks.c ****         }
3476:ThirdParty/FreeRTOS/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3477:ThirdParty/FreeRTOS/tasks.c **** 
3478:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_IDLE_HOOK == 1 )
3479:ThirdParty/FreeRTOS/tasks.c ****         {
3480:ThirdParty/FreeRTOS/tasks.c ****             extern void vApplicationIdleHook( void );
3481:ThirdParty/FreeRTOS/tasks.c **** 
3482:ThirdParty/FreeRTOS/tasks.c ****             /* Call the user defined function from within the idle task.  This
3483:ThirdParty/FreeRTOS/tasks.c ****              * allows the application designer to add background functionality
3484:ThirdParty/FreeRTOS/tasks.c ****              * without the overhead of a separate task.
3485:ThirdParty/FreeRTOS/tasks.c ****              * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3486:ThirdParty/FreeRTOS/tasks.c ****              * CALL A FUNCTION THAT MIGHT BLOCK. */
3487:ThirdParty/FreeRTOS/tasks.c ****             vApplicationIdleHook();
3488:ThirdParty/FreeRTOS/tasks.c ****         }
3489:ThirdParty/FreeRTOS/tasks.c ****         #endif /* configUSE_IDLE_HOOK */
3490:ThirdParty/FreeRTOS/tasks.c **** 
3491:ThirdParty/FreeRTOS/tasks.c ****         /* This conditional compilation should use inequality to 0, not equality
3492:ThirdParty/FreeRTOS/tasks.c ****          * to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3493:ThirdParty/FreeRTOS/tasks.c ****          * user defined low power mode  implementations require
3494:ThirdParty/FreeRTOS/tasks.c ****          * configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3495:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3496:ThirdParty/FreeRTOS/tasks.c ****         {
3497:ThirdParty/FreeRTOS/tasks.c ****             TickType_t xExpectedIdleTime;
3498:ThirdParty/FreeRTOS/tasks.c **** 
3499:ThirdParty/FreeRTOS/tasks.c ****             /* It is not desirable to suspend then resume the scheduler on
3500:ThirdParty/FreeRTOS/tasks.c ****              * each iteration of the idle task.  Therefore, a preliminary
3501:ThirdParty/FreeRTOS/tasks.c ****              * test of the expected idle time is performed without the
3502:ThirdParty/FreeRTOS/tasks.c ****              * scheduler suspended.  The result here is not necessarily
3503:ThirdParty/FreeRTOS/tasks.c ****              * valid. */
3504:ThirdParty/FreeRTOS/tasks.c ****             xExpectedIdleTime = prvGetExpectedIdleTime();
3505:ThirdParty/FreeRTOS/tasks.c **** 
3506:ThirdParty/FreeRTOS/tasks.c ****             if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3507:ThirdParty/FreeRTOS/tasks.c ****             {
3508:ThirdParty/FreeRTOS/tasks.c ****                 vTaskSuspendAll();
3509:ThirdParty/FreeRTOS/tasks.c ****                 {
3510:ThirdParty/FreeRTOS/tasks.c ****                     /* Now the scheduler is suspended, the expected idle
3511:ThirdParty/FreeRTOS/tasks.c ****                      * time can be sampled again, and this time its value can
3512:ThirdParty/FreeRTOS/tasks.c ****                      * be used. */
3513:ThirdParty/FreeRTOS/tasks.c ****                     configASSERT( xNextTaskUnblockTime >= xTickCount );
3514:ThirdParty/FreeRTOS/tasks.c ****                     xExpectedIdleTime = prvGetExpectedIdleTime();
3515:ThirdParty/FreeRTOS/tasks.c **** 
3516:ThirdParty/FreeRTOS/tasks.c ****                     /* Define the following macro to set xExpectedIdleTime to 0
3517:ThirdParty/FreeRTOS/tasks.c ****                      * if the application does not want
3518:ThirdParty/FreeRTOS/tasks.c ****                      * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3519:ThirdParty/FreeRTOS/tasks.c ****                     configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3520:ThirdParty/FreeRTOS/tasks.c **** 
3521:ThirdParty/FreeRTOS/tasks.c ****                     if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3522:ThirdParty/FreeRTOS/tasks.c ****                     {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 165


3523:ThirdParty/FreeRTOS/tasks.c ****                         traceLOW_POWER_IDLE_BEGIN();
3524:ThirdParty/FreeRTOS/tasks.c ****                         portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3525:ThirdParty/FreeRTOS/tasks.c ****                         traceLOW_POWER_IDLE_END();
3526:ThirdParty/FreeRTOS/tasks.c ****                     }
3527:ThirdParty/FreeRTOS/tasks.c ****                     else
3528:ThirdParty/FreeRTOS/tasks.c ****                     {
3529:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
3530:ThirdParty/FreeRTOS/tasks.c ****                     }
3531:ThirdParty/FreeRTOS/tasks.c ****                 }
3532:ThirdParty/FreeRTOS/tasks.c ****                 ( void ) xTaskResumeAll();
3533:ThirdParty/FreeRTOS/tasks.c ****             }
3534:ThirdParty/FreeRTOS/tasks.c ****             else
3535:ThirdParty/FreeRTOS/tasks.c ****             {
3536:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3537:ThirdParty/FreeRTOS/tasks.c ****             }
3538:ThirdParty/FreeRTOS/tasks.c ****         }
3539:ThirdParty/FreeRTOS/tasks.c ****         #endif /* configUSE_TICKLESS_IDLE */
3540:ThirdParty/FreeRTOS/tasks.c ****     }
3541:ThirdParty/FreeRTOS/tasks.c **** }
3542:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3543:ThirdParty/FreeRTOS/tasks.c **** 
3544:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
3545:ThirdParty/FreeRTOS/tasks.c **** 
3546:ThirdParty/FreeRTOS/tasks.c ****     eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3547:ThirdParty/FreeRTOS/tasks.c ****     {
3548:ThirdParty/FreeRTOS/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3549:ThirdParty/FreeRTOS/tasks.c ****             /* The idle task exists in addition to the application tasks. */
3550:ThirdParty/FreeRTOS/tasks.c ****             const UBaseType_t uxNonApplicationTasks = 1;
3551:ThirdParty/FreeRTOS/tasks.c ****         #endif /* INCLUDE_vTaskSuspend */
3552:ThirdParty/FreeRTOS/tasks.c **** 
3553:ThirdParty/FreeRTOS/tasks.c ****         eSleepModeStatus eReturn = eStandardSleep;
3554:ThirdParty/FreeRTOS/tasks.c **** 
3555:ThirdParty/FreeRTOS/tasks.c ****         /* This function must be called from a critical section. */
3556:ThirdParty/FreeRTOS/tasks.c **** 
3557:ThirdParty/FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3558:ThirdParty/FreeRTOS/tasks.c ****         {
3559:ThirdParty/FreeRTOS/tasks.c ****             /* A task was made ready while the scheduler was suspended. */
3560:ThirdParty/FreeRTOS/tasks.c ****             eReturn = eAbortSleep;
3561:ThirdParty/FreeRTOS/tasks.c ****         }
3562:ThirdParty/FreeRTOS/tasks.c ****         else if( xYieldPending != pdFALSE )
3563:ThirdParty/FreeRTOS/tasks.c ****         {
3564:ThirdParty/FreeRTOS/tasks.c ****             /* A yield was pended while the scheduler was suspended. */
3565:ThirdParty/FreeRTOS/tasks.c ****             eReturn = eAbortSleep;
3566:ThirdParty/FreeRTOS/tasks.c ****         }
3567:ThirdParty/FreeRTOS/tasks.c ****         else if( xPendedTicks != 0 )
3568:ThirdParty/FreeRTOS/tasks.c ****         {
3569:ThirdParty/FreeRTOS/tasks.c ****             /* A tick interrupt has already occurred but was held pending
3570:ThirdParty/FreeRTOS/tasks.c ****              * because the scheduler is suspended. */
3571:ThirdParty/FreeRTOS/tasks.c ****             eReturn = eAbortSleep;
3572:ThirdParty/FreeRTOS/tasks.c ****         }
3573:ThirdParty/FreeRTOS/tasks.c **** 
3574:ThirdParty/FreeRTOS/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3575:ThirdParty/FreeRTOS/tasks.c ****             else if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - u
3576:ThirdParty/FreeRTOS/tasks.c ****             {
3577:ThirdParty/FreeRTOS/tasks.c ****                 /* If all the tasks are in the suspended list (which might mean they
3578:ThirdParty/FreeRTOS/tasks.c ****                  * have an infinite block time rather than actually being suspended)
3579:ThirdParty/FreeRTOS/tasks.c ****                  * then it is safe to turn all clocks off and just wait for external
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 166


3580:ThirdParty/FreeRTOS/tasks.c ****                  * interrupts. */
3581:ThirdParty/FreeRTOS/tasks.c ****                 eReturn = eNoTasksWaitingTimeout;
3582:ThirdParty/FreeRTOS/tasks.c ****             }
3583:ThirdParty/FreeRTOS/tasks.c ****         #endif /* INCLUDE_vTaskSuspend */
3584:ThirdParty/FreeRTOS/tasks.c ****         else
3585:ThirdParty/FreeRTOS/tasks.c ****         {
3586:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3587:ThirdParty/FreeRTOS/tasks.c ****         }
3588:ThirdParty/FreeRTOS/tasks.c **** 
3589:ThirdParty/FreeRTOS/tasks.c ****         return eReturn;
3590:ThirdParty/FreeRTOS/tasks.c ****     }
3591:ThirdParty/FreeRTOS/tasks.c **** 
3592:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3593:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3594:ThirdParty/FreeRTOS/tasks.c **** 
3595:ThirdParty/FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3596:ThirdParty/FreeRTOS/tasks.c **** 
3597:ThirdParty/FreeRTOS/tasks.c ****     void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
3598:ThirdParty/FreeRTOS/tasks.c ****                                             BaseType_t xIndex,
3599:ThirdParty/FreeRTOS/tasks.c ****                                             void * pvValue )
3600:ThirdParty/FreeRTOS/tasks.c ****     {
3601:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3602:ThirdParty/FreeRTOS/tasks.c **** 
3603:ThirdParty/FreeRTOS/tasks.c ****         if( ( xIndex >= 0 ) &&
3604:ThirdParty/FreeRTOS/tasks.c ****             ( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS ) )
3605:ThirdParty/FreeRTOS/tasks.c ****         {
3606:ThirdParty/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSet );
3607:ThirdParty/FreeRTOS/tasks.c ****             configASSERT( pxTCB != NULL );
3608:ThirdParty/FreeRTOS/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3609:ThirdParty/FreeRTOS/tasks.c ****         }
3610:ThirdParty/FreeRTOS/tasks.c ****     }
3611:ThirdParty/FreeRTOS/tasks.c **** 
3612:ThirdParty/FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3613:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3614:ThirdParty/FreeRTOS/tasks.c **** 
3615:ThirdParty/FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3616:ThirdParty/FreeRTOS/tasks.c **** 
3617:ThirdParty/FreeRTOS/tasks.c ****     void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
3618:ThirdParty/FreeRTOS/tasks.c ****                                                BaseType_t xIndex )
3619:ThirdParty/FreeRTOS/tasks.c ****     {
3620:ThirdParty/FreeRTOS/tasks.c ****         void * pvReturn = NULL;
3621:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3622:ThirdParty/FreeRTOS/tasks.c **** 
3623:ThirdParty/FreeRTOS/tasks.c ****         if( ( xIndex >= 0 ) &&
3624:ThirdParty/FreeRTOS/tasks.c ****             ( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS ) )
3625:ThirdParty/FreeRTOS/tasks.c ****         {
3626:ThirdParty/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3627:ThirdParty/FreeRTOS/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3628:ThirdParty/FreeRTOS/tasks.c ****         }
3629:ThirdParty/FreeRTOS/tasks.c ****         else
3630:ThirdParty/FreeRTOS/tasks.c ****         {
3631:ThirdParty/FreeRTOS/tasks.c ****             pvReturn = NULL;
3632:ThirdParty/FreeRTOS/tasks.c ****         }
3633:ThirdParty/FreeRTOS/tasks.c **** 
3634:ThirdParty/FreeRTOS/tasks.c ****         return pvReturn;
3635:ThirdParty/FreeRTOS/tasks.c ****     }
3636:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 167


3637:ThirdParty/FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3638:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3639:ThirdParty/FreeRTOS/tasks.c **** 
3640:ThirdParty/FreeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3641:ThirdParty/FreeRTOS/tasks.c **** 
3642:ThirdParty/FreeRTOS/tasks.c ****     void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
3643:ThirdParty/FreeRTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions )
3644:ThirdParty/FreeRTOS/tasks.c ****     {
3645:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3646:ThirdParty/FreeRTOS/tasks.c **** 
3647:ThirdParty/FreeRTOS/tasks.c ****         /* If null is passed in here then we are modifying the MPU settings of
3648:ThirdParty/FreeRTOS/tasks.c ****          * the calling task. */
3649:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTaskToModify );
3650:ThirdParty/FreeRTOS/tasks.c **** 
3651:ThirdParty/FreeRTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3652:ThirdParty/FreeRTOS/tasks.c ****     }
3653:ThirdParty/FreeRTOS/tasks.c **** 
3654:ThirdParty/FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3655:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3656:ThirdParty/FreeRTOS/tasks.c **** 
3657:ThirdParty/FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
3658:ThirdParty/FreeRTOS/tasks.c **** {
 5607              		.loc 1 3658 1
 5608              		.cfi_startproc
 5609              		@ args = 0, pretend = 0, frame = 8
 5610              		@ frame_needed = 1, uses_anonymous_args = 0
 5611 0000 80B5     		push	{r7, lr}
 5612              	.LCFI194:
 5613              		.cfi_def_cfa_offset 8
 5614              		.cfi_offset 7, -8
 5615              		.cfi_offset 14, -4
 5616 0002 82B0     		sub	sp, sp, #8
 5617              	.LCFI195:
 5618              		.cfi_def_cfa_offset 16
 5619 0004 00AF     		add	r7, sp, #0
 5620              	.LCFI196:
 5621              		.cfi_def_cfa_register 7
3659:ThirdParty/FreeRTOS/tasks.c ****     UBaseType_t uxPriority;
3660:ThirdParty/FreeRTOS/tasks.c **** 
3661:ThirdParty/FreeRTOS/tasks.c ****     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPrio
 5622              		.loc 1 3661 21
 5623 0006 0023     		movs	r3, #0
 5624 0008 7B60     		str	r3, [r7, #4]
 5625              		.loc 1 3661 5
 5626 000a 0CE0     		b	.L315
 5627              	.L316:
3662:ThirdParty/FreeRTOS/tasks.c ****     {
3663:ThirdParty/FreeRTOS/tasks.c ****         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 5628              		.loc 1 3663 9 discriminator 3
 5629 000c 7A68     		ldr	r2, [r7, #4]
 5630 000e 1346     		mov	r3, r2
 5631 0010 9B00     		lsls	r3, r3, #2
 5632 0012 1344     		add	r3, r3, r2
 5633 0014 9B00     		lsls	r3, r3, #2
 5634 0016 124A     		ldr	r2, .L317
 5635 0018 1344     		add	r3, r3, r2
 5636 001a 1846     		mov	r0, r3
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 168


 5637 001c FFF7FEFF 		bl	vListInitialise
3661:ThirdParty/FreeRTOS/tasks.c ****     {
 5638              		.loc 1 3661 104 discriminator 3
 5639 0020 7B68     		ldr	r3, [r7, #4]
 5640 0022 0133     		adds	r3, r3, #1
 5641 0024 7B60     		str	r3, [r7, #4]
 5642              	.L315:
3661:ThirdParty/FreeRTOS/tasks.c ****     {
 5643              		.loc 1 3661 5 discriminator 1
 5644 0026 7B68     		ldr	r3, [r7, #4]
 5645 0028 042B     		cmp	r3, #4
 5646 002a EFD9     		bls	.L316
3664:ThirdParty/FreeRTOS/tasks.c ****     }
3665:ThirdParty/FreeRTOS/tasks.c **** 
3666:ThirdParty/FreeRTOS/tasks.c ****     vListInitialise( &xDelayedTaskList1 );
 5647              		.loc 1 3666 5
 5648 002c 0D48     		ldr	r0, .L317+4
 5649 002e FFF7FEFF 		bl	vListInitialise
3667:ThirdParty/FreeRTOS/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
 5650              		.loc 1 3667 5
 5651 0032 0D48     		ldr	r0, .L317+8
 5652 0034 FFF7FEFF 		bl	vListInitialise
3668:ThirdParty/FreeRTOS/tasks.c ****     vListInitialise( &xPendingReadyList );
 5653              		.loc 1 3668 5
 5654 0038 0C48     		ldr	r0, .L317+12
 5655 003a FFF7FEFF 		bl	vListInitialise
3669:ThirdParty/FreeRTOS/tasks.c **** 
3670:ThirdParty/FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3671:ThirdParty/FreeRTOS/tasks.c ****     {
3672:ThirdParty/FreeRTOS/tasks.c ****         vListInitialise( &xTasksWaitingTermination );
 5656              		.loc 1 3672 9
 5657 003e 0C48     		ldr	r0, .L317+16
 5658 0040 FFF7FEFF 		bl	vListInitialise
3673:ThirdParty/FreeRTOS/tasks.c ****     }
3674:ThirdParty/FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3675:ThirdParty/FreeRTOS/tasks.c **** 
3676:ThirdParty/FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
3677:ThirdParty/FreeRTOS/tasks.c ****     {
3678:ThirdParty/FreeRTOS/tasks.c ****         vListInitialise( &xSuspendedTaskList );
 5659              		.loc 1 3678 9
 5660 0044 0B48     		ldr	r0, .L317+20
 5661 0046 FFF7FEFF 		bl	vListInitialise
3679:ThirdParty/FreeRTOS/tasks.c ****     }
3680:ThirdParty/FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
3681:ThirdParty/FreeRTOS/tasks.c **** 
3682:ThirdParty/FreeRTOS/tasks.c ****     /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3683:ThirdParty/FreeRTOS/tasks.c ****      * using list2. */
3684:ThirdParty/FreeRTOS/tasks.c ****     pxDelayedTaskList = &xDelayedTaskList1;
 5662              		.loc 1 3684 23
 5663 004a 0B4B     		ldr	r3, .L317+24
 5664 004c 054A     		ldr	r2, .L317+4
 5665 004e 1A60     		str	r2, [r3]
3685:ThirdParty/FreeRTOS/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 5666              		.loc 1 3685 31
 5667 0050 0A4B     		ldr	r3, .L317+28
 5668 0052 054A     		ldr	r2, .L317+8
 5669 0054 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 169


3686:ThirdParty/FreeRTOS/tasks.c **** }
 5670              		.loc 1 3686 1
 5671 0056 00BF     		nop
 5672 0058 0837     		adds	r7, r7, #8
 5673              	.LCFI197:
 5674              		.cfi_def_cfa_offset 8
 5675 005a BD46     		mov	sp, r7
 5676              	.LCFI198:
 5677              		.cfi_def_cfa_register 13
 5678              		@ sp needed
 5679 005c 80BD     		pop	{r7, pc}
 5680              	.L318:
 5681 005e 00BF     		.align	2
 5682              	.L317:
 5683 0060 00000000 		.word	pxReadyTasksLists
 5684 0064 00000000 		.word	xDelayedTaskList1
 5685 0068 00000000 		.word	xDelayedTaskList2
 5686 006c 00000000 		.word	xPendingReadyList
 5687 0070 00000000 		.word	xTasksWaitingTermination
 5688 0074 00000000 		.word	xSuspendedTaskList
 5689 0078 00000000 		.word	pxDelayedTaskList
 5690 007c 00000000 		.word	pxOverflowDelayedTaskList
 5691              		.cfi_endproc
 5692              	.LFE43:
 5694              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 5695              		.align	1
 5696              		.syntax unified
 5697              		.thumb
 5698              		.thumb_func
 5700              	prvCheckTasksWaitingTermination:
 5701              	.LFB44:
3687:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3688:ThirdParty/FreeRTOS/tasks.c **** 
3689:ThirdParty/FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3690:ThirdParty/FreeRTOS/tasks.c **** {
 5702              		.loc 1 3690 1
 5703              		.cfi_startproc
 5704              		@ args = 0, pretend = 0, frame = 8
 5705              		@ frame_needed = 1, uses_anonymous_args = 0
 5706 0000 80B5     		push	{r7, lr}
 5707              	.LCFI199:
 5708              		.cfi_def_cfa_offset 8
 5709              		.cfi_offset 7, -8
 5710              		.cfi_offset 14, -4
 5711 0002 82B0     		sub	sp, sp, #8
 5712              	.LCFI200:
 5713              		.cfi_def_cfa_offset 16
 5714 0004 00AF     		add	r7, sp, #0
 5715              	.LCFI201:
 5716              		.cfi_def_cfa_register 7
 5717              	.LBB256:
3691:ThirdParty/FreeRTOS/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3692:ThirdParty/FreeRTOS/tasks.c **** 
3693:ThirdParty/FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3694:ThirdParty/FreeRTOS/tasks.c ****     {
3695:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3696:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 170


3697:ThirdParty/FreeRTOS/tasks.c ****         /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3698:ThirdParty/FreeRTOS/tasks.c ****          * being called too often in the idle task. */
3699:ThirdParty/FreeRTOS/tasks.c ****         while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 5718              		.loc 1 3699 14
 5719 0006 19E0     		b	.L320
 5720              	.L321:
3700:ThirdParty/FreeRTOS/tasks.c ****         {
3701:ThirdParty/FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
 5721              		.loc 1 3701 13
 5722 0008 FFF7FEFF 		bl	vPortEnterCritical
3702:ThirdParty/FreeRTOS/tasks.c ****             {
3703:ThirdParty/FreeRTOS/tasks.c ****                 pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079
 5723              		.loc 1 3703 25
 5724 000c 104B     		ldr	r3, .L322
 5725 000e DB68     		ldr	r3, [r3, #12]
 5726              		.loc 1 3703 23
 5727 0010 DB68     		ldr	r3, [r3, #12]
 5728 0012 7B60     		str	r3, [r7, #4]
3704:ThirdParty/FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5729              		.loc 1 3704 26
 5730 0014 7B68     		ldr	r3, [r7, #4]
 5731 0016 0433     		adds	r3, r3, #4
 5732 0018 1846     		mov	r0, r3
 5733 001a FFF7FEFF 		bl	uxListRemove
3705:ThirdParty/FreeRTOS/tasks.c ****                 --uxCurrentNumberOfTasks;
 5734              		.loc 1 3705 17
 5735 001e 0D4B     		ldr	r3, .L322+4
 5736 0020 1B68     		ldr	r3, [r3]
 5737 0022 013B     		subs	r3, r3, #1
 5738 0024 0B4A     		ldr	r2, .L322+4
 5739 0026 1360     		str	r3, [r2]
3706:ThirdParty/FreeRTOS/tasks.c ****                 --uxDeletedTasksWaitingCleanUp;
 5740              		.loc 1 3706 17
 5741 0028 0B4B     		ldr	r3, .L322+8
 5742 002a 1B68     		ldr	r3, [r3]
 5743 002c 013B     		subs	r3, r3, #1
 5744 002e 0A4A     		ldr	r2, .L322+8
 5745 0030 1360     		str	r3, [r2]
3707:ThirdParty/FreeRTOS/tasks.c ****             }
3708:ThirdParty/FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
 5746              		.loc 1 3708 13
 5747 0032 FFF7FEFF 		bl	vPortExitCritical
3709:ThirdParty/FreeRTOS/tasks.c **** 
3710:ThirdParty/FreeRTOS/tasks.c ****             prvDeleteTCB( pxTCB );
 5748              		.loc 1 3710 13
 5749 0036 7868     		ldr	r0, [r7, #4]
 5750 0038 FFF7FEFF 		bl	prvDeleteTCB
 5751              	.L320:
3699:ThirdParty/FreeRTOS/tasks.c ****         {
 5752              		.loc 1 3699 45
 5753 003c 064B     		ldr	r3, .L322+8
 5754 003e 1B68     		ldr	r3, [r3]
3699:ThirdParty/FreeRTOS/tasks.c ****         {
 5755              		.loc 1 3699 14
 5756 0040 002B     		cmp	r3, #0
 5757 0042 E1D1     		bne	.L321
 5758              	.LBE256:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 171


3711:ThirdParty/FreeRTOS/tasks.c ****         }
3712:ThirdParty/FreeRTOS/tasks.c ****     }
3713:ThirdParty/FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3714:ThirdParty/FreeRTOS/tasks.c **** }
 5759              		.loc 1 3714 1
 5760 0044 00BF     		nop
 5761 0046 00BF     		nop
 5762 0048 0837     		adds	r7, r7, #8
 5763              	.LCFI202:
 5764              		.cfi_def_cfa_offset 8
 5765 004a BD46     		mov	sp, r7
 5766              	.LCFI203:
 5767              		.cfi_def_cfa_register 13
 5768              		@ sp needed
 5769 004c 80BD     		pop	{r7, pc}
 5770              	.L323:
 5771 004e 00BF     		.align	2
 5772              	.L322:
 5773 0050 00000000 		.word	xTasksWaitingTermination
 5774 0054 00000000 		.word	uxCurrentNumberOfTasks
 5775 0058 00000000 		.word	uxDeletedTasksWaitingCleanUp
 5776              		.cfi_endproc
 5777              	.LFE44:
 5779              		.section	.text.vTaskGetInfo,"ax",%progbits
 5780              		.align	1
 5781              		.global	vTaskGetInfo
 5782              		.syntax unified
 5783              		.thumb
 5784              		.thumb_func
 5786              	vTaskGetInfo:
 5787              	.LFB45:
3715:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3716:ThirdParty/FreeRTOS/tasks.c **** 
3717:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3718:ThirdParty/FreeRTOS/tasks.c **** 
3719:ThirdParty/FreeRTOS/tasks.c ****     void vTaskGetInfo( TaskHandle_t xTask,
3720:ThirdParty/FreeRTOS/tasks.c ****                        TaskStatus_t * pxTaskStatus,
3721:ThirdParty/FreeRTOS/tasks.c ****                        BaseType_t xGetFreeStackSpace,
3722:ThirdParty/FreeRTOS/tasks.c ****                        eTaskState eState )
3723:ThirdParty/FreeRTOS/tasks.c ****     {
 5788              		.loc 1 3723 5
 5789              		.cfi_startproc
 5790              		@ args = 0, pretend = 0, frame = 24
 5791              		@ frame_needed = 1, uses_anonymous_args = 0
 5792 0000 80B5     		push	{r7, lr}
 5793              	.LCFI204:
 5794              		.cfi_def_cfa_offset 8
 5795              		.cfi_offset 7, -8
 5796              		.cfi_offset 14, -4
 5797 0002 86B0     		sub	sp, sp, #24
 5798              	.LCFI205:
 5799              		.cfi_def_cfa_offset 32
 5800 0004 00AF     		add	r7, sp, #0
 5801              	.LCFI206:
 5802              		.cfi_def_cfa_register 7
 5803 0006 F860     		str	r0, [r7, #12]
 5804 0008 B960     		str	r1, [r7, #8]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 172


 5805 000a 7A60     		str	r2, [r7, #4]
 5806 000c FB70     		strb	r3, [r7, #3]
3724:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3725:ThirdParty/FreeRTOS/tasks.c **** 
3726:ThirdParty/FreeRTOS/tasks.c ****         /* xTask is NULL then get the state of the calling task. */
3727:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
 5807              		.loc 1 3727 17
 5808 000e FB68     		ldr	r3, [r7, #12]
 5809 0010 002B     		cmp	r3, #0
 5810 0012 02D1     		bne	.L325
 5811              		.loc 1 3727 17 is_stmt 0 discriminator 1
 5812 0014 2C4B     		ldr	r3, .L334
 5813 0016 1B68     		ldr	r3, [r3]
 5814 0018 00E0     		b	.L326
 5815              	.L325:
 5816              		.loc 1 3727 17 discriminator 2
 5817 001a FB68     		ldr	r3, [r7, #12]
 5818              	.L326:
 5819              		.loc 1 3727 15 is_stmt 1 discriminator 4
 5820 001c 7B61     		str	r3, [r7, #20]
3728:ThirdParty/FreeRTOS/tasks.c **** 
3729:ThirdParty/FreeRTOS/tasks.c ****         pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 5821              		.loc 1 3729 31 discriminator 4
 5822 001e BB68     		ldr	r3, [r7, #8]
 5823 0020 7A69     		ldr	r2, [r7, #20]
 5824 0022 1A60     		str	r2, [r3]
3730:ThirdParty/FreeRTOS/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 5825              		.loc 1 3730 53 discriminator 4
 5826 0024 7B69     		ldr	r3, [r7, #20]
 5827 0026 03F13402 		add	r2, r3, #52
 5828              		.loc 1 3730 34 discriminator 4
 5829 002a BB68     		ldr	r3, [r7, #8]
 5830 002c 5A60     		str	r2, [r3, #4]
3731:ThirdParty/FreeRTOS/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5831              		.loc 1 3731 48 discriminator 4
 5832 002e 7B69     		ldr	r3, [r7, #20]
 5833 0030 DA6A     		ldr	r2, [r3, #44]
 5834              		.loc 1 3731 41 discriminator 4
 5835 0032 BB68     		ldr	r3, [r7, #8]
 5836 0034 1A61     		str	r2, [r3, #16]
3732:ThirdParty/FreeRTOS/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5837              		.loc 1 3732 42 discriminator 4
 5838 0036 7B69     		ldr	r3, [r7, #20]
 5839 0038 1A6B     		ldr	r2, [r3, #48]
 5840              		.loc 1 3732 35 discriminator 4
 5841 003a BB68     		ldr	r3, [r7, #8]
 5842 003c DA61     		str	r2, [r3, #28]
3733:ThirdParty/FreeRTOS/tasks.c ****         #if ( ( portSTACK_GROWTH > 0 ) && ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
3734:ThirdParty/FreeRTOS/tasks.c ****             pxTaskStatus->pxTopOfStack = pxTCB->pxTopOfStack;
3735:ThirdParty/FreeRTOS/tasks.c ****             pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
3736:ThirdParty/FreeRTOS/tasks.c ****         #endif
3737:ThirdParty/FreeRTOS/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5843              		.loc 1 3737 42 discriminator 4
 5844 003e 7B69     		ldr	r3, [r7, #20]
 5845 0040 1A6C     		ldr	r2, [r3, #64]
 5846              		.loc 1 3737 35 discriminator 4
 5847 0042 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 173


 5848 0044 9A60     		str	r2, [r3, #8]
3738:ThirdParty/FreeRTOS/tasks.c **** 
3739:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_MUTEXES == 1 )
3740:ThirdParty/FreeRTOS/tasks.c ****         {
3741:ThirdParty/FreeRTOS/tasks.c ****             pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 5849              		.loc 1 3741 49 discriminator 4
 5850 0046 7B69     		ldr	r3, [r7, #20]
 5851 0048 9A6C     		ldr	r2, [r3, #72]
 5852              		.loc 1 3741 42 discriminator 4
 5853 004a BB68     		ldr	r3, [r7, #8]
 5854 004c 5A61     		str	r2, [r3, #20]
3742:ThirdParty/FreeRTOS/tasks.c ****         }
3743:ThirdParty/FreeRTOS/tasks.c ****         #else
3744:ThirdParty/FreeRTOS/tasks.c ****         {
3745:ThirdParty/FreeRTOS/tasks.c ****             pxTaskStatus->uxBasePriority = 0;
3746:ThirdParty/FreeRTOS/tasks.c ****         }
3747:ThirdParty/FreeRTOS/tasks.c ****         #endif
3748:ThirdParty/FreeRTOS/tasks.c **** 
3749:ThirdParty/FreeRTOS/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3750:ThirdParty/FreeRTOS/tasks.c ****         {
3751:ThirdParty/FreeRTOS/tasks.c ****             pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3752:ThirdParty/FreeRTOS/tasks.c ****         }
3753:ThirdParty/FreeRTOS/tasks.c ****         #else
3754:ThirdParty/FreeRTOS/tasks.c ****         {
3755:ThirdParty/FreeRTOS/tasks.c ****             pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 5855              		.loc 1 3755 44 discriminator 4
 5856 004e BB68     		ldr	r3, [r7, #8]
 5857 0050 0022     		movs	r2, #0
 5858 0052 9A61     		str	r2, [r3, #24]
3756:ThirdParty/FreeRTOS/tasks.c ****         }
3757:ThirdParty/FreeRTOS/tasks.c ****         #endif
3758:ThirdParty/FreeRTOS/tasks.c **** 
3759:ThirdParty/FreeRTOS/tasks.c ****         /* Obtaining the task state is a little fiddly, so is only done if the
3760:ThirdParty/FreeRTOS/tasks.c ****          * value of eState passed into this function is eInvalid - otherwise the
3761:ThirdParty/FreeRTOS/tasks.c ****          * state is just set to whatever is passed in. */
3762:ThirdParty/FreeRTOS/tasks.c ****         if( eState != eInvalid )
 5859              		.loc 1 3762 11 discriminator 4
 5860 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5861 0056 052B     		cmp	r3, #5
 5862 0058 1AD0     		beq	.L327
3763:ThirdParty/FreeRTOS/tasks.c ****         {
3764:ThirdParty/FreeRTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
 5863              		.loc 1 3764 23
 5864 005a 1B4B     		ldr	r3, .L334
 5865 005c 1B68     		ldr	r3, [r3]
 5866              		.loc 1 3764 15
 5867 005e 7A69     		ldr	r2, [r7, #20]
 5868 0060 9A42     		cmp	r2, r3
 5869 0062 03D1     		bne	.L328
3765:ThirdParty/FreeRTOS/tasks.c ****             {
3766:ThirdParty/FreeRTOS/tasks.c ****                 pxTaskStatus->eCurrentState = eRunning;
 5870              		.loc 1 3766 45
 5871 0064 BB68     		ldr	r3, [r7, #8]
 5872 0066 0022     		movs	r2, #0
 5873 0068 1A73     		strb	r2, [r3, #12]
 5874 006a 18E0     		b	.L329
 5875              	.L328:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 174


3767:ThirdParty/FreeRTOS/tasks.c ****             }
3768:ThirdParty/FreeRTOS/tasks.c ****             else
3769:ThirdParty/FreeRTOS/tasks.c ****             {
3770:ThirdParty/FreeRTOS/tasks.c ****                 pxTaskStatus->eCurrentState = eState;
 5876              		.loc 1 3770 45
 5877 006c BB68     		ldr	r3, [r7, #8]
 5878 006e FA78     		ldrb	r2, [r7, #3]
 5879 0070 1A73     		strb	r2, [r3, #12]
3771:ThirdParty/FreeRTOS/tasks.c **** 
3772:ThirdParty/FreeRTOS/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
3773:ThirdParty/FreeRTOS/tasks.c ****                 {
3774:ThirdParty/FreeRTOS/tasks.c ****                     /* If the task is in the suspended list then there is a
3775:ThirdParty/FreeRTOS/tasks.c ****                      *  chance it is actually just blocked indefinitely - so really
3776:ThirdParty/FreeRTOS/tasks.c ****                      *  it should be reported as being in the Blocked state. */
3777:ThirdParty/FreeRTOS/tasks.c ****                     if( eState == eSuspended )
 5880              		.loc 1 3777 23
 5881 0072 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5882 0074 032B     		cmp	r3, #3
 5883 0076 12D1     		bne	.L329
3778:ThirdParty/FreeRTOS/tasks.c ****                     {
3779:ThirdParty/FreeRTOS/tasks.c ****                         vTaskSuspendAll();
 5884              		.loc 1 3779 25
 5885 0078 FFF7FEFF 		bl	vTaskSuspendAll
3780:ThirdParty/FreeRTOS/tasks.c ****                         {
3781:ThirdParty/FreeRTOS/tasks.c ****                             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 5886              		.loc 1 3781 33
 5887 007c 7B69     		ldr	r3, [r7, #20]
 5888 007e 9B6A     		ldr	r3, [r3, #40]
 5889              		.loc 1 3781 31
 5890 0080 002B     		cmp	r3, #0
 5891 0082 02D0     		beq	.L330
3782:ThirdParty/FreeRTOS/tasks.c ****                             {
3783:ThirdParty/FreeRTOS/tasks.c ****                                 pxTaskStatus->eCurrentState = eBlocked;
 5892              		.loc 1 3783 61
 5893 0084 BB68     		ldr	r3, [r7, #8]
 5894 0086 0222     		movs	r2, #2
 5895 0088 1A73     		strb	r2, [r3, #12]
 5896              	.L330:
3784:ThirdParty/FreeRTOS/tasks.c ****                             }
3785:ThirdParty/FreeRTOS/tasks.c ****                         }
3786:ThirdParty/FreeRTOS/tasks.c ****                         ( void ) xTaskResumeAll();
 5897              		.loc 1 3786 34
 5898 008a FFF7FEFF 		bl	xTaskResumeAll
 5899 008e 06E0     		b	.L329
 5900              	.L327:
3787:ThirdParty/FreeRTOS/tasks.c ****                     }
3788:ThirdParty/FreeRTOS/tasks.c ****                 }
3789:ThirdParty/FreeRTOS/tasks.c ****                 #endif /* INCLUDE_vTaskSuspend */
3790:ThirdParty/FreeRTOS/tasks.c ****             }
3791:ThirdParty/FreeRTOS/tasks.c ****         }
3792:ThirdParty/FreeRTOS/tasks.c ****         else
3793:ThirdParty/FreeRTOS/tasks.c ****         {
3794:ThirdParty/FreeRTOS/tasks.c ****             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 5901              		.loc 1 3794 43
 5902 0090 7869     		ldr	r0, [r7, #20]
 5903 0092 FFF7FEFF 		bl	eTaskGetState
 5904 0096 0346     		mov	r3, r0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 175


 5905 0098 1A46     		mov	r2, r3
 5906              		.loc 1 3794 41
 5907 009a BB68     		ldr	r3, [r7, #8]
 5908 009c 1A73     		strb	r2, [r3, #12]
 5909              	.L329:
3795:ThirdParty/FreeRTOS/tasks.c ****         }
3796:ThirdParty/FreeRTOS/tasks.c **** 
3797:ThirdParty/FreeRTOS/tasks.c ****         /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3798:ThirdParty/FreeRTOS/tasks.c ****          * parameter is provided to allow it to be skipped. */
3799:ThirdParty/FreeRTOS/tasks.c ****         if( xGetFreeStackSpace != pdFALSE )
 5910              		.loc 1 3799 11
 5911 009e 7B68     		ldr	r3, [r7, #4]
 5912 00a0 002B     		cmp	r3, #0
 5913 00a2 09D0     		beq	.L331
3800:ThirdParty/FreeRTOS/tasks.c ****         {
3801:ThirdParty/FreeRTOS/tasks.c ****             #if ( portSTACK_GROWTH > 0 )
3802:ThirdParty/FreeRTOS/tasks.c ****             {
3803:ThirdParty/FreeRTOS/tasks.c ****                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTC
3804:ThirdParty/FreeRTOS/tasks.c ****             }
3805:ThirdParty/FreeRTOS/tasks.c ****             #else
3806:ThirdParty/FreeRTOS/tasks.c ****             {
3807:ThirdParty/FreeRTOS/tasks.c ****                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTC
 5914              		.loc 1 3807 101
 5915 00a4 7B69     		ldr	r3, [r7, #20]
 5916 00a6 1B6B     		ldr	r3, [r3, #48]
 5917              		.loc 1 3807 54
 5918 00a8 1846     		mov	r0, r3
 5919 00aa FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5920 00ae 0346     		mov	r3, r0
 5921 00b0 1A46     		mov	r2, r3
 5922              		.loc 1 3807 52
 5923 00b2 BB68     		ldr	r3, [r7, #8]
 5924 00b4 1A84     		strh	r2, [r3, #32]	@ movhi
3808:ThirdParty/FreeRTOS/tasks.c ****             }
3809:ThirdParty/FreeRTOS/tasks.c ****             #endif
3810:ThirdParty/FreeRTOS/tasks.c ****         }
3811:ThirdParty/FreeRTOS/tasks.c ****         else
3812:ThirdParty/FreeRTOS/tasks.c ****         {
3813:ThirdParty/FreeRTOS/tasks.c ****             pxTaskStatus->usStackHighWaterMark = 0;
3814:ThirdParty/FreeRTOS/tasks.c ****         }
3815:ThirdParty/FreeRTOS/tasks.c ****     }
 5925              		.loc 1 3815 5
 5926 00b6 02E0     		b	.L333
 5927              	.L331:
3813:ThirdParty/FreeRTOS/tasks.c ****         }
 5928              		.loc 1 3813 48
 5929 00b8 BB68     		ldr	r3, [r7, #8]
 5930 00ba 0022     		movs	r2, #0
 5931 00bc 1A84     		strh	r2, [r3, #32]	@ movhi
 5932              	.L333:
 5933              		.loc 1 3815 5
 5934 00be 00BF     		nop
 5935 00c0 1837     		adds	r7, r7, #24
 5936              	.LCFI207:
 5937              		.cfi_def_cfa_offset 8
 5938 00c2 BD46     		mov	sp, r7
 5939              	.LCFI208:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 176


 5940              		.cfi_def_cfa_register 13
 5941              		@ sp needed
 5942 00c4 80BD     		pop	{r7, pc}
 5943              	.L335:
 5944 00c6 00BF     		.align	2
 5945              	.L334:
 5946 00c8 00000000 		.word	pxCurrentTCB
 5947              		.cfi_endproc
 5948              	.LFE45:
 5950              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 5951              		.align	1
 5952              		.syntax unified
 5953              		.thumb
 5954              		.thumb_func
 5956              	prvListTasksWithinSingleList:
 5957              	.LFB46:
3816:ThirdParty/FreeRTOS/tasks.c **** 
3817:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3818:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3819:ThirdParty/FreeRTOS/tasks.c **** 
3820:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3821:ThirdParty/FreeRTOS/tasks.c **** 
3822:ThirdParty/FreeRTOS/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
3823:ThirdParty/FreeRTOS/tasks.c ****                                                      List_t * pxList,
3824:ThirdParty/FreeRTOS/tasks.c ****                                                      eTaskState eState )
3825:ThirdParty/FreeRTOS/tasks.c ****     {
 5958              		.loc 1 3825 5
 5959              		.cfi_startproc
 5960              		@ args = 0, pretend = 0, frame = 40
 5961              		@ frame_needed = 1, uses_anonymous_args = 0
 5962 0000 80B5     		push	{r7, lr}
 5963              	.LCFI209:
 5964              		.cfi_def_cfa_offset 8
 5965              		.cfi_offset 7, -8
 5966              		.cfi_offset 14, -4
 5967 0002 8AB0     		sub	sp, sp, #40
 5968              	.LCFI210:
 5969              		.cfi_def_cfa_offset 48
 5970 0004 00AF     		add	r7, sp, #0
 5971              	.LCFI211:
 5972              		.cfi_def_cfa_register 7
 5973 0006 F860     		str	r0, [r7, #12]
 5974 0008 B960     		str	r1, [r7, #8]
 5975 000a 1346     		mov	r3, r2
 5976 000c FB71     		strb	r3, [r7, #7]
3826:ThirdParty/FreeRTOS/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB;
3827:ThirdParty/FreeRTOS/tasks.c ****         configLIST_VOLATILE TCB_t * pxFirstTCB;
3828:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0;
 5977              		.loc 1 3828 21
 5978 000e 0023     		movs	r3, #0
 5979 0010 7B62     		str	r3, [r7, #36]
3829:ThirdParty/FreeRTOS/tasks.c **** 
3830:ThirdParty/FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 5980              		.loc 1 3830 13
 5981 0012 BB68     		ldr	r3, [r7, #8]
 5982 0014 1B68     		ldr	r3, [r3]
 5983              		.loc 1 3830 11
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 177


 5984 0016 002B     		cmp	r3, #0
 5985 0018 3FD0     		beq	.L337
 5986              	.LBB257:
3831:ThirdParty/FreeRTOS/tasks.c ****         {
3832:ThirdParty/FreeRTOS/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
 5987              		.loc 1 3832 13
 5988 001a BB68     		ldr	r3, [r7, #8]
 5989 001c 3B62     		str	r3, [r7, #32]
 5990 001e 3B6A     		ldr	r3, [r7, #32]
 5991 0020 5B68     		ldr	r3, [r3, #4]
 5992 0022 5A68     		ldr	r2, [r3, #4]
 5993 0024 3B6A     		ldr	r3, [r7, #32]
 5994 0026 5A60     		str	r2, [r3, #4]
 5995 0028 3B6A     		ldr	r3, [r7, #32]
 5996 002a 5A68     		ldr	r2, [r3, #4]
 5997 002c 3B6A     		ldr	r3, [r7, #32]
 5998 002e 0833     		adds	r3, r3, #8
 5999 0030 9A42     		cmp	r2, r3
 6000 0032 04D1     		bne	.L338
 6001              		.loc 1 3832 13 is_stmt 0 discriminator 1
 6002 0034 3B6A     		ldr	r3, [r7, #32]
 6003 0036 5B68     		ldr	r3, [r3, #4]
 6004 0038 5A68     		ldr	r2, [r3, #4]
 6005 003a 3B6A     		ldr	r3, [r7, #32]
 6006 003c 5A60     		str	r2, [r3, #4]
 6007              	.L338:
 6008              		.loc 1 3832 13 discriminator 3
 6009 003e 3B6A     		ldr	r3, [r7, #32]
 6010 0040 5B68     		ldr	r3, [r3, #4]
 6011 0042 DB68     		ldr	r3, [r3, #12]
 6012 0044 FB61     		str	r3, [r7, #28]
 6013              	.L340:
 6014              	.LBE257:
 6015              	.LBB258:
3833:ThirdParty/FreeRTOS/tasks.c **** 
3834:ThirdParty/FreeRTOS/tasks.c ****             /* Populate an TaskStatus_t structure within the
3835:ThirdParty/FreeRTOS/tasks.c ****              * pxTaskStatusArray array for each task that is referenced from
3836:ThirdParty/FreeRTOS/tasks.c ****              * pxList.  See the definition of TaskStatus_t in task.h for the
3837:ThirdParty/FreeRTOS/tasks.c ****              * meaning of each TaskStatus_t structure member. */
3838:ThirdParty/FreeRTOS/tasks.c ****             do
3839:ThirdParty/FreeRTOS/tasks.c ****             {
3840:ThirdParty/FreeRTOS/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
 6016              		.loc 1 3840 17 is_stmt 1
 6017 0046 BB68     		ldr	r3, [r7, #8]
 6018 0048 BB61     		str	r3, [r7, #24]
 6019 004a BB69     		ldr	r3, [r7, #24]
 6020 004c 5B68     		ldr	r3, [r3, #4]
 6021 004e 5A68     		ldr	r2, [r3, #4]
 6022 0050 BB69     		ldr	r3, [r7, #24]
 6023 0052 5A60     		str	r2, [r3, #4]
 6024 0054 BB69     		ldr	r3, [r7, #24]
 6025 0056 5A68     		ldr	r2, [r3, #4]
 6026 0058 BB69     		ldr	r3, [r7, #24]
 6027 005a 0833     		adds	r3, r3, #8
 6028 005c 9A42     		cmp	r2, r3
 6029 005e 04D1     		bne	.L339
 6030              		.loc 1 3840 17 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 178


 6031 0060 BB69     		ldr	r3, [r7, #24]
 6032 0062 5B68     		ldr	r3, [r3, #4]
 6033 0064 5A68     		ldr	r2, [r3, #4]
 6034 0066 BB69     		ldr	r3, [r7, #24]
 6035 0068 5A60     		str	r2, [r3, #4]
 6036              	.L339:
 6037              		.loc 1 3840 17 discriminator 3
 6038 006a BB69     		ldr	r3, [r7, #24]
 6039 006c 5B68     		ldr	r3, [r3, #4]
 6040 006e DB68     		ldr	r3, [r3, #12]
 6041 0070 7B61     		str	r3, [r7, #20]
 6042              	.LBE258:
3841:ThirdParty/FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 6043              		.loc 1 3841 79 is_stmt 1 discriminator 3
 6044 0072 7A6A     		ldr	r2, [r7, #36]
 6045 0074 1346     		mov	r3, r2
 6046 0076 DB00     		lsls	r3, r3, #3
 6047 0078 1344     		add	r3, r3, r2
 6048 007a 9B00     		lsls	r3, r3, #2
 6049 007c 1A46     		mov	r2, r3
 6050              		.loc 1 3841 17 discriminator 3
 6051 007e FB68     		ldr	r3, [r7, #12]
 6052 0080 9918     		adds	r1, r3, r2
 6053 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6054 0084 0122     		movs	r2, #1
 6055 0086 7869     		ldr	r0, [r7, #20]
 6056 0088 FFF7FEFF 		bl	vTaskGetInfo
3842:ThirdParty/FreeRTOS/tasks.c ****                 uxTask++;
 6057              		.loc 1 3842 23 discriminator 3
 6058 008c 7B6A     		ldr	r3, [r7, #36]
 6059 008e 0133     		adds	r3, r3, #1
 6060 0090 7B62     		str	r3, [r7, #36]
3843:ThirdParty/FreeRTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
 6061              		.loc 1 3843 13 discriminator 3
 6062 0092 7A69     		ldr	r2, [r7, #20]
 6063 0094 FB69     		ldr	r3, [r7, #28]
 6064 0096 9A42     		cmp	r2, r3
 6065 0098 D5D1     		bne	.L340
 6066              	.L337:
3844:ThirdParty/FreeRTOS/tasks.c ****         }
3845:ThirdParty/FreeRTOS/tasks.c ****         else
3846:ThirdParty/FreeRTOS/tasks.c ****         {
3847:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3848:ThirdParty/FreeRTOS/tasks.c ****         }
3849:ThirdParty/FreeRTOS/tasks.c **** 
3850:ThirdParty/FreeRTOS/tasks.c ****         return uxTask;
 6067              		.loc 1 3850 16
 6068 009a 7B6A     		ldr	r3, [r7, #36]
3851:ThirdParty/FreeRTOS/tasks.c ****     }
 6069              		.loc 1 3851 5
 6070 009c 1846     		mov	r0, r3
 6071 009e 2837     		adds	r7, r7, #40
 6072              	.LCFI212:
 6073              		.cfi_def_cfa_offset 8
 6074 00a0 BD46     		mov	sp, r7
 6075              	.LCFI213:
 6076              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 179


 6077              		@ sp needed
 6078 00a2 80BD     		pop	{r7, pc}
 6079              		.cfi_endproc
 6080              	.LFE46:
 6082              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 6083              		.align	1
 6084              		.syntax unified
 6085              		.thumb
 6086              		.thumb_func
 6088              	prvTaskCheckFreeStackSpace:
 6089              	.LFB47:
3852:ThirdParty/FreeRTOS/tasks.c **** 
3853:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3854:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3855:ThirdParty/FreeRTOS/tasks.c **** 
3856:ThirdParty/FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3857:ThirdParty/FreeRTOS/tasks.c **** 
3858:ThirdParty/FreeRTOS/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3859:ThirdParty/FreeRTOS/tasks.c ****     {
 6090              		.loc 1 3859 5
 6091              		.cfi_startproc
 6092              		@ args = 0, pretend = 0, frame = 16
 6093              		@ frame_needed = 1, uses_anonymous_args = 0
 6094              		@ link register save eliminated.
 6095 0000 80B4     		push	{r7}
 6096              	.LCFI214:
 6097              		.cfi_def_cfa_offset 4
 6098              		.cfi_offset 7, -4
 6099 0002 85B0     		sub	sp, sp, #20
 6100              	.LCFI215:
 6101              		.cfi_def_cfa_offset 24
 6102 0004 00AF     		add	r7, sp, #0
 6103              	.LCFI216:
 6104              		.cfi_def_cfa_register 7
 6105 0006 7860     		str	r0, [r7, #4]
3860:ThirdParty/FreeRTOS/tasks.c ****         uint32_t ulCount = 0U;
 6106              		.loc 1 3860 18
 6107 0008 0023     		movs	r3, #0
 6108 000a FB60     		str	r3, [r7, #12]
3861:ThirdParty/FreeRTOS/tasks.c **** 
3862:ThirdParty/FreeRTOS/tasks.c ****         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 6109              		.loc 1 3862 14
 6110 000c 05E0     		b	.L343
 6111              	.L344:
3863:ThirdParty/FreeRTOS/tasks.c ****         {
3864:ThirdParty/FreeRTOS/tasks.c ****             pucStackByte -= portSTACK_GROWTH;
 6112              		.loc 1 3864 26
 6113 000e 7B68     		ldr	r3, [r7, #4]
 6114 0010 0133     		adds	r3, r3, #1
 6115 0012 7B60     		str	r3, [r7, #4]
3865:ThirdParty/FreeRTOS/tasks.c ****             ulCount++;
 6116              		.loc 1 3865 20
 6117 0014 FB68     		ldr	r3, [r7, #12]
 6118 0016 0133     		adds	r3, r3, #1
 6119 0018 FB60     		str	r3, [r7, #12]
 6120              	.L343:
3862:ThirdParty/FreeRTOS/tasks.c ****         {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 180


 6121              		.loc 1 3862 16
 6122 001a 7B68     		ldr	r3, [r7, #4]
 6123 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
3862:ThirdParty/FreeRTOS/tasks.c ****         {
 6124              		.loc 1 3862 14
 6125 001e A52B     		cmp	r3, #165
 6126 0020 F5D0     		beq	.L344
3866:ThirdParty/FreeRTOS/tasks.c ****         }
3867:ThirdParty/FreeRTOS/tasks.c **** 
3868:ThirdParty/FreeRTOS/tasks.c ****         ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on sma
 6127              		.loc 1 3868 17
 6128 0022 FB68     		ldr	r3, [r7, #12]
 6129 0024 9B08     		lsrs	r3, r3, #2
 6130 0026 FB60     		str	r3, [r7, #12]
3869:ThirdParty/FreeRTOS/tasks.c **** 
3870:ThirdParty/FreeRTOS/tasks.c ****         return ( configSTACK_DEPTH_TYPE ) ulCount;
 6131              		.loc 1 3870 16
 6132 0028 FB68     		ldr	r3, [r7, #12]
 6133 002a 9BB2     		uxth	r3, r3
3871:ThirdParty/FreeRTOS/tasks.c ****     }
 6134              		.loc 1 3871 5
 6135 002c 1846     		mov	r0, r3
 6136 002e 1437     		adds	r7, r7, #20
 6137              	.LCFI217:
 6138              		.cfi_def_cfa_offset 4
 6139 0030 BD46     		mov	sp, r7
 6140              	.LCFI218:
 6141              		.cfi_def_cfa_register 13
 6142              		@ sp needed
 6143 0032 5DF8047B 		ldr	r7, [sp], #4
 6144              	.LCFI219:
 6145              		.cfi_restore 7
 6146              		.cfi_def_cfa_offset 0
 6147 0036 7047     		bx	lr
 6148              		.cfi_endproc
 6149              	.LFE47:
 6151              		.section	.text.prvDeleteTCB,"ax",%progbits
 6152              		.align	1
 6153              		.syntax unified
 6154              		.thumb
 6155              		.thumb_func
 6157              	prvDeleteTCB:
 6158              	.LFB48:
3872:ThirdParty/FreeRTOS/tasks.c **** 
3873:ThirdParty/FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3874:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3875:ThirdParty/FreeRTOS/tasks.c **** 
3876:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3877:ThirdParty/FreeRTOS/tasks.c **** 
3878:ThirdParty/FreeRTOS/tasks.c **** /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3879:ThirdParty/FreeRTOS/tasks.c ****  * same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3880:ThirdParty/FreeRTOS/tasks.c ****  * user to determine the return type.  It gets around the problem of the value
3881:ThirdParty/FreeRTOS/tasks.c ****  * overflowing on 8-bit types without breaking backward compatibility for
3882:ThirdParty/FreeRTOS/tasks.c ****  * applications that expect an 8-bit return type. */
3883:ThirdParty/FreeRTOS/tasks.c ****     configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3884:ThirdParty/FreeRTOS/tasks.c ****     {
3885:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 181


3886:ThirdParty/FreeRTOS/tasks.c ****         uint8_t * pucEndOfStack;
3887:ThirdParty/FreeRTOS/tasks.c ****         configSTACK_DEPTH_TYPE uxReturn;
3888:ThirdParty/FreeRTOS/tasks.c **** 
3889:ThirdParty/FreeRTOS/tasks.c ****         /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3890:ThirdParty/FreeRTOS/tasks.c ****          * the same except for their return type.  Using configSTACK_DEPTH_TYPE
3891:ThirdParty/FreeRTOS/tasks.c ****          * allows the user to determine the return type.  It gets around the
3892:ThirdParty/FreeRTOS/tasks.c ****          * problem of the value overflowing on 8-bit types without breaking
3893:ThirdParty/FreeRTOS/tasks.c ****          * backward compatibility for applications that expect an 8-bit return
3894:ThirdParty/FreeRTOS/tasks.c ****          * type. */
3895:ThirdParty/FreeRTOS/tasks.c **** 
3896:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3897:ThirdParty/FreeRTOS/tasks.c **** 
3898:ThirdParty/FreeRTOS/tasks.c ****         #if portSTACK_GROWTH < 0
3899:ThirdParty/FreeRTOS/tasks.c ****         {
3900:ThirdParty/FreeRTOS/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3901:ThirdParty/FreeRTOS/tasks.c ****         }
3902:ThirdParty/FreeRTOS/tasks.c ****         #else
3903:ThirdParty/FreeRTOS/tasks.c ****         {
3904:ThirdParty/FreeRTOS/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3905:ThirdParty/FreeRTOS/tasks.c ****         }
3906:ThirdParty/FreeRTOS/tasks.c ****         #endif
3907:ThirdParty/FreeRTOS/tasks.c **** 
3908:ThirdParty/FreeRTOS/tasks.c ****         uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3909:ThirdParty/FreeRTOS/tasks.c **** 
3910:ThirdParty/FreeRTOS/tasks.c ****         return uxReturn;
3911:ThirdParty/FreeRTOS/tasks.c ****     }
3912:ThirdParty/FreeRTOS/tasks.c **** 
3913:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3914:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3915:ThirdParty/FreeRTOS/tasks.c **** 
3916:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3917:ThirdParty/FreeRTOS/tasks.c **** 
3918:ThirdParty/FreeRTOS/tasks.c ****     UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3919:ThirdParty/FreeRTOS/tasks.c ****     {
3920:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3921:ThirdParty/FreeRTOS/tasks.c ****         uint8_t * pucEndOfStack;
3922:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
3923:ThirdParty/FreeRTOS/tasks.c **** 
3924:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3925:ThirdParty/FreeRTOS/tasks.c **** 
3926:ThirdParty/FreeRTOS/tasks.c ****         #if portSTACK_GROWTH < 0
3927:ThirdParty/FreeRTOS/tasks.c ****         {
3928:ThirdParty/FreeRTOS/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3929:ThirdParty/FreeRTOS/tasks.c ****         }
3930:ThirdParty/FreeRTOS/tasks.c ****         #else
3931:ThirdParty/FreeRTOS/tasks.c ****         {
3932:ThirdParty/FreeRTOS/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3933:ThirdParty/FreeRTOS/tasks.c ****         }
3934:ThirdParty/FreeRTOS/tasks.c ****         #endif
3935:ThirdParty/FreeRTOS/tasks.c **** 
3936:ThirdParty/FreeRTOS/tasks.c ****         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3937:ThirdParty/FreeRTOS/tasks.c **** 
3938:ThirdParty/FreeRTOS/tasks.c ****         return uxReturn;
3939:ThirdParty/FreeRTOS/tasks.c ****     }
3940:ThirdParty/FreeRTOS/tasks.c **** 
3941:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3942:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 182


3943:ThirdParty/FreeRTOS/tasks.c **** 
3944:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3945:ThirdParty/FreeRTOS/tasks.c **** 
3946:ThirdParty/FreeRTOS/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB )
3947:ThirdParty/FreeRTOS/tasks.c ****     {
 6159              		.loc 1 3947 5
 6160              		.cfi_startproc
 6161              		@ args = 0, pretend = 0, frame = 8
 6162              		@ frame_needed = 1, uses_anonymous_args = 0
 6163 0000 80B5     		push	{r7, lr}
 6164              	.LCFI220:
 6165              		.cfi_def_cfa_offset 8
 6166              		.cfi_offset 7, -8
 6167              		.cfi_offset 14, -4
 6168 0002 82B0     		sub	sp, sp, #8
 6169              	.LCFI221:
 6170              		.cfi_def_cfa_offset 16
 6171 0004 00AF     		add	r7, sp, #0
 6172              	.LCFI222:
 6173              		.cfi_def_cfa_register 7
 6174 0006 7860     		str	r0, [r7, #4]
3948:ThirdParty/FreeRTOS/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
3949:ThirdParty/FreeRTOS/tasks.c ****          * above the vPortFree() calls.  The call is also used by ports/demos that
3950:ThirdParty/FreeRTOS/tasks.c ****          * want to allocate and clean RAM statically. */
3951:ThirdParty/FreeRTOS/tasks.c ****         portCLEAN_UP_TCB( pxTCB );
3952:ThirdParty/FreeRTOS/tasks.c **** 
3953:ThirdParty/FreeRTOS/tasks.c ****         #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
3954:ThirdParty/FreeRTOS/tasks.c ****         {
3955:ThirdParty/FreeRTOS/tasks.c ****             /* Free up the memory allocated for the task's TLS Block. */
3956:ThirdParty/FreeRTOS/tasks.c ****             configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
3957:ThirdParty/FreeRTOS/tasks.c ****         }
3958:ThirdParty/FreeRTOS/tasks.c ****         #endif
3959:ThirdParty/FreeRTOS/tasks.c **** 
3960:ThirdParty/FreeRTOS/tasks.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
3961:ThirdParty/FreeRTOS/tasks.c ****         {
3962:ThirdParty/FreeRTOS/tasks.c ****             /* The task can only have been allocated dynamically - free both
3963:ThirdParty/FreeRTOS/tasks.c ****              * the stack and TCB. */
3964:ThirdParty/FreeRTOS/tasks.c ****             vPortFreeStack( pxTCB->pxStack );
 6175              		.loc 1 3964 34
 6176 0008 7B68     		ldr	r3, [r7, #4]
 6177 000a 1B6B     		ldr	r3, [r3, #48]
 6178              		.loc 1 3964 13
 6179 000c 1846     		mov	r0, r3
 6180 000e FFF7FEFF 		bl	vPortFree
3965:ThirdParty/FreeRTOS/tasks.c ****             vPortFree( pxTCB );
 6181              		.loc 1 3965 13
 6182 0012 7868     		ldr	r0, [r7, #4]
 6183 0014 FFF7FEFF 		bl	vPortFree
3966:ThirdParty/FreeRTOS/tasks.c ****         }
3967:ThirdParty/FreeRTOS/tasks.c ****         #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been
3968:ThirdParty/FreeRTOS/tasks.c ****         {
3969:ThirdParty/FreeRTOS/tasks.c ****             /* The task could have been allocated statically or dynamically, so
3970:ThirdParty/FreeRTOS/tasks.c ****              * check what was statically allocated before trying to free the
3971:ThirdParty/FreeRTOS/tasks.c ****              * memory. */
3972:ThirdParty/FreeRTOS/tasks.c ****             if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3973:ThirdParty/FreeRTOS/tasks.c ****             {
3974:ThirdParty/FreeRTOS/tasks.c ****                 /* Both the stack and TCB were allocated dynamically, so both
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 183


3975:ThirdParty/FreeRTOS/tasks.c ****                  * must be freed. */
3976:ThirdParty/FreeRTOS/tasks.c ****                 vPortFreeStack( pxTCB->pxStack );
3977:ThirdParty/FreeRTOS/tasks.c ****                 vPortFree( pxTCB );
3978:ThirdParty/FreeRTOS/tasks.c ****             }
3979:ThirdParty/FreeRTOS/tasks.c ****             else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3980:ThirdParty/FreeRTOS/tasks.c ****             {
3981:ThirdParty/FreeRTOS/tasks.c ****                 /* Only the stack was statically allocated, so the TCB is the
3982:ThirdParty/FreeRTOS/tasks.c ****                  * only memory that must be freed. */
3983:ThirdParty/FreeRTOS/tasks.c ****                 vPortFree( pxTCB );
3984:ThirdParty/FreeRTOS/tasks.c ****             }
3985:ThirdParty/FreeRTOS/tasks.c ****             else
3986:ThirdParty/FreeRTOS/tasks.c ****             {
3987:ThirdParty/FreeRTOS/tasks.c ****                 /* Neither the stack nor the TCB were allocated dynamically, so
3988:ThirdParty/FreeRTOS/tasks.c ****                  * nothing needs to be freed. */
3989:ThirdParty/FreeRTOS/tasks.c ****                 configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB
3990:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3991:ThirdParty/FreeRTOS/tasks.c ****             }
3992:ThirdParty/FreeRTOS/tasks.c ****         }
3993:ThirdParty/FreeRTOS/tasks.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3994:ThirdParty/FreeRTOS/tasks.c ****     }
 6184              		.loc 1 3994 5
 6185 0018 00BF     		nop
 6186 001a 0837     		adds	r7, r7, #8
 6187              	.LCFI223:
 6188              		.cfi_def_cfa_offset 8
 6189 001c BD46     		mov	sp, r7
 6190              	.LCFI224:
 6191              		.cfi_def_cfa_register 13
 6192              		@ sp needed
 6193 001e 80BD     		pop	{r7, pc}
 6194              		.cfi_endproc
 6195              	.LFE48:
 6197              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 6198              		.align	1
 6199              		.syntax unified
 6200              		.thumb
 6201              		.thumb_func
 6203              	prvResetNextTaskUnblockTime:
 6204              	.LFB49:
3995:ThirdParty/FreeRTOS/tasks.c **** 
3996:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3997:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3998:ThirdParty/FreeRTOS/tasks.c **** 
3999:ThirdParty/FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
4000:ThirdParty/FreeRTOS/tasks.c **** {
 6205              		.loc 1 4000 1
 6206              		.cfi_startproc
 6207              		@ args = 0, pretend = 0, frame = 0
 6208              		@ frame_needed = 1, uses_anonymous_args = 0
 6209              		@ link register save eliminated.
 6210 0000 80B4     		push	{r7}
 6211              	.LCFI225:
 6212              		.cfi_def_cfa_offset 4
 6213              		.cfi_offset 7, -4
 6214 0002 00AF     		add	r7, sp, #0
 6215              	.LCFI226:
 6216              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 184


4001:ThirdParty/FreeRTOS/tasks.c ****     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 6217              		.loc 1 4001 9
 6218 0004 0A4B     		ldr	r3, .L351
 6219 0006 1B68     		ldr	r3, [r3]
 6220 0008 1B68     		ldr	r3, [r3]
 6221              		.loc 1 4001 7
 6222 000a 002B     		cmp	r3, #0
 6223 000c 04D1     		bne	.L348
4002:ThirdParty/FreeRTOS/tasks.c ****     {
4003:ThirdParty/FreeRTOS/tasks.c ****         /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
4004:ThirdParty/FreeRTOS/tasks.c ****          * the maximum possible value so it is  extremely unlikely that the
4005:ThirdParty/FreeRTOS/tasks.c ****          * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
4006:ThirdParty/FreeRTOS/tasks.c ****          * there is an item in the delayed list. */
4007:ThirdParty/FreeRTOS/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
 6224              		.loc 1 4007 30
 6225 000e 094B     		ldr	r3, .L351+4
 6226 0010 4FF0FF32 		mov	r2, #-1
 6227 0014 1A60     		str	r2, [r3]
4008:ThirdParty/FreeRTOS/tasks.c ****     }
4009:ThirdParty/FreeRTOS/tasks.c ****     else
4010:ThirdParty/FreeRTOS/tasks.c ****     {
4011:ThirdParty/FreeRTOS/tasks.c ****         /* The new current delayed list is not empty, get the value of
4012:ThirdParty/FreeRTOS/tasks.c ****          * the item at the head of the delayed list.  This is the time at
4013:ThirdParty/FreeRTOS/tasks.c ****          * which the task at the head of the delayed list should be removed
4014:ThirdParty/FreeRTOS/tasks.c ****          * from the Blocked state. */
4015:ThirdParty/FreeRTOS/tasks.c ****         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
4016:ThirdParty/FreeRTOS/tasks.c ****     }
4017:ThirdParty/FreeRTOS/tasks.c **** }
 6228              		.loc 1 4017 1
 6229 0016 05E0     		b	.L350
 6230              	.L348:
4015:ThirdParty/FreeRTOS/tasks.c ****     }
 6231              		.loc 1 4015 32
 6232 0018 054B     		ldr	r3, .L351
 6233 001a 1B68     		ldr	r3, [r3]
 6234 001c DB68     		ldr	r3, [r3, #12]
 6235 001e 1B68     		ldr	r3, [r3]
4015:ThirdParty/FreeRTOS/tasks.c ****     }
 6236              		.loc 1 4015 30
 6237 0020 044A     		ldr	r2, .L351+4
 6238 0022 1360     		str	r3, [r2]
 6239              	.L350:
 6240              		.loc 1 4017 1
 6241 0024 00BF     		nop
 6242 0026 BD46     		mov	sp, r7
 6243              	.LCFI227:
 6244              		.cfi_def_cfa_register 13
 6245              		@ sp needed
 6246 0028 5DF8047B 		ldr	r7, [sp], #4
 6247              	.LCFI228:
 6248              		.cfi_restore 7
 6249              		.cfi_def_cfa_offset 0
 6250 002c 7047     		bx	lr
 6251              	.L352:
 6252 002e 00BF     		.align	2
 6253              	.L351:
 6254 0030 00000000 		.word	pxDelayedTaskList
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 185


 6255 0034 00000000 		.word	xNextTaskUnblockTime
 6256              		.cfi_endproc
 6257              	.LFE49:
 6259              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 6260              		.align	1
 6261              		.global	xTaskGetCurrentTaskHandle
 6262              		.syntax unified
 6263              		.thumb
 6264              		.thumb_func
 6266              	xTaskGetCurrentTaskHandle:
 6267              	.LFB50:
4018:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4019:ThirdParty/FreeRTOS/tasks.c **** 
4020:ThirdParty/FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
4021:ThirdParty/FreeRTOS/tasks.c **** 
4022:ThirdParty/FreeRTOS/tasks.c ****     TaskHandle_t xTaskGetCurrentTaskHandle( void )
4023:ThirdParty/FreeRTOS/tasks.c ****     {
 6268              		.loc 1 4023 5
 6269              		.cfi_startproc
 6270              		@ args = 0, pretend = 0, frame = 8
 6271              		@ frame_needed = 1, uses_anonymous_args = 0
 6272              		@ link register save eliminated.
 6273 0000 80B4     		push	{r7}
 6274              	.LCFI229:
 6275              		.cfi_def_cfa_offset 4
 6276              		.cfi_offset 7, -4
 6277 0002 83B0     		sub	sp, sp, #12
 6278              	.LCFI230:
 6279              		.cfi_def_cfa_offset 16
 6280 0004 00AF     		add	r7, sp, #0
 6281              	.LCFI231:
 6282              		.cfi_def_cfa_register 7
4024:ThirdParty/FreeRTOS/tasks.c ****         TaskHandle_t xReturn;
4025:ThirdParty/FreeRTOS/tasks.c **** 
4026:ThirdParty/FreeRTOS/tasks.c ****         /* A critical section is not required as this is not called from
4027:ThirdParty/FreeRTOS/tasks.c ****          * an interrupt and the current TCB will always be the same for any
4028:ThirdParty/FreeRTOS/tasks.c ****          * individual execution thread. */
4029:ThirdParty/FreeRTOS/tasks.c ****         xReturn = pxCurrentTCB;
 6283              		.loc 1 4029 17
 6284 0006 054B     		ldr	r3, .L355
 6285 0008 1B68     		ldr	r3, [r3]
 6286 000a 7B60     		str	r3, [r7, #4]
4030:ThirdParty/FreeRTOS/tasks.c **** 
4031:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
 6287              		.loc 1 4031 16
 6288 000c 7B68     		ldr	r3, [r7, #4]
4032:ThirdParty/FreeRTOS/tasks.c ****     }
 6289              		.loc 1 4032 5
 6290 000e 1846     		mov	r0, r3
 6291 0010 0C37     		adds	r7, r7, #12
 6292              	.LCFI232:
 6293              		.cfi_def_cfa_offset 4
 6294 0012 BD46     		mov	sp, r7
 6295              	.LCFI233:
 6296              		.cfi_def_cfa_register 13
 6297              		@ sp needed
 6298 0014 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 186


 6299              	.LCFI234:
 6300              		.cfi_restore 7
 6301              		.cfi_def_cfa_offset 0
 6302 0018 7047     		bx	lr
 6303              	.L356:
 6304 001a 00BF     		.align	2
 6305              	.L355:
 6306 001c 00000000 		.word	pxCurrentTCB
 6307              		.cfi_endproc
 6308              	.LFE50:
 6310              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 6311              		.align	1
 6312              		.global	xTaskGetSchedulerState
 6313              		.syntax unified
 6314              		.thumb
 6315              		.thumb_func
 6317              	xTaskGetSchedulerState:
 6318              	.LFB51:
4033:ThirdParty/FreeRTOS/tasks.c **** 
4034:ThirdParty/FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
4035:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4036:ThirdParty/FreeRTOS/tasks.c **** 
4037:ThirdParty/FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
4038:ThirdParty/FreeRTOS/tasks.c **** 
4039:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskGetSchedulerState( void )
4040:ThirdParty/FreeRTOS/tasks.c ****     {
 6319              		.loc 1 4040 5
 6320              		.cfi_startproc
 6321              		@ args = 0, pretend = 0, frame = 8
 6322              		@ frame_needed = 1, uses_anonymous_args = 0
 6323              		@ link register save eliminated.
 6324 0000 80B4     		push	{r7}
 6325              	.LCFI235:
 6326              		.cfi_def_cfa_offset 4
 6327              		.cfi_offset 7, -4
 6328 0002 83B0     		sub	sp, sp, #12
 6329              	.LCFI236:
 6330              		.cfi_def_cfa_offset 16
 6331 0004 00AF     		add	r7, sp, #0
 6332              	.LCFI237:
 6333              		.cfi_def_cfa_register 7
4041:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn;
4042:ThirdParty/FreeRTOS/tasks.c **** 
4043:ThirdParty/FreeRTOS/tasks.c ****         if( xSchedulerRunning == pdFALSE )
 6334              		.loc 1 4043 31
 6335 0006 0B4B     		ldr	r3, .L362
 6336 0008 1B68     		ldr	r3, [r3]
 6337              		.loc 1 4043 11
 6338 000a 002B     		cmp	r3, #0
 6339 000c 02D1     		bne	.L358
4044:ThirdParty/FreeRTOS/tasks.c ****         {
4045:ThirdParty/FreeRTOS/tasks.c ****             xReturn = taskSCHEDULER_NOT_STARTED;
 6340              		.loc 1 4045 21
 6341 000e 0123     		movs	r3, #1
 6342 0010 7B60     		str	r3, [r7, #4]
 6343 0012 08E0     		b	.L359
 6344              	.L358:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 187


4046:ThirdParty/FreeRTOS/tasks.c ****         }
4047:ThirdParty/FreeRTOS/tasks.c ****         else
4048:ThirdParty/FreeRTOS/tasks.c ****         {
4049:ThirdParty/FreeRTOS/tasks.c ****             if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6345              		.loc 1 4049 38
 6346 0014 084B     		ldr	r3, .L362+4
 6347 0016 1B68     		ldr	r3, [r3]
 6348              		.loc 1 4049 15
 6349 0018 002B     		cmp	r3, #0
 6350 001a 02D1     		bne	.L360
4050:ThirdParty/FreeRTOS/tasks.c ****             {
4051:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = taskSCHEDULER_RUNNING;
 6351              		.loc 1 4051 25
 6352 001c 0223     		movs	r3, #2
 6353 001e 7B60     		str	r3, [r7, #4]
 6354 0020 01E0     		b	.L359
 6355              	.L360:
4052:ThirdParty/FreeRTOS/tasks.c ****             }
4053:ThirdParty/FreeRTOS/tasks.c ****             else
4054:ThirdParty/FreeRTOS/tasks.c ****             {
4055:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = taskSCHEDULER_SUSPENDED;
 6356              		.loc 1 4055 25
 6357 0022 0023     		movs	r3, #0
 6358 0024 7B60     		str	r3, [r7, #4]
 6359              	.L359:
4056:ThirdParty/FreeRTOS/tasks.c ****             }
4057:ThirdParty/FreeRTOS/tasks.c ****         }
4058:ThirdParty/FreeRTOS/tasks.c **** 
4059:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
 6360              		.loc 1 4059 16
 6361 0026 7B68     		ldr	r3, [r7, #4]
4060:ThirdParty/FreeRTOS/tasks.c ****     }
 6362              		.loc 1 4060 5
 6363 0028 1846     		mov	r0, r3
 6364 002a 0C37     		adds	r7, r7, #12
 6365              	.LCFI238:
 6366              		.cfi_def_cfa_offset 4
 6367 002c BD46     		mov	sp, r7
 6368              	.LCFI239:
 6369              		.cfi_def_cfa_register 13
 6370              		@ sp needed
 6371 002e 5DF8047B 		ldr	r7, [sp], #4
 6372              	.LCFI240:
 6373              		.cfi_restore 7
 6374              		.cfi_def_cfa_offset 0
 6375 0032 7047     		bx	lr
 6376              	.L363:
 6377              		.align	2
 6378              	.L362:
 6379 0034 00000000 		.word	xSchedulerRunning
 6380 0038 00000000 		.word	uxSchedulerSuspended
 6381              		.cfi_endproc
 6382              	.LFE51:
 6384              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 6385              		.align	1
 6386              		.global	xTaskPriorityInherit
 6387              		.syntax unified
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 188


 6388              		.thumb
 6389              		.thumb_func
 6391              	xTaskPriorityInherit:
 6392              	.LFB52:
4061:ThirdParty/FreeRTOS/tasks.c **** 
4062:ThirdParty/FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4063:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4064:ThirdParty/FreeRTOS/tasks.c **** 
4065:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4066:ThirdParty/FreeRTOS/tasks.c **** 
4067:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4068:ThirdParty/FreeRTOS/tasks.c ****     {
 6393              		.loc 1 4068 5
 6394              		.cfi_startproc
 6395              		@ args = 0, pretend = 0, frame = 24
 6396              		@ frame_needed = 1, uses_anonymous_args = 0
 6397 0000 80B5     		push	{r7, lr}
 6398              	.LCFI241:
 6399              		.cfi_def_cfa_offset 8
 6400              		.cfi_offset 7, -8
 6401              		.cfi_offset 14, -4
 6402 0002 86B0     		sub	sp, sp, #24
 6403              	.LCFI242:
 6404              		.cfi_def_cfa_offset 32
 6405 0004 00AF     		add	r7, sp, #0
 6406              	.LCFI243:
 6407              		.cfi_def_cfa_register 7
 6408 0006 7860     		str	r0, [r7, #4]
4069:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6409              		.loc 1 4069 23
 6410 0008 7B68     		ldr	r3, [r7, #4]
 6411 000a 3B61     		str	r3, [r7, #16]
4070:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 6412              		.loc 1 4070 20
 6413 000c 0023     		movs	r3, #0
 6414 000e 7B61     		str	r3, [r7, #20]
4071:ThirdParty/FreeRTOS/tasks.c **** 
4072:ThirdParty/FreeRTOS/tasks.c ****         /* If the mutex was given back by an interrupt while the queue was
4073:ThirdParty/FreeRTOS/tasks.c ****          * locked then the mutex holder might now be NULL.  _RB_ Is this still
4074:ThirdParty/FreeRTOS/tasks.c ****          * needed as interrupts can no longer use mutexes? */
4075:ThirdParty/FreeRTOS/tasks.c ****         if( pxMutexHolder != NULL )
 6415              		.loc 1 4075 11
 6416 0010 7B68     		ldr	r3, [r7, #4]
 6417 0012 002B     		cmp	r3, #0
 6418 0014 00F08780 		beq	.L365
4076:ThirdParty/FreeRTOS/tasks.c ****         {
4077:ThirdParty/FreeRTOS/tasks.c ****             /* If the holder of the mutex has a priority below the priority of
4078:ThirdParty/FreeRTOS/tasks.c ****              * the task attempting to obtain the mutex then it will temporarily
4079:ThirdParty/FreeRTOS/tasks.c ****              * inherit the priority of the task attempting to obtain the mutex. */
4080:ThirdParty/FreeRTOS/tasks.c ****             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 6419              		.loc 1 4080 33
 6420 0018 3B69     		ldr	r3, [r7, #16]
 6421 001a DA6A     		ldr	r2, [r3, #44]
 6422              		.loc 1 4080 60
 6423 001c 444B     		ldr	r3, .L372
 6424 001e 1B68     		ldr	r3, [r3]
 6425 0020 DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 189


 6426              		.loc 1 4080 15
 6427 0022 9A42     		cmp	r2, r3
 6428 0024 76D2     		bcs	.L366
4081:ThirdParty/FreeRTOS/tasks.c ****             {
4082:ThirdParty/FreeRTOS/tasks.c ****                 /* Adjust the mutex holder state to account for its new
4083:ThirdParty/FreeRTOS/tasks.c ****                  * priority.  Only reset the event list item value if the value is
4084:ThirdParty/FreeRTOS/tasks.c ****                  * not being used for anything else. */
4085:ThirdParty/FreeRTOS/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_
 6429              		.loc 1 4085 23
 6430 0026 3B69     		ldr	r3, [r7, #16]
 6431 0028 9B69     		ldr	r3, [r3, #24]
 6432              		.loc 1 4085 19
 6433 002a 002B     		cmp	r3, #0
 6434 002c 06DB     		blt	.L367
4086:ThirdParty/FreeRTOS/tasks.c ****                 {
4087:ThirdParty/FreeRTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) 
 6435              		.loc 1 4087 21
 6436 002e 404B     		ldr	r3, .L372
 6437 0030 1B68     		ldr	r3, [r3]
 6438 0032 DB6A     		ldr	r3, [r3, #44]
 6439 0034 C3F10502 		rsb	r2, r3, #5
 6440 0038 3B69     		ldr	r3, [r7, #16]
 6441 003a 9A61     		str	r2, [r3, #24]
 6442              	.L367:
4088:ThirdParty/FreeRTOS/tasks.c ****                 }
4089:ThirdParty/FreeRTOS/tasks.c ****                 else
4090:ThirdParty/FreeRTOS/tasks.c ****                 {
4091:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4092:ThirdParty/FreeRTOS/tasks.c ****                 }
4093:ThirdParty/FreeRTOS/tasks.c **** 
4094:ThirdParty/FreeRTOS/tasks.c ****                 /* If the task being modified is in the ready state it will need
4095:ThirdParty/FreeRTOS/tasks.c ****                  * to be moved into a new list. */
4096:ThirdParty/FreeRTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] )
 6443              		.loc 1 4096 21
 6444 003c 3B69     		ldr	r3, [r7, #16]
 6445 003e 5969     		ldr	r1, [r3, #20]
 6446 0040 3B69     		ldr	r3, [r7, #16]
 6447 0042 DA6A     		ldr	r2, [r3, #44]
 6448 0044 1346     		mov	r3, r2
 6449 0046 9B00     		lsls	r3, r3, #2
 6450 0048 1344     		add	r3, r3, r2
 6451 004a 9B00     		lsls	r3, r3, #2
 6452 004c 394A     		ldr	r2, .L372+4
 6453 004e 1344     		add	r3, r3, r2
 6454              		.loc 1 4096 19
 6455 0050 9942     		cmp	r1, r3
 6456 0052 57D1     		bne	.L368
4097:ThirdParty/FreeRTOS/tasks.c ****                 {
4098:ThirdParty/FreeRTOS/tasks.c ****                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
 6457              		.loc 1 4098 25
 6458 0054 3B69     		ldr	r3, [r7, #16]
 6459 0056 0433     		adds	r3, r3, #4
 6460 0058 1846     		mov	r0, r3
 6461 005a FFF7FEFF 		bl	uxListRemove
 6462 005e 0346     		mov	r3, r0
 6463              		.loc 1 4098 23
 6464 0060 002B     		cmp	r3, #0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 190


 6465 0062 0AD1     		bne	.L369
4099:ThirdParty/FreeRTOS/tasks.c ****                     {
4100:ThirdParty/FreeRTOS/tasks.c ****                         /* It is known that the task is in its ready list so
4101:ThirdParty/FreeRTOS/tasks.c ****                          * there is no need to check again and the port level
4102:ThirdParty/FreeRTOS/tasks.c ****                          * reset macro can be called directly. */
4103:ThirdParty/FreeRTOS/tasks.c ****                         portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority 
 6466              		.loc 1 4103 25
 6467 0064 3B69     		ldr	r3, [r7, #16]
 6468 0066 DB6A     		ldr	r3, [r3, #44]
 6469 0068 0122     		movs	r2, #1
 6470 006a 02FA03F3 		lsl	r3, r2, r3
 6471 006e DA43     		mvns	r2, r3
 6472 0070 314B     		ldr	r3, .L372+8
 6473 0072 1B68     		ldr	r3, [r3]
 6474 0074 1340     		ands	r3, r3, r2
 6475 0076 304A     		ldr	r2, .L372+8
 6476 0078 1360     		str	r3, [r2]
 6477              	.L369:
4104:ThirdParty/FreeRTOS/tasks.c ****                     }
4105:ThirdParty/FreeRTOS/tasks.c ****                     else
4106:ThirdParty/FreeRTOS/tasks.c ****                     {
4107:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4108:ThirdParty/FreeRTOS/tasks.c ****                     }
4109:ThirdParty/FreeRTOS/tasks.c **** 
4110:ThirdParty/FreeRTOS/tasks.c ****                     /* Inherit the priority before being moved into the new list. */
4111:ThirdParty/FreeRTOS/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6478              		.loc 1 4111 64
 6479 007a 2D4B     		ldr	r3, .L372
 6480 007c 1B68     		ldr	r3, [r3]
 6481 007e DA6A     		ldr	r2, [r3, #44]
 6482              		.loc 1 4111 50
 6483 0080 3B69     		ldr	r3, [r7, #16]
 6484 0082 DA62     		str	r2, [r3, #44]
4112:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 6485              		.loc 1 4112 21
 6486 0084 3B69     		ldr	r3, [r7, #16]
 6487 0086 DB6A     		ldr	r3, [r3, #44]
 6488 0088 0122     		movs	r2, #1
 6489 008a 9A40     		lsls	r2, r2, r3
 6490 008c 2A4B     		ldr	r3, .L372+8
 6491 008e 1B68     		ldr	r3, [r3]
 6492 0090 1343     		orrs	r3, r3, r2
 6493 0092 294A     		ldr	r2, .L372+8
 6494 0094 1360     		str	r3, [r2]
 6495              	.LBB259:
 6496 0096 3B69     		ldr	r3, [r7, #16]
 6497 0098 DA6A     		ldr	r2, [r3, #44]
 6498 009a 2649     		ldr	r1, .L372+4
 6499 009c 1346     		mov	r3, r2
 6500 009e 9B00     		lsls	r3, r3, #2
 6501 00a0 1344     		add	r3, r3, r2
 6502 00a2 9B00     		lsls	r3, r3, #2
 6503 00a4 0B44     		add	r3, r3, r1
 6504 00a6 0433     		adds	r3, r3, #4
 6505 00a8 1B68     		ldr	r3, [r3]
 6506 00aa FB60     		str	r3, [r7, #12]
 6507 00ac 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 191


 6508 00ae FA68     		ldr	r2, [r7, #12]
 6509 00b0 9A60     		str	r2, [r3, #8]
 6510 00b2 FB68     		ldr	r3, [r7, #12]
 6511 00b4 9A68     		ldr	r2, [r3, #8]
 6512 00b6 3B69     		ldr	r3, [r7, #16]
 6513 00b8 DA60     		str	r2, [r3, #12]
 6514 00ba FB68     		ldr	r3, [r7, #12]
 6515 00bc 9B68     		ldr	r3, [r3, #8]
 6516 00be 3A69     		ldr	r2, [r7, #16]
 6517 00c0 0432     		adds	r2, r2, #4
 6518 00c2 5A60     		str	r2, [r3, #4]
 6519 00c4 3B69     		ldr	r3, [r7, #16]
 6520 00c6 1A1D     		adds	r2, r3, #4
 6521 00c8 FB68     		ldr	r3, [r7, #12]
 6522 00ca 9A60     		str	r2, [r3, #8]
 6523 00cc 3B69     		ldr	r3, [r7, #16]
 6524 00ce DA6A     		ldr	r2, [r3, #44]
 6525 00d0 1346     		mov	r3, r2
 6526 00d2 9B00     		lsls	r3, r3, #2
 6527 00d4 1344     		add	r3, r3, r2
 6528 00d6 9B00     		lsls	r3, r3, #2
 6529 00d8 164A     		ldr	r2, .L372+4
 6530 00da 1A44     		add	r2, r2, r3
 6531 00dc 3B69     		ldr	r3, [r7, #16]
 6532 00de 5A61     		str	r2, [r3, #20]
 6533 00e0 3B69     		ldr	r3, [r7, #16]
 6534 00e2 DA6A     		ldr	r2, [r3, #44]
 6535 00e4 1349     		ldr	r1, .L372+4
 6536 00e6 1346     		mov	r3, r2
 6537 00e8 9B00     		lsls	r3, r3, #2
 6538 00ea 1344     		add	r3, r3, r2
 6539 00ec 9B00     		lsls	r3, r3, #2
 6540 00ee 0B44     		add	r3, r3, r1
 6541 00f0 1B68     		ldr	r3, [r3]
 6542 00f2 591C     		adds	r1, r3, #1
 6543 00f4 0F48     		ldr	r0, .L372+4
 6544 00f6 1346     		mov	r3, r2
 6545 00f8 9B00     		lsls	r3, r3, #2
 6546 00fa 1344     		add	r3, r3, r2
 6547 00fc 9B00     		lsls	r3, r3, #2
 6548 00fe 0344     		add	r3, r3, r0
 6549 0100 1960     		str	r1, [r3]
 6550              	.LBE259:
 6551 0102 04E0     		b	.L370
 6552              	.L368:
4113:ThirdParty/FreeRTOS/tasks.c ****                 }
4114:ThirdParty/FreeRTOS/tasks.c ****                 else
4115:ThirdParty/FreeRTOS/tasks.c ****                 {
4116:ThirdParty/FreeRTOS/tasks.c ****                     /* Just inherit the priority. */
4117:ThirdParty/FreeRTOS/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6553              		.loc 1 4117 64
 6554 0104 0A4B     		ldr	r3, .L372
 6555 0106 1B68     		ldr	r3, [r3]
 6556 0108 DA6A     		ldr	r2, [r3, #44]
 6557              		.loc 1 4117 50
 6558 010a 3B69     		ldr	r3, [r7, #16]
 6559 010c DA62     		str	r2, [r3, #44]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 192


 6560              	.L370:
4118:ThirdParty/FreeRTOS/tasks.c ****                 }
4119:ThirdParty/FreeRTOS/tasks.c **** 
4120:ThirdParty/FreeRTOS/tasks.c ****                 traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4121:ThirdParty/FreeRTOS/tasks.c **** 
4122:ThirdParty/FreeRTOS/tasks.c ****                 /* Inheritance occurred. */
4123:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 6561              		.loc 1 4123 25
 6562 010e 0123     		movs	r3, #1
 6563 0110 7B61     		str	r3, [r7, #20]
 6564 0112 08E0     		b	.L365
 6565              	.L366:
4124:ThirdParty/FreeRTOS/tasks.c ****             }
4125:ThirdParty/FreeRTOS/tasks.c ****             else
4126:ThirdParty/FreeRTOS/tasks.c ****             {
4127:ThirdParty/FreeRTOS/tasks.c ****                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 6566              		.loc 1 4127 37
 6567 0114 3B69     		ldr	r3, [r7, #16]
 6568 0116 9A6C     		ldr	r2, [r3, #72]
 6569              		.loc 1 4127 68
 6570 0118 054B     		ldr	r3, .L372
 6571 011a 1B68     		ldr	r3, [r3]
 6572 011c DB6A     		ldr	r3, [r3, #44]
 6573              		.loc 1 4127 19
 6574 011e 9A42     		cmp	r2, r3
 6575 0120 01D2     		bcs	.L365
4128:ThirdParty/FreeRTOS/tasks.c ****                 {
4129:ThirdParty/FreeRTOS/tasks.c ****                     /* The base priority of the mutex holder is lower than the
4130:ThirdParty/FreeRTOS/tasks.c ****                      * priority of the task attempting to take the mutex, but the
4131:ThirdParty/FreeRTOS/tasks.c ****                      * current priority of the mutex holder is not lower than the
4132:ThirdParty/FreeRTOS/tasks.c ****                      * priority of the task attempting to take the mutex.
4133:ThirdParty/FreeRTOS/tasks.c ****                      * Therefore the mutex holder must have already inherited a
4134:ThirdParty/FreeRTOS/tasks.c ****                      * priority, but inheritance would have occurred if that had
4135:ThirdParty/FreeRTOS/tasks.c ****                      * not been the case. */
4136:ThirdParty/FreeRTOS/tasks.c ****                     xReturn = pdTRUE;
 6576              		.loc 1 4136 29
 6577 0122 0123     		movs	r3, #1
 6578 0124 7B61     		str	r3, [r7, #20]
 6579              	.L365:
4137:ThirdParty/FreeRTOS/tasks.c ****                 }
4138:ThirdParty/FreeRTOS/tasks.c ****                 else
4139:ThirdParty/FreeRTOS/tasks.c ****                 {
4140:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4141:ThirdParty/FreeRTOS/tasks.c ****                 }
4142:ThirdParty/FreeRTOS/tasks.c ****             }
4143:ThirdParty/FreeRTOS/tasks.c ****         }
4144:ThirdParty/FreeRTOS/tasks.c ****         else
4145:ThirdParty/FreeRTOS/tasks.c ****         {
4146:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4147:ThirdParty/FreeRTOS/tasks.c ****         }
4148:ThirdParty/FreeRTOS/tasks.c **** 
4149:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
 6580              		.loc 1 4149 16
 6581 0126 7B69     		ldr	r3, [r7, #20]
4150:ThirdParty/FreeRTOS/tasks.c ****     }
 6582              		.loc 1 4150 5
 6583 0128 1846     		mov	r0, r3
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 193


 6584 012a 1837     		adds	r7, r7, #24
 6585              	.LCFI244:
 6586              		.cfi_def_cfa_offset 8
 6587 012c BD46     		mov	sp, r7
 6588              	.LCFI245:
 6589              		.cfi_def_cfa_register 13
 6590              		@ sp needed
 6591 012e 80BD     		pop	{r7, pc}
 6592              	.L373:
 6593              		.align	2
 6594              	.L372:
 6595 0130 00000000 		.word	pxCurrentTCB
 6596 0134 00000000 		.word	pxReadyTasksLists
 6597 0138 00000000 		.word	uxTopReadyPriority
 6598              		.cfi_endproc
 6599              	.LFE52:
 6601              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 6602              		.align	1
 6603              		.global	xTaskPriorityDisinherit
 6604              		.syntax unified
 6605              		.thumb
 6606              		.thumb_func
 6608              	xTaskPriorityDisinherit:
 6609              	.LFB53:
4151:ThirdParty/FreeRTOS/tasks.c **** 
4152:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4153:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4154:ThirdParty/FreeRTOS/tasks.c **** 
4155:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4156:ThirdParty/FreeRTOS/tasks.c **** 
4157:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4158:ThirdParty/FreeRTOS/tasks.c ****     {
 6610              		.loc 1 4158 5
 6611              		.cfi_startproc
 6612              		@ args = 0, pretend = 0, frame = 32
 6613              		@ frame_needed = 1, uses_anonymous_args = 0
 6614 0000 80B5     		push	{r7, lr}
 6615              	.LCFI246:
 6616              		.cfi_def_cfa_offset 8
 6617              		.cfi_offset 7, -8
 6618              		.cfi_offset 14, -4
 6619 0002 88B0     		sub	sp, sp, #32
 6620              	.LCFI247:
 6621              		.cfi_def_cfa_offset 40
 6622 0004 00AF     		add	r7, sp, #0
 6623              	.LCFI248:
 6624              		.cfi_def_cfa_register 7
 6625 0006 7860     		str	r0, [r7, #4]
4159:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 6626              		.loc 1 4159 23
 6627 0008 7B68     		ldr	r3, [r7, #4]
 6628 000a BB61     		str	r3, [r7, #24]
4160:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 6629              		.loc 1 4160 20
 6630 000c 0023     		movs	r3, #0
 6631 000e FB61     		str	r3, [r7, #28]
4161:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 194


4162:ThirdParty/FreeRTOS/tasks.c ****         if( pxMutexHolder != NULL )
 6632              		.loc 1 4162 11
 6633 0010 7B68     		ldr	r3, [r7, #4]
 6634 0012 002B     		cmp	r3, #0
 6635 0014 00F08C80 		beq	.L375
4163:ThirdParty/FreeRTOS/tasks.c ****         {
4164:ThirdParty/FreeRTOS/tasks.c ****             /* A task can only have an inherited priority if it holds the mutex.
4165:ThirdParty/FreeRTOS/tasks.c ****              * If the mutex is held by a task then it cannot be given from an
4166:ThirdParty/FreeRTOS/tasks.c ****              * interrupt, and if a mutex is given by the holding task then it must
4167:ThirdParty/FreeRTOS/tasks.c ****              * be the running state task. */
4168:ThirdParty/FreeRTOS/tasks.c ****             configASSERT( pxTCB == pxCurrentTCB );
 6636              		.loc 1 4168 13
 6637 0018 484B     		ldr	r3, .L382
 6638 001a 1B68     		ldr	r3, [r3]
 6639 001c BA69     		ldr	r2, [r7, #24]
 6640 001e 9A42     		cmp	r2, r3
 6641 0020 0AD0     		beq	.L376
 6642              	.LBB260:
 6643              	.LBB261:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6644              		.loc 2 198 9
 6645              		.syntax unified
 6646              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6647 0022 4FF05003 			mov r3, #80												
 6648 0026 83F31188 		msr basepri, r3											
 6649 002a BFF36F8F 		isb														
 6650 002e BFF34F8F 		dsb														
 6651              	
 6652              	@ 0 "" 2
 6653              		.thumb
 6654              		.syntax unified
 6655 0032 3B61     		str	r3, [r7, #16]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6656              		.loc 2 206 5
 6657 0034 00BF     		nop
 6658              	.L377:
 6659              	.LBE261:
 6660              	.LBE260:
 6661              		.loc 1 4168 13 discriminator 1
 6662 0036 FEE7     		b	.L377
 6663              	.L376:
4169:ThirdParty/FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 6664              		.loc 1 4169 13
 6665 0038 BB69     		ldr	r3, [r7, #24]
 6666 003a DB6C     		ldr	r3, [r3, #76]
 6667 003c 002B     		cmp	r3, #0
 6668 003e 0AD1     		bne	.L378
 6669              	.LBB262:
 6670              	.LBB263:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6671              		.loc 2 198 9
 6672              		.syntax unified
 6673              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6674 0040 4FF05003 			mov r3, #80												
 6675 0044 83F31188 		msr basepri, r3											
 6676 0048 BFF36F8F 		isb														
 6677 004c BFF34F8F 		dsb														
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 195


 6678              	
 6679              	@ 0 "" 2
 6680              		.thumb
 6681              		.syntax unified
 6682 0050 FB60     		str	r3, [r7, #12]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6683              		.loc 2 206 5
 6684 0052 00BF     		nop
 6685              	.L379:
 6686              	.LBE263:
 6687              	.LBE262:
 6688              		.loc 1 4169 13 discriminator 2
 6689 0054 FEE7     		b	.L379
 6690              	.L378:
4170:ThirdParty/FreeRTOS/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 6691              		.loc 1 4170 20
 6692 0056 BB69     		ldr	r3, [r7, #24]
 6693 0058 DB6C     		ldr	r3, [r3, #76]
 6694              		.loc 1 4170 37
 6695 005a 5A1E     		subs	r2, r3, #1
 6696 005c BB69     		ldr	r3, [r7, #24]
 6697 005e DA64     		str	r2, [r3, #76]
4171:ThirdParty/FreeRTOS/tasks.c **** 
4172:ThirdParty/FreeRTOS/tasks.c ****             /* Has the holder of the mutex inherited the priority of another
4173:ThirdParty/FreeRTOS/tasks.c ****              * task? */
4174:ThirdParty/FreeRTOS/tasks.c ****             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 6698              		.loc 1 4174 22
 6699 0060 BB69     		ldr	r3, [r7, #24]
 6700 0062 DA6A     		ldr	r2, [r3, #44]
 6701              		.loc 1 4174 43
 6702 0064 BB69     		ldr	r3, [r7, #24]
 6703 0066 9B6C     		ldr	r3, [r3, #72]
 6704              		.loc 1 4174 15
 6705 0068 9A42     		cmp	r2, r3
 6706 006a 61D0     		beq	.L375
4175:ThirdParty/FreeRTOS/tasks.c ****             {
4176:ThirdParty/FreeRTOS/tasks.c ****                 /* Only disinherit if no other mutexes are held. */
4177:ThirdParty/FreeRTOS/tasks.c ****                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 6707              		.loc 1 4177 26
 6708 006c BB69     		ldr	r3, [r7, #24]
 6709 006e DB6C     		ldr	r3, [r3, #76]
 6710              		.loc 1 4177 19
 6711 0070 002B     		cmp	r3, #0
 6712 0072 5DD1     		bne	.L375
4178:ThirdParty/FreeRTOS/tasks.c ****                 {
4179:ThirdParty/FreeRTOS/tasks.c ****                     /* A task can only have an inherited priority if it holds
4180:ThirdParty/FreeRTOS/tasks.c ****                      * the mutex.  If the mutex is held by a task then it cannot be
4181:ThirdParty/FreeRTOS/tasks.c ****                      * given from an interrupt, and if a mutex is given by the
4182:ThirdParty/FreeRTOS/tasks.c ****                      * holding task then it must be the running state task.  Remove
4183:ThirdParty/FreeRTOS/tasks.c ****                      * the holding task from the ready list. */
4184:ThirdParty/FreeRTOS/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6713              		.loc 1 4184 25
 6714 0074 BB69     		ldr	r3, [r7, #24]
 6715 0076 0433     		adds	r3, r3, #4
 6716 0078 1846     		mov	r0, r3
 6717 007a FFF7FEFF 		bl	uxListRemove
 6718 007e 0346     		mov	r3, r0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 196


 6719              		.loc 1 4184 23
 6720 0080 002B     		cmp	r3, #0
 6721 0082 0AD1     		bne	.L380
4185:ThirdParty/FreeRTOS/tasks.c ****                     {
4186:ThirdParty/FreeRTOS/tasks.c ****                         portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 6722              		.loc 1 4186 25
 6723 0084 BB69     		ldr	r3, [r7, #24]
 6724 0086 DB6A     		ldr	r3, [r3, #44]
 6725 0088 0122     		movs	r2, #1
 6726 008a 02FA03F3 		lsl	r3, r2, r3
 6727 008e DA43     		mvns	r2, r3
 6728 0090 2B4B     		ldr	r3, .L382+4
 6729 0092 1B68     		ldr	r3, [r3]
 6730 0094 1340     		ands	r3, r3, r2
 6731 0096 2A4A     		ldr	r2, .L382+4
 6732 0098 1360     		str	r3, [r2]
 6733              	.L380:
4187:ThirdParty/FreeRTOS/tasks.c ****                     }
4188:ThirdParty/FreeRTOS/tasks.c ****                     else
4189:ThirdParty/FreeRTOS/tasks.c ****                     {
4190:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4191:ThirdParty/FreeRTOS/tasks.c ****                     }
4192:ThirdParty/FreeRTOS/tasks.c **** 
4193:ThirdParty/FreeRTOS/tasks.c ****                     /* Disinherit the priority before adding the task into the
4194:ThirdParty/FreeRTOS/tasks.c ****                      * new  ready list. */
4195:ThirdParty/FreeRTOS/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4196:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
 6734              		.loc 1 4196 46
 6735 009a BB69     		ldr	r3, [r7, #24]
 6736 009c 9A6C     		ldr	r2, [r3, #72]
 6737              		.loc 1 4196 39
 6738 009e BB69     		ldr	r3, [r7, #24]
 6739 00a0 DA62     		str	r2, [r3, #44]
4197:ThirdParty/FreeRTOS/tasks.c **** 
4198:ThirdParty/FreeRTOS/tasks.c ****                     /* Reset the event list item value.  It cannot be in use for
4199:ThirdParty/FreeRTOS/tasks.c ****                      * any other purpose if this task is running, and it must be
4200:ThirdParty/FreeRTOS/tasks.c ****                      * running to give back the mutex. */
4201:ThirdParty/FreeRTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_P
 6740              		.loc 1 4201 21
 6741 00a2 BB69     		ldr	r3, [r7, #24]
 6742 00a4 DB6A     		ldr	r3, [r3, #44]
 6743 00a6 C3F10502 		rsb	r2, r3, #5
 6744 00aa BB69     		ldr	r3, [r7, #24]
 6745 00ac 9A61     		str	r2, [r3, #24]
4202:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6746              		.loc 1 4202 21
 6747 00ae BB69     		ldr	r3, [r7, #24]
 6748 00b0 DB6A     		ldr	r3, [r3, #44]
 6749 00b2 0122     		movs	r2, #1
 6750 00b4 9A40     		lsls	r2, r2, r3
 6751 00b6 224B     		ldr	r3, .L382+4
 6752 00b8 1B68     		ldr	r3, [r3]
 6753 00ba 1343     		orrs	r3, r3, r2
 6754 00bc 204A     		ldr	r2, .L382+4
 6755 00be 1360     		str	r3, [r2]
 6756              	.LBB264:
 6757 00c0 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 197


 6758 00c2 DA6A     		ldr	r2, [r3, #44]
 6759 00c4 1F49     		ldr	r1, .L382+8
 6760 00c6 1346     		mov	r3, r2
 6761 00c8 9B00     		lsls	r3, r3, #2
 6762 00ca 1344     		add	r3, r3, r2
 6763 00cc 9B00     		lsls	r3, r3, #2
 6764 00ce 0B44     		add	r3, r3, r1
 6765 00d0 0433     		adds	r3, r3, #4
 6766 00d2 1B68     		ldr	r3, [r3]
 6767 00d4 7B61     		str	r3, [r7, #20]
 6768 00d6 BB69     		ldr	r3, [r7, #24]
 6769 00d8 7A69     		ldr	r2, [r7, #20]
 6770 00da 9A60     		str	r2, [r3, #8]
 6771 00dc 7B69     		ldr	r3, [r7, #20]
 6772 00de 9A68     		ldr	r2, [r3, #8]
 6773 00e0 BB69     		ldr	r3, [r7, #24]
 6774 00e2 DA60     		str	r2, [r3, #12]
 6775 00e4 7B69     		ldr	r3, [r7, #20]
 6776 00e6 9B68     		ldr	r3, [r3, #8]
 6777 00e8 BA69     		ldr	r2, [r7, #24]
 6778 00ea 0432     		adds	r2, r2, #4
 6779 00ec 5A60     		str	r2, [r3, #4]
 6780 00ee BB69     		ldr	r3, [r7, #24]
 6781 00f0 1A1D     		adds	r2, r3, #4
 6782 00f2 7B69     		ldr	r3, [r7, #20]
 6783 00f4 9A60     		str	r2, [r3, #8]
 6784 00f6 BB69     		ldr	r3, [r7, #24]
 6785 00f8 DA6A     		ldr	r2, [r3, #44]
 6786 00fa 1346     		mov	r3, r2
 6787 00fc 9B00     		lsls	r3, r3, #2
 6788 00fe 1344     		add	r3, r3, r2
 6789 0100 9B00     		lsls	r3, r3, #2
 6790 0102 104A     		ldr	r2, .L382+8
 6791 0104 1A44     		add	r2, r2, r3
 6792 0106 BB69     		ldr	r3, [r7, #24]
 6793 0108 5A61     		str	r2, [r3, #20]
 6794 010a BB69     		ldr	r3, [r7, #24]
 6795 010c DA6A     		ldr	r2, [r3, #44]
 6796 010e 0D49     		ldr	r1, .L382+8
 6797 0110 1346     		mov	r3, r2
 6798 0112 9B00     		lsls	r3, r3, #2
 6799 0114 1344     		add	r3, r3, r2
 6800 0116 9B00     		lsls	r3, r3, #2
 6801 0118 0B44     		add	r3, r3, r1
 6802 011a 1B68     		ldr	r3, [r3]
 6803 011c 591C     		adds	r1, r3, #1
 6804 011e 0948     		ldr	r0, .L382+8
 6805 0120 1346     		mov	r3, r2
 6806 0122 9B00     		lsls	r3, r3, #2
 6807 0124 1344     		add	r3, r3, r2
 6808 0126 9B00     		lsls	r3, r3, #2
 6809 0128 0344     		add	r3, r3, r0
 6810 012a 1960     		str	r1, [r3]
 6811              	.LBE264:
4203:ThirdParty/FreeRTOS/tasks.c **** 
4204:ThirdParty/FreeRTOS/tasks.c ****                     /* Return true to indicate that a context switch is required.
4205:ThirdParty/FreeRTOS/tasks.c ****                      * This is only actually required in the corner case whereby
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 198


4206:ThirdParty/FreeRTOS/tasks.c ****                      * multiple mutexes were held and the mutexes were given back
4207:ThirdParty/FreeRTOS/tasks.c ****                      * in an order different to that in which they were taken.
4208:ThirdParty/FreeRTOS/tasks.c ****                      * If a context switch did not occur when the first mutex was
4209:ThirdParty/FreeRTOS/tasks.c ****                      * returned, even if a task was waiting on it, then a context
4210:ThirdParty/FreeRTOS/tasks.c ****                      * switch should occur when the last mutex is returned whether
4211:ThirdParty/FreeRTOS/tasks.c ****                      * a task is waiting on it or not. */
4212:ThirdParty/FreeRTOS/tasks.c ****                     xReturn = pdTRUE;
 6812              		.loc 1 4212 29
 6813 012c 0123     		movs	r3, #1
 6814 012e FB61     		str	r3, [r7, #28]
 6815              	.L375:
4213:ThirdParty/FreeRTOS/tasks.c ****                 }
4214:ThirdParty/FreeRTOS/tasks.c ****                 else
4215:ThirdParty/FreeRTOS/tasks.c ****                 {
4216:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4217:ThirdParty/FreeRTOS/tasks.c ****                 }
4218:ThirdParty/FreeRTOS/tasks.c ****             }
4219:ThirdParty/FreeRTOS/tasks.c ****             else
4220:ThirdParty/FreeRTOS/tasks.c ****             {
4221:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4222:ThirdParty/FreeRTOS/tasks.c ****             }
4223:ThirdParty/FreeRTOS/tasks.c ****         }
4224:ThirdParty/FreeRTOS/tasks.c ****         else
4225:ThirdParty/FreeRTOS/tasks.c ****         {
4226:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4227:ThirdParty/FreeRTOS/tasks.c ****         }
4228:ThirdParty/FreeRTOS/tasks.c **** 
4229:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
 6816              		.loc 1 4229 16
 6817 0130 FB69     		ldr	r3, [r7, #28]
4230:ThirdParty/FreeRTOS/tasks.c ****     }
 6818              		.loc 1 4230 5
 6819 0132 1846     		mov	r0, r3
 6820 0134 2037     		adds	r7, r7, #32
 6821              	.LCFI249:
 6822              		.cfi_def_cfa_offset 8
 6823 0136 BD46     		mov	sp, r7
 6824              	.LCFI250:
 6825              		.cfi_def_cfa_register 13
 6826              		@ sp needed
 6827 0138 80BD     		pop	{r7, pc}
 6828              	.L383:
 6829 013a 00BF     		.align	2
 6830              	.L382:
 6831 013c 00000000 		.word	pxCurrentTCB
 6832 0140 00000000 		.word	uxTopReadyPriority
 6833 0144 00000000 		.word	pxReadyTasksLists
 6834              		.cfi_endproc
 6835              	.LFE53:
 6837              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 6838              		.align	1
 6839              		.global	vTaskPriorityDisinheritAfterTimeout
 6840              		.syntax unified
 6841              		.thumb
 6842              		.thumb_func
 6844              	vTaskPriorityDisinheritAfterTimeout:
 6845              	.LFB54:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 199


4231:ThirdParty/FreeRTOS/tasks.c **** 
4232:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4233:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4234:ThirdParty/FreeRTOS/tasks.c **** 
4235:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4236:ThirdParty/FreeRTOS/tasks.c **** 
4237:ThirdParty/FreeRTOS/tasks.c ****     void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
4238:ThirdParty/FreeRTOS/tasks.c ****                                               UBaseType_t uxHighestPriorityWaitingTask )
4239:ThirdParty/FreeRTOS/tasks.c ****     {
 6846              		.loc 1 4239 5
 6847              		.cfi_startproc
 6848              		@ args = 0, pretend = 0, frame = 40
 6849              		@ frame_needed = 1, uses_anonymous_args = 0
 6850 0000 80B5     		push	{r7, lr}
 6851              	.LCFI251:
 6852              		.cfi_def_cfa_offset 8
 6853              		.cfi_offset 7, -8
 6854              		.cfi_offset 14, -4
 6855 0002 8AB0     		sub	sp, sp, #40
 6856              	.LCFI252:
 6857              		.cfi_def_cfa_offset 48
 6858 0004 00AF     		add	r7, sp, #0
 6859              	.LCFI253:
 6860              		.cfi_def_cfa_register 7
 6861 0006 7860     		str	r0, [r7, #4]
 6862 0008 3960     		str	r1, [r7]
4240:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 6863              		.loc 1 4240 23
 6864 000a 7B68     		ldr	r3, [r7, #4]
 6865 000c 3B62     		str	r3, [r7, #32]
4241:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4242:ThirdParty/FreeRTOS/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6866              		.loc 1 4242 27
 6867 000e 0123     		movs	r3, #1
 6868 0010 FB61     		str	r3, [r7, #28]
4243:ThirdParty/FreeRTOS/tasks.c **** 
4244:ThirdParty/FreeRTOS/tasks.c ****         if( pxMutexHolder != NULL )
 6869              		.loc 1 4244 11
 6870 0012 7B68     		ldr	r3, [r7, #4]
 6871 0014 002B     		cmp	r3, #0
 6872 0016 00F0A180 		beq	.L394
4245:ThirdParty/FreeRTOS/tasks.c ****         {
4246:ThirdParty/FreeRTOS/tasks.c ****             /* If pxMutexHolder is not NULL then the holder must hold at least
4247:ThirdParty/FreeRTOS/tasks.c ****              * one mutex. */
4248:ThirdParty/FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 6873              		.loc 1 4248 13
 6874 001a 3B6A     		ldr	r3, [r7, #32]
 6875 001c DB6C     		ldr	r3, [r3, #76]
 6876 001e 002B     		cmp	r3, #0
 6877 0020 0AD1     		bne	.L386
 6878              	.LBB265:
 6879              	.LBB266:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6880              		.loc 2 198 9
 6881              		.syntax unified
 6882              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6883 0022 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 200


 6884 0026 83F31188 		msr basepri, r3											
 6885 002a BFF36F8F 		isb														
 6886 002e BFF34F8F 		dsb														
 6887              	
 6888              	@ 0 "" 2
 6889              		.thumb
 6890              		.syntax unified
 6891 0032 3B61     		str	r3, [r7, #16]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6892              		.loc 2 206 5
 6893 0034 00BF     		nop
 6894              	.L387:
 6895              	.LBE266:
 6896              	.LBE265:
 6897              		.loc 1 4248 13 discriminator 1
 6898 0036 FEE7     		b	.L387
 6899              	.L386:
4249:ThirdParty/FreeRTOS/tasks.c **** 
4250:ThirdParty/FreeRTOS/tasks.c ****             /* Determine the priority to which the priority of the task that
4251:ThirdParty/FreeRTOS/tasks.c ****              * holds the mutex should be set.  This will be the greater of the
4252:ThirdParty/FreeRTOS/tasks.c ****              * holding task's base priority and the priority of the highest
4253:ThirdParty/FreeRTOS/tasks.c ****              * priority task that is waiting to obtain the mutex. */
4254:ThirdParty/FreeRTOS/tasks.c ****             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 6900              		.loc 1 4254 22
 6901 0038 3B6A     		ldr	r3, [r7, #32]
 6902 003a 9B6C     		ldr	r3, [r3, #72]
 6903              		.loc 1 4254 15
 6904 003c 3A68     		ldr	r2, [r7]
 6905 003e 9A42     		cmp	r2, r3
 6906 0040 02D9     		bls	.L388
4255:ThirdParty/FreeRTOS/tasks.c ****             {
4256:ThirdParty/FreeRTOS/tasks.c ****                 uxPriorityToUse = uxHighestPriorityWaitingTask;
 6907              		.loc 1 4256 33
 6908 0042 3B68     		ldr	r3, [r7]
 6909 0044 7B62     		str	r3, [r7, #36]
 6910 0046 02E0     		b	.L389
 6911              	.L388:
4257:ThirdParty/FreeRTOS/tasks.c ****             }
4258:ThirdParty/FreeRTOS/tasks.c ****             else
4259:ThirdParty/FreeRTOS/tasks.c ****             {
4260:ThirdParty/FreeRTOS/tasks.c ****                 uxPriorityToUse = pxTCB->uxBasePriority;
 6912              		.loc 1 4260 33
 6913 0048 3B6A     		ldr	r3, [r7, #32]
 6914 004a 9B6C     		ldr	r3, [r3, #72]
 6915 004c 7B62     		str	r3, [r7, #36]
 6916              	.L389:
4261:ThirdParty/FreeRTOS/tasks.c ****             }
4262:ThirdParty/FreeRTOS/tasks.c **** 
4263:ThirdParty/FreeRTOS/tasks.c ****             /* Does the priority need to change? */
4264:ThirdParty/FreeRTOS/tasks.c ****             if( pxTCB->uxPriority != uxPriorityToUse )
 6917              		.loc 1 4264 22
 6918 004e 3B6A     		ldr	r3, [r7, #32]
 6919 0050 DB6A     		ldr	r3, [r3, #44]
 6920              		.loc 1 4264 15
 6921 0052 7A6A     		ldr	r2, [r7, #36]
 6922 0054 9A42     		cmp	r2, r3
 6923 0056 00F08180 		beq	.L394
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 201


4265:ThirdParty/FreeRTOS/tasks.c ****             {
4266:ThirdParty/FreeRTOS/tasks.c ****                 /* Only disinherit if no other mutexes are held.  This is a
4267:ThirdParty/FreeRTOS/tasks.c ****                  * simplification in the priority inheritance implementation.  If
4268:ThirdParty/FreeRTOS/tasks.c ****                  * the task that holds the mutex is also holding other mutexes then
4269:ThirdParty/FreeRTOS/tasks.c ****                  * the other mutexes may have caused the priority inheritance. */
4270:ThirdParty/FreeRTOS/tasks.c ****                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 6924              		.loc 1 4270 26
 6925 005a 3B6A     		ldr	r3, [r7, #32]
 6926 005c DB6C     		ldr	r3, [r3, #76]
 6927              		.loc 1 4270 19
 6928 005e FA69     		ldr	r2, [r7, #28]
 6929 0060 9A42     		cmp	r2, r3
 6930 0062 7BD1     		bne	.L394
4271:ThirdParty/FreeRTOS/tasks.c ****                 {
4272:ThirdParty/FreeRTOS/tasks.c ****                     /* If a task has timed out because it already holds the
4273:ThirdParty/FreeRTOS/tasks.c ****                      * mutex it was trying to obtain then it cannot of inherited
4274:ThirdParty/FreeRTOS/tasks.c ****                      * its own priority. */
4275:ThirdParty/FreeRTOS/tasks.c ****                     configASSERT( pxTCB != pxCurrentTCB );
 6931              		.loc 1 4275 21
 6932 0064 3F4B     		ldr	r3, .L395
 6933 0066 1B68     		ldr	r3, [r3]
 6934 0068 3A6A     		ldr	r2, [r7, #32]
 6935 006a 9A42     		cmp	r2, r3
 6936 006c 0AD1     		bne	.L390
 6937              	.LBB267:
 6938              	.LBB268:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6939              		.loc 2 198 9
 6940              		.syntax unified
 6941              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6942 006e 4FF05003 			mov r3, #80												
 6943 0072 83F31188 		msr basepri, r3											
 6944 0076 BFF36F8F 		isb														
 6945 007a BFF34F8F 		dsb														
 6946              	
 6947              	@ 0 "" 2
 6948              		.thumb
 6949              		.syntax unified
 6950 007e FB60     		str	r3, [r7, #12]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6951              		.loc 2 206 5
 6952 0080 00BF     		nop
 6953              	.L391:
 6954              	.LBE268:
 6955              	.LBE267:
 6956              		.loc 1 4275 21 discriminator 2
 6957 0082 FEE7     		b	.L391
 6958              	.L390:
4276:ThirdParty/FreeRTOS/tasks.c **** 
4277:ThirdParty/FreeRTOS/tasks.c ****                     /* Disinherit the priority, remembering the previous
4278:ThirdParty/FreeRTOS/tasks.c ****                      * priority to facilitate determining the subject task's
4279:ThirdParty/FreeRTOS/tasks.c ****                      * state. */
4280:ThirdParty/FreeRTOS/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
4281:ThirdParty/FreeRTOS/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6959              		.loc 1 4281 43
 6960 0084 3B6A     		ldr	r3, [r7, #32]
 6961 0086 DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 202


 6962 0088 BB61     		str	r3, [r7, #24]
4282:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
 6963              		.loc 1 4282 39
 6964 008a 3B6A     		ldr	r3, [r7, #32]
 6965 008c 7A6A     		ldr	r2, [r7, #36]
 6966 008e DA62     		str	r2, [r3, #44]
4283:ThirdParty/FreeRTOS/tasks.c **** 
4284:ThirdParty/FreeRTOS/tasks.c ****                     /* Only reset the event list item value if the value is not
4285:ThirdParty/FreeRTOS/tasks.c ****                      * being used for anything else. */
4286:ThirdParty/FreeRTOS/tasks.c ****                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_IT
 6967              		.loc 1 4286 27
 6968 0090 3B6A     		ldr	r3, [r7, #32]
 6969 0092 9B69     		ldr	r3, [r3, #24]
 6970              		.loc 1 4286 23
 6971 0094 002B     		cmp	r3, #0
 6972 0096 04DB     		blt	.L392
4287:ThirdParty/FreeRTOS/tasks.c ****                     {
4288:ThirdParty/FreeRTOS/tasks.c ****                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configM
 6973              		.loc 1 4288 25
 6974 0098 7B6A     		ldr	r3, [r7, #36]
 6975 009a C3F10502 		rsb	r2, r3, #5
 6976 009e 3B6A     		ldr	r3, [r7, #32]
 6977 00a0 9A61     		str	r2, [r3, #24]
 6978              	.L392:
4289:ThirdParty/FreeRTOS/tasks.c ****                     }
4290:ThirdParty/FreeRTOS/tasks.c ****                     else
4291:ThirdParty/FreeRTOS/tasks.c ****                     {
4292:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4293:ThirdParty/FreeRTOS/tasks.c ****                     }
4294:ThirdParty/FreeRTOS/tasks.c **** 
4295:ThirdParty/FreeRTOS/tasks.c ****                     /* If the running task is not the task that holds the mutex
4296:ThirdParty/FreeRTOS/tasks.c ****                      * then the task that holds the mutex could be in either the
4297:ThirdParty/FreeRTOS/tasks.c ****                      * Ready, Blocked or Suspended states.  Only remove the task
4298:ThirdParty/FreeRTOS/tasks.c ****                      * from its current state list if it is in the Ready state as
4299:ThirdParty/FreeRTOS/tasks.c ****                      * the task's priority is going to change and there is one
4300:ThirdParty/FreeRTOS/tasks.c ****                      * Ready list per priority. */
4301:ThirdParty/FreeRTOS/tasks.c ****                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &
 6979              		.loc 1 4301 25
 6980 00a2 3B6A     		ldr	r3, [r7, #32]
 6981 00a4 5969     		ldr	r1, [r3, #20]
 6982 00a6 BA69     		ldr	r2, [r7, #24]
 6983 00a8 1346     		mov	r3, r2
 6984 00aa 9B00     		lsls	r3, r3, #2
 6985 00ac 1344     		add	r3, r3, r2
 6986 00ae 9B00     		lsls	r3, r3, #2
 6987 00b0 2D4A     		ldr	r2, .L395+4
 6988 00b2 1344     		add	r3, r3, r2
 6989              		.loc 1 4301 23
 6990 00b4 9942     		cmp	r1, r3
 6991 00b6 51D1     		bne	.L394
4302:ThirdParty/FreeRTOS/tasks.c ****                     {
4303:ThirdParty/FreeRTOS/tasks.c ****                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6992              		.loc 1 4303 29
 6993 00b8 3B6A     		ldr	r3, [r7, #32]
 6994 00ba 0433     		adds	r3, r3, #4
 6995 00bc 1846     		mov	r0, r3
 6996 00be FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 203


 6997 00c2 0346     		mov	r3, r0
 6998              		.loc 1 4303 27
 6999 00c4 002B     		cmp	r3, #0
 7000 00c6 0AD1     		bne	.L393
4304:ThirdParty/FreeRTOS/tasks.c ****                         {
4305:ThirdParty/FreeRTOS/tasks.c ****                             /* It is known that the task is in its ready list so
4306:ThirdParty/FreeRTOS/tasks.c ****                              * there is no need to check again and the port level
4307:ThirdParty/FreeRTOS/tasks.c ****                              * reset macro can be called directly. */
4308:ThirdParty/FreeRTOS/tasks.c ****                             portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 7001              		.loc 1 4308 29
 7002 00c8 3B6A     		ldr	r3, [r7, #32]
 7003 00ca DB6A     		ldr	r3, [r3, #44]
 7004 00cc 0122     		movs	r2, #1
 7005 00ce 02FA03F3 		lsl	r3, r2, r3
 7006 00d2 DA43     		mvns	r2, r3
 7007 00d4 254B     		ldr	r3, .L395+8
 7008 00d6 1B68     		ldr	r3, [r3]
 7009 00d8 1340     		ands	r3, r3, r2
 7010 00da 244A     		ldr	r2, .L395+8
 7011 00dc 1360     		str	r3, [r2]
 7012              	.L393:
4309:ThirdParty/FreeRTOS/tasks.c ****                         }
4310:ThirdParty/FreeRTOS/tasks.c ****                         else
4311:ThirdParty/FreeRTOS/tasks.c ****                         {
4312:ThirdParty/FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4313:ThirdParty/FreeRTOS/tasks.c ****                         }
4314:ThirdParty/FreeRTOS/tasks.c **** 
4315:ThirdParty/FreeRTOS/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 7013              		.loc 1 4315 25
 7014 00de 3B6A     		ldr	r3, [r7, #32]
 7015 00e0 DB6A     		ldr	r3, [r3, #44]
 7016 00e2 0122     		movs	r2, #1
 7017 00e4 9A40     		lsls	r2, r2, r3
 7018 00e6 214B     		ldr	r3, .L395+8
 7019 00e8 1B68     		ldr	r3, [r3]
 7020 00ea 1343     		orrs	r3, r3, r2
 7021 00ec 1F4A     		ldr	r2, .L395+8
 7022 00ee 1360     		str	r3, [r2]
 7023              	.LBB269:
 7024 00f0 3B6A     		ldr	r3, [r7, #32]
 7025 00f2 DA6A     		ldr	r2, [r3, #44]
 7026 00f4 1C49     		ldr	r1, .L395+4
 7027 00f6 1346     		mov	r3, r2
 7028 00f8 9B00     		lsls	r3, r3, #2
 7029 00fa 1344     		add	r3, r3, r2
 7030 00fc 9B00     		lsls	r3, r3, #2
 7031 00fe 0B44     		add	r3, r3, r1
 7032 0100 0433     		adds	r3, r3, #4
 7033 0102 1B68     		ldr	r3, [r3]
 7034 0104 7B61     		str	r3, [r7, #20]
 7035 0106 3B6A     		ldr	r3, [r7, #32]
 7036 0108 7A69     		ldr	r2, [r7, #20]
 7037 010a 9A60     		str	r2, [r3, #8]
 7038 010c 7B69     		ldr	r3, [r7, #20]
 7039 010e 9A68     		ldr	r2, [r3, #8]
 7040 0110 3B6A     		ldr	r3, [r7, #32]
 7041 0112 DA60     		str	r2, [r3, #12]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 204


 7042 0114 7B69     		ldr	r3, [r7, #20]
 7043 0116 9B68     		ldr	r3, [r3, #8]
 7044 0118 3A6A     		ldr	r2, [r7, #32]
 7045 011a 0432     		adds	r2, r2, #4
 7046 011c 5A60     		str	r2, [r3, #4]
 7047 011e 3B6A     		ldr	r3, [r7, #32]
 7048 0120 1A1D     		adds	r2, r3, #4
 7049 0122 7B69     		ldr	r3, [r7, #20]
 7050 0124 9A60     		str	r2, [r3, #8]
 7051 0126 3B6A     		ldr	r3, [r7, #32]
 7052 0128 DA6A     		ldr	r2, [r3, #44]
 7053 012a 1346     		mov	r3, r2
 7054 012c 9B00     		lsls	r3, r3, #2
 7055 012e 1344     		add	r3, r3, r2
 7056 0130 9B00     		lsls	r3, r3, #2
 7057 0132 0D4A     		ldr	r2, .L395+4
 7058 0134 1A44     		add	r2, r2, r3
 7059 0136 3B6A     		ldr	r3, [r7, #32]
 7060 0138 5A61     		str	r2, [r3, #20]
 7061 013a 3B6A     		ldr	r3, [r7, #32]
 7062 013c DA6A     		ldr	r2, [r3, #44]
 7063 013e 0A49     		ldr	r1, .L395+4
 7064 0140 1346     		mov	r3, r2
 7065 0142 9B00     		lsls	r3, r3, #2
 7066 0144 1344     		add	r3, r3, r2
 7067 0146 9B00     		lsls	r3, r3, #2
 7068 0148 0B44     		add	r3, r3, r1
 7069 014a 1B68     		ldr	r3, [r3]
 7070 014c 591C     		adds	r1, r3, #1
 7071 014e 0648     		ldr	r0, .L395+4
 7072 0150 1346     		mov	r3, r2
 7073 0152 9B00     		lsls	r3, r3, #2
 7074 0154 1344     		add	r3, r3, r2
 7075 0156 9B00     		lsls	r3, r3, #2
 7076 0158 0344     		add	r3, r3, r0
 7077 015a 1960     		str	r1, [r3]
 7078              	.L394:
 7079              	.LBE269:
4316:ThirdParty/FreeRTOS/tasks.c ****                     }
4317:ThirdParty/FreeRTOS/tasks.c ****                     else
4318:ThirdParty/FreeRTOS/tasks.c ****                     {
4319:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4320:ThirdParty/FreeRTOS/tasks.c ****                     }
4321:ThirdParty/FreeRTOS/tasks.c ****                 }
4322:ThirdParty/FreeRTOS/tasks.c ****                 else
4323:ThirdParty/FreeRTOS/tasks.c ****                 {
4324:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4325:ThirdParty/FreeRTOS/tasks.c ****                 }
4326:ThirdParty/FreeRTOS/tasks.c ****             }
4327:ThirdParty/FreeRTOS/tasks.c ****             else
4328:ThirdParty/FreeRTOS/tasks.c ****             {
4329:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4330:ThirdParty/FreeRTOS/tasks.c ****             }
4331:ThirdParty/FreeRTOS/tasks.c ****         }
4332:ThirdParty/FreeRTOS/tasks.c ****         else
4333:ThirdParty/FreeRTOS/tasks.c ****         {
4334:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 205


4335:ThirdParty/FreeRTOS/tasks.c ****         }
4336:ThirdParty/FreeRTOS/tasks.c ****     }
 7080              		.loc 1 4336 5
 7081 015c 00BF     		nop
 7082 015e 2837     		adds	r7, r7, #40
 7083              	.LCFI254:
 7084              		.cfi_def_cfa_offset 8
 7085 0160 BD46     		mov	sp, r7
 7086              	.LCFI255:
 7087              		.cfi_def_cfa_register 13
 7088              		@ sp needed
 7089 0162 80BD     		pop	{r7, pc}
 7090              	.L396:
 7091              		.align	2
 7092              	.L395:
 7093 0164 00000000 		.word	pxCurrentTCB
 7094 0168 00000000 		.word	pxReadyTasksLists
 7095 016c 00000000 		.word	uxTopReadyPriority
 7096              		.cfi_endproc
 7097              	.LFE54:
 7099              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 7100              		.align	1
 7101              		.global	uxTaskResetEventItemValue
 7102              		.syntax unified
 7103              		.thumb
 7104              		.thumb_func
 7106              	uxTaskResetEventItemValue:
 7107              	.LFB55:
4337:ThirdParty/FreeRTOS/tasks.c **** 
4338:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4339:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4340:ThirdParty/FreeRTOS/tasks.c **** 
4341:ThirdParty/FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4342:ThirdParty/FreeRTOS/tasks.c **** 
4343:ThirdParty/FreeRTOS/tasks.c ****     void vTaskEnterCritical( void )
4344:ThirdParty/FreeRTOS/tasks.c ****     {
4345:ThirdParty/FreeRTOS/tasks.c ****         portDISABLE_INTERRUPTS();
4346:ThirdParty/FreeRTOS/tasks.c **** 
4347:ThirdParty/FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4348:ThirdParty/FreeRTOS/tasks.c ****         {
4349:ThirdParty/FreeRTOS/tasks.c ****             ( pxCurrentTCB->uxCriticalNesting )++;
4350:ThirdParty/FreeRTOS/tasks.c **** 
4351:ThirdParty/FreeRTOS/tasks.c ****             /* This is not the interrupt safe version of the enter critical
4352:ThirdParty/FreeRTOS/tasks.c ****              * function so  assert() if it is being called from an interrupt
4353:ThirdParty/FreeRTOS/tasks.c ****              * context.  Only API functions that end in "FromISR" can be used in an
4354:ThirdParty/FreeRTOS/tasks.c ****              * interrupt.  Only assert if the critical nesting count is 1 to
4355:ThirdParty/FreeRTOS/tasks.c ****              * protect against recursive calls if the assert function also uses a
4356:ThirdParty/FreeRTOS/tasks.c ****              * critical section. */
4357:ThirdParty/FreeRTOS/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting == 1 )
4358:ThirdParty/FreeRTOS/tasks.c ****             {
4359:ThirdParty/FreeRTOS/tasks.c ****                 portASSERT_IF_IN_ISR();
4360:ThirdParty/FreeRTOS/tasks.c ****             }
4361:ThirdParty/FreeRTOS/tasks.c ****         }
4362:ThirdParty/FreeRTOS/tasks.c ****         else
4363:ThirdParty/FreeRTOS/tasks.c ****         {
4364:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4365:ThirdParty/FreeRTOS/tasks.c ****         }
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 206


4366:ThirdParty/FreeRTOS/tasks.c ****     }
4367:ThirdParty/FreeRTOS/tasks.c **** 
4368:ThirdParty/FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4369:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4370:ThirdParty/FreeRTOS/tasks.c **** 
4371:ThirdParty/FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4372:ThirdParty/FreeRTOS/tasks.c **** 
4373:ThirdParty/FreeRTOS/tasks.c ****     void vTaskExitCritical( void )
4374:ThirdParty/FreeRTOS/tasks.c ****     {
4375:ThirdParty/FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4376:ThirdParty/FreeRTOS/tasks.c ****         {
4377:ThirdParty/FreeRTOS/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting > 0U )
4378:ThirdParty/FreeRTOS/tasks.c ****             {
4379:ThirdParty/FreeRTOS/tasks.c ****                 ( pxCurrentTCB->uxCriticalNesting )--;
4380:ThirdParty/FreeRTOS/tasks.c **** 
4381:ThirdParty/FreeRTOS/tasks.c ****                 if( pxCurrentTCB->uxCriticalNesting == 0U )
4382:ThirdParty/FreeRTOS/tasks.c ****                 {
4383:ThirdParty/FreeRTOS/tasks.c ****                     portENABLE_INTERRUPTS();
4384:ThirdParty/FreeRTOS/tasks.c ****                 }
4385:ThirdParty/FreeRTOS/tasks.c ****                 else
4386:ThirdParty/FreeRTOS/tasks.c ****                 {
4387:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4388:ThirdParty/FreeRTOS/tasks.c ****                 }
4389:ThirdParty/FreeRTOS/tasks.c ****             }
4390:ThirdParty/FreeRTOS/tasks.c ****             else
4391:ThirdParty/FreeRTOS/tasks.c ****             {
4392:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4393:ThirdParty/FreeRTOS/tasks.c ****             }
4394:ThirdParty/FreeRTOS/tasks.c ****         }
4395:ThirdParty/FreeRTOS/tasks.c ****         else
4396:ThirdParty/FreeRTOS/tasks.c ****         {
4397:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4398:ThirdParty/FreeRTOS/tasks.c ****         }
4399:ThirdParty/FreeRTOS/tasks.c ****     }
4400:ThirdParty/FreeRTOS/tasks.c **** 
4401:ThirdParty/FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4402:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4403:ThirdParty/FreeRTOS/tasks.c **** 
4404:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 )
4405:ThirdParty/FreeRTOS/tasks.c **** 
4406:ThirdParty/FreeRTOS/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
4407:ThirdParty/FreeRTOS/tasks.c ****                                         const char * pcTaskName )
4408:ThirdParty/FreeRTOS/tasks.c ****     {
4409:ThirdParty/FreeRTOS/tasks.c ****         size_t x;
4410:ThirdParty/FreeRTOS/tasks.c **** 
4411:ThirdParty/FreeRTOS/tasks.c ****         /* Start by copying the entire string. */
4412:ThirdParty/FreeRTOS/tasks.c ****         strcpy( pcBuffer, pcTaskName );
4413:ThirdParty/FreeRTOS/tasks.c **** 
4414:ThirdParty/FreeRTOS/tasks.c ****         /* Pad the end of the string with spaces to ensure columns line up when
4415:ThirdParty/FreeRTOS/tasks.c ****          * printed out. */
4416:ThirdParty/FreeRTOS/tasks.c ****         for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4417:ThirdParty/FreeRTOS/tasks.c ****         {
4418:ThirdParty/FreeRTOS/tasks.c ****             pcBuffer[ x ] = ' ';
4419:ThirdParty/FreeRTOS/tasks.c ****         }
4420:ThirdParty/FreeRTOS/tasks.c **** 
4421:ThirdParty/FreeRTOS/tasks.c ****         /* Terminate. */
4422:ThirdParty/FreeRTOS/tasks.c ****         pcBuffer[ x ] = ( char ) 0x00;
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 207


4423:ThirdParty/FreeRTOS/tasks.c **** 
4424:ThirdParty/FreeRTOS/tasks.c ****         /* Return the new end of string. */
4425:ThirdParty/FreeRTOS/tasks.c ****         return &( pcBuffer[ x ] );
4426:ThirdParty/FreeRTOS/tasks.c ****     }
4427:ThirdParty/FreeRTOS/tasks.c **** 
4428:ThirdParty/FreeRTOS/tasks.c **** #endif /* ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4429:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4430:ThirdParty/FreeRTOS/tasks.c **** 
4431:ThirdParty/FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4432:ThirdParty/FreeRTOS/tasks.c **** 
4433:ThirdParty/FreeRTOS/tasks.c ****     void vTaskList( char * pcWriteBuffer )
4434:ThirdParty/FreeRTOS/tasks.c ****     {
4435:ThirdParty/FreeRTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4436:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxArraySize, x;
4437:ThirdParty/FreeRTOS/tasks.c ****         char cStatus;
4438:ThirdParty/FreeRTOS/tasks.c **** 
4439:ThirdParty/FreeRTOS/tasks.c ****         /*
4440:ThirdParty/FreeRTOS/tasks.c ****          * PLEASE NOTE:
4441:ThirdParty/FreeRTOS/tasks.c ****          *
4442:ThirdParty/FreeRTOS/tasks.c ****          * This function is provided for convenience only, and is used by many
4443:ThirdParty/FreeRTOS/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4444:ThirdParty/FreeRTOS/tasks.c ****          * scheduler.
4445:ThirdParty/FreeRTOS/tasks.c ****          *
4446:ThirdParty/FreeRTOS/tasks.c ****          * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4447:ThirdParty/FreeRTOS/tasks.c ****          * uxTaskGetSystemState() output into a human readable table that
4448:ThirdParty/FreeRTOS/tasks.c ****          * displays task: names, states, priority, stack usage and task number.
4449:ThirdParty/FreeRTOS/tasks.c ****          * Stack usage specified as the number of unused StackType_t words stack can hold
4450:ThirdParty/FreeRTOS/tasks.c ****          * on top of stack - not the number of bytes.
4451:ThirdParty/FreeRTOS/tasks.c ****          *
4452:ThirdParty/FreeRTOS/tasks.c ****          * vTaskList() has a dependency on the sprintf() C library function that
4453:ThirdParty/FreeRTOS/tasks.c ****          * might bloat the code size, use a lot of stack, and provide different
4454:ThirdParty/FreeRTOS/tasks.c ****          * results on different platforms.  An alternative, tiny, third party,
4455:ThirdParty/FreeRTOS/tasks.c ****          * and limited functionality implementation of sprintf() is provided in
4456:ThirdParty/FreeRTOS/tasks.c ****          * many of the FreeRTOS/Demo sub-directories in a file called
4457:ThirdParty/FreeRTOS/tasks.c ****          * printf-stdarg.c (note printf-stdarg.c does not provide a full
4458:ThirdParty/FreeRTOS/tasks.c ****          * snprintf() implementation!).
4459:ThirdParty/FreeRTOS/tasks.c ****          *
4460:ThirdParty/FreeRTOS/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4461:ThirdParty/FreeRTOS/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4462:ThirdParty/FreeRTOS/tasks.c ****          * through a call to vTaskList().
4463:ThirdParty/FreeRTOS/tasks.c ****          */
4464:ThirdParty/FreeRTOS/tasks.c **** 
4465:ThirdParty/FreeRTOS/tasks.c **** 
4466:ThirdParty/FreeRTOS/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4467:ThirdParty/FreeRTOS/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4468:ThirdParty/FreeRTOS/tasks.c **** 
4469:ThirdParty/FreeRTOS/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4470:ThirdParty/FreeRTOS/tasks.c ****          * function is executing. */
4471:ThirdParty/FreeRTOS/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4472:ThirdParty/FreeRTOS/tasks.c **** 
4473:ThirdParty/FreeRTOS/tasks.c ****         /* Allocate an array index for each task.  NOTE!  if
4474:ThirdParty/FreeRTOS/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4475:ThirdParty/FreeRTOS/tasks.c ****          * equate to NULL. */
4476:ThirdParty/FreeRTOS/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4477:ThirdParty/FreeRTOS/tasks.c **** 
4478:ThirdParty/FreeRTOS/tasks.c ****         if( pxTaskStatusArray != NULL )
4479:ThirdParty/FreeRTOS/tasks.c ****         {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 208


4480:ThirdParty/FreeRTOS/tasks.c ****             /* Generate the (binary) data. */
4481:ThirdParty/FreeRTOS/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4482:ThirdParty/FreeRTOS/tasks.c **** 
4483:ThirdParty/FreeRTOS/tasks.c ****             /* Create a human readable table from the binary data. */
4484:ThirdParty/FreeRTOS/tasks.c ****             for( x = 0; x < uxArraySize; x++ )
4485:ThirdParty/FreeRTOS/tasks.c ****             {
4486:ThirdParty/FreeRTOS/tasks.c ****                 switch( pxTaskStatusArray[ x ].eCurrentState )
4487:ThirdParty/FreeRTOS/tasks.c ****                 {
4488:ThirdParty/FreeRTOS/tasks.c ****                     case eRunning:
4489:ThirdParty/FreeRTOS/tasks.c ****                         cStatus = tskRUNNING_CHAR;
4490:ThirdParty/FreeRTOS/tasks.c ****                         break;
4491:ThirdParty/FreeRTOS/tasks.c **** 
4492:ThirdParty/FreeRTOS/tasks.c ****                     case eReady:
4493:ThirdParty/FreeRTOS/tasks.c ****                         cStatus = tskREADY_CHAR;
4494:ThirdParty/FreeRTOS/tasks.c ****                         break;
4495:ThirdParty/FreeRTOS/tasks.c **** 
4496:ThirdParty/FreeRTOS/tasks.c ****                     case eBlocked:
4497:ThirdParty/FreeRTOS/tasks.c ****                         cStatus = tskBLOCKED_CHAR;
4498:ThirdParty/FreeRTOS/tasks.c ****                         break;
4499:ThirdParty/FreeRTOS/tasks.c **** 
4500:ThirdParty/FreeRTOS/tasks.c ****                     case eSuspended:
4501:ThirdParty/FreeRTOS/tasks.c ****                         cStatus = tskSUSPENDED_CHAR;
4502:ThirdParty/FreeRTOS/tasks.c ****                         break;
4503:ThirdParty/FreeRTOS/tasks.c **** 
4504:ThirdParty/FreeRTOS/tasks.c ****                     case eDeleted:
4505:ThirdParty/FreeRTOS/tasks.c ****                         cStatus = tskDELETED_CHAR;
4506:ThirdParty/FreeRTOS/tasks.c ****                         break;
4507:ThirdParty/FreeRTOS/tasks.c **** 
4508:ThirdParty/FreeRTOS/tasks.c ****                     case eInvalid: /* Fall through. */
4509:ThirdParty/FreeRTOS/tasks.c ****                     default:       /* Should not get here, but it is included
4510:ThirdParty/FreeRTOS/tasks.c ****                                     * to prevent static checking errors. */
4511:ThirdParty/FreeRTOS/tasks.c ****                         cStatus = ( char ) 0x00;
4512:ThirdParty/FreeRTOS/tasks.c ****                         break;
4513:ThirdParty/FreeRTOS/tasks.c ****                 }
4514:ThirdParty/FreeRTOS/tasks.c **** 
4515:ThirdParty/FreeRTOS/tasks.c ****                 /* Write the task name to the string, padding with spaces so it
4516:ThirdParty/FreeRTOS/tasks.c ****                  * can be printed in tabular form more easily. */
4517:ThirdParty/FreeRTOS/tasks.c ****                 pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskN
4518:ThirdParty/FreeRTOS/tasks.c **** 
4519:ThirdParty/FreeRTOS/tasks.c ****                 /* Write the rest of the string. */
4520:ThirdParty/FreeRTOS/tasks.c ****                 sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskSta
4521:ThirdParty/FreeRTOS/tasks.c ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
4522:ThirdParty/FreeRTOS/tasks.c ****             }
4523:ThirdParty/FreeRTOS/tasks.c **** 
4524:ThirdParty/FreeRTOS/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4525:ThirdParty/FreeRTOS/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4526:ThirdParty/FreeRTOS/tasks.c ****             vPortFree( pxTaskStatusArray );
4527:ThirdParty/FreeRTOS/tasks.c ****         }
4528:ThirdParty/FreeRTOS/tasks.c ****         else
4529:ThirdParty/FreeRTOS/tasks.c ****         {
4530:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4531:ThirdParty/FreeRTOS/tasks.c ****         }
4532:ThirdParty/FreeRTOS/tasks.c ****     }
4533:ThirdParty/FreeRTOS/tasks.c **** 
4534:ThirdParty/FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4535:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
4536:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 209


4537:ThirdParty/FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4538:ThirdParty/FreeRTOS/tasks.c **** 
4539:ThirdParty/FreeRTOS/tasks.c ****     void vTaskGetRunTimeStats( char * pcWriteBuffer )
4540:ThirdParty/FreeRTOS/tasks.c ****     {
4541:ThirdParty/FreeRTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4542:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxArraySize, x;
4543:ThirdParty/FreeRTOS/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulStatsAsPercentage;
4544:ThirdParty/FreeRTOS/tasks.c **** 
4545:ThirdParty/FreeRTOS/tasks.c ****         /*
4546:ThirdParty/FreeRTOS/tasks.c ****          * PLEASE NOTE:
4547:ThirdParty/FreeRTOS/tasks.c ****          *
4548:ThirdParty/FreeRTOS/tasks.c ****          * This function is provided for convenience only, and is used by many
4549:ThirdParty/FreeRTOS/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4550:ThirdParty/FreeRTOS/tasks.c ****          * scheduler.
4551:ThirdParty/FreeRTOS/tasks.c ****          *
4552:ThirdParty/FreeRTOS/tasks.c ****          * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4553:ThirdParty/FreeRTOS/tasks.c ****          * of the uxTaskGetSystemState() output into a human readable table that
4554:ThirdParty/FreeRTOS/tasks.c ****          * displays the amount of time each task has spent in the Running state
4555:ThirdParty/FreeRTOS/tasks.c ****          * in both absolute and percentage terms.
4556:ThirdParty/FreeRTOS/tasks.c ****          *
4557:ThirdParty/FreeRTOS/tasks.c ****          * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4558:ThirdParty/FreeRTOS/tasks.c ****          * function that might bloat the code size, use a lot of stack, and
4559:ThirdParty/FreeRTOS/tasks.c ****          * provide different results on different platforms.  An alternative,
4560:ThirdParty/FreeRTOS/tasks.c ****          * tiny, third party, and limited functionality implementation of
4561:ThirdParty/FreeRTOS/tasks.c ****          * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4562:ThirdParty/FreeRTOS/tasks.c ****          * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4563:ThirdParty/FreeRTOS/tasks.c ****          * a full snprintf() implementation!).
4564:ThirdParty/FreeRTOS/tasks.c ****          *
4565:ThirdParty/FreeRTOS/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4566:ThirdParty/FreeRTOS/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4567:ThirdParty/FreeRTOS/tasks.c ****          * through a call to vTaskGetRunTimeStats().
4568:ThirdParty/FreeRTOS/tasks.c ****          */
4569:ThirdParty/FreeRTOS/tasks.c **** 
4570:ThirdParty/FreeRTOS/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4571:ThirdParty/FreeRTOS/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4572:ThirdParty/FreeRTOS/tasks.c **** 
4573:ThirdParty/FreeRTOS/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4574:ThirdParty/FreeRTOS/tasks.c ****          * function is executing. */
4575:ThirdParty/FreeRTOS/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4576:ThirdParty/FreeRTOS/tasks.c **** 
4577:ThirdParty/FreeRTOS/tasks.c ****         /* Allocate an array index for each task.  NOTE!  If
4578:ThirdParty/FreeRTOS/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4579:ThirdParty/FreeRTOS/tasks.c ****          * equate to NULL. */
4580:ThirdParty/FreeRTOS/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4581:ThirdParty/FreeRTOS/tasks.c **** 
4582:ThirdParty/FreeRTOS/tasks.c ****         if( pxTaskStatusArray != NULL )
4583:ThirdParty/FreeRTOS/tasks.c ****         {
4584:ThirdParty/FreeRTOS/tasks.c ****             /* Generate the (binary) data. */
4585:ThirdParty/FreeRTOS/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4586:ThirdParty/FreeRTOS/tasks.c **** 
4587:ThirdParty/FreeRTOS/tasks.c ****             /* For percentage calculations. */
4588:ThirdParty/FreeRTOS/tasks.c ****             ulTotalTime /= 100UL;
4589:ThirdParty/FreeRTOS/tasks.c **** 
4590:ThirdParty/FreeRTOS/tasks.c ****             /* Avoid divide by zero errors. */
4591:ThirdParty/FreeRTOS/tasks.c ****             if( ulTotalTime > 0UL )
4592:ThirdParty/FreeRTOS/tasks.c ****             {
4593:ThirdParty/FreeRTOS/tasks.c ****                 /* Create a human readable table from the binary data. */
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 210


4594:ThirdParty/FreeRTOS/tasks.c ****                 for( x = 0; x < uxArraySize; x++ )
4595:ThirdParty/FreeRTOS/tasks.c ****                 {
4596:ThirdParty/FreeRTOS/tasks.c ****                     /* What percentage of the total run time has the task used?
4597:ThirdParty/FreeRTOS/tasks.c ****                      * This will always be rounded down to the nearest integer.
4598:ThirdParty/FreeRTOS/tasks.c ****                      * ulTotalRunTime has already been divided by 100. */
4599:ThirdParty/FreeRTOS/tasks.c ****                     ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4600:ThirdParty/FreeRTOS/tasks.c **** 
4601:ThirdParty/FreeRTOS/tasks.c ****                     /* Write the task name to the string, padding with
4602:ThirdParty/FreeRTOS/tasks.c ****                      * spaces so it can be printed in tabular form more
4603:ThirdParty/FreeRTOS/tasks.c ****                      * easily. */
4604:ThirdParty/FreeRTOS/tasks.c ****                     pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcT
4605:ThirdParty/FreeRTOS/tasks.c **** 
4606:ThirdParty/FreeRTOS/tasks.c ****                     if( ulStatsAsPercentage > 0UL )
4607:ThirdParty/FreeRTOS/tasks.c ****                     {
4608:ThirdParty/FreeRTOS/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4609:ThirdParty/FreeRTOS/tasks.c ****                         {
4610:ThirdParty/FreeRTOS/tasks.c ****                             sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ul
4611:ThirdParty/FreeRTOS/tasks.c ****                         }
4612:ThirdParty/FreeRTOS/tasks.c ****                         #else
4613:ThirdParty/FreeRTOS/tasks.c ****                         {
4614:ThirdParty/FreeRTOS/tasks.c ****                             /* sizeof( int ) == sizeof( long ) so a smaller
4615:ThirdParty/FreeRTOS/tasks.c ****                              * printf() library can be used. */
4616:ThirdParty/FreeRTOS/tasks.c ****                             sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStat
4617:ThirdParty/FreeRTOS/tasks.c ****                         }
4618:ThirdParty/FreeRTOS/tasks.c ****                         #endif
4619:ThirdParty/FreeRTOS/tasks.c ****                     }
4620:ThirdParty/FreeRTOS/tasks.c ****                     else
4621:ThirdParty/FreeRTOS/tasks.c ****                     {
4622:ThirdParty/FreeRTOS/tasks.c ****                         /* If the percentage is zero here then the task has
4623:ThirdParty/FreeRTOS/tasks.c ****                          * consumed less than 1% of the total run time. */
4624:ThirdParty/FreeRTOS/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4625:ThirdParty/FreeRTOS/tasks.c ****                         {
4626:ThirdParty/FreeRTOS/tasks.c ****                             sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulR
4627:ThirdParty/FreeRTOS/tasks.c ****                         }
4628:ThirdParty/FreeRTOS/tasks.c ****                         #else
4629:ThirdParty/FreeRTOS/tasks.c ****                         {
4630:ThirdParty/FreeRTOS/tasks.c ****                             /* sizeof( int ) == sizeof( long ) so a smaller
4631:ThirdParty/FreeRTOS/tasks.c ****                              * printf() library can be used. */
4632:ThirdParty/FreeRTOS/tasks.c ****                             sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStat
4633:ThirdParty/FreeRTOS/tasks.c ****                         }
4634:ThirdParty/FreeRTOS/tasks.c ****                         #endif
4635:ThirdParty/FreeRTOS/tasks.c ****                     }
4636:ThirdParty/FreeRTOS/tasks.c **** 
4637:ThirdParty/FreeRTOS/tasks.c ****                     pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok o
4638:ThirdParty/FreeRTOS/tasks.c ****                 }
4639:ThirdParty/FreeRTOS/tasks.c ****             }
4640:ThirdParty/FreeRTOS/tasks.c ****             else
4641:ThirdParty/FreeRTOS/tasks.c ****             {
4642:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4643:ThirdParty/FreeRTOS/tasks.c ****             }
4644:ThirdParty/FreeRTOS/tasks.c **** 
4645:ThirdParty/FreeRTOS/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4646:ThirdParty/FreeRTOS/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4647:ThirdParty/FreeRTOS/tasks.c ****             vPortFree( pxTaskStatusArray );
4648:ThirdParty/FreeRTOS/tasks.c ****         }
4649:ThirdParty/FreeRTOS/tasks.c ****         else
4650:ThirdParty/FreeRTOS/tasks.c ****         {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 211


4651:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4652:ThirdParty/FreeRTOS/tasks.c ****         }
4653:ThirdParty/FreeRTOS/tasks.c ****     }
4654:ThirdParty/FreeRTOS/tasks.c **** 
4655:ThirdParty/FreeRTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4656:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4657:ThirdParty/FreeRTOS/tasks.c **** 
4658:ThirdParty/FreeRTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4659:ThirdParty/FreeRTOS/tasks.c **** {
 7108              		.loc 1 4659 1
 7109              		.cfi_startproc
 7110              		@ args = 0, pretend = 0, frame = 8
 7111              		@ frame_needed = 1, uses_anonymous_args = 0
 7112              		@ link register save eliminated.
 7113 0000 80B4     		push	{r7}
 7114              	.LCFI256:
 7115              		.cfi_def_cfa_offset 4
 7116              		.cfi_offset 7, -4
 7117 0002 83B0     		sub	sp, sp, #12
 7118              	.LCFI257:
 7119              		.cfi_def_cfa_offset 16
 7120 0004 00AF     		add	r7, sp, #0
 7121              	.LCFI258:
 7122              		.cfi_def_cfa_register 7
4660:ThirdParty/FreeRTOS/tasks.c ****     TickType_t uxReturn;
4661:ThirdParty/FreeRTOS/tasks.c **** 
4662:ThirdParty/FreeRTOS/tasks.c ****     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 7123              		.loc 1 4662 16
 7124 0006 094B     		ldr	r3, .L399
 7125 0008 1B68     		ldr	r3, [r3]
 7126              		.loc 1 4662 14
 7127 000a 9B69     		ldr	r3, [r3, #24]
 7128 000c 7B60     		str	r3, [r7, #4]
4663:ThirdParty/FreeRTOS/tasks.c **** 
4664:ThirdParty/FreeRTOS/tasks.c ****     /* Reset the event list item to its normal value - so it can be used with
4665:ThirdParty/FreeRTOS/tasks.c ****      * queues and semaphores. */
4666:ThirdParty/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITI
 7129              		.loc 1 4666 5
 7130 000e 074B     		ldr	r3, .L399
 7131 0010 1B68     		ldr	r3, [r3]
 7132 0012 DA6A     		ldr	r2, [r3, #44]
 7133 0014 054B     		ldr	r3, .L399
 7134 0016 1B68     		ldr	r3, [r3]
 7135 0018 C2F10502 		rsb	r2, r2, #5
 7136 001c 9A61     		str	r2, [r3, #24]
4667:ThirdParty/FreeRTOS/tasks.c **** 
4668:ThirdParty/FreeRTOS/tasks.c ****     return uxReturn;
 7137              		.loc 1 4668 12
 7138 001e 7B68     		ldr	r3, [r7, #4]
4669:ThirdParty/FreeRTOS/tasks.c **** }
 7139              		.loc 1 4669 1
 7140 0020 1846     		mov	r0, r3
 7141 0022 0C37     		adds	r7, r7, #12
 7142              	.LCFI259:
 7143              		.cfi_def_cfa_offset 4
 7144 0024 BD46     		mov	sp, r7
 7145              	.LCFI260:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 212


 7146              		.cfi_def_cfa_register 13
 7147              		@ sp needed
 7148 0026 5DF8047B 		ldr	r7, [sp], #4
 7149              	.LCFI261:
 7150              		.cfi_restore 7
 7151              		.cfi_def_cfa_offset 0
 7152 002a 7047     		bx	lr
 7153              	.L400:
 7154              		.align	2
 7155              	.L399:
 7156 002c 00000000 		.word	pxCurrentTCB
 7157              		.cfi_endproc
 7158              	.LFE55:
 7160              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 7161              		.align	1
 7162              		.global	pvTaskIncrementMutexHeldCount
 7163              		.syntax unified
 7164              		.thumb
 7165              		.thumb_func
 7167              	pvTaskIncrementMutexHeldCount:
 7168              	.LFB56:
4670:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4671:ThirdParty/FreeRTOS/tasks.c **** 
4672:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4673:ThirdParty/FreeRTOS/tasks.c **** 
4674:ThirdParty/FreeRTOS/tasks.c ****     TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4675:ThirdParty/FreeRTOS/tasks.c ****     {
 7169              		.loc 1 4675 5
 7170              		.cfi_startproc
 7171              		@ args = 0, pretend = 0, frame = 0
 7172              		@ frame_needed = 1, uses_anonymous_args = 0
 7173              		@ link register save eliminated.
 7174 0000 80B4     		push	{r7}
 7175              	.LCFI262:
 7176              		.cfi_def_cfa_offset 4
 7177              		.cfi_offset 7, -4
 7178 0002 00AF     		add	r7, sp, #0
 7179              	.LCFI263:
 7180              		.cfi_def_cfa_register 7
4676:ThirdParty/FreeRTOS/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
4677:ThirdParty/FreeRTOS/tasks.c ****          * then pxCurrentTCB will be NULL. */
4678:ThirdParty/FreeRTOS/tasks.c ****         if( pxCurrentTCB != NULL )
 7181              		.loc 1 4678 26
 7182 0004 074B     		ldr	r3, .L404
 7183 0006 1B68     		ldr	r3, [r3]
 7184              		.loc 1 4678 11
 7185 0008 002B     		cmp	r3, #0
 7186 000a 04D0     		beq	.L402
4679:ThirdParty/FreeRTOS/tasks.c ****         {
4680:ThirdParty/FreeRTOS/tasks.c ****             ( pxCurrentTCB->uxMutexesHeld )++;
 7187              		.loc 1 4680 27
 7188 000c 054B     		ldr	r3, .L404
 7189 000e 1B68     		ldr	r3, [r3]
 7190 0010 DA6C     		ldr	r2, [r3, #76]
 7191              		.loc 1 4680 44
 7192 0012 0132     		adds	r2, r2, #1
 7193 0014 DA64     		str	r2, [r3, #76]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 213


 7194              	.L402:
4681:ThirdParty/FreeRTOS/tasks.c ****         }
4682:ThirdParty/FreeRTOS/tasks.c **** 
4683:ThirdParty/FreeRTOS/tasks.c ****         return pxCurrentTCB;
 7195              		.loc 1 4683 16
 7196 0016 034B     		ldr	r3, .L404
 7197 0018 1B68     		ldr	r3, [r3]
4684:ThirdParty/FreeRTOS/tasks.c ****     }
 7198              		.loc 1 4684 5
 7199 001a 1846     		mov	r0, r3
 7200 001c BD46     		mov	sp, r7
 7201              	.LCFI264:
 7202              		.cfi_def_cfa_register 13
 7203              		@ sp needed
 7204 001e 5DF8047B 		ldr	r7, [sp], #4
 7205              	.LCFI265:
 7206              		.cfi_restore 7
 7207              		.cfi_def_cfa_offset 0
 7208 0022 7047     		bx	lr
 7209              	.L405:
 7210              		.align	2
 7211              	.L404:
 7212 0024 00000000 		.word	pxCurrentTCB
 7213              		.cfi_endproc
 7214              	.LFE56:
 7216              		.section	.text.ulTaskGenericNotifyTake,"ax",%progbits
 7217              		.align	1
 7218              		.global	ulTaskGenericNotifyTake
 7219              		.syntax unified
 7220              		.thumb
 7221              		.thumb_func
 7223              	ulTaskGenericNotifyTake:
 7224              	.LFB57:
4685:ThirdParty/FreeRTOS/tasks.c **** 
4686:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4687:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4688:ThirdParty/FreeRTOS/tasks.c **** 
4689:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4690:ThirdParty/FreeRTOS/tasks.c **** 
4691:ThirdParty/FreeRTOS/tasks.c ****     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
4692:ThirdParty/FreeRTOS/tasks.c ****                                       BaseType_t xClearCountOnExit,
4693:ThirdParty/FreeRTOS/tasks.c ****                                       TickType_t xTicksToWait )
4694:ThirdParty/FreeRTOS/tasks.c ****     {
 7225              		.loc 1 4694 5
 7226              		.cfi_startproc
 7227              		@ args = 0, pretend = 0, frame = 24
 7228              		@ frame_needed = 1, uses_anonymous_args = 0
 7229 0000 80B5     		push	{r7, lr}
 7230              	.LCFI266:
 7231              		.cfi_def_cfa_offset 8
 7232              		.cfi_offset 7, -8
 7233              		.cfi_offset 14, -4
 7234 0002 86B0     		sub	sp, sp, #24
 7235              	.LCFI267:
 7236              		.cfi_def_cfa_offset 32
 7237 0004 00AF     		add	r7, sp, #0
 7238              	.LCFI268:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 214


 7239              		.cfi_def_cfa_register 7
 7240 0006 F860     		str	r0, [r7, #12]
 7241 0008 B960     		str	r1, [r7, #8]
 7242 000a 7A60     		str	r2, [r7, #4]
4695:ThirdParty/FreeRTOS/tasks.c ****         uint32_t ulReturn;
4696:ThirdParty/FreeRTOS/tasks.c **** 
4697:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7243              		.loc 1 4697 9
 7244 000c FB68     		ldr	r3, [r7, #12]
 7245 000e 002B     		cmp	r3, #0
 7246 0010 0AD0     		beq	.L407
 7247              	.LBB270:
 7248              	.LBB271:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7249              		.loc 2 198 9
 7250              		.syntax unified
 7251              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7252 0012 4FF05003 			mov r3, #80												
 7253 0016 83F31188 		msr basepri, r3											
 7254 001a BFF36F8F 		isb														
 7255 001e BFF34F8F 		dsb														
 7256              	
 7257              	@ 0 "" 2
 7258              		.thumb
 7259              		.syntax unified
 7260 0022 3B61     		str	r3, [r7, #16]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 7261              		.loc 2 206 5
 7262 0024 00BF     		nop
 7263              	.L408:
 7264              	.LBE271:
 7265              	.LBE270:
 7266              		.loc 1 4697 9 discriminator 1
 7267 0026 FEE7     		b	.L408
 7268              	.L407:
4698:ThirdParty/FreeRTOS/tasks.c **** 
4699:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 7269              		.loc 1 4699 9
 7270 0028 FFF7FEFF 		bl	vPortEnterCritical
4700:ThirdParty/FreeRTOS/tasks.c ****         {
4701:ThirdParty/FreeRTOS/tasks.c ****             /* Only block if the notification count is not already non-zero. */
4702:ThirdParty/FreeRTOS/tasks.c ****             if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 7271              		.loc 1 4702 29
 7272 002c 264B     		ldr	r3, .L413
 7273 002e 1B68     		ldr	r3, [r3]
 7274              		.loc 1 4702 46
 7275 0030 FA68     		ldr	r2, [r7, #12]
 7276 0032 1432     		adds	r2, r2, #20
 7277 0034 53F82230 		ldr	r3, [r3, r2, lsl #2]
 7278              		.loc 1 4702 15
 7279 0038 002B     		cmp	r3, #0
 7280 003a 15D1     		bne	.L409
4703:ThirdParty/FreeRTOS/tasks.c ****             {
4704:ThirdParty/FreeRTOS/tasks.c ****                 /* Mark this task as waiting for a notification. */
4705:ThirdParty/FreeRTOS/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 7281              		.loc 1 4705 29
 7282 003c 224B     		ldr	r3, .L413
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 215


 7283 003e 1A68     		ldr	r2, [r3]
 7284              		.loc 1 4705 62
 7285 0040 FB68     		ldr	r3, [r7, #12]
 7286 0042 1344     		add	r3, r3, r2
 7287 0044 5433     		adds	r3, r3, #84
 7288 0046 0122     		movs	r2, #1
 7289 0048 1A70     		strb	r2, [r3]
4706:ThirdParty/FreeRTOS/tasks.c **** 
4707:ThirdParty/FreeRTOS/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
 7290              		.loc 1 4707 19
 7291 004a 7B68     		ldr	r3, [r7, #4]
 7292 004c 002B     		cmp	r3, #0
 7293 004e 0BD0     		beq	.L409
4708:ThirdParty/FreeRTOS/tasks.c ****                 {
4709:ThirdParty/FreeRTOS/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7294              		.loc 1 4709 21
 7295 0050 0121     		movs	r1, #1
 7296 0052 7868     		ldr	r0, [r7, #4]
 7297 0054 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4710:ThirdParty/FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
4711:ThirdParty/FreeRTOS/tasks.c **** 
4712:ThirdParty/FreeRTOS/tasks.c ****                     /* All ports are written to allow a yield in a critical
4713:ThirdParty/FreeRTOS/tasks.c ****                      * section (some will yield immediately, others wait until the
4714:ThirdParty/FreeRTOS/tasks.c ****                      * critical section exits) - but it is not something that
4715:ThirdParty/FreeRTOS/tasks.c ****                      * application code should ever do. */
4716:ThirdParty/FreeRTOS/tasks.c ****                     portYIELD_WITHIN_API();
 7298              		.loc 1 4716 21
 7299 0058 1C4B     		ldr	r3, .L413+4
 7300 005a 4FF08052 		mov	r2, #268435456
 7301 005e 1A60     		str	r2, [r3]
 7302              		.syntax unified
 7303              	@ 4716 "ThirdParty/FreeRTOS/tasks.c" 1
 7304 0060 BFF34F8F 		dsb
 7305              	@ 0 "" 2
 7306              	@ 4716 "ThirdParty/FreeRTOS/tasks.c" 1
 7307 0064 BFF36F8F 		isb
 7308              	@ 0 "" 2
 7309              		.thumb
 7310              		.syntax unified
 7311              	.L409:
4717:ThirdParty/FreeRTOS/tasks.c ****                 }
4718:ThirdParty/FreeRTOS/tasks.c ****                 else
4719:ThirdParty/FreeRTOS/tasks.c ****                 {
4720:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4721:ThirdParty/FreeRTOS/tasks.c ****                 }
4722:ThirdParty/FreeRTOS/tasks.c ****             }
4723:ThirdParty/FreeRTOS/tasks.c ****             else
4724:ThirdParty/FreeRTOS/tasks.c ****             {
4725:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4726:ThirdParty/FreeRTOS/tasks.c ****             }
4727:ThirdParty/FreeRTOS/tasks.c ****         }
4728:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
 7312              		.loc 1 4728 9
 7313 0068 FFF7FEFF 		bl	vPortExitCritical
4729:ThirdParty/FreeRTOS/tasks.c **** 
4730:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 7314              		.loc 1 4730 9
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 216


 7315 006c FFF7FEFF 		bl	vPortEnterCritical
4731:ThirdParty/FreeRTOS/tasks.c ****         {
4732:ThirdParty/FreeRTOS/tasks.c ****             traceTASK_NOTIFY_TAKE( uxIndexToWait );
4733:ThirdParty/FreeRTOS/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 7316              		.loc 1 4733 36
 7317 0070 154B     		ldr	r3, .L413
 7318 0072 1B68     		ldr	r3, [r3]
 7319              		.loc 1 4733 22
 7320 0074 FA68     		ldr	r2, [r7, #12]
 7321 0076 1432     		adds	r2, r2, #20
 7322 0078 53F82230 		ldr	r3, [r3, r2, lsl #2]
 7323 007c 7B61     		str	r3, [r7, #20]
4734:ThirdParty/FreeRTOS/tasks.c **** 
4735:ThirdParty/FreeRTOS/tasks.c ****             if( ulReturn != 0UL )
 7324              		.loc 1 4735 15
 7325 007e 7B69     		ldr	r3, [r7, #20]
 7326 0080 002B     		cmp	r3, #0
 7327 0082 12D0     		beq	.L410
4736:ThirdParty/FreeRTOS/tasks.c ****             {
4737:ThirdParty/FreeRTOS/tasks.c ****                 if( xClearCountOnExit != pdFALSE )
 7328              		.loc 1 4737 19
 7329 0084 BB68     		ldr	r3, [r7, #8]
 7330 0086 002B     		cmp	r3, #0
 7331 0088 07D0     		beq	.L411
4738:ThirdParty/FreeRTOS/tasks.c ****                 {
4739:ThirdParty/FreeRTOS/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 7332              		.loc 1 4739 33
 7333 008a 0F4B     		ldr	r3, .L413
 7334 008c 1B68     		ldr	r3, [r3]
 7335              		.loc 1 4739 68
 7336 008e FA68     		ldr	r2, [r7, #12]
 7337 0090 1432     		adds	r2, r2, #20
 7338 0092 0021     		movs	r1, #0
 7339 0094 43F82210 		str	r1, [r3, r2, lsl #2]
 7340 0098 07E0     		b	.L410
 7341              	.L411:
4740:ThirdParty/FreeRTOS/tasks.c ****                 }
4741:ThirdParty/FreeRTOS/tasks.c ****                 else
4742:ThirdParty/FreeRTOS/tasks.c ****                 {
4743:ThirdParty/FreeRTOS/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 7342              		.loc 1 4743 33
 7343 009a 0B4B     		ldr	r3, .L413
 7344 009c 1B68     		ldr	r3, [r3]
 7345              		.loc 1 4743 79
 7346 009e 7A69     		ldr	r2, [r7, #20]
 7347 00a0 511E     		subs	r1, r2, #1
 7348              		.loc 1 4743 68
 7349 00a2 FA68     		ldr	r2, [r7, #12]
 7350 00a4 1432     		adds	r2, r2, #20
 7351 00a6 43F82210 		str	r1, [r3, r2, lsl #2]
 7352              	.L410:
4744:ThirdParty/FreeRTOS/tasks.c ****                 }
4745:ThirdParty/FreeRTOS/tasks.c ****             }
4746:ThirdParty/FreeRTOS/tasks.c ****             else
4747:ThirdParty/FreeRTOS/tasks.c ****             {
4748:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4749:ThirdParty/FreeRTOS/tasks.c ****             }
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 217


4750:ThirdParty/FreeRTOS/tasks.c **** 
4751:ThirdParty/FreeRTOS/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 7353              		.loc 1 4751 25
 7354 00aa 074B     		ldr	r3, .L413
 7355 00ac 1A68     		ldr	r2, [r3]
 7356              		.loc 1 4751 58
 7357 00ae FB68     		ldr	r3, [r7, #12]
 7358 00b0 1344     		add	r3, r3, r2
 7359 00b2 5433     		adds	r3, r3, #84
 7360 00b4 0022     		movs	r2, #0
 7361 00b6 1A70     		strb	r2, [r3]
4752:ThirdParty/FreeRTOS/tasks.c ****         }
4753:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
 7362              		.loc 1 4753 9
 7363 00b8 FFF7FEFF 		bl	vPortExitCritical
4754:ThirdParty/FreeRTOS/tasks.c **** 
4755:ThirdParty/FreeRTOS/tasks.c ****         return ulReturn;
 7364              		.loc 1 4755 16
 7365 00bc 7B69     		ldr	r3, [r7, #20]
4756:ThirdParty/FreeRTOS/tasks.c ****     }
 7366              		.loc 1 4756 5
 7367 00be 1846     		mov	r0, r3
 7368 00c0 1837     		adds	r7, r7, #24
 7369              	.LCFI269:
 7370              		.cfi_def_cfa_offset 8
 7371 00c2 BD46     		mov	sp, r7
 7372              	.LCFI270:
 7373              		.cfi_def_cfa_register 13
 7374              		@ sp needed
 7375 00c4 80BD     		pop	{r7, pc}
 7376              	.L414:
 7377 00c6 00BF     		.align	2
 7378              	.L413:
 7379 00c8 00000000 		.word	pxCurrentTCB
 7380 00cc 04ED00E0 		.word	-536810236
 7381              		.cfi_endproc
 7382              	.LFE57:
 7384              		.section	.text.xTaskGenericNotifyWait,"ax",%progbits
 7385              		.align	1
 7386              		.global	xTaskGenericNotifyWait
 7387              		.syntax unified
 7388              		.thumb
 7389              		.thumb_func
 7391              	xTaskGenericNotifyWait:
 7392              	.LFB58:
4757:ThirdParty/FreeRTOS/tasks.c **** 
4758:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4759:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4760:ThirdParty/FreeRTOS/tasks.c **** 
4761:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4762:ThirdParty/FreeRTOS/tasks.c **** 
4763:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
4764:ThirdParty/FreeRTOS/tasks.c ****                                        uint32_t ulBitsToClearOnEntry,
4765:ThirdParty/FreeRTOS/tasks.c ****                                        uint32_t ulBitsToClearOnExit,
4766:ThirdParty/FreeRTOS/tasks.c ****                                        uint32_t * pulNotificationValue,
4767:ThirdParty/FreeRTOS/tasks.c ****                                        TickType_t xTicksToWait )
4768:ThirdParty/FreeRTOS/tasks.c ****     {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 218


 7393              		.loc 1 4768 5
 7394              		.cfi_startproc
 7395              		@ args = 4, pretend = 0, frame = 24
 7396              		@ frame_needed = 1, uses_anonymous_args = 0
 7397 0000 80B5     		push	{r7, lr}
 7398              	.LCFI271:
 7399              		.cfi_def_cfa_offset 8
 7400              		.cfi_offset 7, -8
 7401              		.cfi_offset 14, -4
 7402 0002 86B0     		sub	sp, sp, #24
 7403              	.LCFI272:
 7404              		.cfi_def_cfa_offset 32
 7405 0004 00AF     		add	r7, sp, #0
 7406              	.LCFI273:
 7407              		.cfi_def_cfa_register 7
 7408 0006 F860     		str	r0, [r7, #12]
 7409 0008 B960     		str	r1, [r7, #8]
 7410 000a 7A60     		str	r2, [r7, #4]
 7411 000c 3B60     		str	r3, [r7]
4769:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn;
4770:ThirdParty/FreeRTOS/tasks.c **** 
4771:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7412              		.loc 1 4771 9
 7413 000e FB68     		ldr	r3, [r7, #12]
 7414 0010 002B     		cmp	r3, #0
 7415 0012 0AD0     		beq	.L416
 7416              	.LBB272:
 7417              	.LBB273:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7418              		.loc 2 198 9
 7419              		.syntax unified
 7420              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7421 0014 4FF05003 			mov r3, #80												
 7422 0018 83F31188 		msr basepri, r3											
 7423 001c BFF36F8F 		isb														
 7424 0020 BFF34F8F 		dsb														
 7425              	
 7426              	@ 0 "" 2
 7427              		.thumb
 7428              		.syntax unified
 7429 0024 3B61     		str	r3, [r7, #16]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 7430              		.loc 2 206 5
 7431 0026 00BF     		nop
 7432              	.L417:
 7433              	.LBE273:
 7434              	.LBE272:
 7435              		.loc 1 4771 9 discriminator 1
 7436 0028 FEE7     		b	.L417
 7437              	.L416:
4772:ThirdParty/FreeRTOS/tasks.c **** 
4773:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 7438              		.loc 1 4773 9
 7439 002a FFF7FEFF 		bl	vPortEnterCritical
4774:ThirdParty/FreeRTOS/tasks.c ****         {
4775:ThirdParty/FreeRTOS/tasks.c ****             /* Only block if a notification is not already pending. */
4776:ThirdParty/FreeRTOS/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 219


 7440              		.loc 1 4776 29
 7441 002e 324B     		ldr	r3, .L423
 7442 0030 1A68     		ldr	r2, [r3]
 7443              		.loc 1 4776 44
 7444 0032 FB68     		ldr	r3, [r7, #12]
 7445 0034 1344     		add	r3, r3, r2
 7446 0036 5433     		adds	r3, r3, #84
 7447 0038 1B78     		ldrb	r3, [r3]
 7448 003a DBB2     		uxtb	r3, r3
 7449              		.loc 1 4776 15
 7450 003c 022B     		cmp	r3, #2
 7451 003e 22D0     		beq	.L418
4777:ThirdParty/FreeRTOS/tasks.c ****             {
4778:ThirdParty/FreeRTOS/tasks.c ****                 /* Clear bits in the task's notification value as bits may get
4779:ThirdParty/FreeRTOS/tasks.c ****                  * set  by the notifying task or interrupt.  This can be used to
4780:ThirdParty/FreeRTOS/tasks.c ****                  * clear the value to zero. */
4781:ThirdParty/FreeRTOS/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 7452              		.loc 1 4781 64
 7453 0040 2D4B     		ldr	r3, .L423
 7454 0042 1B68     		ldr	r3, [r3]
 7455 0044 FA68     		ldr	r2, [r7, #12]
 7456 0046 1432     		adds	r2, r2, #20
 7457 0048 53F82210 		ldr	r1, [r3, r2, lsl #2]
 7458              		.loc 1 4781 67
 7459 004c BA68     		ldr	r2, [r7, #8]
 7460 004e D243     		mvns	r2, r2
 7461              		.loc 1 4781 64
 7462 0050 1140     		ands	r1, r1, r2
 7463 0052 FA68     		ldr	r2, [r7, #12]
 7464 0054 1432     		adds	r2, r2, #20
 7465 0056 43F82210 		str	r1, [r3, r2, lsl #2]
4782:ThirdParty/FreeRTOS/tasks.c **** 
4783:ThirdParty/FreeRTOS/tasks.c ****                 /* Mark this task as waiting for a notification. */
4784:ThirdParty/FreeRTOS/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 7466              		.loc 1 4784 29
 7467 005a 274B     		ldr	r3, .L423
 7468 005c 1A68     		ldr	r2, [r3]
 7469              		.loc 1 4784 62
 7470 005e FB68     		ldr	r3, [r7, #12]
 7471 0060 1344     		add	r3, r3, r2
 7472 0062 5433     		adds	r3, r3, #84
 7473 0064 0122     		movs	r2, #1
 7474 0066 1A70     		strb	r2, [r3]
4785:ThirdParty/FreeRTOS/tasks.c **** 
4786:ThirdParty/FreeRTOS/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
 7475              		.loc 1 4786 19
 7476 0068 3B6A     		ldr	r3, [r7, #32]
 7477 006a 002B     		cmp	r3, #0
 7478 006c 0BD0     		beq	.L418
4787:ThirdParty/FreeRTOS/tasks.c ****                 {
4788:ThirdParty/FreeRTOS/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7479              		.loc 1 4788 21
 7480 006e 0121     		movs	r1, #1
 7481 0070 386A     		ldr	r0, [r7, #32]
 7482 0072 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4789:ThirdParty/FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
4790:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 220


4791:ThirdParty/FreeRTOS/tasks.c ****                     /* All ports are written to allow a yield in a critical
4792:ThirdParty/FreeRTOS/tasks.c ****                      * section (some will yield immediately, others wait until the
4793:ThirdParty/FreeRTOS/tasks.c ****                      * critical section exits) - but it is not something that
4794:ThirdParty/FreeRTOS/tasks.c ****                      * application code should ever do. */
4795:ThirdParty/FreeRTOS/tasks.c ****                     portYIELD_WITHIN_API();
 7483              		.loc 1 4795 21
 7484 0076 214B     		ldr	r3, .L423+4
 7485 0078 4FF08052 		mov	r2, #268435456
 7486 007c 1A60     		str	r2, [r3]
 7487              		.syntax unified
 7488              	@ 4795 "ThirdParty/FreeRTOS/tasks.c" 1
 7489 007e BFF34F8F 		dsb
 7490              	@ 0 "" 2
 7491              	@ 4795 "ThirdParty/FreeRTOS/tasks.c" 1
 7492 0082 BFF36F8F 		isb
 7493              	@ 0 "" 2
 7494              		.thumb
 7495              		.syntax unified
 7496              	.L418:
4796:ThirdParty/FreeRTOS/tasks.c ****                 }
4797:ThirdParty/FreeRTOS/tasks.c ****                 else
4798:ThirdParty/FreeRTOS/tasks.c ****                 {
4799:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4800:ThirdParty/FreeRTOS/tasks.c ****                 }
4801:ThirdParty/FreeRTOS/tasks.c ****             }
4802:ThirdParty/FreeRTOS/tasks.c ****             else
4803:ThirdParty/FreeRTOS/tasks.c ****             {
4804:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4805:ThirdParty/FreeRTOS/tasks.c ****             }
4806:ThirdParty/FreeRTOS/tasks.c ****         }
4807:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
 7497              		.loc 1 4807 9
 7498 0086 FFF7FEFF 		bl	vPortExitCritical
4808:ThirdParty/FreeRTOS/tasks.c **** 
4809:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 7499              		.loc 1 4809 9
 7500 008a FFF7FEFF 		bl	vPortEnterCritical
4810:ThirdParty/FreeRTOS/tasks.c ****         {
4811:ThirdParty/FreeRTOS/tasks.c ****             traceTASK_NOTIFY_WAIT( uxIndexToWait );
4812:ThirdParty/FreeRTOS/tasks.c **** 
4813:ThirdParty/FreeRTOS/tasks.c ****             if( pulNotificationValue != NULL )
 7501              		.loc 1 4813 15
 7502 008e 3B68     		ldr	r3, [r7]
 7503 0090 002B     		cmp	r3, #0
 7504 0092 07D0     		beq	.L419
4814:ThirdParty/FreeRTOS/tasks.c ****             {
4815:ThirdParty/FreeRTOS/tasks.c ****                 /* Output the current notification value, which may or may not
4816:ThirdParty/FreeRTOS/tasks.c ****                  * have changed. */
4817:ThirdParty/FreeRTOS/tasks.c ****                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 7505              		.loc 1 4817 53
 7506 0094 184B     		ldr	r3, .L423
 7507 0096 1B68     		ldr	r3, [r3]
 7508              		.loc 1 4817 70
 7509 0098 FA68     		ldr	r2, [r7, #12]
 7510 009a 1432     		adds	r2, r2, #20
 7511 009c 53F82220 		ldr	r2, [r3, r2, lsl #2]
 7512              		.loc 1 4817 39
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 221


 7513 00a0 3B68     		ldr	r3, [r7]
 7514 00a2 1A60     		str	r2, [r3]
 7515              	.L419:
4818:ThirdParty/FreeRTOS/tasks.c ****             }
4819:ThirdParty/FreeRTOS/tasks.c **** 
4820:ThirdParty/FreeRTOS/tasks.c ****             /* If ucNotifyValue is set then either the task never entered the
4821:ThirdParty/FreeRTOS/tasks.c ****              * blocked state (because a notification was already pending) or the
4822:ThirdParty/FreeRTOS/tasks.c ****              * task unblocked because of a notification.  Otherwise the task
4823:ThirdParty/FreeRTOS/tasks.c ****              * unblocked because of a timeout. */
4824:ThirdParty/FreeRTOS/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 7516              		.loc 1 4824 29
 7517 00a4 144B     		ldr	r3, .L423
 7518 00a6 1A68     		ldr	r2, [r3]
 7519              		.loc 1 4824 44
 7520 00a8 FB68     		ldr	r3, [r7, #12]
 7521 00aa 1344     		add	r3, r3, r2
 7522 00ac 5433     		adds	r3, r3, #84
 7523 00ae 1B78     		ldrb	r3, [r3]
 7524 00b0 DBB2     		uxtb	r3, r3
 7525              		.loc 1 4824 15
 7526 00b2 022B     		cmp	r3, #2
 7527 00b4 02D0     		beq	.L420
4825:ThirdParty/FreeRTOS/tasks.c ****             {
4826:ThirdParty/FreeRTOS/tasks.c ****                 /* A notification was not received. */
4827:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdFALSE;
 7528              		.loc 1 4827 25
 7529 00b6 0023     		movs	r3, #0
 7530 00b8 7B61     		str	r3, [r7, #20]
 7531 00ba 0EE0     		b	.L421
 7532              	.L420:
4828:ThirdParty/FreeRTOS/tasks.c ****             }
4829:ThirdParty/FreeRTOS/tasks.c ****             else
4830:ThirdParty/FreeRTOS/tasks.c ****             {
4831:ThirdParty/FreeRTOS/tasks.c ****                 /* A notification was already pending or a notification was
4832:ThirdParty/FreeRTOS/tasks.c ****                  * received while the task was waiting. */
4833:ThirdParty/FreeRTOS/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 7533              		.loc 1 4833 64
 7534 00bc 0E4B     		ldr	r3, .L423
 7535 00be 1B68     		ldr	r3, [r3]
 7536 00c0 FA68     		ldr	r2, [r7, #12]
 7537 00c2 1432     		adds	r2, r2, #20
 7538 00c4 53F82210 		ldr	r1, [r3, r2, lsl #2]
 7539              		.loc 1 4833 67
 7540 00c8 7A68     		ldr	r2, [r7, #4]
 7541 00ca D243     		mvns	r2, r2
 7542              		.loc 1 4833 64
 7543 00cc 1140     		ands	r1, r1, r2
 7544 00ce FA68     		ldr	r2, [r7, #12]
 7545 00d0 1432     		adds	r2, r2, #20
 7546 00d2 43F82210 		str	r1, [r3, r2, lsl #2]
4834:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 7547              		.loc 1 4834 25
 7548 00d6 0123     		movs	r3, #1
 7549 00d8 7B61     		str	r3, [r7, #20]
 7550              	.L421:
4835:ThirdParty/FreeRTOS/tasks.c ****             }
4836:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 222


4837:ThirdParty/FreeRTOS/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 7551              		.loc 1 4837 25
 7552 00da 074B     		ldr	r3, .L423
 7553 00dc 1A68     		ldr	r2, [r3]
 7554              		.loc 1 4837 58
 7555 00de FB68     		ldr	r3, [r7, #12]
 7556 00e0 1344     		add	r3, r3, r2
 7557 00e2 5433     		adds	r3, r3, #84
 7558 00e4 0022     		movs	r2, #0
 7559 00e6 1A70     		strb	r2, [r3]
4838:ThirdParty/FreeRTOS/tasks.c ****         }
4839:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
 7560              		.loc 1 4839 9
 7561 00e8 FFF7FEFF 		bl	vPortExitCritical
4840:ThirdParty/FreeRTOS/tasks.c **** 
4841:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
 7562              		.loc 1 4841 16
 7563 00ec 7B69     		ldr	r3, [r7, #20]
4842:ThirdParty/FreeRTOS/tasks.c ****     }
 7564              		.loc 1 4842 5
 7565 00ee 1846     		mov	r0, r3
 7566 00f0 1837     		adds	r7, r7, #24
 7567              	.LCFI274:
 7568              		.cfi_def_cfa_offset 8
 7569 00f2 BD46     		mov	sp, r7
 7570              	.LCFI275:
 7571              		.cfi_def_cfa_register 13
 7572              		@ sp needed
 7573 00f4 80BD     		pop	{r7, pc}
 7574              	.L424:
 7575 00f6 00BF     		.align	2
 7576              	.L423:
 7577 00f8 00000000 		.word	pxCurrentTCB
 7578 00fc 04ED00E0 		.word	-536810236
 7579              		.cfi_endproc
 7580              	.LFE58:
 7582              		.section	.text.xTaskGenericNotify,"ax",%progbits
 7583              		.align	1
 7584              		.global	xTaskGenericNotify
 7585              		.syntax unified
 7586              		.thumb
 7587              		.thumb_func
 7589              	xTaskGenericNotify:
 7590              	.LFB59:
4843:ThirdParty/FreeRTOS/tasks.c **** 
4844:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4845:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4846:ThirdParty/FreeRTOS/tasks.c **** 
4847:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4848:ThirdParty/FreeRTOS/tasks.c **** 
4849:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
4850:ThirdParty/FreeRTOS/tasks.c ****                                    UBaseType_t uxIndexToNotify,
4851:ThirdParty/FreeRTOS/tasks.c ****                                    uint32_t ulValue,
4852:ThirdParty/FreeRTOS/tasks.c ****                                    eNotifyAction eAction,
4853:ThirdParty/FreeRTOS/tasks.c ****                                    uint32_t * pulPreviousNotificationValue )
4854:ThirdParty/FreeRTOS/tasks.c ****     {
 7591              		.loc 1 4854 5
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 223


 7592              		.cfi_startproc
 7593              		@ args = 4, pretend = 0, frame = 56
 7594              		@ frame_needed = 1, uses_anonymous_args = 0
 7595 0000 80B5     		push	{r7, lr}
 7596              	.LCFI276:
 7597              		.cfi_def_cfa_offset 8
 7598              		.cfi_offset 7, -8
 7599              		.cfi_offset 14, -4
 7600 0002 8EB0     		sub	sp, sp, #56
 7601              	.LCFI277:
 7602              		.cfi_def_cfa_offset 64
 7603 0004 00AF     		add	r7, sp, #0
 7604              	.LCFI278:
 7605              		.cfi_def_cfa_register 7
 7606 0006 F860     		str	r0, [r7, #12]
 7607 0008 B960     		str	r1, [r7, #8]
 7608 000a 7A60     		str	r2, [r7, #4]
 7609 000c FB70     		strb	r3, [r7, #3]
4855:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
4856:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
 7610              		.loc 1 4856 20
 7611 000e 0123     		movs	r3, #1
 7612 0010 7B63     		str	r3, [r7, #52]
4857:ThirdParty/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
4858:ThirdParty/FreeRTOS/tasks.c **** 
4859:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7613              		.loc 1 4859 9
 7614 0012 BB68     		ldr	r3, [r7, #8]
 7615 0014 002B     		cmp	r3, #0
 7616 0016 0AD0     		beq	.L426
 7617              	.LBB274:
 7618              	.LBB275:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7619              		.loc 2 198 9
 7620              		.syntax unified
 7621              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7622 0018 4FF05003 			mov r3, #80												
 7623 001c 83F31188 		msr basepri, r3											
 7624 0020 BFF36F8F 		isb														
 7625 0024 BFF34F8F 		dsb														
 7626              	
 7627              	@ 0 "" 2
 7628              		.thumb
 7629              		.syntax unified
 7630 0028 3B62     		str	r3, [r7, #32]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 7631              		.loc 2 206 5
 7632 002a 00BF     		nop
 7633              	.L427:
 7634              	.LBE275:
 7635              	.LBE274:
 7636              		.loc 1 4859 9 discriminator 1
 7637 002c FEE7     		b	.L427
 7638              	.L426:
4860:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 7639              		.loc 1 4860 9
 7640 002e FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 224


 7641 0030 002B     		cmp	r3, #0
 7642 0032 0AD1     		bne	.L428
 7643              	.LBB276:
 7644              	.LBB277:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7645              		.loc 2 198 9
 7646              		.syntax unified
 7647              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7648 0034 4FF05003 			mov r3, #80												
 7649 0038 83F31188 		msr basepri, r3											
 7650 003c BFF36F8F 		isb														
 7651 0040 BFF34F8F 		dsb														
 7652              	
 7653              	@ 0 "" 2
 7654              		.thumb
 7655              		.syntax unified
 7656 0044 FB61     		str	r3, [r7, #28]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 7657              		.loc 2 206 5
 7658 0046 00BF     		nop
 7659              	.L429:
 7660              	.LBE277:
 7661              	.LBE276:
 7662              		.loc 1 4860 9 discriminator 2
 7663 0048 FEE7     		b	.L429
 7664              	.L428:
4861:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 7665              		.loc 1 4861 15
 7666 004a FB68     		ldr	r3, [r7, #12]
 7667 004c 3B63     		str	r3, [r7, #48]
4862:ThirdParty/FreeRTOS/tasks.c **** 
4863:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 7668              		.loc 1 4863 9
 7669 004e FFF7FEFF 		bl	vPortEnterCritical
4864:ThirdParty/FreeRTOS/tasks.c ****         {
4865:ThirdParty/FreeRTOS/tasks.c ****             if( pulPreviousNotificationValue != NULL )
 7670              		.loc 1 4865 15
 7671 0052 3B6C     		ldr	r3, [r7, #64]
 7672 0054 002B     		cmp	r3, #0
 7673 0056 06D0     		beq	.L430
4866:ThirdParty/FreeRTOS/tasks.c ****             {
4867:ThirdParty/FreeRTOS/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 7674              		.loc 1 4867 71
 7675 0058 3B6B     		ldr	r3, [r7, #48]
 7676 005a BA68     		ldr	r2, [r7, #8]
 7677 005c 1432     		adds	r2, r2, #20
 7678 005e 53F82220 		ldr	r2, [r3, r2, lsl #2]
 7679              		.loc 1 4867 47
 7680 0062 3B6C     		ldr	r3, [r7, #64]
 7681 0064 1A60     		str	r2, [r3]
 7682              	.L430:
4868:ThirdParty/FreeRTOS/tasks.c ****             }
4869:ThirdParty/FreeRTOS/tasks.c **** 
4870:ThirdParty/FreeRTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 7683              		.loc 1 4870 35
 7684 0066 3A6B     		ldr	r2, [r7, #48]
 7685 0068 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 225


 7686 006a 1344     		add	r3, r3, r2
 7687 006c 5433     		adds	r3, r3, #84
 7688 006e 1B78     		ldrb	r3, [r3]
 7689 0070 87F82F30 		strb	r3, [r7, #47]
4871:ThirdParty/FreeRTOS/tasks.c **** 
4872:ThirdParty/FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 7690              		.loc 1 4872 53
 7691 0074 3A6B     		ldr	r2, [r7, #48]
 7692 0076 BB68     		ldr	r3, [r7, #8]
 7693 0078 1344     		add	r3, r3, r2
 7694 007a 5433     		adds	r3, r3, #84
 7695 007c 0222     		movs	r2, #2
 7696 007e 1A70     		strb	r2, [r3]
4873:ThirdParty/FreeRTOS/tasks.c **** 
4874:ThirdParty/FreeRTOS/tasks.c ****             switch( eAction )
 7697              		.loc 1 4874 13
 7698 0080 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 7699 0082 042B     		cmp	r3, #4
 7700 0084 3BD8     		bhi	.L431
 7701 0086 01A2     		adr	r2, .L433
 7702 0088 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7703              		.p2align 2
 7704              	.L433:
 7705 008c 1D010000 		.word	.L448+1
 7706 0090 A1000000 		.word	.L436+1
 7707 0094 BD000000 		.word	.L435+1
 7708 0098 D5000000 		.word	.L434+1
 7709 009c E3000000 		.word	.L432+1
 7710              		.p2align 1
 7711              	.L436:
4875:ThirdParty/FreeRTOS/tasks.c ****             {
4876:ThirdParty/FreeRTOS/tasks.c ****                 case eSetBits:
4877:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 7712              		.loc 1 4877 63
 7713 00a0 3B6B     		ldr	r3, [r7, #48]
 7714 00a2 BA68     		ldr	r2, [r7, #8]
 7715 00a4 1432     		adds	r2, r2, #20
 7716 00a6 53F82220 		ldr	r2, [r3, r2, lsl #2]
 7717 00aa 7B68     		ldr	r3, [r7, #4]
 7718 00ac 42EA0301 		orr	r1, r2, r3
 7719 00b0 3B6B     		ldr	r3, [r7, #48]
 7720 00b2 BA68     		ldr	r2, [r7, #8]
 7721 00b4 1432     		adds	r2, r2, #20
 7722 00b6 43F82210 		str	r1, [r3, r2, lsl #2]
4878:ThirdParty/FreeRTOS/tasks.c ****                     break;
 7723              		.loc 1 4878 21
 7724 00ba 32E0     		b	.L438
 7725              	.L435:
4879:ThirdParty/FreeRTOS/tasks.c **** 
4880:ThirdParty/FreeRTOS/tasks.c ****                 case eIncrement:
4881:ThirdParty/FreeRTOS/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 7726              		.loc 1 4881 45
 7727 00bc 3B6B     		ldr	r3, [r7, #48]
 7728 00be BA68     		ldr	r2, [r7, #8]
 7729 00c0 1432     		adds	r2, r2, #20
 7730 00c2 53F82230 		ldr	r3, [r3, r2, lsl #2]
 7731              		.loc 1 4881 66
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 226


 7732 00c6 591C     		adds	r1, r3, #1
 7733 00c8 3B6B     		ldr	r3, [r7, #48]
 7734 00ca BA68     		ldr	r2, [r7, #8]
 7735 00cc 1432     		adds	r2, r2, #20
 7736 00ce 43F82210 		str	r1, [r3, r2, lsl #2]
4882:ThirdParty/FreeRTOS/tasks.c ****                     break;
 7737              		.loc 1 4882 21
 7738 00d2 26E0     		b	.L438
 7739              	.L434:
4883:ThirdParty/FreeRTOS/tasks.c **** 
4884:ThirdParty/FreeRTOS/tasks.c ****                 case eSetValueWithOverwrite:
4885:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 7740              		.loc 1 4885 63
 7741 00d4 3B6B     		ldr	r3, [r7, #48]
 7742 00d6 BA68     		ldr	r2, [r7, #8]
 7743 00d8 1432     		adds	r2, r2, #20
 7744 00da 7968     		ldr	r1, [r7, #4]
 7745 00dc 43F82210 		str	r1, [r3, r2, lsl #2]
4886:ThirdParty/FreeRTOS/tasks.c ****                     break;
 7746              		.loc 1 4886 21
 7747 00e0 1FE0     		b	.L438
 7748              	.L432:
4887:ThirdParty/FreeRTOS/tasks.c **** 
4888:ThirdParty/FreeRTOS/tasks.c ****                 case eSetValueWithoutOverwrite:
4889:ThirdParty/FreeRTOS/tasks.c **** 
4890:ThirdParty/FreeRTOS/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7749              		.loc 1 4890 23
 7750 00e2 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 7751 00e6 022B     		cmp	r3, #2
 7752 00e8 06D0     		beq	.L439
4891:ThirdParty/FreeRTOS/tasks.c ****                     {
4892:ThirdParty/FreeRTOS/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 7753              		.loc 1 4892 67
 7754 00ea 3B6B     		ldr	r3, [r7, #48]
 7755 00ec BA68     		ldr	r2, [r7, #8]
 7756 00ee 1432     		adds	r2, r2, #20
 7757 00f0 7968     		ldr	r1, [r7, #4]
 7758 00f2 43F82210 		str	r1, [r3, r2, lsl #2]
4893:ThirdParty/FreeRTOS/tasks.c ****                     }
4894:ThirdParty/FreeRTOS/tasks.c ****                     else
4895:ThirdParty/FreeRTOS/tasks.c ****                     {
4896:ThirdParty/FreeRTOS/tasks.c ****                         /* The value could not be written to the task. */
4897:ThirdParty/FreeRTOS/tasks.c ****                         xReturn = pdFAIL;
4898:ThirdParty/FreeRTOS/tasks.c ****                     }
4899:ThirdParty/FreeRTOS/tasks.c **** 
4900:ThirdParty/FreeRTOS/tasks.c ****                     break;
 7759              		.loc 1 4900 21
 7760 00f6 14E0     		b	.L438
 7761              	.L439:
4897:ThirdParty/FreeRTOS/tasks.c ****                     }
 7762              		.loc 1 4897 33
 7763 00f8 0023     		movs	r3, #0
 7764 00fa 7B63     		str	r3, [r7, #52]
 7765              		.loc 1 4900 21
 7766 00fc 11E0     		b	.L438
 7767              	.L431:
4901:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 227


4902:ThirdParty/FreeRTOS/tasks.c ****                 case eNoAction:
4903:ThirdParty/FreeRTOS/tasks.c **** 
4904:ThirdParty/FreeRTOS/tasks.c ****                     /* The task is being notified without its notify value being
4905:ThirdParty/FreeRTOS/tasks.c ****                      * updated. */
4906:ThirdParty/FreeRTOS/tasks.c ****                     break;
4907:ThirdParty/FreeRTOS/tasks.c **** 
4908:ThirdParty/FreeRTOS/tasks.c ****                 default:
4909:ThirdParty/FreeRTOS/tasks.c **** 
4910:ThirdParty/FreeRTOS/tasks.c ****                     /* Should not get here if all enums are handled.
4911:ThirdParty/FreeRTOS/tasks.c ****                      * Artificially force an assert by testing a value the
4912:ThirdParty/FreeRTOS/tasks.c ****                      * compiler can't assume is const. */
4913:ThirdParty/FreeRTOS/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
 7768              		.loc 1 4913 21
 7769 00fe 464B     		ldr	r3, .L450
 7770 0100 1B68     		ldr	r3, [r3]
 7771 0102 002B     		cmp	r3, #0
 7772 0104 0CD0     		beq	.L449
 7773              	.LBB278:
 7774              	.LBB279:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7775              		.loc 2 198 9
 7776              		.syntax unified
 7777              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7778 0106 4FF05003 			mov r3, #80												
 7779 010a 83F31188 		msr basepri, r3											
 7780 010e BFF36F8F 		isb														
 7781 0112 BFF34F8F 		dsb														
 7782              	
 7783              	@ 0 "" 2
 7784              		.thumb
 7785              		.syntax unified
 7786 0116 BB61     		str	r3, [r7, #24]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 7787              		.loc 2 206 5
 7788 0118 00BF     		nop
 7789              	.L442:
 7790              	.LBE279:
 7791              	.LBE278:
 7792              		.loc 1 4913 21 discriminator 3
 7793 011a FEE7     		b	.L442
 7794              	.L448:
4906:ThirdParty/FreeRTOS/tasks.c **** 
 7795              		.loc 1 4906 21
 7796 011c 00BF     		nop
 7797 011e 00E0     		b	.L438
 7798              	.L449:
4914:ThirdParty/FreeRTOS/tasks.c **** 
4915:ThirdParty/FreeRTOS/tasks.c ****                     break;
 7799              		.loc 1 4915 21
 7800 0120 00BF     		nop
 7801              	.L438:
4916:ThirdParty/FreeRTOS/tasks.c ****             }
4917:ThirdParty/FreeRTOS/tasks.c **** 
4918:ThirdParty/FreeRTOS/tasks.c ****             traceTASK_NOTIFY( uxIndexToNotify );
4919:ThirdParty/FreeRTOS/tasks.c **** 
4920:ThirdParty/FreeRTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
4921:ThirdParty/FreeRTOS/tasks.c ****              * notification then unblock it now. */
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 228


4922:ThirdParty/FreeRTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7802              		.loc 1 4922 15
 7803 0122 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 7804 0126 012B     		cmp	r3, #1
 7805 0128 6ED1     		bne	.L443
 7806              	.LBB280:
4923:ThirdParty/FreeRTOS/tasks.c ****             {
4924:ThirdParty/FreeRTOS/tasks.c ****                 listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 7807              		.loc 1 4924 17
 7808 012a 3B6B     		ldr	r3, [r7, #48]
 7809 012c 5B69     		ldr	r3, [r3, #20]
 7810 012e BB62     		str	r3, [r7, #40]
 7811 0130 3B6B     		ldr	r3, [r7, #48]
 7812 0132 9B68     		ldr	r3, [r3, #8]
 7813 0134 3A6B     		ldr	r2, [r7, #48]
 7814 0136 D268     		ldr	r2, [r2, #12]
 7815 0138 9A60     		str	r2, [r3, #8]
 7816 013a 3B6B     		ldr	r3, [r7, #48]
 7817 013c DB68     		ldr	r3, [r3, #12]
 7818 013e 3A6B     		ldr	r2, [r7, #48]
 7819 0140 9268     		ldr	r2, [r2, #8]
 7820 0142 5A60     		str	r2, [r3, #4]
 7821 0144 BB6A     		ldr	r3, [r7, #40]
 7822 0146 5A68     		ldr	r2, [r3, #4]
 7823 0148 3B6B     		ldr	r3, [r7, #48]
 7824 014a 0433     		adds	r3, r3, #4
 7825 014c 9A42     		cmp	r2, r3
 7826 014e 03D1     		bne	.L444
 7827              		.loc 1 4924 17 is_stmt 0 discriminator 1
 7828 0150 3B6B     		ldr	r3, [r7, #48]
 7829 0152 DA68     		ldr	r2, [r3, #12]
 7830 0154 BB6A     		ldr	r3, [r7, #40]
 7831 0156 5A60     		str	r2, [r3, #4]
 7832              	.L444:
 7833              		.loc 1 4924 17 discriminator 3
 7834 0158 3B6B     		ldr	r3, [r7, #48]
 7835 015a 0022     		movs	r2, #0
 7836 015c 5A61     		str	r2, [r3, #20]
 7837 015e BB6A     		ldr	r3, [r7, #40]
 7838 0160 1B68     		ldr	r3, [r3]
 7839 0162 5A1E     		subs	r2, r3, #1
 7840 0164 BB6A     		ldr	r3, [r7, #40]
 7841 0166 1A60     		str	r2, [r3]
 7842              	.LBE280:
4925:ThirdParty/FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 7843              		.loc 1 4925 17 is_stmt 1 discriminator 3
 7844 0168 3B6B     		ldr	r3, [r7, #48]
 7845 016a DB6A     		ldr	r3, [r3, #44]
 7846 016c 0122     		movs	r2, #1
 7847 016e 9A40     		lsls	r2, r2, r3
 7848 0170 2A4B     		ldr	r3, .L450+4
 7849 0172 1B68     		ldr	r3, [r3]
 7850 0174 1343     		orrs	r3, r3, r2
 7851 0176 294A     		ldr	r2, .L450+4
 7852 0178 1360     		str	r3, [r2]
 7853              	.LBB281:
 7854 017a 3B6B     		ldr	r3, [r7, #48]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 229


 7855 017c DA6A     		ldr	r2, [r3, #44]
 7856 017e 2849     		ldr	r1, .L450+8
 7857 0180 1346     		mov	r3, r2
 7858 0182 9B00     		lsls	r3, r3, #2
 7859 0184 1344     		add	r3, r3, r2
 7860 0186 9B00     		lsls	r3, r3, #2
 7861 0188 0B44     		add	r3, r3, r1
 7862 018a 0433     		adds	r3, r3, #4
 7863 018c 1B68     		ldr	r3, [r3]
 7864 018e 7B62     		str	r3, [r7, #36]
 7865 0190 3B6B     		ldr	r3, [r7, #48]
 7866 0192 7A6A     		ldr	r2, [r7, #36]
 7867 0194 9A60     		str	r2, [r3, #8]
 7868 0196 7B6A     		ldr	r3, [r7, #36]
 7869 0198 9A68     		ldr	r2, [r3, #8]
 7870 019a 3B6B     		ldr	r3, [r7, #48]
 7871 019c DA60     		str	r2, [r3, #12]
 7872 019e 7B6A     		ldr	r3, [r7, #36]
 7873 01a0 9B68     		ldr	r3, [r3, #8]
 7874 01a2 3A6B     		ldr	r2, [r7, #48]
 7875 01a4 0432     		adds	r2, r2, #4
 7876 01a6 5A60     		str	r2, [r3, #4]
 7877 01a8 3B6B     		ldr	r3, [r7, #48]
 7878 01aa 1A1D     		adds	r2, r3, #4
 7879 01ac 7B6A     		ldr	r3, [r7, #36]
 7880 01ae 9A60     		str	r2, [r3, #8]
 7881 01b0 3B6B     		ldr	r3, [r7, #48]
 7882 01b2 DA6A     		ldr	r2, [r3, #44]
 7883 01b4 1346     		mov	r3, r2
 7884 01b6 9B00     		lsls	r3, r3, #2
 7885 01b8 1344     		add	r3, r3, r2
 7886 01ba 9B00     		lsls	r3, r3, #2
 7887 01bc 184A     		ldr	r2, .L450+8
 7888 01be 1A44     		add	r2, r2, r3
 7889 01c0 3B6B     		ldr	r3, [r7, #48]
 7890 01c2 5A61     		str	r2, [r3, #20]
 7891 01c4 3B6B     		ldr	r3, [r7, #48]
 7892 01c6 DA6A     		ldr	r2, [r3, #44]
 7893 01c8 1549     		ldr	r1, .L450+8
 7894 01ca 1346     		mov	r3, r2
 7895 01cc 9B00     		lsls	r3, r3, #2
 7896 01ce 1344     		add	r3, r3, r2
 7897 01d0 9B00     		lsls	r3, r3, #2
 7898 01d2 0B44     		add	r3, r3, r1
 7899 01d4 1B68     		ldr	r3, [r3]
 7900 01d6 591C     		adds	r1, r3, #1
 7901 01d8 1148     		ldr	r0, .L450+8
 7902 01da 1346     		mov	r3, r2
 7903 01dc 9B00     		lsls	r3, r3, #2
 7904 01de 1344     		add	r3, r3, r2
 7905 01e0 9B00     		lsls	r3, r3, #2
 7906 01e2 0344     		add	r3, r3, r0
 7907 01e4 1960     		str	r1, [r3]
 7908              	.LBE281:
4926:ThirdParty/FreeRTOS/tasks.c **** 
4927:ThirdParty/FreeRTOS/tasks.c ****                 /* The task should not have been on an event list. */
4928:ThirdParty/FreeRTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 230


 7909              		.loc 1 4928 17 discriminator 3
 7910 01e6 3B6B     		ldr	r3, [r7, #48]
 7911 01e8 9B6A     		ldr	r3, [r3, #40]
 7912 01ea 002B     		cmp	r3, #0
 7913 01ec 0AD0     		beq	.L445
 7914              	.LBB282:
 7915              	.LBB283:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7916              		.loc 2 198 9
 7917              		.syntax unified
 7918              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7919 01ee 4FF05003 			mov r3, #80												
 7920 01f2 83F31188 		msr basepri, r3											
 7921 01f6 BFF36F8F 		isb														
 7922 01fa BFF34F8F 		dsb														
 7923              	
 7924              	@ 0 "" 2
 7925              		.thumb
 7926              		.syntax unified
 7927 01fe 7B61     		str	r3, [r7, #20]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 7928              		.loc 2 206 5
 7929 0200 00BF     		nop
 7930              	.L446:
 7931              	.LBE283:
 7932              	.LBE282:
 7933              		.loc 1 4928 17 discriminator 4
 7934 0202 FEE7     		b	.L446
 7935              	.L445:
4929:ThirdParty/FreeRTOS/tasks.c **** 
4930:ThirdParty/FreeRTOS/tasks.c ****                 #if ( configUSE_TICKLESS_IDLE != 0 )
4931:ThirdParty/FreeRTOS/tasks.c ****                 {
4932:ThirdParty/FreeRTOS/tasks.c ****                     /* If a task is blocked waiting for a notification then
4933:ThirdParty/FreeRTOS/tasks.c ****                      * xNextTaskUnblockTime might be set to the blocked task's time
4934:ThirdParty/FreeRTOS/tasks.c ****                      * out time.  If the task is unblocked for a reason other than
4935:ThirdParty/FreeRTOS/tasks.c ****                      * a timeout xNextTaskUnblockTime is normally left unchanged,
4936:ThirdParty/FreeRTOS/tasks.c ****                      * because it will automatically get reset to a new value when
4937:ThirdParty/FreeRTOS/tasks.c ****                      * the tick count equals xNextTaskUnblockTime.  However if
4938:ThirdParty/FreeRTOS/tasks.c ****                      * tickless idling is used it might be more important to enter
4939:ThirdParty/FreeRTOS/tasks.c ****                      * sleep mode at the earliest possible time - so reset
4940:ThirdParty/FreeRTOS/tasks.c ****                      * xNextTaskUnblockTime here to ensure it is updated at the
4941:ThirdParty/FreeRTOS/tasks.c ****                      * earliest possible time. */
4942:ThirdParty/FreeRTOS/tasks.c ****                     prvResetNextTaskUnblockTime();
4943:ThirdParty/FreeRTOS/tasks.c ****                 }
4944:ThirdParty/FreeRTOS/tasks.c ****                 #endif
4945:ThirdParty/FreeRTOS/tasks.c **** 
4946:ThirdParty/FreeRTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7936              		.loc 1 4946 53
 7937 0204 074B     		ldr	r3, .L450+12
 7938 0206 1B68     		ldr	r3, [r3]
 7939              	.L443:
4947:ThirdParty/FreeRTOS/tasks.c ****                 {
4948:ThirdParty/FreeRTOS/tasks.c ****                     /* The notified task has a priority above the currently
4949:ThirdParty/FreeRTOS/tasks.c ****                      * executing task so a yield is required. */
4950:ThirdParty/FreeRTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
4951:ThirdParty/FreeRTOS/tasks.c ****                 }
4952:ThirdParty/FreeRTOS/tasks.c ****                 else
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 231


4953:ThirdParty/FreeRTOS/tasks.c ****                 {
4954:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4955:ThirdParty/FreeRTOS/tasks.c ****                 }
4956:ThirdParty/FreeRTOS/tasks.c ****             }
4957:ThirdParty/FreeRTOS/tasks.c ****             else
4958:ThirdParty/FreeRTOS/tasks.c ****             {
4959:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4960:ThirdParty/FreeRTOS/tasks.c ****             }
4961:ThirdParty/FreeRTOS/tasks.c ****         }
4962:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
 7940              		.loc 1 4962 9
 7941 0208 FFF7FEFF 		bl	vPortExitCritical
4963:ThirdParty/FreeRTOS/tasks.c **** 
4964:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
 7942              		.loc 1 4964 16
 7943 020c 7B6B     		ldr	r3, [r7, #52]
4965:ThirdParty/FreeRTOS/tasks.c ****     }
 7944              		.loc 1 4965 5
 7945 020e 1846     		mov	r0, r3
 7946 0210 3837     		adds	r7, r7, #56
 7947              	.LCFI279:
 7948              		.cfi_def_cfa_offset 8
 7949 0212 BD46     		mov	sp, r7
 7950              	.LCFI280:
 7951              		.cfi_def_cfa_register 13
 7952              		@ sp needed
 7953 0214 80BD     		pop	{r7, pc}
 7954              	.L451:
 7955 0216 00BF     		.align	2
 7956              	.L450:
 7957 0218 00000000 		.word	xTickCount
 7958 021c 00000000 		.word	uxTopReadyPriority
 7959 0220 00000000 		.word	pxReadyTasksLists
 7960 0224 00000000 		.word	pxCurrentTCB
 7961              		.cfi_endproc
 7962              	.LFE59:
 7964              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 7965              		.align	1
 7966              		.global	xTaskGenericNotifyFromISR
 7967              		.syntax unified
 7968              		.thumb
 7969              		.thumb_func
 7971              	xTaskGenericNotifyFromISR:
 7972              	.LFB60:
4966:ThirdParty/FreeRTOS/tasks.c **** 
4967:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4968:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4969:ThirdParty/FreeRTOS/tasks.c **** 
4970:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4971:ThirdParty/FreeRTOS/tasks.c **** 
4972:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
4973:ThirdParty/FreeRTOS/tasks.c ****                                           UBaseType_t uxIndexToNotify,
4974:ThirdParty/FreeRTOS/tasks.c ****                                           uint32_t ulValue,
4975:ThirdParty/FreeRTOS/tasks.c ****                                           eNotifyAction eAction,
4976:ThirdParty/FreeRTOS/tasks.c ****                                           uint32_t * pulPreviousNotificationValue,
4977:ThirdParty/FreeRTOS/tasks.c ****                                           BaseType_t * pxHigherPriorityTaskWoken )
4978:ThirdParty/FreeRTOS/tasks.c ****     {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 232


 7973              		.loc 1 4978 5
 7974              		.cfi_startproc
 7975              		@ args = 8, pretend = 0, frame = 72
 7976              		@ frame_needed = 1, uses_anonymous_args = 0
 7977 0000 80B5     		push	{r7, lr}
 7978              	.LCFI281:
 7979              		.cfi_def_cfa_offset 8
 7980              		.cfi_offset 7, -8
 7981              		.cfi_offset 14, -4
 7982 0002 92B0     		sub	sp, sp, #72
 7983              	.LCFI282:
 7984              		.cfi_def_cfa_offset 80
 7985 0004 00AF     		add	r7, sp, #0
 7986              	.LCFI283:
 7987              		.cfi_def_cfa_register 7
 7988 0006 F860     		str	r0, [r7, #12]
 7989 0008 B960     		str	r1, [r7, #8]
 7990 000a 7A60     		str	r2, [r7, #4]
 7991 000c FB70     		strb	r3, [r7, #3]
4979:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
4980:ThirdParty/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
4981:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
 7992              		.loc 1 4981 20
 7993 000e 0123     		movs	r3, #1
 7994 0010 7B64     		str	r3, [r7, #68]
4982:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
4983:ThirdParty/FreeRTOS/tasks.c **** 
4984:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 7995              		.loc 1 4984 9
 7996 0012 FB68     		ldr	r3, [r7, #12]
 7997 0014 002B     		cmp	r3, #0
 7998 0016 0AD1     		bne	.L453
 7999              	.LBB284:
 8000              	.LBB285:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8001              		.loc 2 198 9
 8002              		.syntax unified
 8003              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8004 0018 4FF05003 			mov r3, #80												
 8005 001c 83F31188 		msr basepri, r3											
 8006 0020 BFF36F8F 		isb														
 8007 0024 BFF34F8F 		dsb														
 8008              	
 8009              	@ 0 "" 2
 8010              		.thumb
 8011              		.syntax unified
 8012 0028 BB62     		str	r3, [r7, #40]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 8013              		.loc 2 206 5
 8014 002a 00BF     		nop
 8015              	.L454:
 8016              	.LBE285:
 8017              	.LBE284:
 8018              		.loc 1 4984 9 discriminator 1
 8019 002c FEE7     		b	.L454
 8020              	.L453:
4985:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 233


 8021              		.loc 1 4985 9
 8022 002e BB68     		ldr	r3, [r7, #8]
 8023 0030 002B     		cmp	r3, #0
 8024 0032 0AD0     		beq	.L455
 8025              	.LBB286:
 8026              	.LBB287:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8027              		.loc 2 198 9
 8028              		.syntax unified
 8029              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8030 0034 4FF05003 			mov r3, #80												
 8031 0038 83F31188 		msr basepri, r3											
 8032 003c BFF36F8F 		isb														
 8033 0040 BFF34F8F 		dsb														
 8034              	
 8035              	@ 0 "" 2
 8036              		.thumb
 8037              		.syntax unified
 8038 0044 7B62     		str	r3, [r7, #36]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 8039              		.loc 2 206 5
 8040 0046 00BF     		nop
 8041              	.L456:
 8042              	.LBE287:
 8043              	.LBE286:
 8044              		.loc 1 4985 9 discriminator 2
 8045 0048 FEE7     		b	.L456
 8046              	.L455:
4986:ThirdParty/FreeRTOS/tasks.c **** 
4987:ThirdParty/FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
4988:ThirdParty/FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
4989:ThirdParty/FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
4990:ThirdParty/FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
4991:ThirdParty/FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4992:ThirdParty/FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
4993:ThirdParty/FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4994:ThirdParty/FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
4995:ThirdParty/FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
4996:ThirdParty/FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
4997:ThirdParty/FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
4998:ThirdParty/FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
4999:ThirdParty/FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5000:ThirdParty/FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5001:ThirdParty/FreeRTOS/tasks.c ****          * provided on the following link:
5002:ThirdParty/FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5003:ThirdParty/FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8047              		.loc 1 5003 9
 8048 004a FFF7FEFF 		bl	vPortValidateInterruptPriority
5004:ThirdParty/FreeRTOS/tasks.c **** 
5005:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 8049              		.loc 1 5005 15
 8050 004e FB68     		ldr	r3, [r7, #12]
 8051 0050 3B64     		str	r3, [r7, #64]
 8052              	.LBB288:
 8053              	.LBB289:
 214:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8054              		.loc 2 214 9
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 234


 8055              		.syntax unified
 8056              	@ 214 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8057 0052 EFF31182 			mrs r2, basepri											
 8058 0056 4FF05003 		mov r3, #80												
 8059 005a 83F31188 		msr basepri, r3											
 8060 005e BFF36F8F 		isb														
 8061 0062 BFF34F8F 		dsb														
 8062              	
 8063              	@ 0 "" 2
 8064              		.thumb
 8065              		.syntax unified
 8066 0066 3A62     		str	r2, [r7, #32]
 8067 0068 FB61     		str	r3, [r7, #28]
 226:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 8068              		.loc 2 226 16
 8069 006a 3B6A     		ldr	r3, [r7, #32]
 8070              	.LBE289:
 8071              	.LBE288:
5006:ThirdParty/FreeRTOS/tasks.c **** 
5007:ThirdParty/FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8072              		.loc 1 5007 34
 8073 006c FB63     		str	r3, [r7, #60]
5008:ThirdParty/FreeRTOS/tasks.c ****         {
5009:ThirdParty/FreeRTOS/tasks.c ****             if( pulPreviousNotificationValue != NULL )
 8074              		.loc 1 5009 15
 8075 006e 3B6D     		ldr	r3, [r7, #80]
 8076 0070 002B     		cmp	r3, #0
 8077 0072 06D0     		beq	.L458
5010:ThirdParty/FreeRTOS/tasks.c ****             {
5011:ThirdParty/FreeRTOS/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8078              		.loc 1 5011 71
 8079 0074 3B6C     		ldr	r3, [r7, #64]
 8080 0076 BA68     		ldr	r2, [r7, #8]
 8081 0078 1432     		adds	r2, r2, #20
 8082 007a 53F82220 		ldr	r2, [r3, r2, lsl #2]
 8083              		.loc 1 5011 47
 8084 007e 3B6D     		ldr	r3, [r7, #80]
 8085 0080 1A60     		str	r2, [r3]
 8086              	.L458:
5012:ThirdParty/FreeRTOS/tasks.c ****             }
5013:ThirdParty/FreeRTOS/tasks.c **** 
5014:ThirdParty/FreeRTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8087              		.loc 1 5014 35
 8088 0082 3A6C     		ldr	r2, [r7, #64]
 8089 0084 BB68     		ldr	r3, [r7, #8]
 8090 0086 1344     		add	r3, r3, r2
 8091 0088 5433     		adds	r3, r3, #84
 8092 008a 1B78     		ldrb	r3, [r3]
 8093 008c 87F83B30 		strb	r3, [r7, #59]
5015:ThirdParty/FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8094              		.loc 1 5015 53
 8095 0090 3A6C     		ldr	r2, [r7, #64]
 8096 0092 BB68     		ldr	r3, [r7, #8]
 8097 0094 1344     		add	r3, r3, r2
 8098 0096 5433     		adds	r3, r3, #84
 8099 0098 0222     		movs	r2, #2
 8100 009a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 235


5016:ThirdParty/FreeRTOS/tasks.c **** 
5017:ThirdParty/FreeRTOS/tasks.c ****             switch( eAction )
 8101              		.loc 1 5017 13
 8102 009c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 8103 009e 042B     		cmp	r3, #4
 8104 00a0 3BD8     		bhi	.L459
 8105 00a2 01A2     		adr	r2, .L461
 8106 00a4 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8107              		.p2align 2
 8108              	.L461:
 8109 00a8 39010000 		.word	.L479+1
 8110 00ac BD000000 		.word	.L464+1
 8111 00b0 D9000000 		.word	.L463+1
 8112 00b4 F1000000 		.word	.L462+1
 8113 00b8 FF000000 		.word	.L460+1
 8114              		.p2align 1
 8115              	.L464:
5018:ThirdParty/FreeRTOS/tasks.c ****             {
5019:ThirdParty/FreeRTOS/tasks.c ****                 case eSetBits:
5020:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8116              		.loc 1 5020 63
 8117 00bc 3B6C     		ldr	r3, [r7, #64]
 8118 00be BA68     		ldr	r2, [r7, #8]
 8119 00c0 1432     		adds	r2, r2, #20
 8120 00c2 53F82220 		ldr	r2, [r3, r2, lsl #2]
 8121 00c6 7B68     		ldr	r3, [r7, #4]
 8122 00c8 42EA0301 		orr	r1, r2, r3
 8123 00cc 3B6C     		ldr	r3, [r7, #64]
 8124 00ce BA68     		ldr	r2, [r7, #8]
 8125 00d0 1432     		adds	r2, r2, #20
 8126 00d2 43F82210 		str	r1, [r3, r2, lsl #2]
5021:ThirdParty/FreeRTOS/tasks.c ****                     break;
 8127              		.loc 1 5021 21
 8128 00d6 32E0     		b	.L466
 8129              	.L463:
5022:ThirdParty/FreeRTOS/tasks.c **** 
5023:ThirdParty/FreeRTOS/tasks.c ****                 case eIncrement:
5024:ThirdParty/FreeRTOS/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8130              		.loc 1 5024 45
 8131 00d8 3B6C     		ldr	r3, [r7, #64]
 8132 00da BA68     		ldr	r2, [r7, #8]
 8133 00dc 1432     		adds	r2, r2, #20
 8134 00de 53F82230 		ldr	r3, [r3, r2, lsl #2]
 8135              		.loc 1 5024 66
 8136 00e2 591C     		adds	r1, r3, #1
 8137 00e4 3B6C     		ldr	r3, [r7, #64]
 8138 00e6 BA68     		ldr	r2, [r7, #8]
 8139 00e8 1432     		adds	r2, r2, #20
 8140 00ea 43F82210 		str	r1, [r3, r2, lsl #2]
5025:ThirdParty/FreeRTOS/tasks.c ****                     break;
 8141              		.loc 1 5025 21
 8142 00ee 26E0     		b	.L466
 8143              	.L462:
5026:ThirdParty/FreeRTOS/tasks.c **** 
5027:ThirdParty/FreeRTOS/tasks.c ****                 case eSetValueWithOverwrite:
5028:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8144              		.loc 1 5028 63
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 236


 8145 00f0 3B6C     		ldr	r3, [r7, #64]
 8146 00f2 BA68     		ldr	r2, [r7, #8]
 8147 00f4 1432     		adds	r2, r2, #20
 8148 00f6 7968     		ldr	r1, [r7, #4]
 8149 00f8 43F82210 		str	r1, [r3, r2, lsl #2]
5029:ThirdParty/FreeRTOS/tasks.c ****                     break;
 8150              		.loc 1 5029 21
 8151 00fc 1FE0     		b	.L466
 8152              	.L460:
5030:ThirdParty/FreeRTOS/tasks.c **** 
5031:ThirdParty/FreeRTOS/tasks.c ****                 case eSetValueWithoutOverwrite:
5032:ThirdParty/FreeRTOS/tasks.c **** 
5033:ThirdParty/FreeRTOS/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8153              		.loc 1 5033 23
 8154 00fe 97F83B30 		ldrb	r3, [r7, #59]	@ zero_extendqisi2
 8155 0102 022B     		cmp	r3, #2
 8156 0104 06D0     		beq	.L467
5034:ThirdParty/FreeRTOS/tasks.c ****                     {
5035:ThirdParty/FreeRTOS/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8157              		.loc 1 5035 67
 8158 0106 3B6C     		ldr	r3, [r7, #64]
 8159 0108 BA68     		ldr	r2, [r7, #8]
 8160 010a 1432     		adds	r2, r2, #20
 8161 010c 7968     		ldr	r1, [r7, #4]
 8162 010e 43F82210 		str	r1, [r3, r2, lsl #2]
5036:ThirdParty/FreeRTOS/tasks.c ****                     }
5037:ThirdParty/FreeRTOS/tasks.c ****                     else
5038:ThirdParty/FreeRTOS/tasks.c ****                     {
5039:ThirdParty/FreeRTOS/tasks.c ****                         /* The value could not be written to the task. */
5040:ThirdParty/FreeRTOS/tasks.c ****                         xReturn = pdFAIL;
5041:ThirdParty/FreeRTOS/tasks.c ****                     }
5042:ThirdParty/FreeRTOS/tasks.c **** 
5043:ThirdParty/FreeRTOS/tasks.c ****                     break;
 8163              		.loc 1 5043 21
 8164 0112 14E0     		b	.L466
 8165              	.L467:
5040:ThirdParty/FreeRTOS/tasks.c ****                     }
 8166              		.loc 1 5040 33
 8167 0114 0023     		movs	r3, #0
 8168 0116 7B64     		str	r3, [r7, #68]
 8169              		.loc 1 5043 21
 8170 0118 11E0     		b	.L466
 8171              	.L459:
5044:ThirdParty/FreeRTOS/tasks.c **** 
5045:ThirdParty/FreeRTOS/tasks.c ****                 case eNoAction:
5046:ThirdParty/FreeRTOS/tasks.c **** 
5047:ThirdParty/FreeRTOS/tasks.c ****                     /* The task is being notified without its notify value being
5048:ThirdParty/FreeRTOS/tasks.c ****                      * updated. */
5049:ThirdParty/FreeRTOS/tasks.c ****                     break;
5050:ThirdParty/FreeRTOS/tasks.c **** 
5051:ThirdParty/FreeRTOS/tasks.c ****                 default:
5052:ThirdParty/FreeRTOS/tasks.c **** 
5053:ThirdParty/FreeRTOS/tasks.c ****                     /* Should not get here if all enums are handled.
5054:ThirdParty/FreeRTOS/tasks.c ****                      * Artificially force an assert by testing a value the
5055:ThirdParty/FreeRTOS/tasks.c ****                      * compiler can't assume is const. */
5056:ThirdParty/FreeRTOS/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
 8172              		.loc 1 5056 21
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 237


 8173 011a 604B     		ldr	r3, .L481
 8174 011c 1B68     		ldr	r3, [r3]
 8175 011e 002B     		cmp	r3, #0
 8176 0120 0CD0     		beq	.L480
 8177              	.LBB290:
 8178              	.LBB291:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8179              		.loc 2 198 9
 8180              		.syntax unified
 8181              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8182 0122 4FF05003 			mov r3, #80												
 8183 0126 83F31188 		msr basepri, r3											
 8184 012a BFF36F8F 		isb														
 8185 012e BFF34F8F 		dsb														
 8186              	
 8187              	@ 0 "" 2
 8188              		.thumb
 8189              		.syntax unified
 8190 0132 BB61     		str	r3, [r7, #24]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 8191              		.loc 2 206 5
 8192 0134 00BF     		nop
 8193              	.L470:
 8194              	.LBE291:
 8195              	.LBE290:
 8196              		.loc 1 5056 21 discriminator 3
 8197 0136 FEE7     		b	.L470
 8198              	.L479:
5049:ThirdParty/FreeRTOS/tasks.c **** 
 8199              		.loc 1 5049 21
 8200 0138 00BF     		nop
 8201 013a 00E0     		b	.L466
 8202              	.L480:
5057:ThirdParty/FreeRTOS/tasks.c ****                     break;
 8203              		.loc 1 5057 21
 8204 013c 00BF     		nop
 8205              	.L466:
5058:ThirdParty/FreeRTOS/tasks.c ****             }
5059:ThirdParty/FreeRTOS/tasks.c **** 
5060:ThirdParty/FreeRTOS/tasks.c ****             traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );
5061:ThirdParty/FreeRTOS/tasks.c **** 
5062:ThirdParty/FreeRTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5063:ThirdParty/FreeRTOS/tasks.c ****              * notification then unblock it now. */
5064:ThirdParty/FreeRTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8206              		.loc 1 5064 15
 8207 013e 97F83B30 		ldrb	r3, [r7, #59]	@ zero_extendqisi2
 8208 0142 012B     		cmp	r3, #1
 8209 0144 40F09E80 		bne	.L471
5065:ThirdParty/FreeRTOS/tasks.c ****             {
5066:ThirdParty/FreeRTOS/tasks.c ****                 /* The task should not have been on an event list. */
5067:ThirdParty/FreeRTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8210              		.loc 1 5067 17
 8211 0148 3B6C     		ldr	r3, [r7, #64]
 8212 014a 9B6A     		ldr	r3, [r3, #40]
 8213 014c 002B     		cmp	r3, #0
 8214 014e 0AD0     		beq	.L472
 8215              	.LBB292:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 238


 8216              	.LBB293:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8217              		.loc 2 198 9
 8218              		.syntax unified
 8219              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8220 0150 4FF05003 			mov r3, #80												
 8221 0154 83F31188 		msr basepri, r3											
 8222 0158 BFF36F8F 		isb														
 8223 015c BFF34F8F 		dsb														
 8224              	
 8225              	@ 0 "" 2
 8226              		.thumb
 8227              		.syntax unified
 8228 0160 7B61     		str	r3, [r7, #20]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 8229              		.loc 2 206 5
 8230 0162 00BF     		nop
 8231              	.L473:
 8232              	.LBE293:
 8233              	.LBE292:
 8234              		.loc 1 5067 17 discriminator 4
 8235 0164 FEE7     		b	.L473
 8236              	.L472:
5068:ThirdParty/FreeRTOS/tasks.c **** 
5069:ThirdParty/FreeRTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8237              		.loc 1 5069 42
 8238 0166 4E4B     		ldr	r3, .L481+4
 8239 0168 1B68     		ldr	r3, [r3]
 8240              		.loc 1 5069 19
 8241 016a 002B     		cmp	r3, #0
 8242 016c 5ED1     		bne	.L474
 8243              	.LBB294:
5070:ThirdParty/FreeRTOS/tasks.c ****                 {
5071:ThirdParty/FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8244              		.loc 1 5071 21
 8245 016e 3B6C     		ldr	r3, [r7, #64]
 8246 0170 5B69     		ldr	r3, [r3, #20]
 8247 0172 3B63     		str	r3, [r7, #48]
 8248 0174 3B6C     		ldr	r3, [r7, #64]
 8249 0176 9B68     		ldr	r3, [r3, #8]
 8250 0178 3A6C     		ldr	r2, [r7, #64]
 8251 017a D268     		ldr	r2, [r2, #12]
 8252 017c 9A60     		str	r2, [r3, #8]
 8253 017e 3B6C     		ldr	r3, [r7, #64]
 8254 0180 DB68     		ldr	r3, [r3, #12]
 8255 0182 3A6C     		ldr	r2, [r7, #64]
 8256 0184 9268     		ldr	r2, [r2, #8]
 8257 0186 5A60     		str	r2, [r3, #4]
 8258 0188 3B6B     		ldr	r3, [r7, #48]
 8259 018a 5A68     		ldr	r2, [r3, #4]
 8260 018c 3B6C     		ldr	r3, [r7, #64]
 8261 018e 0433     		adds	r3, r3, #4
 8262 0190 9A42     		cmp	r2, r3
 8263 0192 03D1     		bne	.L475
 8264              		.loc 1 5071 21 is_stmt 0 discriminator 1
 8265 0194 3B6C     		ldr	r3, [r7, #64]
 8266 0196 DA68     		ldr	r2, [r3, #12]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 239


 8267 0198 3B6B     		ldr	r3, [r7, #48]
 8268 019a 5A60     		str	r2, [r3, #4]
 8269              	.L475:
 8270              		.loc 1 5071 21 discriminator 3
 8271 019c 3B6C     		ldr	r3, [r7, #64]
 8272 019e 0022     		movs	r2, #0
 8273 01a0 5A61     		str	r2, [r3, #20]
 8274 01a2 3B6B     		ldr	r3, [r7, #48]
 8275 01a4 1B68     		ldr	r3, [r3]
 8276 01a6 5A1E     		subs	r2, r3, #1
 8277 01a8 3B6B     		ldr	r3, [r7, #48]
 8278 01aa 1A60     		str	r2, [r3]
 8279              	.LBE294:
5072:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8280              		.loc 1 5072 21 is_stmt 1 discriminator 3
 8281 01ac 3B6C     		ldr	r3, [r7, #64]
 8282 01ae DB6A     		ldr	r3, [r3, #44]
 8283 01b0 0122     		movs	r2, #1
 8284 01b2 9A40     		lsls	r2, r2, r3
 8285 01b4 3B4B     		ldr	r3, .L481+8
 8286 01b6 1B68     		ldr	r3, [r3]
 8287 01b8 1343     		orrs	r3, r3, r2
 8288 01ba 3A4A     		ldr	r2, .L481+8
 8289 01bc 1360     		str	r3, [r2]
 8290              	.LBB295:
 8291 01be 3B6C     		ldr	r3, [r7, #64]
 8292 01c0 DA6A     		ldr	r2, [r3, #44]
 8293 01c2 3949     		ldr	r1, .L481+12
 8294 01c4 1346     		mov	r3, r2
 8295 01c6 9B00     		lsls	r3, r3, #2
 8296 01c8 1344     		add	r3, r3, r2
 8297 01ca 9B00     		lsls	r3, r3, #2
 8298 01cc 0B44     		add	r3, r3, r1
 8299 01ce 0433     		adds	r3, r3, #4
 8300 01d0 1B68     		ldr	r3, [r3]
 8301 01d2 FB62     		str	r3, [r7, #44]
 8302 01d4 3B6C     		ldr	r3, [r7, #64]
 8303 01d6 FA6A     		ldr	r2, [r7, #44]
 8304 01d8 9A60     		str	r2, [r3, #8]
 8305 01da FB6A     		ldr	r3, [r7, #44]
 8306 01dc 9A68     		ldr	r2, [r3, #8]
 8307 01de 3B6C     		ldr	r3, [r7, #64]
 8308 01e0 DA60     		str	r2, [r3, #12]
 8309 01e2 FB6A     		ldr	r3, [r7, #44]
 8310 01e4 9B68     		ldr	r3, [r3, #8]
 8311 01e6 3A6C     		ldr	r2, [r7, #64]
 8312 01e8 0432     		adds	r2, r2, #4
 8313 01ea 5A60     		str	r2, [r3, #4]
 8314 01ec 3B6C     		ldr	r3, [r7, #64]
 8315 01ee 1A1D     		adds	r2, r3, #4
 8316 01f0 FB6A     		ldr	r3, [r7, #44]
 8317 01f2 9A60     		str	r2, [r3, #8]
 8318 01f4 3B6C     		ldr	r3, [r7, #64]
 8319 01f6 DA6A     		ldr	r2, [r3, #44]
 8320 01f8 1346     		mov	r3, r2
 8321 01fa 9B00     		lsls	r3, r3, #2
 8322 01fc 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 240


 8323 01fe 9B00     		lsls	r3, r3, #2
 8324 0200 294A     		ldr	r2, .L481+12
 8325 0202 1A44     		add	r2, r2, r3
 8326 0204 3B6C     		ldr	r3, [r7, #64]
 8327 0206 5A61     		str	r2, [r3, #20]
 8328 0208 3B6C     		ldr	r3, [r7, #64]
 8329 020a DA6A     		ldr	r2, [r3, #44]
 8330 020c 2649     		ldr	r1, .L481+12
 8331 020e 1346     		mov	r3, r2
 8332 0210 9B00     		lsls	r3, r3, #2
 8333 0212 1344     		add	r3, r3, r2
 8334 0214 9B00     		lsls	r3, r3, #2
 8335 0216 0B44     		add	r3, r3, r1
 8336 0218 1B68     		ldr	r3, [r3]
 8337 021a 591C     		adds	r1, r3, #1
 8338 021c 2248     		ldr	r0, .L481+12
 8339 021e 1346     		mov	r3, r2
 8340 0220 9B00     		lsls	r3, r3, #2
 8341 0222 1344     		add	r3, r3, r2
 8342 0224 9B00     		lsls	r3, r3, #2
 8343 0226 0344     		add	r3, r3, r0
 8344 0228 1960     		str	r1, [r3]
 8345              	.LBE295:
 8346 022a 1BE0     		b	.L476
 8347              	.L474:
 8348              	.LBB296:
5073:ThirdParty/FreeRTOS/tasks.c ****                 }
5074:ThirdParty/FreeRTOS/tasks.c ****                 else
5075:ThirdParty/FreeRTOS/tasks.c ****                 {
5076:ThirdParty/FreeRTOS/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5077:ThirdParty/FreeRTOS/tasks.c ****                      * this task pending until the scheduler is resumed. */
5078:ThirdParty/FreeRTOS/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8349              		.loc 1 5078 21
 8350 022c 1F4B     		ldr	r3, .L481+16
 8351 022e 5B68     		ldr	r3, [r3, #4]
 8352 0230 7B63     		str	r3, [r7, #52]
 8353 0232 3B6C     		ldr	r3, [r7, #64]
 8354 0234 7A6B     		ldr	r2, [r7, #52]
 8355 0236 DA61     		str	r2, [r3, #28]
 8356 0238 7B6B     		ldr	r3, [r7, #52]
 8357 023a 9A68     		ldr	r2, [r3, #8]
 8358 023c 3B6C     		ldr	r3, [r7, #64]
 8359 023e 1A62     		str	r2, [r3, #32]
 8360 0240 7B6B     		ldr	r3, [r7, #52]
 8361 0242 9B68     		ldr	r3, [r3, #8]
 8362 0244 3A6C     		ldr	r2, [r7, #64]
 8363 0246 1832     		adds	r2, r2, #24
 8364 0248 5A60     		str	r2, [r3, #4]
 8365 024a 3B6C     		ldr	r3, [r7, #64]
 8366 024c 03F11802 		add	r2, r3, #24
 8367 0250 7B6B     		ldr	r3, [r7, #52]
 8368 0252 9A60     		str	r2, [r3, #8]
 8369 0254 3B6C     		ldr	r3, [r7, #64]
 8370 0256 154A     		ldr	r2, .L481+16
 8371 0258 9A62     		str	r2, [r3, #40]
 8372 025a 144B     		ldr	r3, .L481+16
 8373 025c 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 241


 8374 025e 0133     		adds	r3, r3, #1
 8375 0260 124A     		ldr	r2, .L481+16
 8376 0262 1360     		str	r3, [r2]
 8377              	.L476:
 8378              	.LBE296:
5079:ThirdParty/FreeRTOS/tasks.c ****                 }
5080:ThirdParty/FreeRTOS/tasks.c **** 
5081:ThirdParty/FreeRTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8379              		.loc 1 5081 26
 8380 0264 3B6C     		ldr	r3, [r7, #64]
 8381 0266 DA6A     		ldr	r2, [r3, #44]
 8382              		.loc 1 5081 53
 8383 0268 114B     		ldr	r3, .L481+20
 8384 026a 1B68     		ldr	r3, [r3]
 8385 026c DB6A     		ldr	r3, [r3, #44]
 8386              		.loc 1 5081 19
 8387 026e 9A42     		cmp	r2, r3
 8388 0270 08D9     		bls	.L471
5082:ThirdParty/FreeRTOS/tasks.c ****                 {
5083:ThirdParty/FreeRTOS/tasks.c ****                     /* The notified task has a priority above the currently
5084:ThirdParty/FreeRTOS/tasks.c ****                      * executing task so a yield is required. */
5085:ThirdParty/FreeRTOS/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
 8389              		.loc 1 5085 23
 8390 0272 7B6D     		ldr	r3, [r7, #84]
 8391 0274 002B     		cmp	r3, #0
 8392 0276 02D0     		beq	.L477
5086:ThirdParty/FreeRTOS/tasks.c ****                     {
5087:ThirdParty/FreeRTOS/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
 8393              		.loc 1 5087 52
 8394 0278 7B6D     		ldr	r3, [r7, #84]
 8395 027a 0122     		movs	r2, #1
 8396 027c 1A60     		str	r2, [r3]
 8397              	.L477:
5088:ThirdParty/FreeRTOS/tasks.c ****                     }
5089:ThirdParty/FreeRTOS/tasks.c **** 
5090:ThirdParty/FreeRTOS/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5091:ThirdParty/FreeRTOS/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter to an ISR
5092:ThirdParty/FreeRTOS/tasks.c ****                      * safe FreeRTOS function. */
5093:ThirdParty/FreeRTOS/tasks.c ****                     xYieldPending = pdTRUE;
 8398              		.loc 1 5093 35
 8399 027e 0D4B     		ldr	r3, .L481+24
 8400 0280 0122     		movs	r2, #1
 8401 0282 1A60     		str	r2, [r3]
 8402              	.L471:
 8403 0284 FB6B     		ldr	r3, [r7, #60]
 8404 0286 3B61     		str	r3, [r7, #16]
 8405              	.LBB297:
 8406              	.LBB298:
 232:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8407              		.loc 2 232 9
 8408 0288 3B69     		ldr	r3, [r7, #16]
 8409              		.syntax unified
 8410              	@ 232 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8411 028a 83F31188 			msr basepri, r3	
 8412              	@ 0 "" 2
 8413              		.loc 2 236 5
 8414              		.thumb
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 242


 8415              		.syntax unified
 8416 028e 00BF     		nop
 8417              	.LBE298:
 8418              	.LBE297:
5094:ThirdParty/FreeRTOS/tasks.c ****                 }
5095:ThirdParty/FreeRTOS/tasks.c ****                 else
5096:ThirdParty/FreeRTOS/tasks.c ****                 {
5097:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5098:ThirdParty/FreeRTOS/tasks.c ****                 }
5099:ThirdParty/FreeRTOS/tasks.c ****             }
5100:ThirdParty/FreeRTOS/tasks.c ****         }
5101:ThirdParty/FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5102:ThirdParty/FreeRTOS/tasks.c **** 
5103:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
 8419              		.loc 1 5103 16
 8420 0290 7B6C     		ldr	r3, [r7, #68]
5104:ThirdParty/FreeRTOS/tasks.c ****     }
 8421              		.loc 1 5104 5
 8422 0292 1846     		mov	r0, r3
 8423 0294 4837     		adds	r7, r7, #72
 8424              	.LCFI284:
 8425              		.cfi_def_cfa_offset 8
 8426 0296 BD46     		mov	sp, r7
 8427              	.LCFI285:
 8428              		.cfi_def_cfa_register 13
 8429              		@ sp needed
 8430 0298 80BD     		pop	{r7, pc}
 8431              	.L482:
 8432 029a 00BF     		.align	2
 8433              	.L481:
 8434 029c 00000000 		.word	xTickCount
 8435 02a0 00000000 		.word	uxSchedulerSuspended
 8436 02a4 00000000 		.word	uxTopReadyPriority
 8437 02a8 00000000 		.word	pxReadyTasksLists
 8438 02ac 00000000 		.word	xPendingReadyList
 8439 02b0 00000000 		.word	pxCurrentTCB
 8440 02b4 00000000 		.word	xYieldPending
 8441              		.cfi_endproc
 8442              	.LFE60:
 8444              		.section	.text.vTaskGenericNotifyGiveFromISR,"ax",%progbits
 8445              		.align	1
 8446              		.global	vTaskGenericNotifyGiveFromISR
 8447              		.syntax unified
 8448              		.thumb
 8449              		.thumb_func
 8451              	vTaskGenericNotifyGiveFromISR:
 8452              	.LFB61:
5105:ThirdParty/FreeRTOS/tasks.c **** 
5106:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5107:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5108:ThirdParty/FreeRTOS/tasks.c **** 
5109:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5110:ThirdParty/FreeRTOS/tasks.c **** 
5111:ThirdParty/FreeRTOS/tasks.c ****     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
5112:ThirdParty/FreeRTOS/tasks.c ****                                         UBaseType_t uxIndexToNotify,
5113:ThirdParty/FreeRTOS/tasks.c ****                                         BaseType_t * pxHigherPriorityTaskWoken )
5114:ThirdParty/FreeRTOS/tasks.c ****     {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 243


 8453              		.loc 1 5114 5
 8454              		.cfi_startproc
 8455              		@ args = 0, pretend = 0, frame = 64
 8456              		@ frame_needed = 1, uses_anonymous_args = 0
 8457 0000 80B5     		push	{r7, lr}
 8458              	.LCFI286:
 8459              		.cfi_def_cfa_offset 8
 8460              		.cfi_offset 7, -8
 8461              		.cfi_offset 14, -4
 8462 0002 90B0     		sub	sp, sp, #64
 8463              	.LCFI287:
 8464              		.cfi_def_cfa_offset 72
 8465 0004 00AF     		add	r7, sp, #0
 8466              	.LCFI288:
 8467              		.cfi_def_cfa_register 7
 8468 0006 F860     		str	r0, [r7, #12]
 8469 0008 B960     		str	r1, [r7, #8]
 8470 000a 7A60     		str	r2, [r7, #4]
5115:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
5116:ThirdParty/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
5117:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
5118:ThirdParty/FreeRTOS/tasks.c **** 
5119:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 8471              		.loc 1 5119 9
 8472 000c FB68     		ldr	r3, [r7, #12]
 8473 000e 002B     		cmp	r3, #0
 8474 0010 0AD1     		bne	.L484
 8475              	.LBB299:
 8476              	.LBB300:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8477              		.loc 2 198 9
 8478              		.syntax unified
 8479              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8480 0012 4FF05003 			mov r3, #80												
 8481 0016 83F31188 		msr basepri, r3											
 8482 001a BFF36F8F 		isb														
 8483 001e BFF34F8F 		dsb														
 8484              	
 8485              	@ 0 "" 2
 8486              		.thumb
 8487              		.syntax unified
 8488 0022 7B62     		str	r3, [r7, #36]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 8489              		.loc 2 206 5
 8490 0024 00BF     		nop
 8491              	.L485:
 8492              	.LBE300:
 8493              	.LBE299:
 8494              		.loc 1 5119 9 discriminator 1
 8495 0026 FEE7     		b	.L485
 8496              	.L484:
5120:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8497              		.loc 1 5120 9
 8498 0028 BB68     		ldr	r3, [r7, #8]
 8499 002a 002B     		cmp	r3, #0
 8500 002c 0AD0     		beq	.L486
 8501              	.LBB301:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 244


 8502              	.LBB302:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8503              		.loc 2 198 9
 8504              		.syntax unified
 8505              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8506 002e 4FF05003 			mov r3, #80												
 8507 0032 83F31188 		msr basepri, r3											
 8508 0036 BFF36F8F 		isb														
 8509 003a BFF34F8F 		dsb														
 8510              	
 8511              	@ 0 "" 2
 8512              		.thumb
 8513              		.syntax unified
 8514 003e 3B62     		str	r3, [r7, #32]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 8515              		.loc 2 206 5
 8516 0040 00BF     		nop
 8517              	.L487:
 8518              	.LBE302:
 8519              	.LBE301:
 8520              		.loc 1 5120 9 discriminator 2
 8521 0042 FEE7     		b	.L487
 8522              	.L486:
5121:ThirdParty/FreeRTOS/tasks.c **** 
5122:ThirdParty/FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
5123:ThirdParty/FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
5124:ThirdParty/FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
5125:ThirdParty/FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5126:ThirdParty/FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5127:ThirdParty/FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
5128:ThirdParty/FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5129:ThirdParty/FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
5130:ThirdParty/FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
5131:ThirdParty/FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5132:ThirdParty/FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
5133:ThirdParty/FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5134:ThirdParty/FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5135:ThirdParty/FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5136:ThirdParty/FreeRTOS/tasks.c ****          * provided on the following link:
5137:ThirdParty/FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5138:ThirdParty/FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8523              		.loc 1 5138 9
 8524 0044 FFF7FEFF 		bl	vPortValidateInterruptPriority
5139:ThirdParty/FreeRTOS/tasks.c **** 
5140:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 8525              		.loc 1 5140 15
 8526 0048 FB68     		ldr	r3, [r7, #12]
 8527 004a FB63     		str	r3, [r7, #60]
 8528              	.LBB303:
 8529              	.LBB304:
 214:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8530              		.loc 2 214 9
 8531              		.syntax unified
 8532              	@ 214 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8533 004c EFF31182 			mrs r2, basepri											
 8534 0050 4FF05003 		mov r3, #80												
 8535 0054 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 245


 8536 0058 BFF36F8F 		isb														
 8537 005c BFF34F8F 		dsb														
 8538              	
 8539              	@ 0 "" 2
 8540              		.thumb
 8541              		.syntax unified
 8542 0060 FA61     		str	r2, [r7, #28]
 8543 0062 BB61     		str	r3, [r7, #24]
 226:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 8544              		.loc 2 226 16
 8545 0064 FB69     		ldr	r3, [r7, #28]
 8546              	.LBE304:
 8547              	.LBE303:
5141:ThirdParty/FreeRTOS/tasks.c **** 
5142:ThirdParty/FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8548              		.loc 1 5142 34
 8549 0066 BB63     		str	r3, [r7, #56]
5143:ThirdParty/FreeRTOS/tasks.c ****         {
5144:ThirdParty/FreeRTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8550              		.loc 1 5144 35
 8551 0068 FA6B     		ldr	r2, [r7, #60]
 8552 006a BB68     		ldr	r3, [r7, #8]
 8553 006c 1344     		add	r3, r3, r2
 8554 006e 5433     		adds	r3, r3, #84
 8555 0070 1B78     		ldrb	r3, [r3]
 8556 0072 87F83730 		strb	r3, [r7, #55]
5145:ThirdParty/FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8557              		.loc 1 5145 53
 8558 0076 FA6B     		ldr	r2, [r7, #60]
 8559 0078 BB68     		ldr	r3, [r7, #8]
 8560 007a 1344     		add	r3, r3, r2
 8561 007c 5433     		adds	r3, r3, #84
 8562 007e 0222     		movs	r2, #2
 8563 0080 1A70     		strb	r2, [r3]
5146:ThirdParty/FreeRTOS/tasks.c **** 
5147:ThirdParty/FreeRTOS/tasks.c ****             /* 'Giving' is equivalent to incrementing a count in a counting
5148:ThirdParty/FreeRTOS/tasks.c ****              * semaphore. */
5149:ThirdParty/FreeRTOS/tasks.c ****             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8564              		.loc 1 5149 37
 8565 0082 FB6B     		ldr	r3, [r7, #60]
 8566 0084 BA68     		ldr	r2, [r7, #8]
 8567 0086 1432     		adds	r2, r2, #20
 8568 0088 53F82230 		ldr	r3, [r3, r2, lsl #2]
 8569              		.loc 1 5149 58
 8570 008c 591C     		adds	r1, r3, #1
 8571 008e FB6B     		ldr	r3, [r7, #60]
 8572 0090 BA68     		ldr	r2, [r7, #8]
 8573 0092 1432     		adds	r2, r2, #20
 8574 0094 43F82210 		str	r1, [r3, r2, lsl #2]
5150:ThirdParty/FreeRTOS/tasks.c **** 
5151:ThirdParty/FreeRTOS/tasks.c ****             traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );
5152:ThirdParty/FreeRTOS/tasks.c **** 
5153:ThirdParty/FreeRTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5154:ThirdParty/FreeRTOS/tasks.c ****              * notification then unblock it now. */
5155:ThirdParty/FreeRTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8575              		.loc 1 5155 15
 8576 0098 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 246


 8577 009c 012B     		cmp	r3, #1
 8578 009e 40F09E80 		bne	.L489
5156:ThirdParty/FreeRTOS/tasks.c ****             {
5157:ThirdParty/FreeRTOS/tasks.c ****                 /* The task should not have been on an event list. */
5158:ThirdParty/FreeRTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8579              		.loc 1 5158 17
 8580 00a2 FB6B     		ldr	r3, [r7, #60]
 8581 00a4 9B6A     		ldr	r3, [r3, #40]
 8582 00a6 002B     		cmp	r3, #0
 8583 00a8 0AD0     		beq	.L490
 8584              	.LBB305:
 8585              	.LBB306:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8586              		.loc 2 198 9
 8587              		.syntax unified
 8588              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8589 00aa 4FF05003 			mov r3, #80												
 8590 00ae 83F31188 		msr basepri, r3											
 8591 00b2 BFF36F8F 		isb														
 8592 00b6 BFF34F8F 		dsb														
 8593              	
 8594              	@ 0 "" 2
 8595              		.thumb
 8596              		.syntax unified
 8597 00ba 7B61     		str	r3, [r7, #20]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 8598              		.loc 2 206 5
 8599 00bc 00BF     		nop
 8600              	.L491:
 8601              	.LBE306:
 8602              	.LBE305:
 8603              		.loc 1 5158 17 discriminator 3
 8604 00be FEE7     		b	.L491
 8605              	.L490:
5159:ThirdParty/FreeRTOS/tasks.c **** 
5160:ThirdParty/FreeRTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8606              		.loc 1 5160 42
 8607 00c0 4C4B     		ldr	r3, .L496
 8608 00c2 1B68     		ldr	r3, [r3]
 8609              		.loc 1 5160 19
 8610 00c4 002B     		cmp	r3, #0
 8611 00c6 5ED1     		bne	.L492
 8612              	.LBB307:
5161:ThirdParty/FreeRTOS/tasks.c ****                 {
5162:ThirdParty/FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8613              		.loc 1 5162 21
 8614 00c8 FB6B     		ldr	r3, [r7, #60]
 8615 00ca 5B69     		ldr	r3, [r3, #20]
 8616 00cc FB62     		str	r3, [r7, #44]
 8617 00ce FB6B     		ldr	r3, [r7, #60]
 8618 00d0 9B68     		ldr	r3, [r3, #8]
 8619 00d2 FA6B     		ldr	r2, [r7, #60]
 8620 00d4 D268     		ldr	r2, [r2, #12]
 8621 00d6 9A60     		str	r2, [r3, #8]
 8622 00d8 FB6B     		ldr	r3, [r7, #60]
 8623 00da DB68     		ldr	r3, [r3, #12]
 8624 00dc FA6B     		ldr	r2, [r7, #60]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 247


 8625 00de 9268     		ldr	r2, [r2, #8]
 8626 00e0 5A60     		str	r2, [r3, #4]
 8627 00e2 FB6A     		ldr	r3, [r7, #44]
 8628 00e4 5A68     		ldr	r2, [r3, #4]
 8629 00e6 FB6B     		ldr	r3, [r7, #60]
 8630 00e8 0433     		adds	r3, r3, #4
 8631 00ea 9A42     		cmp	r2, r3
 8632 00ec 03D1     		bne	.L493
 8633              		.loc 1 5162 21 is_stmt 0 discriminator 1
 8634 00ee FB6B     		ldr	r3, [r7, #60]
 8635 00f0 DA68     		ldr	r2, [r3, #12]
 8636 00f2 FB6A     		ldr	r3, [r7, #44]
 8637 00f4 5A60     		str	r2, [r3, #4]
 8638              	.L493:
 8639              		.loc 1 5162 21 discriminator 3
 8640 00f6 FB6B     		ldr	r3, [r7, #60]
 8641 00f8 0022     		movs	r2, #0
 8642 00fa 5A61     		str	r2, [r3, #20]
 8643 00fc FB6A     		ldr	r3, [r7, #44]
 8644 00fe 1B68     		ldr	r3, [r3]
 8645 0100 5A1E     		subs	r2, r3, #1
 8646 0102 FB6A     		ldr	r3, [r7, #44]
 8647 0104 1A60     		str	r2, [r3]
 8648              	.LBE307:
5163:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8649              		.loc 1 5163 21 is_stmt 1 discriminator 3
 8650 0106 FB6B     		ldr	r3, [r7, #60]
 8651 0108 DB6A     		ldr	r3, [r3, #44]
 8652 010a 0122     		movs	r2, #1
 8653 010c 9A40     		lsls	r2, r2, r3
 8654 010e 3A4B     		ldr	r3, .L496+4
 8655 0110 1B68     		ldr	r3, [r3]
 8656 0112 1343     		orrs	r3, r3, r2
 8657 0114 384A     		ldr	r2, .L496+4
 8658 0116 1360     		str	r3, [r2]
 8659              	.LBB308:
 8660 0118 FB6B     		ldr	r3, [r7, #60]
 8661 011a DA6A     		ldr	r2, [r3, #44]
 8662 011c 3749     		ldr	r1, .L496+8
 8663 011e 1346     		mov	r3, r2
 8664 0120 9B00     		lsls	r3, r3, #2
 8665 0122 1344     		add	r3, r3, r2
 8666 0124 9B00     		lsls	r3, r3, #2
 8667 0126 0B44     		add	r3, r3, r1
 8668 0128 0433     		adds	r3, r3, #4
 8669 012a 1B68     		ldr	r3, [r3]
 8670 012c BB62     		str	r3, [r7, #40]
 8671 012e FB6B     		ldr	r3, [r7, #60]
 8672 0130 BA6A     		ldr	r2, [r7, #40]
 8673 0132 9A60     		str	r2, [r3, #8]
 8674 0134 BB6A     		ldr	r3, [r7, #40]
 8675 0136 9A68     		ldr	r2, [r3, #8]
 8676 0138 FB6B     		ldr	r3, [r7, #60]
 8677 013a DA60     		str	r2, [r3, #12]
 8678 013c BB6A     		ldr	r3, [r7, #40]
 8679 013e 9B68     		ldr	r3, [r3, #8]
 8680 0140 FA6B     		ldr	r2, [r7, #60]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 248


 8681 0142 0432     		adds	r2, r2, #4
 8682 0144 5A60     		str	r2, [r3, #4]
 8683 0146 FB6B     		ldr	r3, [r7, #60]
 8684 0148 1A1D     		adds	r2, r3, #4
 8685 014a BB6A     		ldr	r3, [r7, #40]
 8686 014c 9A60     		str	r2, [r3, #8]
 8687 014e FB6B     		ldr	r3, [r7, #60]
 8688 0150 DA6A     		ldr	r2, [r3, #44]
 8689 0152 1346     		mov	r3, r2
 8690 0154 9B00     		lsls	r3, r3, #2
 8691 0156 1344     		add	r3, r3, r2
 8692 0158 9B00     		lsls	r3, r3, #2
 8693 015a 284A     		ldr	r2, .L496+8
 8694 015c 1A44     		add	r2, r2, r3
 8695 015e FB6B     		ldr	r3, [r7, #60]
 8696 0160 5A61     		str	r2, [r3, #20]
 8697 0162 FB6B     		ldr	r3, [r7, #60]
 8698 0164 DA6A     		ldr	r2, [r3, #44]
 8699 0166 2549     		ldr	r1, .L496+8
 8700 0168 1346     		mov	r3, r2
 8701 016a 9B00     		lsls	r3, r3, #2
 8702 016c 1344     		add	r3, r3, r2
 8703 016e 9B00     		lsls	r3, r3, #2
 8704 0170 0B44     		add	r3, r3, r1
 8705 0172 1B68     		ldr	r3, [r3]
 8706 0174 591C     		adds	r1, r3, #1
 8707 0176 2148     		ldr	r0, .L496+8
 8708 0178 1346     		mov	r3, r2
 8709 017a 9B00     		lsls	r3, r3, #2
 8710 017c 1344     		add	r3, r3, r2
 8711 017e 9B00     		lsls	r3, r3, #2
 8712 0180 0344     		add	r3, r3, r0
 8713 0182 1960     		str	r1, [r3]
 8714              	.LBE308:
 8715 0184 1BE0     		b	.L494
 8716              	.L492:
 8717              	.LBB309:
5164:ThirdParty/FreeRTOS/tasks.c ****                 }
5165:ThirdParty/FreeRTOS/tasks.c ****                 else
5166:ThirdParty/FreeRTOS/tasks.c ****                 {
5167:ThirdParty/FreeRTOS/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5168:ThirdParty/FreeRTOS/tasks.c ****                      * this task pending until the scheduler is resumed. */
5169:ThirdParty/FreeRTOS/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8718              		.loc 1 5169 21
 8719 0186 1E4B     		ldr	r3, .L496+12
 8720 0188 5B68     		ldr	r3, [r3, #4]
 8721 018a 3B63     		str	r3, [r7, #48]
 8722 018c FB6B     		ldr	r3, [r7, #60]
 8723 018e 3A6B     		ldr	r2, [r7, #48]
 8724 0190 DA61     		str	r2, [r3, #28]
 8725 0192 3B6B     		ldr	r3, [r7, #48]
 8726 0194 9A68     		ldr	r2, [r3, #8]
 8727 0196 FB6B     		ldr	r3, [r7, #60]
 8728 0198 1A62     		str	r2, [r3, #32]
 8729 019a 3B6B     		ldr	r3, [r7, #48]
 8730 019c 9B68     		ldr	r3, [r3, #8]
 8731 019e FA6B     		ldr	r2, [r7, #60]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 249


 8732 01a0 1832     		adds	r2, r2, #24
 8733 01a2 5A60     		str	r2, [r3, #4]
 8734 01a4 FB6B     		ldr	r3, [r7, #60]
 8735 01a6 03F11802 		add	r2, r3, #24
 8736 01aa 3B6B     		ldr	r3, [r7, #48]
 8737 01ac 9A60     		str	r2, [r3, #8]
 8738 01ae FB6B     		ldr	r3, [r7, #60]
 8739 01b0 134A     		ldr	r2, .L496+12
 8740 01b2 9A62     		str	r2, [r3, #40]
 8741 01b4 124B     		ldr	r3, .L496+12
 8742 01b6 1B68     		ldr	r3, [r3]
 8743 01b8 0133     		adds	r3, r3, #1
 8744 01ba 114A     		ldr	r2, .L496+12
 8745 01bc 1360     		str	r3, [r2]
 8746              	.L494:
 8747              	.LBE309:
5170:ThirdParty/FreeRTOS/tasks.c ****                 }
5171:ThirdParty/FreeRTOS/tasks.c **** 
5172:ThirdParty/FreeRTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8748              		.loc 1 5172 26
 8749 01be FB6B     		ldr	r3, [r7, #60]
 8750 01c0 DA6A     		ldr	r2, [r3, #44]
 8751              		.loc 1 5172 53
 8752 01c2 104B     		ldr	r3, .L496+16
 8753 01c4 1B68     		ldr	r3, [r3]
 8754 01c6 DB6A     		ldr	r3, [r3, #44]
 8755              		.loc 1 5172 19
 8756 01c8 9A42     		cmp	r2, r3
 8757 01ca 08D9     		bls	.L489
5173:ThirdParty/FreeRTOS/tasks.c ****                 {
5174:ThirdParty/FreeRTOS/tasks.c ****                     /* The notified task has a priority above the currently
5175:ThirdParty/FreeRTOS/tasks.c ****                      * executing task so a yield is required. */
5176:ThirdParty/FreeRTOS/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
 8758              		.loc 1 5176 23
 8759 01cc 7B68     		ldr	r3, [r7, #4]
 8760 01ce 002B     		cmp	r3, #0
 8761 01d0 02D0     		beq	.L495
5177:ThirdParty/FreeRTOS/tasks.c ****                     {
5178:ThirdParty/FreeRTOS/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
 8762              		.loc 1 5178 52
 8763 01d2 7B68     		ldr	r3, [r7, #4]
 8764 01d4 0122     		movs	r2, #1
 8765 01d6 1A60     		str	r2, [r3]
 8766              	.L495:
5179:ThirdParty/FreeRTOS/tasks.c ****                     }
5180:ThirdParty/FreeRTOS/tasks.c **** 
5181:ThirdParty/FreeRTOS/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5182:ThirdParty/FreeRTOS/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter in an ISR
5183:ThirdParty/FreeRTOS/tasks.c ****                      * safe FreeRTOS function. */
5184:ThirdParty/FreeRTOS/tasks.c ****                     xYieldPending = pdTRUE;
 8767              		.loc 1 5184 35
 8768 01d8 0B4B     		ldr	r3, .L496+20
 8769 01da 0122     		movs	r2, #1
 8770 01dc 1A60     		str	r2, [r3]
 8771              	.L489:
 8772 01de BB6B     		ldr	r3, [r7, #56]
 8773 01e0 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 250


 8774              	.LBB310:
 8775              	.LBB311:
 232:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8776              		.loc 2 232 9
 8777 01e2 3B69     		ldr	r3, [r7, #16]
 8778              		.syntax unified
 8779              	@ 232 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8780 01e4 83F31188 			msr basepri, r3	
 8781              	@ 0 "" 2
 8782              		.loc 2 236 5
 8783              		.thumb
 8784              		.syntax unified
 8785 01e8 00BF     		nop
 8786              	.LBE311:
 8787              	.LBE310:
5185:ThirdParty/FreeRTOS/tasks.c ****                 }
5186:ThirdParty/FreeRTOS/tasks.c ****                 else
5187:ThirdParty/FreeRTOS/tasks.c ****                 {
5188:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5189:ThirdParty/FreeRTOS/tasks.c ****                 }
5190:ThirdParty/FreeRTOS/tasks.c ****             }
5191:ThirdParty/FreeRTOS/tasks.c ****         }
5192:ThirdParty/FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5193:ThirdParty/FreeRTOS/tasks.c ****     }
 8788              		.loc 1 5193 5
 8789 01ea 00BF     		nop
 8790 01ec 4037     		adds	r7, r7, #64
 8791              	.LCFI289:
 8792              		.cfi_def_cfa_offset 8
 8793 01ee BD46     		mov	sp, r7
 8794              	.LCFI290:
 8795              		.cfi_def_cfa_register 13
 8796              		@ sp needed
 8797 01f0 80BD     		pop	{r7, pc}
 8798              	.L497:
 8799 01f2 00BF     		.align	2
 8800              	.L496:
 8801 01f4 00000000 		.word	uxSchedulerSuspended
 8802 01f8 00000000 		.word	uxTopReadyPriority
 8803 01fc 00000000 		.word	pxReadyTasksLists
 8804 0200 00000000 		.word	xPendingReadyList
 8805 0204 00000000 		.word	pxCurrentTCB
 8806 0208 00000000 		.word	xYieldPending
 8807              		.cfi_endproc
 8808              	.LFE61:
 8810              		.section	.text.xTaskGenericNotifyStateClear,"ax",%progbits
 8811              		.align	1
 8812              		.global	xTaskGenericNotifyStateClear
 8813              		.syntax unified
 8814              		.thumb
 8815              		.thumb_func
 8817              	xTaskGenericNotifyStateClear:
 8818              	.LFB62:
5194:ThirdParty/FreeRTOS/tasks.c **** 
5195:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5196:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5197:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 251


5198:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5199:ThirdParty/FreeRTOS/tasks.c **** 
5200:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
5201:ThirdParty/FreeRTOS/tasks.c ****                                              UBaseType_t uxIndexToClear )
5202:ThirdParty/FreeRTOS/tasks.c ****     {
 8819              		.loc 1 5202 5
 8820              		.cfi_startproc
 8821              		@ args = 0, pretend = 0, frame = 24
 8822              		@ frame_needed = 1, uses_anonymous_args = 0
 8823 0000 80B5     		push	{r7, lr}
 8824              	.LCFI291:
 8825              		.cfi_def_cfa_offset 8
 8826              		.cfi_offset 7, -8
 8827              		.cfi_offset 14, -4
 8828 0002 86B0     		sub	sp, sp, #24
 8829              	.LCFI292:
 8830              		.cfi_def_cfa_offset 32
 8831 0004 00AF     		add	r7, sp, #0
 8832              	.LCFI293:
 8833              		.cfi_def_cfa_register 7
 8834 0006 7860     		str	r0, [r7, #4]
 8835 0008 3960     		str	r1, [r7]
5203:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
5204:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn;
5205:ThirdParty/FreeRTOS/tasks.c **** 
5206:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8836              		.loc 1 5206 9
 8837 000a 3B68     		ldr	r3, [r7]
 8838 000c 002B     		cmp	r3, #0
 8839 000e 0AD0     		beq	.L499
 8840              	.LBB312:
 8841              	.LBB313:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8842              		.loc 2 198 9
 8843              		.syntax unified
 8844              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8845 0010 4FF05003 			mov r3, #80												
 8846 0014 83F31188 		msr basepri, r3											
 8847 0018 BFF36F8F 		isb														
 8848 001c BFF34F8F 		dsb														
 8849              	
 8850              	@ 0 "" 2
 8851              		.thumb
 8852              		.syntax unified
 8853 0020 FB60     		str	r3, [r7, #12]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 8854              		.loc 2 206 5
 8855 0022 00BF     		nop
 8856              	.L500:
 8857              	.LBE313:
 8858              	.LBE312:
 8859              		.loc 1 5206 9 discriminator 1
 8860 0024 FEE7     		b	.L500
 8861              	.L499:
5207:ThirdParty/FreeRTOS/tasks.c **** 
5208:ThirdParty/FreeRTOS/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5209:ThirdParty/FreeRTOS/tasks.c ****          * its notification state cleared. */
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 252


5210:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
 8862              		.loc 1 5210 17
 8863 0026 7B68     		ldr	r3, [r7, #4]
 8864 0028 002B     		cmp	r3, #0
 8865 002a 02D1     		bne	.L501
 8866              		.loc 1 5210 17 is_stmt 0 discriminator 1
 8867 002c 104B     		ldr	r3, .L506
 8868 002e 1B68     		ldr	r3, [r3]
 8869 0030 00E0     		b	.L502
 8870              	.L501:
 8871              		.loc 1 5210 17 discriminator 2
 8872 0032 7B68     		ldr	r3, [r7, #4]
 8873              	.L502:
 8874              		.loc 1 5210 15 is_stmt 1 discriminator 4
 8875 0034 3B61     		str	r3, [r7, #16]
5211:ThirdParty/FreeRTOS/tasks.c **** 
5212:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 8876              		.loc 1 5212 9 discriminator 4
 8877 0036 FFF7FEFF 		bl	vPortEnterCritical
5213:ThirdParty/FreeRTOS/tasks.c ****         {
5214:ThirdParty/FreeRTOS/tasks.c ****             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 8878              		.loc 1 5214 37 discriminator 4
 8879 003a 3A69     		ldr	r2, [r7, #16]
 8880 003c 3B68     		ldr	r3, [r7]
 8881 003e 1344     		add	r3, r3, r2
 8882 0040 5433     		adds	r3, r3, #84
 8883 0042 1B78     		ldrb	r3, [r3]
 8884 0044 DBB2     		uxtb	r3, r3
 8885              		.loc 1 5214 15 discriminator 4
 8886 0046 022B     		cmp	r3, #2
 8887 0048 08D1     		bne	.L503
5215:ThirdParty/FreeRTOS/tasks.c ****             {
5216:ThirdParty/FreeRTOS/tasks.c ****                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 8888              		.loc 1 5216 56
 8889 004a 3A69     		ldr	r2, [r7, #16]
 8890 004c 3B68     		ldr	r3, [r7]
 8891 004e 1344     		add	r3, r3, r2
 8892 0050 5433     		adds	r3, r3, #84
 8893 0052 0022     		movs	r2, #0
 8894 0054 1A70     		strb	r2, [r3]
5217:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 8895              		.loc 1 5217 25
 8896 0056 0123     		movs	r3, #1
 8897 0058 7B61     		str	r3, [r7, #20]
 8898 005a 01E0     		b	.L504
 8899              	.L503:
5218:ThirdParty/FreeRTOS/tasks.c ****             }
5219:ThirdParty/FreeRTOS/tasks.c ****             else
5220:ThirdParty/FreeRTOS/tasks.c ****             {
5221:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdFAIL;
 8900              		.loc 1 5221 25
 8901 005c 0023     		movs	r3, #0
 8902 005e 7B61     		str	r3, [r7, #20]
 8903              	.L504:
5222:ThirdParty/FreeRTOS/tasks.c ****             }
5223:ThirdParty/FreeRTOS/tasks.c ****         }
5224:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 253


 8904              		.loc 1 5224 9
 8905 0060 FFF7FEFF 		bl	vPortExitCritical
5225:ThirdParty/FreeRTOS/tasks.c **** 
5226:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
 8906              		.loc 1 5226 16
 8907 0064 7B69     		ldr	r3, [r7, #20]
5227:ThirdParty/FreeRTOS/tasks.c ****     }
 8908              		.loc 1 5227 5
 8909 0066 1846     		mov	r0, r3
 8910 0068 1837     		adds	r7, r7, #24
 8911              	.LCFI294:
 8912              		.cfi_def_cfa_offset 8
 8913 006a BD46     		mov	sp, r7
 8914              	.LCFI295:
 8915              		.cfi_def_cfa_register 13
 8916              		@ sp needed
 8917 006c 80BD     		pop	{r7, pc}
 8918              	.L507:
 8919 006e 00BF     		.align	2
 8920              	.L506:
 8921 0070 00000000 		.word	pxCurrentTCB
 8922              		.cfi_endproc
 8923              	.LFE62:
 8925              		.section	.text.ulTaskGenericNotifyValueClear,"ax",%progbits
 8926              		.align	1
 8927              		.global	ulTaskGenericNotifyValueClear
 8928              		.syntax unified
 8929              		.thumb
 8930              		.thumb_func
 8932              	ulTaskGenericNotifyValueClear:
 8933              	.LFB63:
5228:ThirdParty/FreeRTOS/tasks.c **** 
5229:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5230:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5231:ThirdParty/FreeRTOS/tasks.c **** 
5232:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5233:ThirdParty/FreeRTOS/tasks.c **** 
5234:ThirdParty/FreeRTOS/tasks.c ****     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
5235:ThirdParty/FreeRTOS/tasks.c ****                                             UBaseType_t uxIndexToClear,
5236:ThirdParty/FreeRTOS/tasks.c ****                                             uint32_t ulBitsToClear )
5237:ThirdParty/FreeRTOS/tasks.c ****     {
 8934              		.loc 1 5237 5
 8935              		.cfi_startproc
 8936              		@ args = 0, pretend = 0, frame = 24
 8937              		@ frame_needed = 1, uses_anonymous_args = 0
 8938 0000 80B5     		push	{r7, lr}
 8939              	.LCFI296:
 8940              		.cfi_def_cfa_offset 8
 8941              		.cfi_offset 7, -8
 8942              		.cfi_offset 14, -4
 8943 0002 86B0     		sub	sp, sp, #24
 8944              	.LCFI297:
 8945              		.cfi_def_cfa_offset 32
 8946 0004 00AF     		add	r7, sp, #0
 8947              	.LCFI298:
 8948              		.cfi_def_cfa_register 7
 8949 0006 F860     		str	r0, [r7, #12]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 254


 8950 0008 B960     		str	r1, [r7, #8]
 8951 000a 7A60     		str	r2, [r7, #4]
5238:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
5239:ThirdParty/FreeRTOS/tasks.c ****         uint32_t ulReturn;
5240:ThirdParty/FreeRTOS/tasks.c **** 
5241:ThirdParty/FreeRTOS/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5242:ThirdParty/FreeRTOS/tasks.c ****          * its notification state cleared. */
5243:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
 8952              		.loc 1 5243 17
 8953 000c FB68     		ldr	r3, [r7, #12]
 8954 000e 002B     		cmp	r3, #0
 8955 0010 02D1     		bne	.L509
 8956              		.loc 1 5243 17 is_stmt 0 discriminator 1
 8957 0012 114B     		ldr	r3, .L512
 8958 0014 1B68     		ldr	r3, [r3]
 8959 0016 00E0     		b	.L510
 8960              	.L509:
 8961              		.loc 1 5243 17 discriminator 2
 8962 0018 FB68     		ldr	r3, [r7, #12]
 8963              	.L510:
 8964              		.loc 1 5243 15 is_stmt 1 discriminator 4
 8965 001a 7B61     		str	r3, [r7, #20]
5244:ThirdParty/FreeRTOS/tasks.c **** 
5245:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 8966              		.loc 1 5245 9 discriminator 4
 8967 001c FFF7FEFF 		bl	vPortEnterCritical
5246:ThirdParty/FreeRTOS/tasks.c ****         {
5247:ThirdParty/FreeRTOS/tasks.c ****             /* Return the notification as it was before the bits were cleared,
5248:ThirdParty/FreeRTOS/tasks.c ****              * then clear the bit mask. */
5249:ThirdParty/FreeRTOS/tasks.c ****             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
 8968              		.loc 1 5249 22 discriminator 4
 8969 0020 7B69     		ldr	r3, [r7, #20]
 8970 0022 BA68     		ldr	r2, [r7, #8]
 8971 0024 1432     		adds	r2, r2, #20
 8972 0026 53F82230 		ldr	r3, [r3, r2, lsl #2]
 8973 002a 3B61     		str	r3, [r7, #16]
5250:ThirdParty/FreeRTOS/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 8974              		.loc 1 5250 54 discriminator 4
 8975 002c 7B69     		ldr	r3, [r7, #20]
 8976 002e BA68     		ldr	r2, [r7, #8]
 8977 0030 1432     		adds	r2, r2, #20
 8978 0032 53F82220 		ldr	r2, [r3, r2, lsl #2]
 8979              		.loc 1 5250 57 discriminator 4
 8980 0036 7B68     		ldr	r3, [r7, #4]
 8981 0038 DB43     		mvns	r3, r3
 8982              		.loc 1 5250 54 discriminator 4
 8983 003a 02EA0301 		and	r1, r2, r3
 8984 003e 7B69     		ldr	r3, [r7, #20]
 8985 0040 BA68     		ldr	r2, [r7, #8]
 8986 0042 1432     		adds	r2, r2, #20
 8987 0044 43F82210 		str	r1, [r3, r2, lsl #2]
5251:ThirdParty/FreeRTOS/tasks.c ****         }
5252:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
 8988              		.loc 1 5252 9 discriminator 4
 8989 0048 FFF7FEFF 		bl	vPortExitCritical
5253:ThirdParty/FreeRTOS/tasks.c **** 
5254:ThirdParty/FreeRTOS/tasks.c ****         return ulReturn;
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 255


 8990              		.loc 1 5254 16 discriminator 4
 8991 004c 3B69     		ldr	r3, [r7, #16]
5255:ThirdParty/FreeRTOS/tasks.c ****     }
 8992              		.loc 1 5255 5 discriminator 4
 8993 004e 1846     		mov	r0, r3
 8994 0050 1837     		adds	r7, r7, #24
 8995              	.LCFI299:
 8996              		.cfi_def_cfa_offset 8
 8997 0052 BD46     		mov	sp, r7
 8998              	.LCFI300:
 8999              		.cfi_def_cfa_register 13
 9000              		@ sp needed
 9001 0054 80BD     		pop	{r7, pc}
 9002              	.L513:
 9003 0056 00BF     		.align	2
 9004              	.L512:
 9005 0058 00000000 		.word	pxCurrentTCB
 9006              		.cfi_endproc
 9007              	.LFE63:
 9009              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 9010              		.align	1
 9011              		.syntax unified
 9012              		.thumb
 9013              		.thumb_func
 9015              	prvAddCurrentTaskToDelayedList:
 9016              	.LFB64:
5256:ThirdParty/FreeRTOS/tasks.c **** 
5257:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5258:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5259:ThirdParty/FreeRTOS/tasks.c **** 
5260:ThirdParty/FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5261:ThirdParty/FreeRTOS/tasks.c **** 
5262:ThirdParty/FreeRTOS/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimeCounter( void )
5263:ThirdParty/FreeRTOS/tasks.c ****     {
5264:ThirdParty/FreeRTOS/tasks.c ****         return xIdleTaskHandle->ulRunTimeCounter;
5265:ThirdParty/FreeRTOS/tasks.c ****     }
5266:ThirdParty/FreeRTOS/tasks.c **** 
5267:ThirdParty/FreeRTOS/tasks.c **** #endif
5268:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5269:ThirdParty/FreeRTOS/tasks.c **** 
5270:ThirdParty/FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5271:ThirdParty/FreeRTOS/tasks.c **** 
5272:ThirdParty/FreeRTOS/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimePercent( void )
5273:ThirdParty/FreeRTOS/tasks.c ****     {
5274:ThirdParty/FreeRTOS/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulReturn;
5275:ThirdParty/FreeRTOS/tasks.c **** 
5276:ThirdParty/FreeRTOS/tasks.c ****         ulTotalTime = portGET_RUN_TIME_COUNTER_VALUE();
5277:ThirdParty/FreeRTOS/tasks.c **** 
5278:ThirdParty/FreeRTOS/tasks.c ****         /* For percentage calculations. */
5279:ThirdParty/FreeRTOS/tasks.c ****         ulTotalTime /= ( configRUN_TIME_COUNTER_TYPE ) 100;
5280:ThirdParty/FreeRTOS/tasks.c **** 
5281:ThirdParty/FreeRTOS/tasks.c ****         /* Avoid divide by zero errors. */
5282:ThirdParty/FreeRTOS/tasks.c ****         if( ulTotalTime > ( configRUN_TIME_COUNTER_TYPE ) 0 )
5283:ThirdParty/FreeRTOS/tasks.c ****         {
5284:ThirdParty/FreeRTOS/tasks.c ****             ulReturn = xIdleTaskHandle->ulRunTimeCounter / ulTotalTime;
5285:ThirdParty/FreeRTOS/tasks.c ****         }
5286:ThirdParty/FreeRTOS/tasks.c ****         else
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 256


5287:ThirdParty/FreeRTOS/tasks.c ****         {
5288:ThirdParty/FreeRTOS/tasks.c ****             ulReturn = 0;
5289:ThirdParty/FreeRTOS/tasks.c ****         }
5290:ThirdParty/FreeRTOS/tasks.c **** 
5291:ThirdParty/FreeRTOS/tasks.c ****         return ulReturn;
5292:ThirdParty/FreeRTOS/tasks.c ****     }
5293:ThirdParty/FreeRTOS/tasks.c **** 
5294:ThirdParty/FreeRTOS/tasks.c **** #endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) 
5295:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5296:ThirdParty/FreeRTOS/tasks.c **** 
5297:ThirdParty/FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
5298:ThirdParty/FreeRTOS/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely )
5299:ThirdParty/FreeRTOS/tasks.c **** {
 9017              		.loc 1 5299 1
 9018              		.cfi_startproc
 9019              		@ args = 0, pretend = 0, frame = 24
 9020              		@ frame_needed = 1, uses_anonymous_args = 0
 9021 0000 80B5     		push	{r7, lr}
 9022              	.LCFI301:
 9023              		.cfi_def_cfa_offset 8
 9024              		.cfi_offset 7, -8
 9025              		.cfi_offset 14, -4
 9026 0002 86B0     		sub	sp, sp, #24
 9027              	.LCFI302:
 9028              		.cfi_def_cfa_offset 32
 9029 0004 00AF     		add	r7, sp, #0
 9030              	.LCFI303:
 9031              		.cfi_def_cfa_register 7
 9032 0006 7860     		str	r0, [r7, #4]
 9033 0008 3960     		str	r1, [r7]
5300:ThirdParty/FreeRTOS/tasks.c ****     TickType_t xTimeToWake;
5301:ThirdParty/FreeRTOS/tasks.c ****     const TickType_t xConstTickCount = xTickCount;
 9034              		.loc 1 5301 22
 9035 000a 364B     		ldr	r3, .L520
 9036 000c 1B68     		ldr	r3, [r3]
 9037 000e 7B61     		str	r3, [r7, #20]
5302:ThirdParty/FreeRTOS/tasks.c **** 
5303:ThirdParty/FreeRTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
5304:ThirdParty/FreeRTOS/tasks.c ****     {
5305:ThirdParty/FreeRTOS/tasks.c ****         /* About to enter a delayed list, so ensure the ucDelayAborted flag is
5306:ThirdParty/FreeRTOS/tasks.c ****          * reset to pdFALSE so it can be detected as having been set to pdTRUE
5307:ThirdParty/FreeRTOS/tasks.c ****          * when the task leaves the Blocked state. */
5308:ThirdParty/FreeRTOS/tasks.c ****         pxCurrentTCB->ucDelayAborted = pdFALSE;
5309:ThirdParty/FreeRTOS/tasks.c ****     }
5310:ThirdParty/FreeRTOS/tasks.c ****     #endif
5311:ThirdParty/FreeRTOS/tasks.c **** 
5312:ThirdParty/FreeRTOS/tasks.c ****     /* Remove the task from the ready list before adding it to the blocked list
5313:ThirdParty/FreeRTOS/tasks.c ****      * as the same list item is used for both lists. */
5314:ThirdParty/FreeRTOS/tasks.c ****     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 9038              		.loc 1 5314 38
 9039 0010 354B     		ldr	r3, .L520+4
 9040 0012 1B68     		ldr	r3, [r3]
 9041              		.loc 1 5314 9
 9042 0014 0433     		adds	r3, r3, #4
 9043 0016 1846     		mov	r0, r3
 9044 0018 FFF7FEFF 		bl	uxListRemove
 9045 001c 0346     		mov	r3, r0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 257


 9046              		.loc 1 5314 7
 9047 001e 002B     		cmp	r3, #0
 9048 0020 0BD1     		bne	.L515
5315:ThirdParty/FreeRTOS/tasks.c ****     {
5316:ThirdParty/FreeRTOS/tasks.c ****         /* The current task must be in a ready list, so there is no need to
5317:ThirdParty/FreeRTOS/tasks.c ****          * check, and the port reset macro can be called directly. */
5318:ThirdParty/FreeRTOS/tasks.c ****         portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCu
 9049              		.loc 1 5318 9
 9050 0022 314B     		ldr	r3, .L520+4
 9051 0024 1B68     		ldr	r3, [r3]
 9052 0026 DB6A     		ldr	r3, [r3, #44]
 9053 0028 0122     		movs	r2, #1
 9054 002a 02FA03F3 		lsl	r3, r2, r3
 9055 002e DA43     		mvns	r2, r3
 9056 0030 2E4B     		ldr	r3, .L520+8
 9057 0032 1B68     		ldr	r3, [r3]
 9058 0034 1340     		ands	r3, r3, r2
 9059 0036 2D4A     		ldr	r2, .L520+8
 9060 0038 1360     		str	r3, [r2]
 9061              	.L515:
5319:ThirdParty/FreeRTOS/tasks.c ****     }
5320:ThirdParty/FreeRTOS/tasks.c ****     else
5321:ThirdParty/FreeRTOS/tasks.c ****     {
5322:ThirdParty/FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
5323:ThirdParty/FreeRTOS/tasks.c ****     }
5324:ThirdParty/FreeRTOS/tasks.c **** 
5325:ThirdParty/FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
5326:ThirdParty/FreeRTOS/tasks.c ****     {
5327:ThirdParty/FreeRTOS/tasks.c ****         if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 9062              		.loc 1 5327 11
 9063 003a 7B68     		ldr	r3, [r7, #4]
 9064 003c B3F1FF3F 		cmp	r3, #-1
 9065 0040 24D1     		bne	.L516
 9066              		.loc 1 5327 47 discriminator 1
 9067 0042 3B68     		ldr	r3, [r7]
 9068 0044 002B     		cmp	r3, #0
 9069 0046 21D0     		beq	.L516
 9070              	.LBB314:
5328:ThirdParty/FreeRTOS/tasks.c ****         {
5329:ThirdParty/FreeRTOS/tasks.c ****             /* Add the task to the suspended task list instead of a delayed task
5330:ThirdParty/FreeRTOS/tasks.c ****              * list to ensure it is not woken by a timing event.  It will block
5331:ThirdParty/FreeRTOS/tasks.c ****              * indefinitely. */
5332:ThirdParty/FreeRTOS/tasks.c ****             listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 9071              		.loc 1 5332 13
 9072 0048 294B     		ldr	r3, .L520+12
 9073 004a 5B68     		ldr	r3, [r3, #4]
 9074 004c 3B61     		str	r3, [r7, #16]
 9075 004e 264B     		ldr	r3, .L520+4
 9076 0050 1B68     		ldr	r3, [r3]
 9077 0052 3A69     		ldr	r2, [r7, #16]
 9078 0054 9A60     		str	r2, [r3, #8]
 9079 0056 244B     		ldr	r3, .L520+4
 9080 0058 1B68     		ldr	r3, [r3]
 9081 005a 3A69     		ldr	r2, [r7, #16]
 9082 005c 9268     		ldr	r2, [r2, #8]
 9083 005e DA60     		str	r2, [r3, #12]
 9084 0060 214B     		ldr	r3, .L520+4
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 258


 9085 0062 1A68     		ldr	r2, [r3]
 9086 0064 3B69     		ldr	r3, [r7, #16]
 9087 0066 9B68     		ldr	r3, [r3, #8]
 9088 0068 0432     		adds	r2, r2, #4
 9089 006a 5A60     		str	r2, [r3, #4]
 9090 006c 1E4B     		ldr	r3, .L520+4
 9091 006e 1B68     		ldr	r3, [r3]
 9092 0070 1A1D     		adds	r2, r3, #4
 9093 0072 3B69     		ldr	r3, [r7, #16]
 9094 0074 9A60     		str	r2, [r3, #8]
 9095 0076 1C4B     		ldr	r3, .L520+4
 9096 0078 1B68     		ldr	r3, [r3]
 9097 007a 1D4A     		ldr	r2, .L520+12
 9098 007c 5A61     		str	r2, [r3, #20]
 9099 007e 1C4B     		ldr	r3, .L520+12
 9100 0080 1B68     		ldr	r3, [r3]
 9101 0082 0133     		adds	r3, r3, #1
 9102 0084 1A4A     		ldr	r2, .L520+12
 9103 0086 1360     		str	r3, [r2]
 9104              	.LBE314:
 9105 0088 00BF     		nop
5333:ThirdParty/FreeRTOS/tasks.c ****         }
5334:ThirdParty/FreeRTOS/tasks.c ****         else
5335:ThirdParty/FreeRTOS/tasks.c ****         {
5336:ThirdParty/FreeRTOS/tasks.c ****             /* Calculate the time at which the task should be woken if the event
5337:ThirdParty/FreeRTOS/tasks.c ****              * does not occur.  This may overflow but this doesn't matter, the
5338:ThirdParty/FreeRTOS/tasks.c ****              * kernel will manage it correctly. */
5339:ThirdParty/FreeRTOS/tasks.c ****             xTimeToWake = xConstTickCount + xTicksToWait;
5340:ThirdParty/FreeRTOS/tasks.c **** 
5341:ThirdParty/FreeRTOS/tasks.c ****             /* The list item will be inserted in wake time order. */
5342:ThirdParty/FreeRTOS/tasks.c ****             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5343:ThirdParty/FreeRTOS/tasks.c **** 
5344:ThirdParty/FreeRTOS/tasks.c ****             if( xTimeToWake < xConstTickCount )
5345:ThirdParty/FreeRTOS/tasks.c ****             {
5346:ThirdParty/FreeRTOS/tasks.c ****                 /* Wake time has overflowed.  Place this item in the overflow
5347:ThirdParty/FreeRTOS/tasks.c ****                  * list. */
5348:ThirdParty/FreeRTOS/tasks.c ****                 vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5349:ThirdParty/FreeRTOS/tasks.c ****             }
5350:ThirdParty/FreeRTOS/tasks.c ****             else
5351:ThirdParty/FreeRTOS/tasks.c ****             {
5352:ThirdParty/FreeRTOS/tasks.c ****                 /* The wake time has not overflowed, so the current block list
5353:ThirdParty/FreeRTOS/tasks.c ****                  * is used. */
5354:ThirdParty/FreeRTOS/tasks.c ****                 vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5355:ThirdParty/FreeRTOS/tasks.c **** 
5356:ThirdParty/FreeRTOS/tasks.c ****                 /* If the task entering the blocked state was placed at the
5357:ThirdParty/FreeRTOS/tasks.c ****                  * head of the list of blocked tasks then xNextTaskUnblockTime
5358:ThirdParty/FreeRTOS/tasks.c ****                  * needs to be updated too. */
5359:ThirdParty/FreeRTOS/tasks.c ****                 if( xTimeToWake < xNextTaskUnblockTime )
5360:ThirdParty/FreeRTOS/tasks.c ****                 {
5361:ThirdParty/FreeRTOS/tasks.c ****                     xNextTaskUnblockTime = xTimeToWake;
5362:ThirdParty/FreeRTOS/tasks.c ****                 }
5363:ThirdParty/FreeRTOS/tasks.c ****                 else
5364:ThirdParty/FreeRTOS/tasks.c ****                 {
5365:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5366:ThirdParty/FreeRTOS/tasks.c ****                 }
5367:ThirdParty/FreeRTOS/tasks.c ****             }
5368:ThirdParty/FreeRTOS/tasks.c ****         }
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 259


5369:ThirdParty/FreeRTOS/tasks.c ****     }
5370:ThirdParty/FreeRTOS/tasks.c ****     #else /* INCLUDE_vTaskSuspend */
5371:ThirdParty/FreeRTOS/tasks.c ****     {
5372:ThirdParty/FreeRTOS/tasks.c ****         /* Calculate the time at which the task should be woken if the event
5373:ThirdParty/FreeRTOS/tasks.c ****          * does not occur.  This may overflow but this doesn't matter, the kernel
5374:ThirdParty/FreeRTOS/tasks.c ****          * will manage it correctly. */
5375:ThirdParty/FreeRTOS/tasks.c ****         xTimeToWake = xConstTickCount + xTicksToWait;
5376:ThirdParty/FreeRTOS/tasks.c **** 
5377:ThirdParty/FreeRTOS/tasks.c ****         /* The list item will be inserted in wake time order. */
5378:ThirdParty/FreeRTOS/tasks.c ****         listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5379:ThirdParty/FreeRTOS/tasks.c **** 
5380:ThirdParty/FreeRTOS/tasks.c ****         if( xTimeToWake < xConstTickCount )
5381:ThirdParty/FreeRTOS/tasks.c ****         {
5382:ThirdParty/FreeRTOS/tasks.c ****             /* Wake time has overflowed.  Place this item in the overflow list. */
5383:ThirdParty/FreeRTOS/tasks.c ****             vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5384:ThirdParty/FreeRTOS/tasks.c ****         }
5385:ThirdParty/FreeRTOS/tasks.c ****         else
5386:ThirdParty/FreeRTOS/tasks.c ****         {
5387:ThirdParty/FreeRTOS/tasks.c ****             /* The wake time has not overflowed, so the current block list is used. */
5388:ThirdParty/FreeRTOS/tasks.c ****             vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5389:ThirdParty/FreeRTOS/tasks.c **** 
5390:ThirdParty/FreeRTOS/tasks.c ****             /* If the task entering the blocked state was placed at the head of the
5391:ThirdParty/FreeRTOS/tasks.c ****              * list of blocked tasks then xNextTaskUnblockTime needs to be updated
5392:ThirdParty/FreeRTOS/tasks.c ****              * too. */
5393:ThirdParty/FreeRTOS/tasks.c ****             if( xTimeToWake < xNextTaskUnblockTime )
5394:ThirdParty/FreeRTOS/tasks.c ****             {
5395:ThirdParty/FreeRTOS/tasks.c ****                 xNextTaskUnblockTime = xTimeToWake;
5396:ThirdParty/FreeRTOS/tasks.c ****             }
5397:ThirdParty/FreeRTOS/tasks.c ****             else
5398:ThirdParty/FreeRTOS/tasks.c ****             {
5399:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
5400:ThirdParty/FreeRTOS/tasks.c ****             }
5401:ThirdParty/FreeRTOS/tasks.c ****         }
5402:ThirdParty/FreeRTOS/tasks.c **** 
5403:ThirdParty/FreeRTOS/tasks.c ****         /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5404:ThirdParty/FreeRTOS/tasks.c ****         ( void ) xCanBlockIndefinitely;
5405:ThirdParty/FreeRTOS/tasks.c ****     }
5406:ThirdParty/FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
5407:ThirdParty/FreeRTOS/tasks.c **** }
 9106              		.loc 1 5407 1
 9107 008a 26E0     		b	.L519
 9108              	.L516:
5339:ThirdParty/FreeRTOS/tasks.c **** 
 9109              		.loc 1 5339 25
 9110 008c 7A69     		ldr	r2, [r7, #20]
 9111 008e 7B68     		ldr	r3, [r7, #4]
 9112 0090 1344     		add	r3, r3, r2
 9113 0092 FB60     		str	r3, [r7, #12]
5342:ThirdParty/FreeRTOS/tasks.c **** 
 9114              		.loc 1 5342 13
 9115 0094 144B     		ldr	r3, .L520+4
 9116 0096 1B68     		ldr	r3, [r3]
 9117 0098 FA68     		ldr	r2, [r7, #12]
 9118 009a 5A60     		str	r2, [r3, #4]
5344:ThirdParty/FreeRTOS/tasks.c ****             {
 9119              		.loc 1 5344 15
 9120 009c FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 260


 9121 009e 7B69     		ldr	r3, [r7, #20]
 9122 00a0 9A42     		cmp	r2, r3
 9123 00a2 09D2     		bcs	.L518
5348:ThirdParty/FreeRTOS/tasks.c ****             }
 9124              		.loc 1 5348 17
 9125 00a4 134B     		ldr	r3, .L520+16
 9126 00a6 1A68     		ldr	r2, [r3]
5348:ThirdParty/FreeRTOS/tasks.c ****             }
 9127              		.loc 1 5348 72
 9128 00a8 0F4B     		ldr	r3, .L520+4
 9129 00aa 1B68     		ldr	r3, [r3]
5348:ThirdParty/FreeRTOS/tasks.c ****             }
 9130              		.loc 1 5348 17
 9131 00ac 0433     		adds	r3, r3, #4
 9132 00ae 1946     		mov	r1, r3
 9133 00b0 1046     		mov	r0, r2
 9134 00b2 FFF7FEFF 		bl	vListInsert
 9135              		.loc 1 5407 1
 9136 00b6 10E0     		b	.L519
 9137              	.L518:
5354:ThirdParty/FreeRTOS/tasks.c **** 
 9138              		.loc 1 5354 17
 9139 00b8 0F4B     		ldr	r3, .L520+20
 9140 00ba 1A68     		ldr	r2, [r3]
5354:ThirdParty/FreeRTOS/tasks.c **** 
 9141              		.loc 1 5354 64
 9142 00bc 0A4B     		ldr	r3, .L520+4
 9143 00be 1B68     		ldr	r3, [r3]
5354:ThirdParty/FreeRTOS/tasks.c **** 
 9144              		.loc 1 5354 17
 9145 00c0 0433     		adds	r3, r3, #4
 9146 00c2 1946     		mov	r1, r3
 9147 00c4 1046     		mov	r0, r2
 9148 00c6 FFF7FEFF 		bl	vListInsert
5359:ThirdParty/FreeRTOS/tasks.c ****                 {
 9149              		.loc 1 5359 33
 9150 00ca 0C4B     		ldr	r3, .L520+24
 9151 00cc 1B68     		ldr	r3, [r3]
5359:ThirdParty/FreeRTOS/tasks.c ****                 {
 9152              		.loc 1 5359 19
 9153 00ce FA68     		ldr	r2, [r7, #12]
 9154 00d0 9A42     		cmp	r2, r3
 9155 00d2 02D2     		bcs	.L519
5361:ThirdParty/FreeRTOS/tasks.c ****                 }
 9156              		.loc 1 5361 42
 9157 00d4 094A     		ldr	r2, .L520+24
 9158 00d6 FB68     		ldr	r3, [r7, #12]
 9159 00d8 1360     		str	r3, [r2]
 9160              	.L519:
 9161              		.loc 1 5407 1
 9162 00da 00BF     		nop
 9163 00dc 1837     		adds	r7, r7, #24
 9164              	.LCFI304:
 9165              		.cfi_def_cfa_offset 8
 9166 00de BD46     		mov	sp, r7
 9167              	.LCFI305:
 9168              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 261


 9169              		@ sp needed
 9170 00e0 80BD     		pop	{r7, pc}
 9171              	.L521:
 9172 00e2 00BF     		.align	2
 9173              	.L520:
 9174 00e4 00000000 		.word	xTickCount
 9175 00e8 00000000 		.word	pxCurrentTCB
 9176 00ec 00000000 		.word	uxTopReadyPriority
 9177 00f0 00000000 		.word	xSuspendedTaskList
 9178 00f4 00000000 		.word	pxOverflowDelayedTaskList
 9179 00f8 00000000 		.word	pxDelayedTaskList
 9180 00fc 00000000 		.word	xNextTaskUnblockTime
 9181              		.cfi_endproc
 9182              	.LFE64:
 9184              		.text
 9185              	.Letext0:
 9186              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\lib\\gcc\\arm-none-eabi\
 9187              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 9188              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 9189              		.file 6 "ThirdParty/FreeRTOS/include/projdefs.h"
 9190              		.file 7 "ThirdParty/FreeRTOS/include/list.h"
 9191              		.file 8 "ThirdParty/FreeRTOS/include/task.h"
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 262


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:24     .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:21     .bss.pxCurrentTCB:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:27     .bss.pxReadyTasksLists:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:30     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:33     .bss.xDelayedTaskList1:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:36     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:39     .bss.xDelayedTaskList2:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:42     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:45     .bss.pxDelayedTaskList:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:48     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:51     .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:54     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:57     .bss.xPendingReadyList:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:60     .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:63     .bss.xTasksWaitingTermination:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:66     .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:69     .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:72     .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:75     .bss.xSuspendedTaskList:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:78     .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:81     .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:84     .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:87     .bss.xTickCount:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:90     .bss.xTickCount:00000000 xTickCount
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:93     .bss.uxTopReadyPriority:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:96     .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:99     .bss.xSchedulerRunning:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:102    .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:105    .bss.xPendedTicks:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:108    .bss.xPendedTicks:00000000 xPendedTicks
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:111    .bss.xYieldPending:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:114    .bss.xYieldPending:00000000 xYieldPending
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:117    .bss.xNumOfOverflows:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:120    .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:123    .bss.uxTaskNumber:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:126    .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:129    .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:132    .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:135    .bss.xIdleTaskHandle:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:138    .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:145    .data.uxTopUsedPriority:00000000 uxTopUsedPriority
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:142    .data.uxTopUsedPriority:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:148    .bss.uxSchedulerSuspended:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:151    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:154    .text.xTaskCreate:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:160    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:275    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:501    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:270    .text.prvInitialiseNewTask:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:496    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5605   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:670    .text.prvAddNewTaskToReadyList:000000f8 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:680    .text.vTaskDelete:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:686    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:6203   .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 263


C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:6157   .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:881    .text.vTaskDelete:00000100 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:895    .text.xTaskDelayUntil:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:901    .text.xTaskDelayUntil:00000000 xTaskDelayUntil
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2819   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:9015   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2865   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:1110   .text.xTaskDelayUntil:000000f0 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:1117   .text.vTaskDelay:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:1123   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:1216   .text.vTaskDelay:00000060 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:1222   .text.eTaskGetState:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:1228   .text.eTaskGetState:00000000 eTaskGetState
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:1407   .text.eTaskGetState:000000e0 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:1416   .text.uxTaskPriorityGet:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:1422   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:1477   .text.uxTaskPriorityGet:00000030 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:1482   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:1488   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:1579   .text.uxTaskPriorityGetFromISR:00000054 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:1584   .text.vTaskPrioritySet:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:1590   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:1856   .text.vTaskPrioritySet:00000180 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:1863   .text.vTaskSuspend:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:1869   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:4024   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2092   .text.vTaskSuspend:00000120 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2104   .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2109   .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2202   .text.prvTaskIsTaskSuspended:0000005c $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2208   .text.vTaskResume:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2214   .text.vTaskResume:00000000 vTaskResume
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2372   .text.vTaskResume:000000e0 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2379   .text.xTaskResumeFromISR:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2385   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2601   .text.xTaskResumeFromISR:00000124 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2611   .rodata:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2615   .text.vTaskStartScheduler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2621   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2737   .text.vTaskStartScheduler:00000088 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5556   .text.prvIdleTask:00000000 prvIdleTask
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2748   .text.vTaskEndScheduler:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2754   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2808   .text.vTaskEndScheduler:0000002c $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2813   .text.vTaskSuspendAll:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2854   .text.vTaskSuspendAll:00000018 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:2859   .text.xTaskResumeAll:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:3698   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:3169   .text.xTaskResumeAll:000001bc $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:3181   .text.xTaskGetTickCount:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:3187   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:3227   .text.xTaskGetTickCount:0000001c $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:3232   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:3238   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:3279   .text.xTaskGetTickCountFromISR:00000020 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:3284   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:3290   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 264


C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:3321   .text.uxTaskGetNumberOfTasks:00000014 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:3326   .text.pcTaskGetName:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:3332   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:3410   .text.pcTaskGetName:00000044 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:3415   .text.uxTaskGetSystemState:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:3421   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5956   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:3594   .text.uxTaskGetSystemState:00000104 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:3604   .text.xTaskCatchUpTicks:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:3610   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:3686   .text.xTaskCatchUpTicks:00000050 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:3692   .text.xTaskIncrementTick:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:4005   .text.xTaskIncrementTick:000001c4 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:4018   .text.vTaskSwitchContext:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:4167   .text.vTaskSwitchContext:000000a4 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:4176   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:4182   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:4252   .text.vTaskPlaceOnEventList:00000044 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:4257   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:4263   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:4394   .text.vTaskPlaceOnUnorderedEventList:000000a4 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:4400   .text.vTaskPlaceOnEventListRestricted:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:4406   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:4512   .text.vTaskPlaceOnEventListRestricted:00000088 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:4517   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:4523   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:4794   .text.xTaskRemoveFromEventList:00000194 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:4804   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:4810   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5062   .text.vTaskRemoveFromUnorderedEventList:0000016c $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5071   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5077   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5148   .text.vTaskSetTimeOutState:00000044 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5154   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5160   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5205   .text.vTaskInternalSetTimeOutState:00000024 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5211   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5217   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5386   .text.xTaskCheckForTimeOut:000000c4 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5392   .text.vTaskMissedYield:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5398   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5430   .text.vTaskMissedYield:00000014 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5435   .text.uxTaskGetTaskNumber:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5441   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5496   .text.vTaskSetTaskNumber:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5502   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5551   .text.prvIdleTask:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5700   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5595   .text.prvIdleTask:00000020 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5600   .text.prvInitialiseTaskLists:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5683   .text.prvInitialiseTaskLists:00000060 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5695   .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5773   .text.prvCheckTasksWaitingTermination:00000050 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5780   .text.vTaskGetInfo:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5786   .text.vTaskGetInfo:00000000 vTaskGetInfo
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:6088   .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5946   .text.vTaskGetInfo:000000c8 $d
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 265


C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:5951   .text.prvListTasksWithinSingleList:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:6083   .text.prvTaskCheckFreeStackSpace:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:6152   .text.prvDeleteTCB:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:6198   .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:6254   .text.prvResetNextTaskUnblockTime:00000030 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:6260   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:6266   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:6306   .text.xTaskGetCurrentTaskHandle:0000001c $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:6311   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:6317   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:6379   .text.xTaskGetSchedulerState:00000034 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:6385   .text.xTaskPriorityInherit:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:6391   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:6595   .text.xTaskPriorityInherit:00000130 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:6602   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:6608   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:6831   .text.xTaskPriorityDisinherit:0000013c $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:6838   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:6844   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:7093   .text.vTaskPriorityDisinheritAfterTimeout:00000164 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:7100   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:7106   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:7156   .text.uxTaskResetEventItemValue:0000002c $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:7161   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:7167   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:7212   .text.pvTaskIncrementMutexHeldCount:00000024 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:7217   .text.ulTaskGenericNotifyTake:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:7223   .text.ulTaskGenericNotifyTake:00000000 ulTaskGenericNotifyTake
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:7379   .text.ulTaskGenericNotifyTake:000000c8 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:7385   .text.xTaskGenericNotifyWait:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:7391   .text.xTaskGenericNotifyWait:00000000 xTaskGenericNotifyWait
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:7577   .text.xTaskGenericNotifyWait:000000f8 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:7583   .text.xTaskGenericNotify:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:7589   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:7705   .text.xTaskGenericNotify:0000008c $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:7710   .text.xTaskGenericNotify:000000a0 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:7957   .text.xTaskGenericNotify:00000218 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:7965   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:7971   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:8109   .text.xTaskGenericNotifyFromISR:000000a8 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:8114   .text.xTaskGenericNotifyFromISR:000000bc $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:8434   .text.xTaskGenericNotifyFromISR:0000029c $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:8445   .text.vTaskGenericNotifyGiveFromISR:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:8451   .text.vTaskGenericNotifyGiveFromISR:00000000 vTaskGenericNotifyGiveFromISR
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:8801   .text.vTaskGenericNotifyGiveFromISR:000001f4 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:8811   .text.xTaskGenericNotifyStateClear:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:8817   .text.xTaskGenericNotifyStateClear:00000000 xTaskGenericNotifyStateClear
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:8921   .text.xTaskGenericNotifyStateClear:00000070 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:8926   .text.ulTaskGenericNotifyValueClear:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:8932   .text.ulTaskGenericNotifyValueClear:00000000 ulTaskGenericNotifyValueClear
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:9005   .text.ulTaskGenericNotifyValueClear:00000058 $d
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:9010   .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s:9174   .text.prvAddCurrentTaskToDelayedList:000000e4 $d

UNDEFINED SYMBOLS
pvPortMalloc
memset
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccn7nXRn.s 			page 266


vPortFree
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vPortExitCritical
uxListRemove
vListInsertEnd
vPortValidateInterruptPriority
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
vListInsert
vListInitialise
