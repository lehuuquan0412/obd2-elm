ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"heap_4.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.bss.ucHeap,"aw",%nobits
  20              		.align	2
  23              	ucHeap:
  24 0000 00000000 		.space	76800
  24      00000000 
  24      00000000 
  24      00000000 
  24      00000000 
  25              		.section	.rodata.xHeapStructSize,"a"
  26              		.align	2
  29              	xHeapStructSize:
  30 0000 08000000 		.word	8
  31              		.section	.bss.xStart,"aw",%nobits
  32              		.align	2
  35              	xStart:
  36 0000 00000000 		.space	8
  36      00000000 
  37              		.section	.bss.pxEnd,"aw",%nobits
  38              		.align	2
  41              	pxEnd:
  42 0000 00000000 		.space	4
  43              		.section	.bss.xFreeBytesRemaining,"aw",%nobits
  44              		.align	2
  47              	xFreeBytesRemaining:
  48 0000 00000000 		.space	4
  49              		.section	.bss.xMinimumEverFreeBytesRemaining,"aw",%nobits
  50              		.align	2
  53              	xMinimumEverFreeBytesRemaining:
  54 0000 00000000 		.space	4
  55              		.section	.bss.xNumberOfSuccessfulAllocations,"aw",%nobits
  56              		.align	2
  59              	xNumberOfSuccessfulAllocations:
  60 0000 00000000 		.space	4
  61              		.section	.bss.xNumberOfSuccessfulFrees,"aw",%nobits
  62              		.align	2
  65              	xNumberOfSuccessfulFrees:
  66 0000 00000000 		.space	4
  67              		.section	.text.pvPortMalloc,"ax",%progbits
  68              		.align	1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 2


  69              		.global	pvPortMalloc
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  74              	pvPortMalloc:
  75              	.LFB5:
  76              		.file 1 "ThirdParty/FreeRTOS/portable/MemMang/heap_4.c"
   1:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /*
   2:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * FreeRTOS Kernel V10.5.1
   3:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  *
   5:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * SPDX-License-Identifier: MIT
   6:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  *
   7:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * the Software without restriction, including without limitation the rights to
  10:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * subject to the following conditions:
  13:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  *
  14:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * The above copyright notice and this permission notice shall be included in all
  15:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * copies or substantial portions of the Software.
  16:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  *
  17:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  *
  24:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * https://www.FreeRTOS.org
  25:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * https://github.com/FreeRTOS
  26:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  *
  27:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  */
  28:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
  29:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /*
  30:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * A sample implementation of pvPortMalloc() and vPortFree() that combines
  31:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * (coalescences) adjacent memory blocks as they are freed, and in so doing
  32:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * limits memory fragmentation.
  33:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  *
  34:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * See heap_1.c, heap_2.c and heap_3.c for alternative implementations, and the
  35:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * memory management pages of https://www.FreeRTOS.org for more information.
  36:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  */
  37:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #include <stdlib.h>
  38:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #include <string.h>
  39:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
  40:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  41:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  42:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * task.h is included from an application file. */
  43:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  44:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
  45:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #include "FreeRTOS.h"
  46:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #include "task.h"
  47:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
  48:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  49:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
  50:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 3


  51:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     #error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
  52:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #endif
  53:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
  54:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #ifndef configHEAP_CLEAR_MEMORY_ON_FREE
  55:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     #define configHEAP_CLEAR_MEMORY_ON_FREE    0
  56:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #endif
  57:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
  58:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /* Block sizes must not get too small. */
  59:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #define heapMINIMUM_BLOCK_SIZE    ( ( size_t ) ( xHeapStructSize << 1 ) )
  60:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
  61:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /* Assumes 8bit bytes! */
  62:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #define heapBITS_PER_BYTE         ( ( size_t ) 8 )
  63:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
  64:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /* Max value that fits in a size_t type. */
  65:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #define heapSIZE_MAX              ( ~( ( size_t ) 0 ) )
  66:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
  67:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /* Check if multiplying a and b will result in overflow. */
  68:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #define heapMULTIPLY_WILL_OVERFLOW( a, b )    ( ( ( a ) > 0 ) && ( ( b ) > ( heapSIZE_MAX / ( a ) )
  69:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
  70:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /* Check if adding a and b will result in overflow. */
  71:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #define heapADD_WILL_OVERFLOW( a, b )         ( ( a ) > ( heapSIZE_MAX - ( b ) ) )
  72:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
  73:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /* MSB of the xBlockSize member of an BlockLink_t structure is used to track
  74:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * the allocation status of a block.  When MSB of the xBlockSize member of
  75:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * an BlockLink_t structure is set then the block belongs to the application.
  76:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * When the bit is free the block is still part of the free heap space. */
  77:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #define heapBLOCK_ALLOCATED_BITMASK    ( ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BY
  78:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #define heapBLOCK_SIZE_IS_VALID( xBlockSize )    ( ( ( xBlockSize ) & heapBLOCK_ALLOCATED_BITMASK )
  79:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #define heapBLOCK_IS_ALLOCATED( pxBlock )        ( ( ( pxBlock->xBlockSize ) & heapBLOCK_ALLOCATED_
  80:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #define heapALLOCATE_BLOCK( pxBlock )            ( ( pxBlock->xBlockSize ) |= heapBLOCK_ALLOCATED_B
  81:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #define heapFREE_BLOCK( pxBlock )                ( ( pxBlock->xBlockSize ) &= ~heapBLOCK_ALLOCATED_
  82:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
  83:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
  84:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
  85:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /* Allocate the memory for the heap. */
  86:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #if ( configAPPLICATION_ALLOCATED_HEAP == 1 )
  87:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
  88:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /* The application writer has already defined the array used for the RTOS
  89:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** * heap - probably so it can be placed in a special segment or address. */
  90:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  91:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #else
  92:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     PRIVILEGED_DATA static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  93:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** #endif /* configAPPLICATION_ALLOCATED_HEAP */
  94:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
  95:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /* Define the linked list structure.  This is used to link free blocks in order
  96:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * of their memory address. */
  97:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** typedef struct A_BLOCK_LINK
  98:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** {
  99:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     struct A_BLOCK_LINK * pxNextFreeBlock; /*<< The next free block in the list. */
 100:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     size_t xBlockSize;                     /*<< The size of the free block. */
 101:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** } BlockLink_t;
 102:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 103:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 104:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 105:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /*
 106:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * Inserts a block of memory that is being freed into the correct position in
 107:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * the list of free memory blocks.  The block being freed will be merged with
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 4


 108:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * the block in front it and/or the block behind it if the memory blocks are
 109:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * adjacent to each other.
 110:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  */
 111:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) PRIVILEGED_FUNCTION;
 112:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 113:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /*
 114:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * Called automatically to setup the required heap structures the first time
 115:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * pvPortMalloc() is called.
 116:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  */
 117:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** static void prvHeapInit( void ) PRIVILEGED_FUNCTION;
 118:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 119:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 120:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 121:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /* The size of the structure placed at the beginning of each allocated memory
 122:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * block must by correctly byte aligned. */
 123:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** static const size_t xHeapStructSize = ( sizeof( BlockLink_t ) + ( ( size_t ) ( portBYTE_ALIGNMENT -
 124:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 125:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /* Create a couple of list links to mark the start and end of the list. */
 126:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** PRIVILEGED_DATA static BlockLink_t xStart;
 127:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** PRIVILEGED_DATA static BlockLink_t * pxEnd = NULL;
 128:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 129:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /* Keeps track of the number of calls to allocate and free memory as well as the
 130:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****  * number of free bytes remaining, but says nothing about fragmentation. */
 131:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xFreeBytesRemaining = 0U;
 132:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xMinimumEverFreeBytesRemaining = 0U;
 133:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xNumberOfSuccessfulAllocations = 0;
 134:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;
 135:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 136:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 137:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 138:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** void * pvPortMalloc( size_t xWantedSize )
 139:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** {
  77              		.loc 1 139 1
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 40
  80              		@ frame_needed = 1, uses_anonymous_args = 0
  81 0000 80B5     		push	{r7, lr}
  82              	.LCFI0:
  83              		.cfi_def_cfa_offset 8
  84              		.cfi_offset 7, -8
  85              		.cfi_offset 14, -4
  86 0002 8AB0     		sub	sp, sp, #40
  87              	.LCFI1:
  88              		.cfi_def_cfa_offset 48
  89 0004 00AF     		add	r7, sp, #0
  90              	.LCFI2:
  91              		.cfi_def_cfa_register 7
  92 0006 7860     		str	r0, [r7, #4]
 140:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     BlockLink_t * pxBlock;
 141:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     BlockLink_t * pxPreviousBlock;
 142:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     BlockLink_t * pxNewBlockLink;
 143:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     void * pvReturn = NULL;
  93              		.loc 1 143 12
  94 0008 0023     		movs	r3, #0
  95 000a FB61     		str	r3, [r7, #28]
 144:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     size_t xAdditionalRequiredSize;
 145:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 5


 146:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     vTaskSuspendAll();
  96              		.loc 1 146 5
  97 000c FFF7FEFF 		bl	vTaskSuspendAll
 147:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     {
 148:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         /* If this is the first call to malloc then the heap will require
 149:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****          * initialisation to setup the list of free blocks. */
 150:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         if( pxEnd == NULL )
  98              		.loc 1 150 19
  99 0010 534B     		ldr	r3, .L16
 100 0012 1B68     		ldr	r3, [r3]
 101              		.loc 1 150 11
 102 0014 002B     		cmp	r3, #0
 103 0016 01D1     		bne	.L2
 151:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         {
 152:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             prvHeapInit();
 104              		.loc 1 152 13
 105 0018 FFF7FEFF 		bl	prvHeapInit
 106              	.L2:
 153:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         }
 154:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         else
 155:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         {
 156:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             mtCOVERAGE_TEST_MARKER();
 157:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         }
 158:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 159:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         if( xWantedSize > 0 )
 107              		.loc 1 159 11
 108 001c 7B68     		ldr	r3, [r7, #4]
 109 001e 002B     		cmp	r3, #0
 110 0020 12D0     		beq	.L3
 160:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         {
 161:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             /* The wanted size must be increased so it can contain a BlockLink_t
 162:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****              * structure in addition to the requested amount of bytes. Some
 163:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****              * additional increment may also be needed for alignment. */
 164:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBY
 111              		.loc 1 164 76
 112 0022 0822     		movs	r2, #8
 113              		.loc 1 164 92
 114 0024 7B68     		ldr	r3, [r7, #4]
 115 0026 03F00703 		and	r3, r3, #7
 116              		.loc 1 164 76
 117 002a D31A     		subs	r3, r2, r3
 118              		.loc 1 164 37
 119 002c 0833     		adds	r3, r3, #8
 120 002e BB61     		str	r3, [r7, #24]
 165:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 166:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 121              		.loc 1 166 17
 122 0030 BB69     		ldr	r3, [r7, #24]
 123 0032 DB43     		mvns	r3, r3
 124              		.loc 1 166 15
 125 0034 7A68     		ldr	r2, [r7, #4]
 126 0036 9A42     		cmp	r2, r3
 127 0038 04D8     		bhi	.L4
 167:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             {
 168:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 xWantedSize += xAdditionalRequiredSize;
 128              		.loc 1 168 29
 129 003a 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 6


 130 003c BB69     		ldr	r3, [r7, #24]
 131 003e 1344     		add	r3, r3, r2
 132 0040 7B60     		str	r3, [r7, #4]
 133 0042 01E0     		b	.L3
 134              	.L4:
 169:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             }
 170:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             else
 171:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             {
 172:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 xWantedSize = 0;
 135              		.loc 1 172 29
 136 0044 0023     		movs	r3, #0
 137 0046 7B60     		str	r3, [r7, #4]
 138              	.L3:
 173:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             }
 174:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         }
 175:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         else
 176:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         {
 177:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             mtCOVERAGE_TEST_MARKER();
 178:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         }
 179:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 180:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         /* Check the block size we are trying to allocate is not so large that the
 181:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****          * top bit is set.  The top bit of the block size member of the BlockLink_t
 182:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****          * structure is used to determine who owns the block - the application or
 183:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****          * the kernel, so it must be free. */
 184:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 139              		.loc 1 184 13
 140 0048 7B68     		ldr	r3, [r7, #4]
 141              		.loc 1 184 11
 142 004a 002B     		cmp	r3, #0
 143 004c 70DB     		blt	.L5
 185:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         {
 186:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 144              		.loc 1 186 15
 145 004e 7B68     		ldr	r3, [r7, #4]
 146 0050 002B     		cmp	r3, #0
 147 0052 6DD0     		beq	.L5
 148              		.loc 1 186 54 discriminator 1
 149 0054 434B     		ldr	r3, .L16+4
 150 0056 1B68     		ldr	r3, [r3]
 151              		.loc 1 186 37 discriminator 1
 152 0058 7A68     		ldr	r2, [r7, #4]
 153 005a 9A42     		cmp	r2, r3
 154 005c 68D8     		bhi	.L5
 187:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             {
 188:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 /* Traverse the list from the start (lowest address) block until
 189:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                  * one of adequate size is found. */
 190:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 pxPreviousBlock = &xStart;
 155              		.loc 1 190 33
 156 005e 424B     		ldr	r3, .L16+8
 157 0060 3B62     		str	r3, [r7, #32]
 191:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 pxBlock = xStart.pxNextFreeBlock;
 158              		.loc 1 191 25
 159 0062 414B     		ldr	r3, .L16+8
 160 0064 1B68     		ldr	r3, [r3]
 161 0066 7B62     		str	r3, [r7, #36]
 192:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 193:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 7


 162              		.loc 1 193 22
 163 0068 04E0     		b	.L6
 164              	.L8:
 194:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 {
 195:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     pxPreviousBlock = pxBlock;
 165              		.loc 1 195 37
 166 006a 7B6A     		ldr	r3, [r7, #36]
 167 006c 3B62     		str	r3, [r7, #32]
 196:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     pxBlock = pxBlock->pxNextFreeBlock;
 168              		.loc 1 196 29
 169 006e 7B6A     		ldr	r3, [r7, #36]
 170 0070 1B68     		ldr	r3, [r3]
 171 0072 7B62     		str	r3, [r7, #36]
 172              	.L6:
 193:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 {
 173              		.loc 1 193 33
 174 0074 7B6A     		ldr	r3, [r7, #36]
 175 0076 5B68     		ldr	r3, [r3, #4]
 193:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 {
 176              		.loc 1 193 22
 177 0078 7A68     		ldr	r2, [r7, #4]
 178 007a 9A42     		cmp	r2, r3
 179 007c 03D9     		bls	.L7
 193:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 {
 180              		.loc 1 193 74 discriminator 1
 181 007e 7B6A     		ldr	r3, [r7, #36]
 182 0080 1B68     		ldr	r3, [r3]
 193:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 {
 183              		.loc 1 193 62 discriminator 1
 184 0082 002B     		cmp	r3, #0
 185 0084 F1D1     		bne	.L8
 186              	.L7:
 197:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 }
 198:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 199:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 /* If the end marker was reached then a block of adequate size
 200:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                  * was not found. */
 201:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 if( pxBlock != pxEnd )
 187              		.loc 1 201 29
 188 0086 364B     		ldr	r3, .L16
 189 0088 1B68     		ldr	r3, [r3]
 190              		.loc 1 201 19
 191 008a 7A6A     		ldr	r2, [r7, #36]
 192 008c 9A42     		cmp	r2, r3
 193 008e 4FD0     		beq	.L5
 202:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 {
 203:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     /* Return the memory space pointed to - jumping over the
 204:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                      * BlockLink_t structure at its start. */
 205:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xH
 194              		.loc 1 205 76
 195 0090 3B6A     		ldr	r3, [r7, #32]
 196 0092 1B68     		ldr	r3, [r3]
 197              		.loc 1 205 32
 198 0094 0822     		movs	r2, #8
 199              		.loc 1 205 30
 200 0096 1344     		add	r3, r3, r2
 201 0098 FB61     		str	r3, [r7, #28]
 206:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 8


 207:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     /* This block is being returned for use so must be taken out
 208:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                      * of the list of free blocks. */
 209:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 202              		.loc 1 209 63
 203 009a 7B6A     		ldr	r3, [r7, #36]
 204 009c 1A68     		ldr	r2, [r3]
 205              		.loc 1 209 54
 206 009e 3B6A     		ldr	r3, [r7, #32]
 207 00a0 1A60     		str	r2, [r3]
 210:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 211:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     /* If the block is larger than required it can be split into
 212:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                      * two. */
 213:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 208              		.loc 1 213 34
 209 00a2 7B6A     		ldr	r3, [r7, #36]
 210 00a4 5A68     		ldr	r2, [r3, #4]
 211              		.loc 1 213 47
 212 00a6 7B68     		ldr	r3, [r7, #4]
 213 00a8 D21A     		subs	r2, r2, r3
 214              		.loc 1 213 65
 215 00aa 0823     		movs	r3, #8
 216 00ac 5B00     		lsls	r3, r3, #1
 217              		.loc 1 213 23
 218 00ae 9A42     		cmp	r2, r3
 219 00b0 1FD9     		bls	.L9
 214:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     {
 215:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                         /* This block is to be split into two.  Create a new
 216:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                          * block following the number of bytes requested. The void
 217:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                          * cast is used to prevent byte alignment warnings from the
 218:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                          * compiler. */
 219:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                         pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 220              		.loc 1 219 40
 221 00b2 7A6A     		ldr	r2, [r7, #36]
 222 00b4 7B68     		ldr	r3, [r7, #4]
 223 00b6 1344     		add	r3, r3, r2
 224 00b8 7B61     		str	r3, [r7, #20]
 220:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                         configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) =
 225              		.loc 1 220 25
 226 00ba 7B69     		ldr	r3, [r7, #20]
 227 00bc 03F00703 		and	r3, r3, #7
 228 00c0 002B     		cmp	r3, #0
 229 00c2 0AD0     		beq	.L10
 230              	.LBB10:
 231              	.LBB11:
 232              		.file 2 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
   1:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.5.1
   3:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   7:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 9


  13:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  14:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  16:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  17:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  24:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://www.FreeRTOS.org
  25:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://github.com/FreeRTOS
  26:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  27:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  28:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  30:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  31:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define PORTMACRO_H
  32:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  33:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef __cplusplus
  34:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         extern "C" {
  35:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  36:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  37:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  38:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  39:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  40:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  42:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  43:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  44:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  45:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  46:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  48:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCHAR          char
  49:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portFLOAT         float
  50:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDOUBLE        double
  51:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portLONG          long
  52:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSHORT         short
  53:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBASE_TYPE     long
  55:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  57:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef long             BaseType_t;
  58:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef unsigned long    UBaseType_t;
  59:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  60:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint16_t     TickType_t;
  62:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #else
  64:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint32_t     TickType_t;
  65:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  66:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  68:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not need to be guarded with a critical section. */
  69:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 10


  70:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  71:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  72:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  73:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  74:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  79:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  80:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  81:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD()                                 \
  82:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {                                                   \
  83:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****                                                         \
  86:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  88:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  89:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "isb" );                                  \
  90:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
  91:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  92:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  95:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  96:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  97:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  98:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  99:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortEnterCritical( void );
 100:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortExitCritical( void );
 101:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 104:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 109:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 110:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * (which build with all the ports) will build. */
 113:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 114:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 116:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 117:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 118:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 119:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 122:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 123:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 124:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 125:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 126:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 11


 127:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 128:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 131:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Generic helper function. */
 132:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 134:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             uint8_t ucReturn;
 135:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 136:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             return ucReturn;
 139:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 140:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 141:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Check the configuration. */
 142:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #endif
 145:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 146:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 147:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 149:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 151:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 152:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 153:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 154:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 156:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 157:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 158:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef configASSERT
 159:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 161:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 162:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 164:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNOP()
 165:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 166:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portINLINE              __inline
 167:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 168:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portFORCE_INLINE
 169:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 171:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 172:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 173:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 174:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulCurrentInterrupt;
 175:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         BaseType_t xReturn;
 176:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 178:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 179:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 181:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 182:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdFALSE;
 183:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 12


 184:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         else
 185:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 186:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdTRUE;
 187:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 188:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         return xReturn;
 190:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 191:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 192:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 193:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 194:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 195:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulNewBASEPRI;
 197:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 233              		.loc 2 198 9
 234              		.syntax unified
 235              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 236 00c4 4FF05003 			mov r3, #80												
 237 00c8 83F31188 		msr basepri, r3											
 238 00cc BFF36F8F 		isb														
 239 00d0 BFF34F8F 		dsb														
 240              	
 241              	@ 0 "" 2
 242              		.thumb
 243              		.syntax unified
 244 00d4 3B61     		str	r3, [r7, #16]
 199:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mov %0, %1												\n"\
 201:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %0											\n"\
 202:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	isb														\n"\
 203:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	dsb														\n"\
 204:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 205:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         );
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 245              		.loc 2 206 5
 246 00d6 00BF     		nop
 247              	.L11:
 248              	.LBE11:
 249              	.LBE10:
 250              		.loc 1 220 25 discriminator 1
 251 00d8 FEE7     		b	.L11
 252              	.L10:
 221:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 222:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                         /* Calculate the sizes of two blocks split from the
 223:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                          * single block. */
 224:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                         pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 253              		.loc 1 224 61
 254 00da 7B6A     		ldr	r3, [r7, #36]
 255 00dc 5A68     		ldr	r2, [r3, #4]
 256              		.loc 1 224 74
 257 00de 7B68     		ldr	r3, [r7, #4]
 258 00e0 D21A     		subs	r2, r2, r3
 259              		.loc 1 224 52
 260 00e2 7B69     		ldr	r3, [r7, #20]
 261 00e4 5A60     		str	r2, [r3, #4]
 225:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                         pxBlock->xBlockSize = xWantedSize;
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 13


 262              		.loc 1 225 45
 263 00e6 7B6A     		ldr	r3, [r7, #36]
 264 00e8 7A68     		ldr	r2, [r7, #4]
 265 00ea 5A60     		str	r2, [r3, #4]
 226:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 227:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                         /* Insert the new block into the list of free blocks. */
 228:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                         prvInsertBlockIntoFreeList( pxNewBlockLink );
 266              		.loc 1 228 25
 267 00ec 7869     		ldr	r0, [r7, #20]
 268 00ee FFF7FEFF 		bl	prvInsertBlockIntoFreeList
 269              	.L9:
 229:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     }
 230:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     else
 231:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     {
 232:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                         mtCOVERAGE_TEST_MARKER();
 233:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     }
 234:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 235:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     xFreeBytesRemaining -= pxBlock->xBlockSize;
 270              		.loc 1 235 41
 271 00f2 1C4B     		ldr	r3, .L16+4
 272 00f4 1A68     		ldr	r2, [r3]
 273              		.loc 1 235 51
 274 00f6 7B6A     		ldr	r3, [r7, #36]
 275 00f8 5B68     		ldr	r3, [r3, #4]
 276              		.loc 1 235 41
 277 00fa D31A     		subs	r3, r2, r3
 278 00fc 194A     		ldr	r2, .L16+4
 279 00fe 1360     		str	r3, [r2]
 236:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 237:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 280              		.loc 1 237 45
 281 0100 184B     		ldr	r3, .L16+4
 282 0102 1A68     		ldr	r2, [r3]
 283 0104 194B     		ldr	r3, .L16+12
 284 0106 1B68     		ldr	r3, [r3]
 285              		.loc 1 237 23
 286 0108 9A42     		cmp	r2, r3
 287 010a 03D2     		bcs	.L12
 238:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     {
 239:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                         xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 288              		.loc 1 239 56
 289 010c 154B     		ldr	r3, .L16+4
 290 010e 1B68     		ldr	r3, [r3]
 291 0110 164A     		ldr	r2, .L16+12
 292 0112 1360     		str	r3, [r2]
 293              	.L12:
 240:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     }
 241:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     else
 242:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     {
 243:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                         mtCOVERAGE_TEST_MARKER();
 244:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     }
 245:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 246:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     /* The block is being returned - it is allocated and owned
 247:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                      * by the application and has no "next" block. */
 248:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     heapALLOCATE_BLOCK( pxBlock );
 294              		.loc 1 248 21
 295 0114 7B6A     		ldr	r3, [r7, #36]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 14


 296 0116 5B68     		ldr	r3, [r3, #4]
 297 0118 43F00042 		orr	r2, r3, #-2147483648
 298 011c 7B6A     		ldr	r3, [r7, #36]
 299 011e 5A60     		str	r2, [r3, #4]
 249:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     pxBlock->pxNextFreeBlock = NULL;
 300              		.loc 1 249 46
 301 0120 7B6A     		ldr	r3, [r7, #36]
 302 0122 0022     		movs	r2, #0
 303 0124 1A60     		str	r2, [r3]
 250:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     xNumberOfSuccessfulAllocations++;
 304              		.loc 1 250 51
 305 0126 124B     		ldr	r3, .L16+16
 306 0128 1B68     		ldr	r3, [r3]
 307 012a 0133     		adds	r3, r3, #1
 308 012c 104A     		ldr	r2, .L16+16
 309 012e 1360     		str	r3, [r2]
 310              	.L5:
 251:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 }
 252:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 else
 253:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 {
 254:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     mtCOVERAGE_TEST_MARKER();
 255:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 }
 256:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             }
 257:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             else
 258:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             {
 259:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 mtCOVERAGE_TEST_MARKER();
 260:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             }
 261:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         }
 262:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         else
 263:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         {
 264:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             mtCOVERAGE_TEST_MARKER();
 265:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         }
 266:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 267:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         traceMALLOC( pvReturn, xWantedSize );
 268:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     }
 269:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     ( void ) xTaskResumeAll();
 311              		.loc 1 269 14
 312 0130 FFF7FEFF 		bl	xTaskResumeAll
 270:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 271:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
 272:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     {
 273:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         if( pvReturn == NULL )
 274:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         {
 275:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             vApplicationMallocFailedHook();
 276:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         }
 277:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         else
 278:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         {
 279:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             mtCOVERAGE_TEST_MARKER();
 280:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         }
 281:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     }
 282:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */
 283:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 284:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 313              		.loc 1 284 5
 314 0134 FB69     		ldr	r3, [r7, #28]
 315 0136 03F00703 		and	r3, r3, #7
 316 013a 002B     		cmp	r3, #0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 15


 317 013c 0AD0     		beq	.L13
 318              	.LBB12:
 319              	.LBB13:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 320              		.loc 2 198 9
 321              		.syntax unified
 322              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 323 013e 4FF05003 			mov r3, #80												
 324 0142 83F31188 		msr basepri, r3											
 325 0146 BFF36F8F 		isb														
 326 014a BFF34F8F 		dsb														
 327              	
 328              	@ 0 "" 2
 329              		.thumb
 330              		.syntax unified
 331 014e FB60     		str	r3, [r7, #12]
 332              		.loc 2 206 5
 333 0150 00BF     		nop
 334              	.L14:
 335              	.LBE13:
 336              	.LBE12:
 337              		.loc 1 284 5 discriminator 3
 338 0152 FEE7     		b	.L14
 339              	.L13:
 285:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     return pvReturn;
 340              		.loc 1 285 12
 341 0154 FB69     		ldr	r3, [r7, #28]
 286:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** }
 342              		.loc 1 286 1
 343 0156 1846     		mov	r0, r3
 344 0158 2837     		adds	r7, r7, #40
 345              	.LCFI3:
 346              		.cfi_def_cfa_offset 8
 347 015a BD46     		mov	sp, r7
 348              	.LCFI4:
 349              		.cfi_def_cfa_register 13
 350              		@ sp needed
 351 015c 80BD     		pop	{r7, pc}
 352              	.L17:
 353 015e 00BF     		.align	2
 354              	.L16:
 355 0160 00000000 		.word	pxEnd
 356 0164 00000000 		.word	xFreeBytesRemaining
 357 0168 00000000 		.word	xStart
 358 016c 00000000 		.word	xMinimumEverFreeBytesRemaining
 359 0170 00000000 		.word	xNumberOfSuccessfulAllocations
 360              		.cfi_endproc
 361              	.LFE5:
 363              		.section	.text.vPortFree,"ax",%progbits
 364              		.align	1
 365              		.global	vPortFree
 366              		.syntax unified
 367              		.thumb
 368              		.thumb_func
 370              	vPortFree:
 371              	.LFB6:
 287:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 16


 288:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 289:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** void vPortFree( void * pv )
 290:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** {
 372              		.loc 1 290 1
 373              		.cfi_startproc
 374              		@ args = 0, pretend = 0, frame = 24
 375              		@ frame_needed = 1, uses_anonymous_args = 0
 376 0000 80B5     		push	{r7, lr}
 377              	.LCFI5:
 378              		.cfi_def_cfa_offset 8
 379              		.cfi_offset 7, -8
 380              		.cfi_offset 14, -4
 381 0002 86B0     		sub	sp, sp, #24
 382              	.LCFI6:
 383              		.cfi_def_cfa_offset 32
 384 0004 00AF     		add	r7, sp, #0
 385              	.LCFI7:
 386              		.cfi_def_cfa_register 7
 387 0006 7860     		str	r0, [r7, #4]
 291:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     uint8_t * puc = ( uint8_t * ) pv;
 388              		.loc 1 291 15
 389 0008 7B68     		ldr	r3, [r7, #4]
 390 000a 7B61     		str	r3, [r7, #20]
 292:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     BlockLink_t * pxLink;
 293:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 294:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     if( pv != NULL )
 391              		.loc 1 294 7
 392 000c 7B68     		ldr	r3, [r7, #4]
 393 000e 002B     		cmp	r3, #0
 394 0010 49D0     		beq	.L24
 295:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     {
 296:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         /* The memory being freed will have an BlockLink_t structure immediately
 297:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****          * before it. */
 298:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         puc -= xHeapStructSize;
 395              		.loc 1 298 13
 396 0012 0823     		movs	r3, #8
 397 0014 5B42     		rsbs	r3, r3, #0
 398 0016 7A69     		ldr	r2, [r7, #20]
 399 0018 1344     		add	r3, r3, r2
 400 001a 7B61     		str	r3, [r7, #20]
 299:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 300:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         /* This casting is to keep the compiler from issuing warnings. */
 301:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         pxLink = ( void * ) puc;
 401              		.loc 1 301 16
 402 001c 7B69     		ldr	r3, [r7, #20]
 403 001e 3B61     		str	r3, [r7, #16]
 302:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 303:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 404              		.loc 1 303 9
 405 0020 3B69     		ldr	r3, [r7, #16]
 406 0022 5B68     		ldr	r3, [r3, #4]
 407 0024 002B     		cmp	r3, #0
 408 0026 0ADB     		blt	.L20
 409              	.LBB14:
 410              	.LBB15:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 411              		.loc 2 198 9
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 17


 412              		.syntax unified
 413              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 414 0028 4FF05003 			mov r3, #80												
 415 002c 83F31188 		msr basepri, r3											
 416 0030 BFF36F8F 		isb														
 417 0034 BFF34F8F 		dsb														
 418              	
 419              	@ 0 "" 2
 420              		.thumb
 421              		.syntax unified
 422 0038 FB60     		str	r3, [r7, #12]
 423              		.loc 2 206 5
 424 003a 00BF     		nop
 425              	.L21:
 426              	.LBE15:
 427              	.LBE14:
 428              		.loc 1 303 9 discriminator 1
 429 003c FEE7     		b	.L21
 430              	.L20:
 304:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 431              		.loc 1 304 9
 432 003e 3B69     		ldr	r3, [r7, #16]
 433 0040 1B68     		ldr	r3, [r3]
 434 0042 002B     		cmp	r3, #0
 435 0044 0AD0     		beq	.L22
 436              	.LBB16:
 437              	.LBB17:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 438              		.loc 2 198 9
 439              		.syntax unified
 440              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 441 0046 4FF05003 			mov r3, #80												
 442 004a 83F31188 		msr basepri, r3											
 443 004e BFF36F8F 		isb														
 444 0052 BFF34F8F 		dsb														
 445              	
 446              	@ 0 "" 2
 447              		.thumb
 448              		.syntax unified
 449 0056 BB60     		str	r3, [r7, #8]
 450              		.loc 2 206 5
 451 0058 00BF     		nop
 452              	.L23:
 453              	.LBE17:
 454              	.LBE16:
 455              		.loc 1 304 9 discriminator 2
 456 005a FEE7     		b	.L23
 457              	.L22:
 305:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 306:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 458              		.loc 1 306 13
 459 005c 3B69     		ldr	r3, [r7, #16]
 460 005e 5B68     		ldr	r3, [r3, #4]
 461              		.loc 1 306 46
 462 0060 DB0F     		lsrs	r3, r3, #31
 463 0062 03F00103 		and	r3, r3, #1
 464 0066 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 18


 465              		.loc 1 306 11
 466 0068 002B     		cmp	r3, #0
 467 006a 1CD0     		beq	.L24
 307:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         {
 308:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             if( pxLink->pxNextFreeBlock == NULL )
 468              		.loc 1 308 23
 469 006c 3B69     		ldr	r3, [r7, #16]
 470 006e 1B68     		ldr	r3, [r3]
 471              		.loc 1 308 15
 472 0070 002B     		cmp	r3, #0
 473 0072 18D1     		bne	.L24
 309:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             {
 310:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 /* The block is being returned to the heap - it is no longer
 311:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                  * allocated. */
 312:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 heapFREE_BLOCK( pxLink );
 474              		.loc 1 312 17
 475 0074 3B69     		ldr	r3, [r7, #16]
 476 0076 5B68     		ldr	r3, [r3, #4]
 477 0078 23F00042 		bic	r2, r3, #-2147483648
 478 007c 3B69     		ldr	r3, [r7, #16]
 479 007e 5A60     		str	r2, [r3, #4]
 313:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 #if ( configHEAP_CLEAR_MEMORY_ON_FREE == 1 )
 314:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 {
 315:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize
 316:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 }
 317:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 #endif
 318:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 319:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 vTaskSuspendAll();
 480              		.loc 1 319 17
 481 0080 FFF7FEFF 		bl	vTaskSuspendAll
 320:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 {
 321:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     /* Add this block to the list of free blocks. */
 322:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     xFreeBytesRemaining += pxLink->xBlockSize;
 482              		.loc 1 322 50
 483 0084 3B69     		ldr	r3, [r7, #16]
 484 0086 5A68     		ldr	r2, [r3, #4]
 485              		.loc 1 322 41
 486 0088 094B     		ldr	r3, .L25
 487 008a 1B68     		ldr	r3, [r3]
 488 008c 1344     		add	r3, r3, r2
 489 008e 084A     		ldr	r2, .L25
 490 0090 1360     		str	r3, [r2]
 323:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     traceFREE( pv, pxLink->xBlockSize );
 324:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 491              		.loc 1 324 21
 492 0092 3869     		ldr	r0, [r7, #16]
 493 0094 FFF7FEFF 		bl	prvInsertBlockIntoFreeList
 325:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     xNumberOfSuccessfulFrees++;
 494              		.loc 1 325 45
 495 0098 064B     		ldr	r3, .L25+4
 496 009a 1B68     		ldr	r3, [r3]
 497 009c 0133     		adds	r3, r3, #1
 498 009e 054A     		ldr	r2, .L25+4
 499 00a0 1360     		str	r3, [r2]
 326:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 }
 327:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 ( void ) xTaskResumeAll();
 500              		.loc 1 327 26
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 19


 501 00a2 FFF7FEFF 		bl	xTaskResumeAll
 502              	.L24:
 328:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             }
 329:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             else
 330:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             {
 331:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 mtCOVERAGE_TEST_MARKER();
 332:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             }
 333:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         }
 334:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         else
 335:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         {
 336:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             mtCOVERAGE_TEST_MARKER();
 337:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         }
 338:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     }
 339:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** }
 503              		.loc 1 339 1
 504 00a6 00BF     		nop
 505 00a8 1837     		adds	r7, r7, #24
 506              	.LCFI8:
 507              		.cfi_def_cfa_offset 8
 508 00aa BD46     		mov	sp, r7
 509              	.LCFI9:
 510              		.cfi_def_cfa_register 13
 511              		@ sp needed
 512 00ac 80BD     		pop	{r7, pc}
 513              	.L26:
 514 00ae 00BF     		.align	2
 515              	.L25:
 516 00b0 00000000 		.word	xFreeBytesRemaining
 517 00b4 00000000 		.word	xNumberOfSuccessfulFrees
 518              		.cfi_endproc
 519              	.LFE6:
 521              		.section	.text.xPortGetFreeHeapSize,"ax",%progbits
 522              		.align	1
 523              		.global	xPortGetFreeHeapSize
 524              		.syntax unified
 525              		.thumb
 526              		.thumb_func
 528              	xPortGetFreeHeapSize:
 529              	.LFB7:
 340:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 341:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 342:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** size_t xPortGetFreeHeapSize( void )
 343:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** {
 530              		.loc 1 343 1
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 0
 533              		@ frame_needed = 1, uses_anonymous_args = 0
 534              		@ link register save eliminated.
 535 0000 80B4     		push	{r7}
 536              	.LCFI10:
 537              		.cfi_def_cfa_offset 4
 538              		.cfi_offset 7, -4
 539 0002 00AF     		add	r7, sp, #0
 540              	.LCFI11:
 541              		.cfi_def_cfa_register 7
 344:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     return xFreeBytesRemaining;
 542              		.loc 1 344 12
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 20


 543 0004 034B     		ldr	r3, .L29
 544 0006 1B68     		ldr	r3, [r3]
 345:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** }
 545              		.loc 1 345 1
 546 0008 1846     		mov	r0, r3
 547 000a BD46     		mov	sp, r7
 548              	.LCFI12:
 549              		.cfi_def_cfa_register 13
 550              		@ sp needed
 551 000c 5DF8047B 		ldr	r7, [sp], #4
 552              	.LCFI13:
 553              		.cfi_restore 7
 554              		.cfi_def_cfa_offset 0
 555 0010 7047     		bx	lr
 556              	.L30:
 557 0012 00BF     		.align	2
 558              	.L29:
 559 0014 00000000 		.word	xFreeBytesRemaining
 560              		.cfi_endproc
 561              	.LFE7:
 563              		.section	.text.xPortGetMinimumEverFreeHeapSize,"ax",%progbits
 564              		.align	1
 565              		.global	xPortGetMinimumEverFreeHeapSize
 566              		.syntax unified
 567              		.thumb
 568              		.thumb_func
 570              	xPortGetMinimumEverFreeHeapSize:
 571              	.LFB8:
 346:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 347:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 348:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** size_t xPortGetMinimumEverFreeHeapSize( void )
 349:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** {
 572              		.loc 1 349 1
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 0
 575              		@ frame_needed = 1, uses_anonymous_args = 0
 576              		@ link register save eliminated.
 577 0000 80B4     		push	{r7}
 578              	.LCFI14:
 579              		.cfi_def_cfa_offset 4
 580              		.cfi_offset 7, -4
 581 0002 00AF     		add	r7, sp, #0
 582              	.LCFI15:
 583              		.cfi_def_cfa_register 7
 350:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     return xMinimumEverFreeBytesRemaining;
 584              		.loc 1 350 12
 585 0004 034B     		ldr	r3, .L33
 586 0006 1B68     		ldr	r3, [r3]
 351:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** }
 587              		.loc 1 351 1
 588 0008 1846     		mov	r0, r3
 589 000a BD46     		mov	sp, r7
 590              	.LCFI16:
 591              		.cfi_def_cfa_register 13
 592              		@ sp needed
 593 000c 5DF8047B 		ldr	r7, [sp], #4
 594              	.LCFI17:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 21


 595              		.cfi_restore 7
 596              		.cfi_def_cfa_offset 0
 597 0010 7047     		bx	lr
 598              	.L34:
 599 0012 00BF     		.align	2
 600              	.L33:
 601 0014 00000000 		.word	xMinimumEverFreeBytesRemaining
 602              		.cfi_endproc
 603              	.LFE8:
 605              		.section	.text.vPortInitialiseBlocks,"ax",%progbits
 606              		.align	1
 607              		.global	vPortInitialiseBlocks
 608              		.syntax unified
 609              		.thumb
 610              		.thumb_func
 612              	vPortInitialiseBlocks:
 613              	.LFB9:
 352:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 353:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 354:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** void vPortInitialiseBlocks( void )
 355:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** {
 614              		.loc 1 355 1
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 0
 617              		@ frame_needed = 1, uses_anonymous_args = 0
 618              		@ link register save eliminated.
 619 0000 80B4     		push	{r7}
 620              	.LCFI18:
 621              		.cfi_def_cfa_offset 4
 622              		.cfi_offset 7, -4
 623 0002 00AF     		add	r7, sp, #0
 624              	.LCFI19:
 625              		.cfi_def_cfa_register 7
 356:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     /* This just exists to keep the linker quiet. */
 357:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** }
 626              		.loc 1 357 1
 627 0004 00BF     		nop
 628 0006 BD46     		mov	sp, r7
 629              	.LCFI20:
 630              		.cfi_def_cfa_register 13
 631              		@ sp needed
 632 0008 5DF8047B 		ldr	r7, [sp], #4
 633              	.LCFI21:
 634              		.cfi_restore 7
 635              		.cfi_def_cfa_offset 0
 636 000c 7047     		bx	lr
 637              		.cfi_endproc
 638              	.LFE9:
 640              		.section	.text.pvPortCalloc,"ax",%progbits
 641              		.align	1
 642              		.global	pvPortCalloc
 643              		.syntax unified
 644              		.thumb
 645              		.thumb_func
 647              	pvPortCalloc:
 648              	.LFB10:
 358:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 22


 359:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 360:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** void * pvPortCalloc( size_t xNum,
 361:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                      size_t xSize )
 362:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** {
 649              		.loc 1 362 1
 650              		.cfi_startproc
 651              		@ args = 0, pretend = 0, frame = 16
 652              		@ frame_needed = 1, uses_anonymous_args = 0
 653 0000 80B5     		push	{r7, lr}
 654              	.LCFI22:
 655              		.cfi_def_cfa_offset 8
 656              		.cfi_offset 7, -8
 657              		.cfi_offset 14, -4
 658 0002 84B0     		sub	sp, sp, #16
 659              	.LCFI23:
 660              		.cfi_def_cfa_offset 24
 661 0004 00AF     		add	r7, sp, #0
 662              	.LCFI24:
 663              		.cfi_def_cfa_register 7
 664 0006 7860     		str	r0, [r7, #4]
 665 0008 3960     		str	r1, [r7]
 363:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     void * pv = NULL;
 666              		.loc 1 363 12
 667 000a 0023     		movs	r3, #0
 668 000c FB60     		str	r3, [r7, #12]
 364:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 365:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     if( heapMULTIPLY_WILL_OVERFLOW( xNum, xSize ) == 0 )
 669              		.loc 1 365 9
 670 000e 7B68     		ldr	r3, [r7, #4]
 671 0010 002B     		cmp	r3, #0
 672 0012 09D0     		beq	.L37
 673              		.loc 1 365 9 is_stmt 0 discriminator 1
 674 0014 4FF0FF32 		mov	r2, #-1
 675 0018 7B68     		ldr	r3, [r7, #4]
 676 001a B2FBF3F3 		udiv	r3, r2, r3
 677 001e 3A68     		ldr	r2, [r7]
 678 0020 9A42     		cmp	r2, r3
 679 0022 01D9     		bls	.L37
 680              		.loc 1 365 9 discriminator 3
 681 0024 0123     		movs	r3, #1
 682 0026 00E0     		b	.L38
 683              	.L37:
 684              		.loc 1 365 9 discriminator 4
 685 0028 0023     		movs	r3, #0
 686              	.L38:
 687              		.loc 1 365 7 is_stmt 1 discriminator 6
 688 002a 002B     		cmp	r3, #0
 689 002c 13D1     		bne	.L39
 366:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     {
 367:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         pv = pvPortMalloc( xNum * xSize );
 690              		.loc 1 367 14
 691 002e 7B68     		ldr	r3, [r7, #4]
 692 0030 3A68     		ldr	r2, [r7]
 693 0032 02FB03F3 		mul	r3, r2, r3
 694 0036 1846     		mov	r0, r3
 695 0038 FFF7FEFF 		bl	pvPortMalloc
 696 003c F860     		str	r0, [r7, #12]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 23


 368:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 369:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         if( pv != NULL )
 697              		.loc 1 369 11
 698 003e FB68     		ldr	r3, [r7, #12]
 699 0040 002B     		cmp	r3, #0
 700 0042 08D0     		beq	.L39
 370:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         {
 371:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             ( void ) memset( pv, 0, xNum * xSize );
 701              		.loc 1 371 22
 702 0044 7B68     		ldr	r3, [r7, #4]
 703 0046 3A68     		ldr	r2, [r7]
 704 0048 02FB03F3 		mul	r3, r2, r3
 705 004c 1A46     		mov	r2, r3
 706 004e 0021     		movs	r1, #0
 707 0050 F868     		ldr	r0, [r7, #12]
 708 0052 FFF7FEFF 		bl	memset
 709              	.L39:
 372:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         }
 373:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     }
 374:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 375:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     return pv;
 710              		.loc 1 375 12
 711 0056 FB68     		ldr	r3, [r7, #12]
 376:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** }
 712              		.loc 1 376 1
 713 0058 1846     		mov	r0, r3
 714 005a 1037     		adds	r7, r7, #16
 715              	.LCFI25:
 716              		.cfi_def_cfa_offset 8
 717 005c BD46     		mov	sp, r7
 718              	.LCFI26:
 719              		.cfi_def_cfa_register 13
 720              		@ sp needed
 721 005e 80BD     		pop	{r7, pc}
 722              		.cfi_endproc
 723              	.LFE10:
 725              		.section	.text.prvHeapInit,"ax",%progbits
 726              		.align	1
 727              		.syntax unified
 728              		.thumb
 729              		.thumb_func
 731              	prvHeapInit:
 732              	.LFB11:
 377:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 378:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 379:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
 380:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** {
 733              		.loc 1 380 1
 734              		.cfi_startproc
 735              		@ args = 0, pretend = 0, frame = 16
 736              		@ frame_needed = 1, uses_anonymous_args = 0
 737              		@ link register save eliminated.
 738 0000 80B4     		push	{r7}
 739              	.LCFI27:
 740              		.cfi_def_cfa_offset 4
 741              		.cfi_offset 7, -4
 742 0002 85B0     		sub	sp, sp, #20
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 24


 743              	.LCFI28:
 744              		.cfi_def_cfa_offset 24
 745 0004 00AF     		add	r7, sp, #0
 746              	.LCFI29:
 747              		.cfi_def_cfa_register 7
 381:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     BlockLink_t * pxFirstFreeBlock;
 382:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     uint8_t * pucAlignedHeap;
 383:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     portPOINTER_SIZE_TYPE uxAddress;
 384:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 748              		.loc 1 384 12
 749 0006 4FF49633 		mov	r3, #76800
 750 000a BB60     		str	r3, [r7, #8]
 385:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 386:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     /* Ensure the heap starts on a correctly aligned boundary. */
 387:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 751              		.loc 1 387 15
 752 000c 254B     		ldr	r3, .L43
 753 000e FB60     		str	r3, [r7, #12]
 388:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 389:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 754              		.loc 1 389 21
 755 0010 FB68     		ldr	r3, [r7, #12]
 756 0012 03F00703 		and	r3, r3, #7
 757              		.loc 1 389 7
 758 0016 002B     		cmp	r3, #0
 759 0018 0CD0     		beq	.L42
 390:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     {
 391:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         uxAddress += ( portBYTE_ALIGNMENT - 1 );
 760              		.loc 1 391 19
 761 001a FB68     		ldr	r3, [r7, #12]
 762 001c 0733     		adds	r3, r3, #7
 763 001e FB60     		str	r3, [r7, #12]
 392:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 764              		.loc 1 392 19
 765 0020 FB68     		ldr	r3, [r7, #12]
 766 0022 23F00703 		bic	r3, r3, #7
 767 0026 FB60     		str	r3, [r7, #12]
 393:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 768              		.loc 1 393 24
 769 0028 BA68     		ldr	r2, [r7, #8]
 770 002a FB68     		ldr	r3, [r7, #12]
 771 002c D31A     		subs	r3, r2, r3
 772              		.loc 1 393 39
 773 002e 1D4A     		ldr	r2, .L43
 774              		.loc 1 393 24
 775 0030 1344     		add	r3, r3, r2
 776 0032 BB60     		str	r3, [r7, #8]
 777              	.L42:
 394:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     }
 395:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 396:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     pucAlignedHeap = ( uint8_t * ) uxAddress;
 778              		.loc 1 396 20
 779 0034 FB68     		ldr	r3, [r7, #12]
 780 0036 7B60     		str	r3, [r7, #4]
 397:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 398:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     /* xStart is used to hold a pointer to the first item in the list of free
 399:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****      * blocks.  The void cast is used to prevent compiler warnings. */
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 25


 400:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 781              		.loc 1 400 28
 782 0038 1B4A     		ldr	r2, .L43+4
 783 003a 7B68     		ldr	r3, [r7, #4]
 784 003c 1360     		str	r3, [r2]
 401:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     xStart.xBlockSize = ( size_t ) 0;
 785              		.loc 1 401 23
 786 003e 1A4B     		ldr	r3, .L43+4
 787 0040 0022     		movs	r2, #0
 788 0042 5A60     		str	r2, [r3, #4]
 402:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 403:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     /* pxEnd is used to mark the end of the list of free blocks and is inserted
 404:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****      * at the end of the heap space. */
 405:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 789              		.loc 1 405 19
 790 0044 7B68     		ldr	r3, [r7, #4]
 791              		.loc 1 405 15
 792 0046 BA68     		ldr	r2, [r7, #8]
 793 0048 1344     		add	r3, r3, r2
 794 004a FB60     		str	r3, [r7, #12]
 406:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     uxAddress -= xHeapStructSize;
 795              		.loc 1 406 15
 796 004c 0822     		movs	r2, #8
 797 004e FB68     		ldr	r3, [r7, #12]
 798 0050 9B1A     		subs	r3, r3, r2
 799 0052 FB60     		str	r3, [r7, #12]
 407:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800              		.loc 1 407 15
 801 0054 FB68     		ldr	r3, [r7, #12]
 802 0056 23F00703 		bic	r3, r3, #7
 803 005a FB60     		str	r3, [r7, #12]
 408:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     pxEnd = ( BlockLink_t * ) uxAddress;
 804              		.loc 1 408 13
 805 005c FB68     		ldr	r3, [r7, #12]
 806              		.loc 1 408 11
 807 005e 134A     		ldr	r2, .L43+8
 808 0060 1360     		str	r3, [r2]
 409:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     pxEnd->xBlockSize = 0;
 809              		.loc 1 409 10
 810 0062 124B     		ldr	r3, .L43+8
 811 0064 1B68     		ldr	r3, [r3]
 812              		.loc 1 409 23
 813 0066 0022     		movs	r2, #0
 814 0068 5A60     		str	r2, [r3, #4]
 410:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     pxEnd->pxNextFreeBlock = NULL;
 815              		.loc 1 410 10
 816 006a 104B     		ldr	r3, .L43+8
 817 006c 1B68     		ldr	r3, [r3]
 818              		.loc 1 410 28
 819 006e 0022     		movs	r2, #0
 820 0070 1A60     		str	r2, [r3]
 411:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 412:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     /* To start with there is a single free block that is sized to take up the
 413:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****      * entire heap space, minus the space taken by pxEnd. */
 414:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 821              		.loc 1 414 22
 822 0072 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 26


 823 0074 3B60     		str	r3, [r7]
 415:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBl
 824              		.loc 1 415 61
 825 0076 3B68     		ldr	r3, [r7]
 826              		.loc 1 415 59
 827 0078 FA68     		ldr	r2, [r7, #12]
 828 007a D21A     		subs	r2, r2, r3
 829              		.loc 1 415 34
 830 007c 3B68     		ldr	r3, [r7]
 831 007e 5A60     		str	r2, [r3, #4]
 416:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 832              		.loc 1 416 39
 833 0080 0A4B     		ldr	r3, .L43+8
 834 0082 1A68     		ldr	r2, [r3]
 835 0084 3B68     		ldr	r3, [r7]
 836 0086 1A60     		str	r2, [r3]
 417:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 418:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     /* Only one block exists - and it covers the entire usable heap space. */
 419:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 837              		.loc 1 419 54
 838 0088 3B68     		ldr	r3, [r7]
 839 008a 5B68     		ldr	r3, [r3, #4]
 840              		.loc 1 419 36
 841 008c 084A     		ldr	r2, .L43+12
 842 008e 1360     		str	r3, [r2]
 420:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 843              		.loc 1 420 43
 844 0090 3B68     		ldr	r3, [r7]
 845 0092 5B68     		ldr	r3, [r3, #4]
 846              		.loc 1 420 25
 847 0094 074A     		ldr	r2, .L43+16
 848 0096 1360     		str	r3, [r2]
 421:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** }
 849              		.loc 1 421 1
 850 0098 00BF     		nop
 851 009a 1437     		adds	r7, r7, #20
 852              	.LCFI30:
 853              		.cfi_def_cfa_offset 4
 854 009c BD46     		mov	sp, r7
 855              	.LCFI31:
 856              		.cfi_def_cfa_register 13
 857              		@ sp needed
 858 009e 5DF8047B 		ldr	r7, [sp], #4
 859              	.LCFI32:
 860              		.cfi_restore 7
 861              		.cfi_def_cfa_offset 0
 862 00a2 7047     		bx	lr
 863              	.L44:
 864              		.align	2
 865              	.L43:
 866 00a4 00000000 		.word	ucHeap
 867 00a8 00000000 		.word	xStart
 868 00ac 00000000 		.word	pxEnd
 869 00b0 00000000 		.word	xMinimumEverFreeBytesRemaining
 870 00b4 00000000 		.word	xFreeBytesRemaining
 871              		.cfi_endproc
 872              	.LFE11:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 27


 874              		.section	.text.prvInsertBlockIntoFreeList,"ax",%progbits
 875              		.align	1
 876              		.syntax unified
 877              		.thumb
 878              		.thumb_func
 880              	prvInsertBlockIntoFreeList:
 881              	.LFB12:
 422:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 423:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 424:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
 425:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** {
 882              		.loc 1 425 1
 883              		.cfi_startproc
 884              		@ args = 0, pretend = 0, frame = 16
 885              		@ frame_needed = 1, uses_anonymous_args = 0
 886              		@ link register save eliminated.
 887 0000 80B4     		push	{r7}
 888              	.LCFI33:
 889              		.cfi_def_cfa_offset 4
 890              		.cfi_offset 7, -4
 891 0002 85B0     		sub	sp, sp, #20
 892              	.LCFI34:
 893              		.cfi_def_cfa_offset 24
 894 0004 00AF     		add	r7, sp, #0
 895              	.LCFI35:
 896              		.cfi_def_cfa_register 7
 897 0006 7860     		str	r0, [r7, #4]
 426:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     BlockLink_t * pxIterator;
 427:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     uint8_t * puc;
 428:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 429:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     /* Iterate through the list until a block is found that has a higher address
 430:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****      * than the block being inserted. */
 431:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterat
 898              		.loc 1 431 21
 899 0008 284B     		ldr	r3, .L54
 900 000a FB60     		str	r3, [r7, #12]
 901              		.loc 1 431 5
 902 000c 02E0     		b	.L46
 903              	.L47:
 904              		.loc 1 431 90 discriminator 3
 905 000e FB68     		ldr	r3, [r7, #12]
 906 0010 1B68     		ldr	r3, [r3]
 907 0012 FB60     		str	r3, [r7, #12]
 908              	.L46:
 909              		.loc 1 431 42 discriminator 1
 910 0014 FB68     		ldr	r3, [r7, #12]
 911 0016 1B68     		ldr	r3, [r3]
 912              		.loc 1 431 5 discriminator 1
 913 0018 7A68     		ldr	r2, [r7, #4]
 914 001a 9A42     		cmp	r2, r3
 915 001c F7D8     		bhi	.L47
 432:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     {
 433:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         /* Nothing to do here, just iterate to the right position. */
 434:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     }
 435:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 436:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     /* Do the block being inserted, and the block it is being inserted after
 437:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****      * make a contiguous block of memory? */
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 28


 438:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     puc = ( uint8_t * ) pxIterator;
 916              		.loc 1 438 9
 917 001e FB68     		ldr	r3, [r7, #12]
 918 0020 BB60     		str	r3, [r7, #8]
 439:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 440:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 919              		.loc 1 440 27
 920 0022 FB68     		ldr	r3, [r7, #12]
 921 0024 5B68     		ldr	r3, [r3, #4]
 922              		.loc 1 440 15
 923 0026 BA68     		ldr	r2, [r7, #8]
 924 0028 1344     		add	r3, r3, r2
 925              		.loc 1 440 7
 926 002a 7A68     		ldr	r2, [r7, #4]
 927 002c 9A42     		cmp	r2, r3
 928 002e 08D1     		bne	.L48
 441:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     {
 442:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 929              		.loc 1 442 32
 930 0030 FB68     		ldr	r3, [r7, #12]
 931 0032 5A68     		ldr	r2, [r3, #4]
 932              		.loc 1 442 50
 933 0034 7B68     		ldr	r3, [r7, #4]
 934 0036 5B68     		ldr	r3, [r3, #4]
 935              		.loc 1 442 32
 936 0038 1A44     		add	r2, r2, r3
 937 003a FB68     		ldr	r3, [r7, #12]
 938 003c 5A60     		str	r2, [r3, #4]
 443:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         pxBlockToInsert = pxIterator;
 939              		.loc 1 443 25
 940 003e FB68     		ldr	r3, [r7, #12]
 941 0040 7B60     		str	r3, [r7, #4]
 942              	.L48:
 444:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     }
 445:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     else
 446:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     {
 447:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         mtCOVERAGE_TEST_MARKER();
 448:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     }
 449:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 450:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     /* Do the block being inserted, and the block it is being inserted before
 451:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****      * make a contiguous block of memory? */
 452:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     puc = ( uint8_t * ) pxBlockToInsert;
 943              		.loc 1 452 9
 944 0042 7B68     		ldr	r3, [r7, #4]
 945 0044 BB60     		str	r3, [r7, #8]
 453:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 454:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 946              		.loc 1 454 32
 947 0046 7B68     		ldr	r3, [r7, #4]
 948 0048 5B68     		ldr	r3, [r3, #4]
 949              		.loc 1 454 15
 950 004a BA68     		ldr	r2, [r7, #8]
 951 004c 1A44     		add	r2, r2, r3
 952              		.loc 1 454 74
 953 004e FB68     		ldr	r3, [r7, #12]
 954 0050 1B68     		ldr	r3, [r3]
 955              		.loc 1 454 7
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 29


 956 0052 9A42     		cmp	r2, r3
 957 0054 18D1     		bne	.L49
 455:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     {
 456:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         if( pxIterator->pxNextFreeBlock != pxEnd )
 958              		.loc 1 456 23
 959 0056 FB68     		ldr	r3, [r7, #12]
 960 0058 1A68     		ldr	r2, [r3]
 961              		.loc 1 456 41
 962 005a 154B     		ldr	r3, .L54+4
 963 005c 1B68     		ldr	r3, [r3]
 964              		.loc 1 456 11
 965 005e 9A42     		cmp	r2, r3
 966 0060 0DD0     		beq	.L50
 457:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         {
 458:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             /* Form one big block from the two blocks. */
 459:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 967              		.loc 1 459 41
 968 0062 7B68     		ldr	r3, [r7, #4]
 969 0064 5A68     		ldr	r2, [r3, #4]
 970              		.loc 1 459 54
 971 0066 FB68     		ldr	r3, [r7, #12]
 972 0068 1B68     		ldr	r3, [r3]
 973              		.loc 1 459 71
 974 006a 5B68     		ldr	r3, [r3, #4]
 975              		.loc 1 459 41
 976 006c 1A44     		add	r2, r2, r3
 977 006e 7B68     		ldr	r3, [r7, #4]
 978 0070 5A60     		str	r2, [r3, #4]
 460:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 979              		.loc 1 460 58
 980 0072 FB68     		ldr	r3, [r7, #12]
 981 0074 1B68     		ldr	r3, [r3]
 982              		.loc 1 460 75
 983 0076 1A68     		ldr	r2, [r3]
 984              		.loc 1 460 46
 985 0078 7B68     		ldr	r3, [r7, #4]
 986 007a 1A60     		str	r2, [r3]
 987 007c 08E0     		b	.L51
 988              	.L50:
 461:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         }
 462:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         else
 463:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         {
 464:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = pxEnd;
 989              		.loc 1 464 46
 990 007e 0C4B     		ldr	r3, .L54+4
 991 0080 1A68     		ldr	r2, [r3]
 992 0082 7B68     		ldr	r3, [r7, #4]
 993 0084 1A60     		str	r2, [r3]
 994 0086 03E0     		b	.L51
 995              	.L49:
 465:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         }
 466:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     }
 467:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     else
 468:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     {
 469:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 996              		.loc 1 469 54
 997 0088 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 30


 998 008a 1A68     		ldr	r2, [r3]
 999              		.loc 1 469 42
 1000 008c 7B68     		ldr	r3, [r7, #4]
 1001 008e 1A60     		str	r2, [r3]
 1002              	.L51:
 470:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     }
 471:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 472:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     /* If the block being inserted plugged a gab, so was merged with the block
 473:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****      * before and the block after, then it's pxNextFreeBlock pointer will have
 474:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****      * already been set, and should not be set here as that would make it point
 475:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****      * to itself. */
 476:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     if( pxIterator != pxBlockToInsert )
 1003              		.loc 1 476 7
 1004 0090 FA68     		ldr	r2, [r7, #12]
 1005 0092 7B68     		ldr	r3, [r7, #4]
 1006 0094 9A42     		cmp	r2, r3
 1007 0096 02D0     		beq	.L53
 477:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     {
 478:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         pxIterator->pxNextFreeBlock = pxBlockToInsert;
 1008              		.loc 1 478 37
 1009 0098 FB68     		ldr	r3, [r7, #12]
 1010 009a 7A68     		ldr	r2, [r7, #4]
 1011 009c 1A60     		str	r2, [r3]
 1012              	.L53:
 479:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     }
 480:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     else
 481:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     {
 482:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         mtCOVERAGE_TEST_MARKER();
 483:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     }
 484:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** }
 1013              		.loc 1 484 1
 1014 009e 00BF     		nop
 1015 00a0 1437     		adds	r7, r7, #20
 1016              	.LCFI36:
 1017              		.cfi_def_cfa_offset 4
 1018 00a2 BD46     		mov	sp, r7
 1019              	.LCFI37:
 1020              		.cfi_def_cfa_register 13
 1021              		@ sp needed
 1022 00a4 5DF8047B 		ldr	r7, [sp], #4
 1023              	.LCFI38:
 1024              		.cfi_restore 7
 1025              		.cfi_def_cfa_offset 0
 1026 00a8 7047     		bx	lr
 1027              	.L55:
 1028 00aa 00BF     		.align	2
 1029              	.L54:
 1030 00ac 00000000 		.word	xStart
 1031 00b0 00000000 		.word	pxEnd
 1032              		.cfi_endproc
 1033              	.LFE12:
 1035              		.section	.text.vPortGetHeapStats,"ax",%progbits
 1036              		.align	1
 1037              		.global	vPortGetHeapStats
 1038              		.syntax unified
 1039              		.thumb
 1040              		.thumb_func
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 31


 1042              	vPortGetHeapStats:
 1043              	.LFB13:
 485:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 486:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 487:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** void vPortGetHeapStats( HeapStats_t * pxHeapStats )
 488:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** {
 1044              		.loc 1 488 1
 1045              		.cfi_startproc
 1046              		@ args = 0, pretend = 0, frame = 24
 1047              		@ frame_needed = 1, uses_anonymous_args = 0
 1048 0000 80B5     		push	{r7, lr}
 1049              	.LCFI39:
 1050              		.cfi_def_cfa_offset 8
 1051              		.cfi_offset 7, -8
 1052              		.cfi_offset 14, -4
 1053 0002 86B0     		sub	sp, sp, #24
 1054              	.LCFI40:
 1055              		.cfi_def_cfa_offset 32
 1056 0004 00AF     		add	r7, sp, #0
 1057              	.LCFI41:
 1058              		.cfi_def_cfa_register 7
 1059 0006 7860     		str	r0, [r7, #4]
 489:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     BlockLink_t * pxBlock;
 490:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable
 1060              		.loc 1 490 12
 1061 0008 0023     		movs	r3, #0
 1062 000a 3B61     		str	r3, [r7, #16]
 1063              		.loc 1 490 25
 1064 000c 0023     		movs	r3, #0
 1065 000e FB60     		str	r3, [r7, #12]
 1066              		.loc 1 490 39
 1067 0010 4FF0FF33 		mov	r3, #-1
 1068 0014 BB60     		str	r3, [r7, #8]
 491:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 492:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     vTaskSuspendAll();
 1069              		.loc 1 492 5
 1070 0016 FFF7FEFF 		bl	vTaskSuspendAll
 493:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     {
 494:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         pxBlock = xStart.pxNextFreeBlock;
 1071              		.loc 1 494 17
 1072 001a 224B     		ldr	r3, .L62
 1073 001c 1B68     		ldr	r3, [r3]
 1074 001e 7B61     		str	r3, [r7, #20]
 495:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 496:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         /* pxBlock will be NULL if the heap has not been initialised.  The heap
 497:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****          * is initialised automatically when the first allocation is made. */
 498:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         if( pxBlock != NULL )
 1075              		.loc 1 498 11
 1076 0020 7B69     		ldr	r3, [r7, #20]
 1077 0022 002B     		cmp	r3, #0
 1078 0024 1BD0     		beq	.L57
 499:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         {
 500:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             while( pxBlock != pxEnd )
 1079              		.loc 1 500 18
 1080 0026 15E0     		b	.L58
 1081              	.L61:
 501:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 32


 502:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 /* Increment the number of blocks and record the largest block seen
 503:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                  * so far. */
 504:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 xBlocks++;
 1082              		.loc 1 504 24
 1083 0028 3B69     		ldr	r3, [r7, #16]
 1084 002a 0133     		adds	r3, r3, #1
 1085 002c 3B61     		str	r3, [r7, #16]
 505:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 506:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 if( pxBlock->xBlockSize > xMaxSize )
 1086              		.loc 1 506 28
 1087 002e 7B69     		ldr	r3, [r7, #20]
 1088 0030 5B68     		ldr	r3, [r3, #4]
 1089              		.loc 1 506 19
 1090 0032 FA68     		ldr	r2, [r7, #12]
 1091 0034 9A42     		cmp	r2, r3
 1092 0036 02D2     		bcs	.L59
 507:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 {
 508:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     xMaxSize = pxBlock->xBlockSize;
 1093              		.loc 1 508 30
 1094 0038 7B69     		ldr	r3, [r7, #20]
 1095 003a 5B68     		ldr	r3, [r3, #4]
 1096 003c FB60     		str	r3, [r7, #12]
 1097              	.L59:
 509:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 }
 510:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 511:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 if( pxBlock->xBlockSize < xMinSize )
 1098              		.loc 1 511 28
 1099 003e 7B69     		ldr	r3, [r7, #20]
 1100 0040 5B68     		ldr	r3, [r3, #4]
 1101              		.loc 1 511 19
 1102 0042 BA68     		ldr	r2, [r7, #8]
 1103 0044 9A42     		cmp	r2, r3
 1104 0046 02D9     		bls	.L60
 512:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 {
 513:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                     xMinSize = pxBlock->xBlockSize;
 1105              		.loc 1 513 30
 1106 0048 7B69     		ldr	r3, [r7, #20]
 1107 004a 5B68     		ldr	r3, [r3, #4]
 1108 004c BB60     		str	r3, [r7, #8]
 1109              	.L60:
 514:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 }
 515:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 516:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 /* Move to the next block in the chain until the last block is
 517:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                  * reached. */
 518:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****                 pxBlock = pxBlock->pxNextFreeBlock;
 1110              		.loc 1 518 25
 1111 004e 7B69     		ldr	r3, [r7, #20]
 1112 0050 1B68     		ldr	r3, [r3]
 1113 0052 7B61     		str	r3, [r7, #20]
 1114              	.L58:
 500:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             {
 1115              		.loc 1 500 28
 1116 0054 144B     		ldr	r3, .L62+4
 1117 0056 1B68     		ldr	r3, [r3]
 500:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             {
 1118              		.loc 1 500 18
 1119 0058 7A69     		ldr	r2, [r7, #20]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 33


 1120 005a 9A42     		cmp	r2, r3
 1121 005c E4D1     		bne	.L61
 1122              	.L57:
 519:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****             }
 520:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         }
 521:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     }
 522:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     ( void ) xTaskResumeAll();
 1123              		.loc 1 522 14
 1124 005e FFF7FEFF 		bl	xTaskResumeAll
 523:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 524:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 1125              		.loc 1 524 49
 1126 0062 7B68     		ldr	r3, [r7, #4]
 1127 0064 FA68     		ldr	r2, [r7, #12]
 1128 0066 5A60     		str	r2, [r3, #4]
 525:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 1129              		.loc 1 525 50
 1130 0068 7B68     		ldr	r3, [r7, #4]
 1131 006a BA68     		ldr	r2, [r7, #8]
 1132 006c 9A60     		str	r2, [r3, #8]
 526:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 1133              		.loc 1 526 38
 1134 006e 7B68     		ldr	r3, [r7, #4]
 1135 0070 3A69     		ldr	r2, [r7, #16]
 1136 0072 DA60     		str	r2, [r3, #12]
 527:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** 
 528:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     taskENTER_CRITICAL();
 1137              		.loc 1 528 5
 1138 0074 FFF7FEFF 		bl	vPortEnterCritical
 529:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     {
 530:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 1139              		.loc 1 530 49
 1140 0078 0C4B     		ldr	r3, .L62+8
 1141 007a 1A68     		ldr	r2, [r3]
 1142 007c 7B68     		ldr	r3, [r7, #4]
 1143 007e 1A60     		str	r2, [r3]
 531:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 1144              		.loc 1 531 53
 1145 0080 0B4B     		ldr	r3, .L62+12
 1146 0082 1A68     		ldr	r2, [r3]
 1147 0084 7B68     		ldr	r3, [r7, #4]
 1148 0086 5A61     		str	r2, [r3, #20]
 532:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 1149              		.loc 1 532 47
 1150 0088 0A4B     		ldr	r3, .L62+16
 1151 008a 1A68     		ldr	r2, [r3]
 1152 008c 7B68     		ldr	r3, [r7, #4]
 1153 008e 9A61     		str	r2, [r3, #24]
 533:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****         pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 1154              		.loc 1 533 53
 1155 0090 094B     		ldr	r3, .L62+20
 1156 0092 1A68     		ldr	r2, [r3]
 1157 0094 7B68     		ldr	r3, [r7, #4]
 1158 0096 1A61     		str	r2, [r3, #16]
 534:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     }
 535:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c ****     taskEXIT_CRITICAL();
 1159              		.loc 1 535 5
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 34


 1160 0098 FFF7FEFF 		bl	vPortExitCritical
 536:ThirdParty/FreeRTOS/portable/MemMang/heap_4.c **** }
 1161              		.loc 1 536 1
 1162 009c 00BF     		nop
 1163 009e 1837     		adds	r7, r7, #24
 1164              	.LCFI42:
 1165              		.cfi_def_cfa_offset 8
 1166 00a0 BD46     		mov	sp, r7
 1167              	.LCFI43:
 1168              		.cfi_def_cfa_register 13
 1169              		@ sp needed
 1170 00a2 80BD     		pop	{r7, pc}
 1171              	.L63:
 1172              		.align	2
 1173              	.L62:
 1174 00a4 00000000 		.word	xStart
 1175 00a8 00000000 		.word	pxEnd
 1176 00ac 00000000 		.word	xFreeBytesRemaining
 1177 00b0 00000000 		.word	xNumberOfSuccessfulAllocations
 1178 00b4 00000000 		.word	xNumberOfSuccessfulFrees
 1179 00b8 00000000 		.word	xMinimumEverFreeBytesRemaining
 1180              		.cfi_endproc
 1181              	.LFE13:
 1183              		.text
 1184              	.Letext0:
 1185              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\lib\\gcc\\arm-none-eabi\
 1186              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 1187              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 1188              		.file 6 "ThirdParty/FreeRTOS/include/portable.h"
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s 			page 35


DEFINED SYMBOLS
                            *ABS*:00000000 heap_4.c
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:20     .bss.ucHeap:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:23     .bss.ucHeap:00000000 ucHeap
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:26     .rodata.xHeapStructSize:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:29     .rodata.xHeapStructSize:00000000 xHeapStructSize
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:32     .bss.xStart:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:35     .bss.xStart:00000000 xStart
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:38     .bss.pxEnd:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:41     .bss.pxEnd:00000000 pxEnd
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:44     .bss.xFreeBytesRemaining:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:47     .bss.xFreeBytesRemaining:00000000 xFreeBytesRemaining
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:50     .bss.xMinimumEverFreeBytesRemaining:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:53     .bss.xMinimumEverFreeBytesRemaining:00000000 xMinimumEverFreeBytesRemaining
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:56     .bss.xNumberOfSuccessfulAllocations:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:59     .bss.xNumberOfSuccessfulAllocations:00000000 xNumberOfSuccessfulAllocations
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:62     .bss.xNumberOfSuccessfulFrees:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:65     .bss.xNumberOfSuccessfulFrees:00000000 xNumberOfSuccessfulFrees
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:68     .text.pvPortMalloc:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:74     .text.pvPortMalloc:00000000 pvPortMalloc
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:731    .text.prvHeapInit:00000000 prvHeapInit
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:880    .text.prvInsertBlockIntoFreeList:00000000 prvInsertBlockIntoFreeList
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:355    .text.pvPortMalloc:00000160 $d
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:364    .text.vPortFree:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:370    .text.vPortFree:00000000 vPortFree
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:516    .text.vPortFree:000000b0 $d
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:522    .text.xPortGetFreeHeapSize:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:528    .text.xPortGetFreeHeapSize:00000000 xPortGetFreeHeapSize
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:559    .text.xPortGetFreeHeapSize:00000014 $d
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:564    .text.xPortGetMinimumEverFreeHeapSize:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:570    .text.xPortGetMinimumEverFreeHeapSize:00000000 xPortGetMinimumEverFreeHeapSize
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:601    .text.xPortGetMinimumEverFreeHeapSize:00000014 $d
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:606    .text.vPortInitialiseBlocks:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:612    .text.vPortInitialiseBlocks:00000000 vPortInitialiseBlocks
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:641    .text.pvPortCalloc:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:647    .text.pvPortCalloc:00000000 pvPortCalloc
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:726    .text.prvHeapInit:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:866    .text.prvHeapInit:000000a4 $d
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:875    .text.prvInsertBlockIntoFreeList:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:1030   .text.prvInsertBlockIntoFreeList:000000ac $d
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:1036   .text.vPortGetHeapStats:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:1042   .text.vPortGetHeapStats:00000000 vPortGetHeapStats
C:\Users\Admin\AppData\Local\Temp\ccPPnvPV.s:1174   .text.vPortGetHeapStats:000000a4 $d

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
memset
vPortEnterCritical
vPortExitCritical
