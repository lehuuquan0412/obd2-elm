ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"queue.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	xQueueRegistry
  20              		.section	.bss.xQueueRegistry,"aw",%nobits
  21              		.align	2
  24              	xQueueRegistry:
  25 0000 00000000 		.space	64
  25      00000000 
  25      00000000 
  25      00000000 
  25      00000000 
  26              		.section	.text.xQueueGenericReset,"ax",%progbits
  27              		.align	1
  28              		.global	xQueueGenericReset
  29              		.syntax unified
  30              		.thumb
  31              		.thumb_func
  33              	xQueueGenericReset:
  34              	.LFB5:
  35              		.file 1 "ThirdParty/FreeRTOS/queue.c"
   1:ThirdParty/FreeRTOS/queue.c **** /*
   2:ThirdParty/FreeRTOS/queue.c ****  * FreeRTOS Kernel V10.5.1
   3:ThirdParty/FreeRTOS/queue.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:ThirdParty/FreeRTOS/queue.c ****  *
   5:ThirdParty/FreeRTOS/queue.c ****  * SPDX-License-Identifier: MIT
   6:ThirdParty/FreeRTOS/queue.c ****  *
   7:ThirdParty/FreeRTOS/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:ThirdParty/FreeRTOS/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:ThirdParty/FreeRTOS/queue.c ****  * the Software without restriction, including without limitation the rights to
  10:ThirdParty/FreeRTOS/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:ThirdParty/FreeRTOS/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:ThirdParty/FreeRTOS/queue.c ****  * subject to the following conditions:
  13:ThirdParty/FreeRTOS/queue.c ****  *
  14:ThirdParty/FreeRTOS/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  15:ThirdParty/FreeRTOS/queue.c ****  * copies or substantial portions of the Software.
  16:ThirdParty/FreeRTOS/queue.c ****  *
  17:ThirdParty/FreeRTOS/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:ThirdParty/FreeRTOS/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:ThirdParty/FreeRTOS/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:ThirdParty/FreeRTOS/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:ThirdParty/FreeRTOS/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 2


  22:ThirdParty/FreeRTOS/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:ThirdParty/FreeRTOS/queue.c ****  *
  24:ThirdParty/FreeRTOS/queue.c ****  * https://www.FreeRTOS.org
  25:ThirdParty/FreeRTOS/queue.c ****  * https://github.com/FreeRTOS
  26:ThirdParty/FreeRTOS/queue.c ****  *
  27:ThirdParty/FreeRTOS/queue.c ****  */
  28:ThirdParty/FreeRTOS/queue.c **** 
  29:ThirdParty/FreeRTOS/queue.c **** #include <stdlib.h>
  30:ThirdParty/FreeRTOS/queue.c **** #include <string.h>
  31:ThirdParty/FreeRTOS/queue.c **** 
  32:ThirdParty/FreeRTOS/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:ThirdParty/FreeRTOS/queue.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  34:ThirdParty/FreeRTOS/queue.c ****  * task.h is included from an application file. */
  35:ThirdParty/FreeRTOS/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:ThirdParty/FreeRTOS/queue.c **** 
  37:ThirdParty/FreeRTOS/queue.c **** #include "FreeRTOS.h"
  38:ThirdParty/FreeRTOS/queue.c **** #include "task.h"
  39:ThirdParty/FreeRTOS/queue.c **** #include "queue.h"
  40:ThirdParty/FreeRTOS/queue.c **** 
  41:ThirdParty/FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  42:ThirdParty/FreeRTOS/queue.c ****     #include "croutine.h"
  43:ThirdParty/FreeRTOS/queue.c **** #endif
  44:ThirdParty/FreeRTOS/queue.c **** 
  45:ThirdParty/FreeRTOS/queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  46:ThirdParty/FreeRTOS/queue.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  47:ThirdParty/FreeRTOS/queue.c ****  * for the header files above, but not in this file, in order to generate the
  48:ThirdParty/FreeRTOS/queue.c ****  * correct privileged Vs unprivileged linkage and placement. */
  49:ThirdParty/FreeRTOS/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  50:ThirdParty/FreeRTOS/queue.c **** 
  51:ThirdParty/FreeRTOS/queue.c **** 
  52:ThirdParty/FreeRTOS/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  53:ThirdParty/FreeRTOS/queue.c **** #define queueUNLOCKED             ( ( int8_t ) -1 )
  54:ThirdParty/FreeRTOS/queue.c **** #define queueLOCKED_UNMODIFIED    ( ( int8_t ) 0 )
  55:ThirdParty/FreeRTOS/queue.c **** #define queueINT8_MAX             ( ( int8_t ) 127 )
  56:ThirdParty/FreeRTOS/queue.c **** 
  57:ThirdParty/FreeRTOS/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  58:ThirdParty/FreeRTOS/queue.c ****  * pcTail members are used as pointers into the queue storage area.  When the
  59:ThirdParty/FreeRTOS/queue.c ****  * Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  60:ThirdParty/FreeRTOS/queue.c ****  * not necessary, and the pcHead pointer is set to NULL to indicate that the
  61:ThirdParty/FreeRTOS/queue.c ****  * structure instead holds a pointer to the mutex holder (if any).  Map alternative
  62:ThirdParty/FreeRTOS/queue.c ****  * names to the pcHead and structure member to ensure the readability of the code
  63:ThirdParty/FreeRTOS/queue.c ****  * is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  64:ThirdParty/FreeRTOS/queue.c ****  * a union as their usage is mutually exclusive dependent on what the queue is
  65:ThirdParty/FreeRTOS/queue.c ****  * being used for. */
  66:ThirdParty/FreeRTOS/queue.c **** #define uxQueueType               pcHead
  67:ThirdParty/FreeRTOS/queue.c **** #define queueQUEUE_IS_MUTEX       NULL
  68:ThirdParty/FreeRTOS/queue.c **** 
  69:ThirdParty/FreeRTOS/queue.c **** typedef struct QueuePointers
  70:ThirdParty/FreeRTOS/queue.c **** {
  71:ThirdParty/FreeRTOS/queue.c ****     int8_t * pcTail;     /*< Points to the byte at the end of the queue storage area.  Once more by
  72:ThirdParty/FreeRTOS/queue.c ****     int8_t * pcReadFrom; /*< Points to the last place that a queued item was read from when the str
  73:ThirdParty/FreeRTOS/queue.c **** } QueuePointers_t;
  74:ThirdParty/FreeRTOS/queue.c **** 
  75:ThirdParty/FreeRTOS/queue.c **** typedef struct SemaphoreData
  76:ThirdParty/FreeRTOS/queue.c **** {
  77:ThirdParty/FreeRTOS/queue.c ****     TaskHandle_t xMutexHolder;        /*< The handle of the task that holds the mutex. */
  78:ThirdParty/FreeRTOS/queue.c ****     UBaseType_t uxRecursiveCallCount; /*< Maintains a count of the number of times a recursive mute
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 3


  79:ThirdParty/FreeRTOS/queue.c **** } SemaphoreData_t;
  80:ThirdParty/FreeRTOS/queue.c **** 
  81:ThirdParty/FreeRTOS/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  82:ThirdParty/FreeRTOS/queue.c ****  * zero. */
  83:ThirdParty/FreeRTOS/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH    ( ( UBaseType_t ) 0 )
  84:ThirdParty/FreeRTOS/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME          ( ( TickType_t ) 0U )
  85:ThirdParty/FreeRTOS/queue.c **** 
  86:ThirdParty/FreeRTOS/queue.c **** #if ( configUSE_PREEMPTION == 0 )
  87:ThirdParty/FreeRTOS/queue.c **** 
  88:ThirdParty/FreeRTOS/queue.c **** /* If the cooperative scheduler is being used then a yield should not be
  89:ThirdParty/FreeRTOS/queue.c ****  * performed just because a higher priority task has been woken. */
  90:ThirdParty/FreeRTOS/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()
  91:ThirdParty/FreeRTOS/queue.c **** #else
  92:ThirdParty/FreeRTOS/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  93:ThirdParty/FreeRTOS/queue.c **** #endif
  94:ThirdParty/FreeRTOS/queue.c **** 
  95:ThirdParty/FreeRTOS/queue.c **** /*
  96:ThirdParty/FreeRTOS/queue.c ****  * Definition of the queue used by the scheduler.
  97:ThirdParty/FreeRTOS/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  98:ThirdParty/FreeRTOS/queue.c ****  * rationale: https://www.FreeRTOS.org/Embedded-RTOS-Queues.html
  99:ThirdParty/FreeRTOS/queue.c ****  */
 100:ThirdParty/FreeRTOS/queue.c **** typedef struct QueueDefinition /* The old naming convention is used to prevent breaking kernel awar
 101:ThirdParty/FreeRTOS/queue.c **** {
 102:ThirdParty/FreeRTOS/queue.c ****     int8_t * pcHead;           /*< Points to the beginning of the queue storage area. */
 103:ThirdParty/FreeRTOS/queue.c ****     int8_t * pcWriteTo;        /*< Points to the free next place in the storage area. */
 104:ThirdParty/FreeRTOS/queue.c **** 
 105:ThirdParty/FreeRTOS/queue.c ****     union
 106:ThirdParty/FreeRTOS/queue.c ****     {
 107:ThirdParty/FreeRTOS/queue.c ****         QueuePointers_t xQueue;     /*< Data required exclusively when this structure is used as a 
 108:ThirdParty/FreeRTOS/queue.c ****         SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a 
 109:ThirdParty/FreeRTOS/queue.c ****     } u;
 110:ThirdParty/FreeRTOS/queue.c **** 
 111:ThirdParty/FreeRTOS/queue.c ****     List_t xTasksWaitingToSend;             /*< List of tasks that are blocked waiting to post onto
 112:ThirdParty/FreeRTOS/queue.c ****     List_t xTasksWaitingToReceive;          /*< List of tasks that are blocked waiting to read from
 113:ThirdParty/FreeRTOS/queue.c **** 
 114:ThirdParty/FreeRTOS/queue.c ****     volatile UBaseType_t uxMessagesWaiting; /*< The number of items currently in the queue. */
 115:ThirdParty/FreeRTOS/queue.c ****     UBaseType_t uxLength;                   /*< The length of the queue defined as the number of it
 116:ThirdParty/FreeRTOS/queue.c ****     UBaseType_t uxItemSize;                 /*< The size of each items that the queue will hold. */
 117:ThirdParty/FreeRTOS/queue.c **** 
 118:ThirdParty/FreeRTOS/queue.c ****     volatile int8_t cRxLock;                /*< Stores the number of items received from the queue 
 119:ThirdParty/FreeRTOS/queue.c ****     volatile int8_t cTxLock;                /*< Stores the number of items transmitted to the queue
 120:ThirdParty/FreeRTOS/queue.c **** 
 121:ThirdParty/FreeRTOS/queue.c ****     #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 122:ThirdParty/FreeRTOS/queue.c ****         uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the memory used by the queue was static
 123:ThirdParty/FreeRTOS/queue.c ****     #endif
 124:ThirdParty/FreeRTOS/queue.c **** 
 125:ThirdParty/FreeRTOS/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 126:ThirdParty/FreeRTOS/queue.c ****         struct QueueDefinition * pxQueueSetContainer;
 127:ThirdParty/FreeRTOS/queue.c ****     #endif
 128:ThirdParty/FreeRTOS/queue.c **** 
 129:ThirdParty/FreeRTOS/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 130:ThirdParty/FreeRTOS/queue.c ****         UBaseType_t uxQueueNumber;
 131:ThirdParty/FreeRTOS/queue.c ****         uint8_t ucQueueType;
 132:ThirdParty/FreeRTOS/queue.c ****     #endif
 133:ThirdParty/FreeRTOS/queue.c **** } xQUEUE;
 134:ThirdParty/FreeRTOS/queue.c **** 
 135:ThirdParty/FreeRTOS/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 4


 136:ThirdParty/FreeRTOS/queue.c ****  * name below to enable the use of older kernel aware debuggers. */
 137:ThirdParty/FreeRTOS/queue.c **** typedef xQUEUE Queue_t;
 138:ThirdParty/FreeRTOS/queue.c **** 
 139:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 140:ThirdParty/FreeRTOS/queue.c **** 
 141:ThirdParty/FreeRTOS/queue.c **** /*
 142:ThirdParty/FreeRTOS/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 143:ThirdParty/FreeRTOS/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 144:ThirdParty/FreeRTOS/queue.c ****  */
 145:ThirdParty/FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 146:ThirdParty/FreeRTOS/queue.c **** 
 147:ThirdParty/FreeRTOS/queue.c **** /* The type stored within the queue registry array.  This allows a name
 148:ThirdParty/FreeRTOS/queue.c ****  * to be assigned to each queue making kernel aware debugging a little
 149:ThirdParty/FreeRTOS/queue.c ****  * more user friendly. */
 150:ThirdParty/FreeRTOS/queue.c ****     typedef struct QUEUE_REGISTRY_ITEM
 151:ThirdParty/FreeRTOS/queue.c ****     {
 152:ThirdParty/FreeRTOS/queue.c ****         const char * pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and s
 153:ThirdParty/FreeRTOS/queue.c ****         QueueHandle_t xHandle;
 154:ThirdParty/FreeRTOS/queue.c ****     } xQueueRegistryItem;
 155:ThirdParty/FreeRTOS/queue.c **** 
 156:ThirdParty/FreeRTOS/queue.c **** /* The old xQueueRegistryItem name is maintained above then typedefed to the
 157:ThirdParty/FreeRTOS/queue.c ****  * new xQueueRegistryItem name below to enable the use of older kernel aware
 158:ThirdParty/FreeRTOS/queue.c ****  * debuggers. */
 159:ThirdParty/FreeRTOS/queue.c ****     typedef xQueueRegistryItem QueueRegistryItem_t;
 160:ThirdParty/FreeRTOS/queue.c **** 
 161:ThirdParty/FreeRTOS/queue.c **** /* The queue registry is simply an array of QueueRegistryItem_t structures.
 162:ThirdParty/FreeRTOS/queue.c ****  * The pcQueueName member of a structure being NULL is indicative of the
 163:ThirdParty/FreeRTOS/queue.c ****  * array position being vacant. */
 164:ThirdParty/FreeRTOS/queue.c ****     PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 165:ThirdParty/FreeRTOS/queue.c **** 
 166:ThirdParty/FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 167:ThirdParty/FreeRTOS/queue.c **** 
 168:ThirdParty/FreeRTOS/queue.c **** /*
 169:ThirdParty/FreeRTOS/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 170:ThirdParty/FreeRTOS/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 171:ThirdParty/FreeRTOS/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 172:ThirdParty/FreeRTOS/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 173:ThirdParty/FreeRTOS/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 174:ThirdParty/FreeRTOS/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 175:ThirdParty/FreeRTOS/queue.c ****  */
 176:ThirdParty/FreeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 177:ThirdParty/FreeRTOS/queue.c **** 
 178:ThirdParty/FreeRTOS/queue.c **** /*
 179:ThirdParty/FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 180:ThirdParty/FreeRTOS/queue.c ****  *
 181:ThirdParty/FreeRTOS/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 182:ThirdParty/FreeRTOS/queue.c ****  */
 183:ThirdParty/FreeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 184:ThirdParty/FreeRTOS/queue.c **** 
 185:ThirdParty/FreeRTOS/queue.c **** /*
 186:ThirdParty/FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 187:ThirdParty/FreeRTOS/queue.c ****  *
 188:ThirdParty/FreeRTOS/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 189:ThirdParty/FreeRTOS/queue.c ****  */
 190:ThirdParty/FreeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 191:ThirdParty/FreeRTOS/queue.c **** 
 192:ThirdParty/FreeRTOS/queue.c **** /*
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 5


 193:ThirdParty/FreeRTOS/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 194:ThirdParty/FreeRTOS/queue.c ****  * back of the queue.
 195:ThirdParty/FreeRTOS/queue.c ****  */
 196:ThirdParty/FreeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
 197:ThirdParty/FreeRTOS/queue.c ****                                       const void * pvItemToQueue,
 198:ThirdParty/FreeRTOS/queue.c ****                                       const BaseType_t xPosition ) PRIVILEGED_FUNCTION;
 199:ThirdParty/FreeRTOS/queue.c **** 
 200:ThirdParty/FreeRTOS/queue.c **** /*
 201:ThirdParty/FreeRTOS/queue.c ****  * Copies an item out of a queue.
 202:ThirdParty/FreeRTOS/queue.c ****  */
 203:ThirdParty/FreeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
 204:ThirdParty/FreeRTOS/queue.c ****                                   void * const pvBuffer ) PRIVILEGED_FUNCTION;
 205:ThirdParty/FreeRTOS/queue.c **** 
 206:ThirdParty/FreeRTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 207:ThirdParty/FreeRTOS/queue.c **** 
 208:ThirdParty/FreeRTOS/queue.c **** /*
 209:ThirdParty/FreeRTOS/queue.c ****  * Checks to see if a queue is a member of a queue set, and if so, notifies
 210:ThirdParty/FreeRTOS/queue.c ****  * the queue set that the queue contains data.
 211:ThirdParty/FreeRTOS/queue.c ****  */
 212:ThirdParty/FreeRTOS/queue.c ****     static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue ) PRIVILEGED_FUNCTI
 213:ThirdParty/FreeRTOS/queue.c **** #endif
 214:ThirdParty/FreeRTOS/queue.c **** 
 215:ThirdParty/FreeRTOS/queue.c **** /*
 216:ThirdParty/FreeRTOS/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 217:ThirdParty/FreeRTOS/queue.c ****  * dynamically to fill in the structure's members.
 218:ThirdParty/FreeRTOS/queue.c ****  */
 219:ThirdParty/FreeRTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 220:ThirdParty/FreeRTOS/queue.c ****                                    const UBaseType_t uxItemSize,
 221:ThirdParty/FreeRTOS/queue.c ****                                    uint8_t * pucQueueStorage,
 222:ThirdParty/FreeRTOS/queue.c ****                                    const uint8_t ucQueueType,
 223:ThirdParty/FreeRTOS/queue.c ****                                    Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 224:ThirdParty/FreeRTOS/queue.c **** 
 225:ThirdParty/FreeRTOS/queue.c **** /*
 226:ThirdParty/FreeRTOS/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 227:ThirdParty/FreeRTOS/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 228:ThirdParty/FreeRTOS/queue.c ****  * as a mutex.
 229:ThirdParty/FreeRTOS/queue.c ****  */
 230:ThirdParty/FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 231:ThirdParty/FreeRTOS/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 232:ThirdParty/FreeRTOS/queue.c **** #endif
 233:ThirdParty/FreeRTOS/queue.c **** 
 234:ThirdParty/FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 235:ThirdParty/FreeRTOS/queue.c **** 
 236:ThirdParty/FreeRTOS/queue.c **** /*
 237:ThirdParty/FreeRTOS/queue.c ****  * If a task waiting for a mutex causes the mutex holder to inherit a
 238:ThirdParty/FreeRTOS/queue.c ****  * priority, but the waiting task times out, then the holder should
 239:ThirdParty/FreeRTOS/queue.c ****  * disinherit the priority - but only down to the highest priority of any
 240:ThirdParty/FreeRTOS/queue.c ****  * other tasks that are waiting for the same mutex.  This function returns
 241:ThirdParty/FreeRTOS/queue.c ****  * that priority.
 242:ThirdParty/FreeRTOS/queue.c ****  */
 243:ThirdParty/FreeRTOS/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVIL
 244:ThirdParty/FreeRTOS/queue.c **** #endif
 245:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 246:ThirdParty/FreeRTOS/queue.c **** 
 247:ThirdParty/FreeRTOS/queue.c **** /*
 248:ThirdParty/FreeRTOS/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 249:ThirdParty/FreeRTOS/queue.c ****  * accessing the queue event lists.
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 6


 250:ThirdParty/FreeRTOS/queue.c ****  */
 251:ThirdParty/FreeRTOS/queue.c **** #define prvLockQueue( pxQueue )                            \
 252:ThirdParty/FreeRTOS/queue.c ****     taskENTER_CRITICAL();                                  \
 253:ThirdParty/FreeRTOS/queue.c ****     {                                                      \
 254:ThirdParty/FreeRTOS/queue.c ****         if( ( pxQueue )->cRxLock == queueUNLOCKED )        \
 255:ThirdParty/FreeRTOS/queue.c ****         {                                                  \
 256:ThirdParty/FreeRTOS/queue.c ****             ( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED; \
 257:ThirdParty/FreeRTOS/queue.c ****         }                                                  \
 258:ThirdParty/FreeRTOS/queue.c ****         if( ( pxQueue )->cTxLock == queueUNLOCKED )        \
 259:ThirdParty/FreeRTOS/queue.c ****         {                                                  \
 260:ThirdParty/FreeRTOS/queue.c ****             ( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED; \
 261:ThirdParty/FreeRTOS/queue.c ****         }                                                  \
 262:ThirdParty/FreeRTOS/queue.c ****     }                                                      \
 263:ThirdParty/FreeRTOS/queue.c ****     taskEXIT_CRITICAL()
 264:ThirdParty/FreeRTOS/queue.c **** 
 265:ThirdParty/FreeRTOS/queue.c **** /*
 266:ThirdParty/FreeRTOS/queue.c ****  * Macro to increment cTxLock member of the queue data structure. It is
 267:ThirdParty/FreeRTOS/queue.c ****  * capped at the number of tasks in the system as we cannot unblock more
 268:ThirdParty/FreeRTOS/queue.c ****  * tasks than the number of tasks in the system.
 269:ThirdParty/FreeRTOS/queue.c ****  */
 270:ThirdParty/FreeRTOS/queue.c **** #define prvIncrementQueueTxLock( pxQueue, cTxLock )                           \
 271:ThirdParty/FreeRTOS/queue.c ****     {                                                                         \
 272:ThirdParty/FreeRTOS/queue.c ****         const UBaseType_t uxNumberOfTasks = uxTaskGetNumberOfTasks();         \
 273:ThirdParty/FreeRTOS/queue.c ****         if( ( UBaseType_t ) ( cTxLock ) < uxNumberOfTasks )                   \
 274:ThirdParty/FreeRTOS/queue.c ****         {                                                                     \
 275:ThirdParty/FreeRTOS/queue.c ****             configASSERT( ( cTxLock ) != queueINT8_MAX );                     \
 276:ThirdParty/FreeRTOS/queue.c ****             ( pxQueue )->cTxLock = ( int8_t ) ( ( cTxLock ) + ( int8_t ) 1 ); \
 277:ThirdParty/FreeRTOS/queue.c ****         }                                                                     \
 278:ThirdParty/FreeRTOS/queue.c ****     }
 279:ThirdParty/FreeRTOS/queue.c **** 
 280:ThirdParty/FreeRTOS/queue.c **** /*
 281:ThirdParty/FreeRTOS/queue.c ****  * Macro to increment cRxLock member of the queue data structure. It is
 282:ThirdParty/FreeRTOS/queue.c ****  * capped at the number of tasks in the system as we cannot unblock more
 283:ThirdParty/FreeRTOS/queue.c ****  * tasks than the number of tasks in the system.
 284:ThirdParty/FreeRTOS/queue.c ****  */
 285:ThirdParty/FreeRTOS/queue.c **** #define prvIncrementQueueRxLock( pxQueue, cRxLock )                           \
 286:ThirdParty/FreeRTOS/queue.c ****     {                                                                         \
 287:ThirdParty/FreeRTOS/queue.c ****         const UBaseType_t uxNumberOfTasks = uxTaskGetNumberOfTasks();         \
 288:ThirdParty/FreeRTOS/queue.c ****         if( ( UBaseType_t ) ( cRxLock ) < uxNumberOfTasks )                   \
 289:ThirdParty/FreeRTOS/queue.c ****         {                                                                     \
 290:ThirdParty/FreeRTOS/queue.c ****             configASSERT( ( cRxLock ) != queueINT8_MAX );                     \
 291:ThirdParty/FreeRTOS/queue.c ****             ( pxQueue )->cRxLock = ( int8_t ) ( ( cRxLock ) + ( int8_t ) 1 ); \
 292:ThirdParty/FreeRTOS/queue.c ****         }                                                                     \
 293:ThirdParty/FreeRTOS/queue.c ****     }
 294:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 295:ThirdParty/FreeRTOS/queue.c **** 
 296:ThirdParty/FreeRTOS/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
 297:ThirdParty/FreeRTOS/queue.c ****                                BaseType_t xNewQueue )
 298:ThirdParty/FreeRTOS/queue.c **** {
  36              		.loc 1 298 1
  37              		.cfi_startproc
  38              		@ args = 0, pretend = 0, frame = 24
  39              		@ frame_needed = 1, uses_anonymous_args = 0
  40 0000 80B5     		push	{r7, lr}
  41              	.LCFI0:
  42              		.cfi_def_cfa_offset 8
  43              		.cfi_offset 7, -8
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 7


  44              		.cfi_offset 14, -4
  45 0002 86B0     		sub	sp, sp, #24
  46              	.LCFI1:
  47              		.cfi_def_cfa_offset 32
  48 0004 00AF     		add	r7, sp, #0
  49              	.LCFI2:
  50              		.cfi_def_cfa_register 7
  51 0006 7860     		str	r0, [r7, #4]
  52 0008 3960     		str	r1, [r7]
 299:ThirdParty/FreeRTOS/queue.c ****     BaseType_t xReturn = pdPASS;
  53              		.loc 1 299 16
  54 000a 0123     		movs	r3, #1
  55 000c 7B61     		str	r3, [r7, #20]
 300:ThirdParty/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
  56              		.loc 1 300 21
  57 000e 7B68     		ldr	r3, [r7, #4]
  58 0010 3B61     		str	r3, [r7, #16]
 301:ThirdParty/FreeRTOS/queue.c **** 
 302:ThirdParty/FreeRTOS/queue.c ****     configASSERT( pxQueue );
  59              		.loc 1 302 5
  60 0012 3B69     		ldr	r3, [r7, #16]
  61 0014 002B     		cmp	r3, #0
  62 0016 0AD1     		bne	.L2
  63              	.LBB114:
  64              	.LBB115:
  65              		.file 2 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
   1:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.5.1
   3:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   7:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  13:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  14:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  16:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  17:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  24:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://www.FreeRTOS.org
  25:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://github.com/FreeRTOS
  26:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  27:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  28:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  30:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  31:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define PORTMACRO_H
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 8


  32:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  33:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef __cplusplus
  34:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         extern "C" {
  35:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  36:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  37:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  38:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  39:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  40:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  42:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  43:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  44:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  45:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  46:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  48:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCHAR          char
  49:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portFLOAT         float
  50:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDOUBLE        double
  51:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portLONG          long
  52:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSHORT         short
  53:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBASE_TYPE     long
  55:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  57:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef long             BaseType_t;
  58:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef unsigned long    UBaseType_t;
  59:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  60:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint16_t     TickType_t;
  62:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #else
  64:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint32_t     TickType_t;
  65:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  66:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  68:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not need to be guarded with a critical section. */
  69:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  70:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  71:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  72:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  73:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  74:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  79:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  80:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  81:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD()                                 \
  82:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {                                                   \
  83:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****                                                         \
  86:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  88:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 9


  89:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "isb" );                                  \
  90:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
  91:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  92:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  95:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  96:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  97:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  98:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  99:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortEnterCritical( void );
 100:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortExitCritical( void );
 101:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 104:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 109:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 110:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * (which build with all the ports) will build. */
 113:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 114:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 116:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 117:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 118:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 119:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 122:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 123:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 124:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 125:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 126:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 127:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 128:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 131:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Generic helper function. */
 132:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 134:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             uint8_t ucReturn;
 135:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 136:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             return ucReturn;
 139:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 140:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 141:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Check the configuration. */
 142:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #endif
 145:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 10


 146:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 147:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 149:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 151:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 152:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 153:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 154:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 156:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 157:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 158:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef configASSERT
 159:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 161:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 162:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 164:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNOP()
 165:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 166:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portINLINE              __inline
 167:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 168:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portFORCE_INLINE
 169:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 171:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 172:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 173:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 174:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulCurrentInterrupt;
 175:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         BaseType_t xReturn;
 176:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 178:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 179:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 181:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 182:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdFALSE;
 183:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 184:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         else
 185:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 186:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdTRUE;
 187:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 188:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         return xReturn;
 190:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 191:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 192:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 193:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 194:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 195:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulNewBASEPRI;
 197:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
  66              		.loc 2 198 9
  67              		.syntax unified
  68              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
  69 0018 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 11


  70 001c 83F31188 		msr basepri, r3											
  71 0020 BFF36F8F 		isb														
  72 0024 BFF34F8F 		dsb														
  73              	
  74              	@ 0 "" 2
  75              		.thumb
  76              		.syntax unified
  77 0028 FB60     		str	r3, [r7, #12]
 199:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mov %0, %1												\n"\
 201:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %0											\n"\
 202:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	isb														\n"\
 203:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	dsb														\n"\
 204:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 205:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         );
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
  78              		.loc 2 206 5
  79 002a 00BF     		nop
  80              	.L3:
  81              	.LBE115:
  82              	.LBE114:
  83              		.loc 1 302 5 discriminator 1
  84 002c FEE7     		b	.L3
  85              	.L2:
 303:ThirdParty/FreeRTOS/queue.c **** 
 304:ThirdParty/FreeRTOS/queue.c ****     if( ( pxQueue != NULL ) &&
  86              		.loc 1 304 7
  87 002e 3B69     		ldr	r3, [r7, #16]
  88 0030 002B     		cmp	r3, #0
  89 0032 52D0     		beq	.L4
 305:ThirdParty/FreeRTOS/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
  90              		.loc 1 305 18 discriminator 1
  91 0034 3B69     		ldr	r3, [r7, #16]
  92 0036 DB6B     		ldr	r3, [r3, #60]
 304:ThirdParty/FreeRTOS/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
  93              		.loc 1 304 29 discriminator 1
  94 0038 002B     		cmp	r3, #0
  95 003a 4ED0     		beq	.L4
 306:ThirdParty/FreeRTOS/queue.c ****         /* Check for multiplication overflow. */
 307:ThirdParty/FreeRTOS/queue.c ****         ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
  96              		.loc 1 307 54
  97 003c 3B69     		ldr	r3, [r7, #16]
  98 003e 1A6C     		ldr	r2, [r3, #64]
  99              		.loc 1 307 31
 100 0040 3B69     		ldr	r3, [r7, #16]
 101 0042 DB6B     		ldr	r3, [r3, #60]
 102              		.loc 1 307 44
 103 0044 0021     		movs	r1, #0
 104 0046 A3FB0223 		umull	r2, r3, r3, r2
 105 004a 002B     		cmp	r3, #0
 106 004c 00D0     		beq	.L5
 107 004e 0121     		movs	r1, #1
 108              	.L5:
 109 0050 0B46     		mov	r3, r1
 305:ThirdParty/FreeRTOS/queue.c ****         /* Check for multiplication overflow. */
 110              		.loc 1 305 37
 111 0052 002B     		cmp	r3, #0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 12


 112 0054 41D1     		bne	.L4
 308:ThirdParty/FreeRTOS/queue.c ****     {
 309:ThirdParty/FreeRTOS/queue.c ****         taskENTER_CRITICAL();
 113              		.loc 1 309 9
 114 0056 FFF7FEFF 		bl	vPortEnterCritical
 310:ThirdParty/FreeRTOS/queue.c ****         {
 311:ThirdParty/FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize 
 115              		.loc 1 311 47
 116 005a 3B69     		ldr	r3, [r7, #16]
 117 005c 1A68     		ldr	r2, [r3]
 118              		.loc 1 311 67
 119 005e 3B69     		ldr	r3, [r7, #16]
 120 0060 DB6B     		ldr	r3, [r3, #60]
 121              		.loc 1 311 87
 122 0062 3969     		ldr	r1, [r7, #16]
 123 0064 096C     		ldr	r1, [r1, #64]
 124              		.loc 1 311 78
 125 0066 01FB03F3 		mul	r3, r1, r3
 126              		.loc 1 311 56
 127 006a 1A44     		add	r2, r2, r3
 128              		.loc 1 311 38
 129 006c 3B69     		ldr	r3, [r7, #16]
 130 006e 9A60     		str	r2, [r3, #8]
 312:ThirdParty/FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 131              		.loc 1 312 40
 132 0070 3B69     		ldr	r3, [r7, #16]
 133 0072 0022     		movs	r2, #0
 134 0074 9A63     		str	r2, [r3, #56]
 313:ThirdParty/FreeRTOS/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 135              		.loc 1 313 41
 136 0076 3B69     		ldr	r3, [r7, #16]
 137 0078 1A68     		ldr	r2, [r3]
 138              		.loc 1 313 32
 139 007a 3B69     		ldr	r3, [r7, #16]
 140 007c 5A60     		str	r2, [r3, #4]
 314:ThirdParty/FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue
 141              		.loc 1 314 51
 142 007e 3B69     		ldr	r3, [r7, #16]
 143 0080 1A68     		ldr	r2, [r3]
 144              		.loc 1 314 73
 145 0082 3B69     		ldr	r3, [r7, #16]
 146 0084 DB6B     		ldr	r3, [r3, #60]
 147              		.loc 1 314 84
 148 0086 013B     		subs	r3, r3, #1
 149              		.loc 1 314 100
 150 0088 3969     		ldr	r1, [r7, #16]
 151 008a 096C     		ldr	r1, [r1, #64]
 152              		.loc 1 314 91
 153 008c 01FB03F3 		mul	r3, r1, r3
 154              		.loc 1 314 60
 155 0090 1A44     		add	r2, r2, r3
 156              		.loc 1 314 42
 157 0092 3B69     		ldr	r3, [r7, #16]
 158 0094 DA60     		str	r2, [r3, #12]
 315:ThirdParty/FreeRTOS/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 159              		.loc 1 315 30
 160 0096 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 13


 161 0098 FF22     		movs	r2, #255
 162 009a 83F84420 		strb	r2, [r3, #68]
 316:ThirdParty/FreeRTOS/queue.c ****             pxQueue->cTxLock = queueUNLOCKED;
 163              		.loc 1 316 30
 164 009e 3B69     		ldr	r3, [r7, #16]
 165 00a0 FF22     		movs	r2, #255
 166 00a2 83F84520 		strb	r2, [r3, #69]
 317:ThirdParty/FreeRTOS/queue.c **** 
 318:ThirdParty/FreeRTOS/queue.c ****             if( xNewQueue == pdFALSE )
 167              		.loc 1 318 15
 168 00a6 3B68     		ldr	r3, [r7]
 169 00a8 002B     		cmp	r3, #0
 170 00aa 09D1     		bne	.L7
 319:ThirdParty/FreeRTOS/queue.c ****             {
 320:ThirdParty/FreeRTOS/queue.c ****                 /* If there are tasks blocked waiting to read from the queue, then
 321:ThirdParty/FreeRTOS/queue.c ****                  * the tasks will remain blocked as after this function exits the queue
 322:ThirdParty/FreeRTOS/queue.c ****                  * will still be empty.  If there are tasks blocked waiting to write to
 323:ThirdParty/FreeRTOS/queue.c ****                  * the queue, then one should be unblocked as after this function exits
 324:ThirdParty/FreeRTOS/queue.c ****                  * it will be possible to write to it. */
 325:ThirdParty/FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 171              		.loc 1 325 21
 172 00ac 3B69     		ldr	r3, [r7, #16]
 173 00ae 1B69     		ldr	r3, [r3, #16]
 174              		.loc 1 325 19
 175 00b0 002B     		cmp	r3, #0
 176 00b2 0FD0     		beq	.L8
 326:ThirdParty/FreeRTOS/queue.c ****                 {
 327:ThirdParty/FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 177              		.loc 1 327 51
 178 00b4 3B69     		ldr	r3, [r7, #16]
 179 00b6 1033     		adds	r3, r3, #16
 180              		.loc 1 327 25
 181 00b8 1846     		mov	r0, r3
 182 00ba FFF7FEFF 		bl	xTaskRemoveFromEventList
 183 00be 09E0     		b	.L8
 184              	.L7:
 328:ThirdParty/FreeRTOS/queue.c ****                     {
 329:ThirdParty/FreeRTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
 330:ThirdParty/FreeRTOS/queue.c ****                     }
 331:ThirdParty/FreeRTOS/queue.c ****                     else
 332:ThirdParty/FreeRTOS/queue.c ****                     {
 333:ThirdParty/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
 334:ThirdParty/FreeRTOS/queue.c ****                     }
 335:ThirdParty/FreeRTOS/queue.c ****                 }
 336:ThirdParty/FreeRTOS/queue.c ****                 else
 337:ThirdParty/FreeRTOS/queue.c ****                 {
 338:ThirdParty/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
 339:ThirdParty/FreeRTOS/queue.c ****                 }
 340:ThirdParty/FreeRTOS/queue.c ****             }
 341:ThirdParty/FreeRTOS/queue.c ****             else
 342:ThirdParty/FreeRTOS/queue.c ****             {
 343:ThirdParty/FreeRTOS/queue.c ****                 /* Ensure the event queues start in the correct state. */
 344:ThirdParty/FreeRTOS/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 185              		.loc 1 344 17
 186 00c0 3B69     		ldr	r3, [r7, #16]
 187 00c2 1033     		adds	r3, r3, #16
 188 00c4 1846     		mov	r0, r3
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 14


 189 00c6 FFF7FEFF 		bl	vListInitialise
 345:ThirdParty/FreeRTOS/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 190              		.loc 1 345 17
 191 00ca 3B69     		ldr	r3, [r7, #16]
 192 00cc 2433     		adds	r3, r3, #36
 193 00ce 1846     		mov	r0, r3
 194 00d0 FFF7FEFF 		bl	vListInitialise
 195              	.L8:
 346:ThirdParty/FreeRTOS/queue.c ****             }
 347:ThirdParty/FreeRTOS/queue.c ****         }
 348:ThirdParty/FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
 196              		.loc 1 348 9
 197 00d4 FFF7FEFF 		bl	vPortExitCritical
 198 00d8 01E0     		b	.L9
 199              	.L4:
 349:ThirdParty/FreeRTOS/queue.c ****     }
 350:ThirdParty/FreeRTOS/queue.c ****     else
 351:ThirdParty/FreeRTOS/queue.c ****     {
 352:ThirdParty/FreeRTOS/queue.c ****         xReturn = pdFAIL;
 200              		.loc 1 352 17
 201 00da 0023     		movs	r3, #0
 202 00dc 7B61     		str	r3, [r7, #20]
 203              	.L9:
 353:ThirdParty/FreeRTOS/queue.c ****     }
 354:ThirdParty/FreeRTOS/queue.c **** 
 355:ThirdParty/FreeRTOS/queue.c ****     configASSERT( xReturn != pdFAIL );
 204              		.loc 1 355 5
 205 00de 7B69     		ldr	r3, [r7, #20]
 206 00e0 002B     		cmp	r3, #0
 207 00e2 0AD1     		bne	.L10
 208              	.LBB116:
 209              	.LBB117:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 210              		.loc 2 198 9
 211              		.syntax unified
 212              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 213 00e4 4FF05003 			mov r3, #80												
 214 00e8 83F31188 		msr basepri, r3											
 215 00ec BFF36F8F 		isb														
 216 00f0 BFF34F8F 		dsb														
 217              	
 218              	@ 0 "" 2
 219              		.thumb
 220              		.syntax unified
 221 00f4 BB60     		str	r3, [r7, #8]
 222              		.loc 2 206 5
 223 00f6 00BF     		nop
 224              	.L11:
 225              	.LBE117:
 226              	.LBE116:
 227              		.loc 1 355 5 discriminator 4
 228 00f8 FEE7     		b	.L11
 229              	.L10:
 356:ThirdParty/FreeRTOS/queue.c **** 
 357:ThirdParty/FreeRTOS/queue.c ****     /* A value is returned for calling semantic consistency with previous
 358:ThirdParty/FreeRTOS/queue.c ****      * versions. */
 359:ThirdParty/FreeRTOS/queue.c ****     return xReturn;
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 15


 230              		.loc 1 359 12
 231 00fa 7B69     		ldr	r3, [r7, #20]
 360:ThirdParty/FreeRTOS/queue.c **** }
 232              		.loc 1 360 1
 233 00fc 1846     		mov	r0, r3
 234 00fe 1837     		adds	r7, r7, #24
 235              	.LCFI3:
 236              		.cfi_def_cfa_offset 8
 237 0100 BD46     		mov	sp, r7
 238              	.LCFI4:
 239              		.cfi_def_cfa_register 13
 240              		@ sp needed
 241 0102 80BD     		pop	{r7, pc}
 242              		.cfi_endproc
 243              	.LFE5:
 245              		.section	.text.xQueueGenericCreate,"ax",%progbits
 246              		.align	1
 247              		.global	xQueueGenericCreate
 248              		.syntax unified
 249              		.thumb
 250              		.thumb_func
 252              	xQueueGenericCreate:
 253              	.LFB6:
 361:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 362:ThirdParty/FreeRTOS/queue.c **** 
 363:ThirdParty/FreeRTOS/queue.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 364:ThirdParty/FreeRTOS/queue.c **** 
 365:ThirdParty/FreeRTOS/queue.c ****     QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
 366:ThirdParty/FreeRTOS/queue.c ****                                              const UBaseType_t uxItemSize,
 367:ThirdParty/FreeRTOS/queue.c ****                                              uint8_t * pucQueueStorage,
 368:ThirdParty/FreeRTOS/queue.c ****                                              StaticQueue_t * pxStaticQueue,
 369:ThirdParty/FreeRTOS/queue.c ****                                              const uint8_t ucQueueType )
 370:ThirdParty/FreeRTOS/queue.c ****     {
 371:ThirdParty/FreeRTOS/queue.c ****         Queue_t * pxNewQueue = NULL;
 372:ThirdParty/FreeRTOS/queue.c **** 
 373:ThirdParty/FreeRTOS/queue.c ****         /* The StaticQueue_t structure and the queue storage area must be
 374:ThirdParty/FreeRTOS/queue.c ****          * supplied. */
 375:ThirdParty/FreeRTOS/queue.c ****         configASSERT( pxStaticQueue );
 376:ThirdParty/FreeRTOS/queue.c **** 
 377:ThirdParty/FreeRTOS/queue.c ****         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 378:ThirdParty/FreeRTOS/queue.c ****             ( pxStaticQueue != NULL ) &&
 379:ThirdParty/FreeRTOS/queue.c **** 
 380:ThirdParty/FreeRTOS/queue.c ****             /* A queue storage area should be provided if the item size is not 0, and
 381:ThirdParty/FreeRTOS/queue.c ****              * should not be provided if the item size is 0. */
 382:ThirdParty/FreeRTOS/queue.c ****             ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 383:ThirdParty/FreeRTOS/queue.c ****             ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 384:ThirdParty/FreeRTOS/queue.c ****         {
 385:ThirdParty/FreeRTOS/queue.c ****             #if ( configASSERT_DEFINED == 1 )
 386:ThirdParty/FreeRTOS/queue.c ****             {
 387:ThirdParty/FreeRTOS/queue.c ****                 /* Sanity check that the size of the structure used to declare a
 388:ThirdParty/FreeRTOS/queue.c ****                  * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 389:ThirdParty/FreeRTOS/queue.c ****                  * the real queue and semaphore structures. */
 390:ThirdParty/FreeRTOS/queue.c ****                 volatile size_t xSize = sizeof( StaticQueue_t );
 391:ThirdParty/FreeRTOS/queue.c **** 
 392:ThirdParty/FreeRTOS/queue.c ****                 /* This assertion cannot be branch covered in unit tests */
 393:ThirdParty/FreeRTOS/queue.c ****                 configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 394:ThirdParty/FreeRTOS/queue.c ****                 ( void ) xSize;                             /* Keeps lint quiet when configASSERT()
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 16


 395:ThirdParty/FreeRTOS/queue.c ****             }
 396:ThirdParty/FreeRTOS/queue.c ****             #endif /* configASSERT_DEFINED */
 397:ThirdParty/FreeRTOS/queue.c **** 
 398:ThirdParty/FreeRTOS/queue.c ****             /* The address of a statically allocated queue was passed in, use it.
 399:ThirdParty/FreeRTOS/queue.c ****              * The address of a statically allocated storage area was also passed in
 400:ThirdParty/FreeRTOS/queue.c ****              * but is already set. */
 401:ThirdParty/FreeRTOS/queue.c ****             pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the
 402:ThirdParty/FreeRTOS/queue.c **** 
 403:ThirdParty/FreeRTOS/queue.c ****             #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 404:ThirdParty/FreeRTOS/queue.c ****             {
 405:ThirdParty/FreeRTOS/queue.c ****                 /* Queues can be allocated wither statically or dynamically, so
 406:ThirdParty/FreeRTOS/queue.c ****                  * note this queue was allocated statically in case the queue is
 407:ThirdParty/FreeRTOS/queue.c ****                  * later deleted. */
 408:ThirdParty/FreeRTOS/queue.c ****                 pxNewQueue->ucStaticallyAllocated = pdTRUE;
 409:ThirdParty/FreeRTOS/queue.c ****             }
 410:ThirdParty/FreeRTOS/queue.c ****             #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 411:ThirdParty/FreeRTOS/queue.c **** 
 412:ThirdParty/FreeRTOS/queue.c ****             prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQu
 413:ThirdParty/FreeRTOS/queue.c ****         }
 414:ThirdParty/FreeRTOS/queue.c ****         else
 415:ThirdParty/FreeRTOS/queue.c ****         {
 416:ThirdParty/FreeRTOS/queue.c ****             configASSERT( pxNewQueue );
 417:ThirdParty/FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 418:ThirdParty/FreeRTOS/queue.c ****         }
 419:ThirdParty/FreeRTOS/queue.c **** 
 420:ThirdParty/FreeRTOS/queue.c ****         return pxNewQueue;
 421:ThirdParty/FreeRTOS/queue.c ****     }
 422:ThirdParty/FreeRTOS/queue.c **** 
 423:ThirdParty/FreeRTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 424:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 425:ThirdParty/FreeRTOS/queue.c **** 
 426:ThirdParty/FreeRTOS/queue.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 427:ThirdParty/FreeRTOS/queue.c **** 
 428:ThirdParty/FreeRTOS/queue.c ****     QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
 429:ThirdParty/FreeRTOS/queue.c ****                                        const UBaseType_t uxItemSize,
 430:ThirdParty/FreeRTOS/queue.c ****                                        const uint8_t ucQueueType )
 431:ThirdParty/FreeRTOS/queue.c ****     {
 254              		.loc 1 431 5
 255              		.cfi_startproc
 256              		@ args = 0, pretend = 0, frame = 32
 257              		@ frame_needed = 1, uses_anonymous_args = 0
 258 0000 80B5     		push	{r7, lr}
 259              	.LCFI5:
 260              		.cfi_def_cfa_offset 8
 261              		.cfi_offset 7, -8
 262              		.cfi_offset 14, -4
 263 0002 8AB0     		sub	sp, sp, #40
 264              	.LCFI6:
 265              		.cfi_def_cfa_offset 48
 266 0004 02AF     		add	r7, sp, #8
 267              	.LCFI7:
 268              		.cfi_def_cfa 7, 40
 269 0006 F860     		str	r0, [r7, #12]
 270 0008 B960     		str	r1, [r7, #8]
 271 000a 1346     		mov	r3, r2
 272 000c FB71     		strb	r3, [r7, #7]
 432:ThirdParty/FreeRTOS/queue.c ****         Queue_t * pxNewQueue = NULL;
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 17


 273              		.loc 1 432 19
 274 000e 0023     		movs	r3, #0
 275 0010 FB61     		str	r3, [r7, #28]
 433:ThirdParty/FreeRTOS/queue.c ****         size_t xQueueSizeInBytes;
 434:ThirdParty/FreeRTOS/queue.c ****         uint8_t * pucQueueStorage;
 435:ThirdParty/FreeRTOS/queue.c **** 
 436:ThirdParty/FreeRTOS/queue.c ****         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 276              		.loc 1 436 11
 277 0012 FB68     		ldr	r3, [r7, #12]
 278 0014 002B     		cmp	r3, #0
 279 0016 2ED0     		beq	.L14
 437:ThirdParty/FreeRTOS/queue.c ****             /* Check for multiplication overflow. */
 438:ThirdParty/FreeRTOS/queue.c ****             ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 280              		.loc 1 438 44 discriminator 1
 281 0018 0021     		movs	r1, #0
 282 001a BA68     		ldr	r2, [r7, #8]
 283 001c FB68     		ldr	r3, [r7, #12]
 284 001e A3FB0223 		umull	r2, r3, r3, r2
 285 0022 002B     		cmp	r3, #0
 286 0024 00D0     		beq	.L15
 287 0026 0121     		movs	r1, #1
 288              	.L15:
 289 0028 0B46     		mov	r3, r1
 436:ThirdParty/FreeRTOS/queue.c ****             /* Check for multiplication overflow. */
 290              		.loc 1 436 51 discriminator 1
 291 002a 002B     		cmp	r3, #0
 292 002c 23D1     		bne	.L14
 439:ThirdParty/FreeRTOS/queue.c ****             /* Check for addition overflow. */
 440:ThirdParty/FreeRTOS/queue.c ****             ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 293              		.loc 1 440 67
 294 002e FB68     		ldr	r3, [r7, #12]
 295 0030 BA68     		ldr	r2, [r7, #8]
 296 0032 02FB03F3 		mul	r3, r2, r3
 438:ThirdParty/FreeRTOS/queue.c ****             /* Check for addition overflow. */
 297              		.loc 1 438 60
 298 0036 13F1510F 		cmn	r3, #81
 299 003a 1CD8     		bhi	.L14
 441:ThirdParty/FreeRTOS/queue.c ****         {
 442:ThirdParty/FreeRTOS/queue.c ****             /* Allocate enough space to hold the maximum number of items that
 443:ThirdParty/FreeRTOS/queue.c ****              * can be in the queue at any time.  It is valid for uxItemSize to be
 444:ThirdParty/FreeRTOS/queue.c ****              * zero in the case the queue is used as a semaphore. */
 445:ThirdParty/FreeRTOS/queue.c ****             xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA excep
 300              		.loc 1 445 31
 301 003c FB68     		ldr	r3, [r7, #12]
 302 003e BA68     		ldr	r2, [r7, #8]
 303 0040 02FB03F3 		mul	r3, r2, r3
 304 0044 BB61     		str	r3, [r7, #24]
 446:ThirdParty/FreeRTOS/queue.c **** 
 447:ThirdParty/FreeRTOS/queue.c ****             /* Allocate the queue and storage area.  Justification for MISRA
 448:ThirdParty/FreeRTOS/queue.c ****              * deviation as follows:  pvPortMalloc() always ensures returned memory
 449:ThirdParty/FreeRTOS/queue.c ****              * blocks are aligned per the requirements of the MCU stack.  In this case
 450:ThirdParty/FreeRTOS/queue.c ****              * pvPortMalloc() must return a pointer that is guaranteed to meet the
 451:ThirdParty/FreeRTOS/queue.c ****              * alignment requirements of the Queue_t structure - which in this case
 452:ThirdParty/FreeRTOS/queue.c ****              * is an int8_t *.  Therefore, whenever the stack alignment requirements
 453:ThirdParty/FreeRTOS/queue.c ****              * are greater than or equal to the pointer to char requirements the cast
 454:ThirdParty/FreeRTOS/queue.c ****              * is safe.  In other cases alignment requirements are not strict (one or
 455:ThirdParty/FreeRTOS/queue.c ****              * two bytes). */
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 18


 456:ThirdParty/FreeRTOS/queue.c ****             pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lin
 305              		.loc 1 456 40
 306 0046 BB69     		ldr	r3, [r7, #24]
 307 0048 5033     		adds	r3, r3, #80
 308 004a 1846     		mov	r0, r3
 309 004c FFF7FEFF 		bl	pvPortMalloc
 310 0050 F861     		str	r0, [r7, #28]
 457:ThirdParty/FreeRTOS/queue.c **** 
 458:ThirdParty/FreeRTOS/queue.c ****             if( pxNewQueue != NULL )
 311              		.loc 1 458 15
 312 0052 FB69     		ldr	r3, [r7, #28]
 313 0054 002B     		cmp	r3, #0
 314 0056 1CD0     		beq	.L18
 459:ThirdParty/FreeRTOS/queue.c ****             {
 460:ThirdParty/FreeRTOS/queue.c ****                 /* Jump past the queue structure to find the location of the queue
 461:ThirdParty/FreeRTOS/queue.c ****                  * storage area. */
 462:ThirdParty/FreeRTOS/queue.c ****                 pucQueueStorage = ( uint8_t * ) pxNewQueue;
 315              		.loc 1 462 33
 316 0058 FB69     		ldr	r3, [r7, #28]
 317 005a 7B61     		str	r3, [r7, #20]
 463:ThirdParty/FreeRTOS/queue.c ****                 pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on c
 318              		.loc 1 463 33
 319 005c 7B69     		ldr	r3, [r7, #20]
 320 005e 5033     		adds	r3, r3, #80
 321 0060 7B61     		str	r3, [r7, #20]
 464:ThirdParty/FreeRTOS/queue.c **** 
 465:ThirdParty/FreeRTOS/queue.c ****                 #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 466:ThirdParty/FreeRTOS/queue.c ****                 {
 467:ThirdParty/FreeRTOS/queue.c ****                     /* Queues can be created either statically or dynamically, so
 468:ThirdParty/FreeRTOS/queue.c ****                      * note this task was created dynamically in case it is later
 469:ThirdParty/FreeRTOS/queue.c ****                      * deleted. */
 470:ThirdParty/FreeRTOS/queue.c ****                     pxNewQueue->ucStaticallyAllocated = pdFALSE;
 471:ThirdParty/FreeRTOS/queue.c ****                 }
 472:ThirdParty/FreeRTOS/queue.c ****                 #endif /* configSUPPORT_STATIC_ALLOCATION */
 473:ThirdParty/FreeRTOS/queue.c **** 
 474:ThirdParty/FreeRTOS/queue.c ****                 prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxN
 322              		.loc 1 474 17
 323 0062 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 324 0064 FB69     		ldr	r3, [r7, #28]
 325 0066 0093     		str	r3, [sp]
 326 0068 1346     		mov	r3, r2
 327 006a 7A69     		ldr	r2, [r7, #20]
 328 006c B968     		ldr	r1, [r7, #8]
 329 006e F868     		ldr	r0, [r7, #12]
 330 0070 FFF7FEFF 		bl	prvInitialiseNewQueue
 458:ThirdParty/FreeRTOS/queue.c ****             {
 331              		.loc 1 458 15
 332 0074 0DE0     		b	.L18
 333              	.L14:
 475:ThirdParty/FreeRTOS/queue.c ****             }
 476:ThirdParty/FreeRTOS/queue.c ****             else
 477:ThirdParty/FreeRTOS/queue.c ****             {
 478:ThirdParty/FreeRTOS/queue.c ****                 traceQUEUE_CREATE_FAILED( ucQueueType );
 479:ThirdParty/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 480:ThirdParty/FreeRTOS/queue.c ****             }
 481:ThirdParty/FreeRTOS/queue.c ****         }
 482:ThirdParty/FreeRTOS/queue.c ****         else
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 19


 483:ThirdParty/FreeRTOS/queue.c ****         {
 484:ThirdParty/FreeRTOS/queue.c ****             configASSERT( pxNewQueue );
 334              		.loc 1 484 13
 335 0076 FB69     		ldr	r3, [r7, #28]
 336 0078 002B     		cmp	r3, #0
 337 007a 0AD1     		bne	.L18
 338              	.LBB118:
 339              	.LBB119:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 340              		.loc 2 198 9
 341              		.syntax unified
 342              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 343 007c 4FF05003 			mov r3, #80												
 344 0080 83F31188 		msr basepri, r3											
 345 0084 BFF36F8F 		isb														
 346 0088 BFF34F8F 		dsb														
 347              	
 348              	@ 0 "" 2
 349              		.thumb
 350              		.syntax unified
 351 008c 3B61     		str	r3, [r7, #16]
 352              		.loc 2 206 5
 353 008e 00BF     		nop
 354              	.L19:
 355              	.LBE119:
 356              	.LBE118:
 357              		.loc 1 484 13 discriminator 1
 358 0090 FEE7     		b	.L19
 359              	.L18:
 485:ThirdParty/FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 486:ThirdParty/FreeRTOS/queue.c ****         }
 487:ThirdParty/FreeRTOS/queue.c **** 
 488:ThirdParty/FreeRTOS/queue.c ****         return pxNewQueue;
 360              		.loc 1 488 16
 361 0092 FB69     		ldr	r3, [r7, #28]
 489:ThirdParty/FreeRTOS/queue.c ****     }
 362              		.loc 1 489 5
 363 0094 1846     		mov	r0, r3
 364 0096 2037     		adds	r7, r7, #32
 365              	.LCFI8:
 366              		.cfi_def_cfa_offset 8
 367 0098 BD46     		mov	sp, r7
 368              	.LCFI9:
 369              		.cfi_def_cfa_register 13
 370              		@ sp needed
 371 009a 80BD     		pop	{r7, pc}
 372              		.cfi_endproc
 373              	.LFE6:
 375              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 376              		.align	1
 377              		.syntax unified
 378              		.thumb
 379              		.thumb_func
 381              	prvInitialiseNewQueue:
 382              	.LFB7:
 490:ThirdParty/FreeRTOS/queue.c **** 
 491:ThirdParty/FreeRTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 20


 492:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 493:ThirdParty/FreeRTOS/queue.c **** 
 494:ThirdParty/FreeRTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 495:ThirdParty/FreeRTOS/queue.c ****                                    const UBaseType_t uxItemSize,
 496:ThirdParty/FreeRTOS/queue.c ****                                    uint8_t * pucQueueStorage,
 497:ThirdParty/FreeRTOS/queue.c ****                                    const uint8_t ucQueueType,
 498:ThirdParty/FreeRTOS/queue.c ****                                    Queue_t * pxNewQueue )
 499:ThirdParty/FreeRTOS/queue.c **** {
 383              		.loc 1 499 1
 384              		.cfi_startproc
 385              		@ args = 4, pretend = 0, frame = 16
 386              		@ frame_needed = 1, uses_anonymous_args = 0
 387 0000 80B5     		push	{r7, lr}
 388              	.LCFI10:
 389              		.cfi_def_cfa_offset 8
 390              		.cfi_offset 7, -8
 391              		.cfi_offset 14, -4
 392 0002 84B0     		sub	sp, sp, #16
 393              	.LCFI11:
 394              		.cfi_def_cfa_offset 24
 395 0004 00AF     		add	r7, sp, #0
 396              	.LCFI12:
 397              		.cfi_def_cfa_register 7
 398 0006 F860     		str	r0, [r7, #12]
 399 0008 B960     		str	r1, [r7, #8]
 400 000a 7A60     		str	r2, [r7, #4]
 401 000c FB70     		strb	r3, [r7, #3]
 500:ThirdParty/FreeRTOS/queue.c ****     /* Remove compiler warnings about unused parameters should
 501:ThirdParty/FreeRTOS/queue.c ****      * configUSE_TRACE_FACILITY not be set to 1. */
 502:ThirdParty/FreeRTOS/queue.c ****     ( void ) ucQueueType;
 503:ThirdParty/FreeRTOS/queue.c **** 
 504:ThirdParty/FreeRTOS/queue.c ****     if( uxItemSize == ( UBaseType_t ) 0 )
 402              		.loc 1 504 7
 403 000e BB68     		ldr	r3, [r7, #8]
 404 0010 002B     		cmp	r3, #0
 405 0012 03D1     		bne	.L22
 505:ThirdParty/FreeRTOS/queue.c ****     {
 506:ThirdParty/FreeRTOS/queue.c ****         /* No RAM was allocated for the queue storage area, but PC head cannot
 507:ThirdParty/FreeRTOS/queue.c ****          * be set to NULL because NULL is used as a key to say the queue is used as
 508:ThirdParty/FreeRTOS/queue.c ****          * a mutex.  Therefore just set pcHead to point to the queue as a benign
 509:ThirdParty/FreeRTOS/queue.c ****          * value that is known to be within the memory map. */
 510:ThirdParty/FreeRTOS/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 406              		.loc 1 510 28
 407 0014 BB69     		ldr	r3, [r7, #24]
 408 0016 BA69     		ldr	r2, [r7, #24]
 409 0018 1A60     		str	r2, [r3]
 410 001a 02E0     		b	.L23
 411              	.L22:
 511:ThirdParty/FreeRTOS/queue.c ****     }
 512:ThirdParty/FreeRTOS/queue.c ****     else
 513:ThirdParty/FreeRTOS/queue.c ****     {
 514:ThirdParty/FreeRTOS/queue.c ****         /* Set the head to the start of the queue storage area. */
 515:ThirdParty/FreeRTOS/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 412              		.loc 1 515 28
 413 001c BB69     		ldr	r3, [r7, #24]
 414 001e 7A68     		ldr	r2, [r7, #4]
 415 0020 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 21


 416              	.L23:
 516:ThirdParty/FreeRTOS/queue.c ****     }
 517:ThirdParty/FreeRTOS/queue.c **** 
 518:ThirdParty/FreeRTOS/queue.c ****     /* Initialise the queue members as described where the queue type is
 519:ThirdParty/FreeRTOS/queue.c ****      * defined. */
 520:ThirdParty/FreeRTOS/queue.c ****     pxNewQueue->uxLength = uxQueueLength;
 417              		.loc 1 520 26
 418 0022 BB69     		ldr	r3, [r7, #24]
 419 0024 FA68     		ldr	r2, [r7, #12]
 420 0026 DA63     		str	r2, [r3, #60]
 521:ThirdParty/FreeRTOS/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 421              		.loc 1 521 28
 422 0028 BB69     		ldr	r3, [r7, #24]
 423 002a BA68     		ldr	r2, [r7, #8]
 424 002c 1A64     		str	r2, [r3, #64]
 522:ThirdParty/FreeRTOS/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 425              		.loc 1 522 14
 426 002e 0121     		movs	r1, #1
 427 0030 B869     		ldr	r0, [r7, #24]
 428 0032 FFF7FEFF 		bl	xQueueGenericReset
 523:ThirdParty/FreeRTOS/queue.c **** 
 524:ThirdParty/FreeRTOS/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 525:ThirdParty/FreeRTOS/queue.c ****     {
 526:ThirdParty/FreeRTOS/queue.c ****         pxNewQueue->ucQueueType = ucQueueType;
 429              		.loc 1 526 33
 430 0036 BB69     		ldr	r3, [r7, #24]
 431 0038 FA78     		ldrb	r2, [r7, #3]
 432 003a 83F84C20 		strb	r2, [r3, #76]
 527:ThirdParty/FreeRTOS/queue.c ****     }
 528:ThirdParty/FreeRTOS/queue.c ****     #endif /* configUSE_TRACE_FACILITY */
 529:ThirdParty/FreeRTOS/queue.c **** 
 530:ThirdParty/FreeRTOS/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 531:ThirdParty/FreeRTOS/queue.c ****     {
 532:ThirdParty/FreeRTOS/queue.c ****         pxNewQueue->pxQueueSetContainer = NULL;
 533:ThirdParty/FreeRTOS/queue.c ****     }
 534:ThirdParty/FreeRTOS/queue.c ****     #endif /* configUSE_QUEUE_SETS */
 535:ThirdParty/FreeRTOS/queue.c **** 
 536:ThirdParty/FreeRTOS/queue.c ****     traceQUEUE_CREATE( pxNewQueue );
 537:ThirdParty/FreeRTOS/queue.c **** }
 433              		.loc 1 537 1
 434 003e 00BF     		nop
 435 0040 1037     		adds	r7, r7, #16
 436              	.LCFI13:
 437              		.cfi_def_cfa_offset 8
 438 0042 BD46     		mov	sp, r7
 439              	.LCFI14:
 440              		.cfi_def_cfa_register 13
 441              		@ sp needed
 442 0044 80BD     		pop	{r7, pc}
 443              		.cfi_endproc
 444              	.LFE7:
 446              		.section	.text.prvInitialiseMutex,"ax",%progbits
 447              		.align	1
 448              		.syntax unified
 449              		.thumb
 450              		.thumb_func
 452              	prvInitialiseMutex:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 22


 453              	.LFB8:
 538:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 539:ThirdParty/FreeRTOS/queue.c **** 
 540:ThirdParty/FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 541:ThirdParty/FreeRTOS/queue.c **** 
 542:ThirdParty/FreeRTOS/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue )
 543:ThirdParty/FreeRTOS/queue.c ****     {
 454              		.loc 1 543 5
 455              		.cfi_startproc
 456              		@ args = 0, pretend = 0, frame = 8
 457              		@ frame_needed = 1, uses_anonymous_args = 0
 458 0000 80B5     		push	{r7, lr}
 459              	.LCFI15:
 460              		.cfi_def_cfa_offset 8
 461              		.cfi_offset 7, -8
 462              		.cfi_offset 14, -4
 463 0002 82B0     		sub	sp, sp, #8
 464              	.LCFI16:
 465              		.cfi_def_cfa_offset 16
 466 0004 00AF     		add	r7, sp, #0
 467              	.LCFI17:
 468              		.cfi_def_cfa_register 7
 469 0006 7860     		str	r0, [r7, #4]
 544:ThirdParty/FreeRTOS/queue.c ****         if( pxNewQueue != NULL )
 470              		.loc 1 544 11
 471 0008 7B68     		ldr	r3, [r7, #4]
 472 000a 002B     		cmp	r3, #0
 473 000c 0ED0     		beq	.L26
 545:ThirdParty/FreeRTOS/queue.c ****         {
 546:ThirdParty/FreeRTOS/queue.c ****             /* The queue create function will set all the queue structure members
 547:ThirdParty/FreeRTOS/queue.c ****             * correctly for a generic queue, but this function is creating a
 548:ThirdParty/FreeRTOS/queue.c ****             * mutex.  Overwrite those members that need to be set differently -
 549:ThirdParty/FreeRTOS/queue.c ****             * in particular the information required for priority inheritance. */
 550:ThirdParty/FreeRTOS/queue.c ****             pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 474              		.loc 1 550 51
 475 000e 7B68     		ldr	r3, [r7, #4]
 476 0010 0022     		movs	r2, #0
 477 0012 9A60     		str	r2, [r3, #8]
 551:ThirdParty/FreeRTOS/queue.c ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 478              		.loc 1 551 37
 479 0014 7B68     		ldr	r3, [r7, #4]
 480 0016 0022     		movs	r2, #0
 481 0018 1A60     		str	r2, [r3]
 552:ThirdParty/FreeRTOS/queue.c **** 
 553:ThirdParty/FreeRTOS/queue.c ****             /* In case this is a recursive mutex. */
 554:ThirdParty/FreeRTOS/queue.c ****             pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 482              		.loc 1 554 59
 483 001a 7B68     		ldr	r3, [r7, #4]
 484 001c 0022     		movs	r2, #0
 485 001e DA60     		str	r2, [r3, #12]
 555:ThirdParty/FreeRTOS/queue.c **** 
 556:ThirdParty/FreeRTOS/queue.c ****             traceCREATE_MUTEX( pxNewQueue );
 557:ThirdParty/FreeRTOS/queue.c **** 
 558:ThirdParty/FreeRTOS/queue.c ****             /* Start with the semaphore in the expected state. */
 559:ThirdParty/FreeRTOS/queue.c ****             ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 486              		.loc 1 559 22
 487 0020 0023     		movs	r3, #0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 23


 488 0022 0022     		movs	r2, #0
 489 0024 0021     		movs	r1, #0
 490 0026 7868     		ldr	r0, [r7, #4]
 491 0028 FFF7FEFF 		bl	xQueueGenericSend
 492              	.L26:
 560:ThirdParty/FreeRTOS/queue.c ****         }
 561:ThirdParty/FreeRTOS/queue.c ****         else
 562:ThirdParty/FreeRTOS/queue.c ****         {
 563:ThirdParty/FreeRTOS/queue.c ****             traceCREATE_MUTEX_FAILED();
 564:ThirdParty/FreeRTOS/queue.c ****         }
 565:ThirdParty/FreeRTOS/queue.c ****     }
 493              		.loc 1 565 5
 494 002c 00BF     		nop
 495 002e 0837     		adds	r7, r7, #8
 496              	.LCFI18:
 497              		.cfi_def_cfa_offset 8
 498 0030 BD46     		mov	sp, r7
 499              	.LCFI19:
 500              		.cfi_def_cfa_register 13
 501              		@ sp needed
 502 0032 80BD     		pop	{r7, pc}
 503              		.cfi_endproc
 504              	.LFE8:
 506              		.section	.text.xQueueCreateMutex,"ax",%progbits
 507              		.align	1
 508              		.global	xQueueCreateMutex
 509              		.syntax unified
 510              		.thumb
 511              		.thumb_func
 513              	xQueueCreateMutex:
 514              	.LFB9:
 566:ThirdParty/FreeRTOS/queue.c **** 
 567:ThirdParty/FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 568:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 569:ThirdParty/FreeRTOS/queue.c **** 
 570:ThirdParty/FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 571:ThirdParty/FreeRTOS/queue.c **** 
 572:ThirdParty/FreeRTOS/queue.c ****     QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 573:ThirdParty/FreeRTOS/queue.c ****     {
 515              		.loc 1 573 5
 516              		.cfi_startproc
 517              		@ args = 0, pretend = 0, frame = 24
 518              		@ frame_needed = 1, uses_anonymous_args = 0
 519 0000 80B5     		push	{r7, lr}
 520              	.LCFI20:
 521              		.cfi_def_cfa_offset 8
 522              		.cfi_offset 7, -8
 523              		.cfi_offset 14, -4
 524 0002 86B0     		sub	sp, sp, #24
 525              	.LCFI21:
 526              		.cfi_def_cfa_offset 32
 527 0004 00AF     		add	r7, sp, #0
 528              	.LCFI22:
 529              		.cfi_def_cfa_register 7
 530 0006 0346     		mov	r3, r0
 531 0008 FB71     		strb	r3, [r7, #7]
 574:ThirdParty/FreeRTOS/queue.c ****         QueueHandle_t xNewQueue;
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 24


 575:ThirdParty/FreeRTOS/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 532              		.loc 1 575 27
 533 000a 0123     		movs	r3, #1
 534 000c 7B61     		str	r3, [r7, #20]
 535              		.loc 1 575 62
 536 000e 0023     		movs	r3, #0
 537 0010 3B61     		str	r3, [r7, #16]
 576:ThirdParty/FreeRTOS/queue.c **** 
 577:ThirdParty/FreeRTOS/queue.c ****         xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 538              		.loc 1 577 21
 539 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 540 0014 1A46     		mov	r2, r3
 541 0016 3969     		ldr	r1, [r7, #16]
 542 0018 7869     		ldr	r0, [r7, #20]
 543 001a FFF7FEFF 		bl	xQueueGenericCreate
 544 001e F860     		str	r0, [r7, #12]
 578:ThirdParty/FreeRTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 545              		.loc 1 578 9
 546 0020 F868     		ldr	r0, [r7, #12]
 547 0022 FFF7FEFF 		bl	prvInitialiseMutex
 579:ThirdParty/FreeRTOS/queue.c **** 
 580:ThirdParty/FreeRTOS/queue.c ****         return xNewQueue;
 548              		.loc 1 580 16
 549 0026 FB68     		ldr	r3, [r7, #12]
 581:ThirdParty/FreeRTOS/queue.c ****     }
 550              		.loc 1 581 5
 551 0028 1846     		mov	r0, r3
 552 002a 1837     		adds	r7, r7, #24
 553              	.LCFI23:
 554              		.cfi_def_cfa_offset 8
 555 002c BD46     		mov	sp, r7
 556              	.LCFI24:
 557              		.cfi_def_cfa_register 13
 558              		@ sp needed
 559 002e 80BD     		pop	{r7, pc}
 560              		.cfi_endproc
 561              	.LFE9:
 563              		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 564              		.align	1
 565              		.global	xQueueGiveMutexRecursive
 566              		.syntax unified
 567              		.thumb
 568              		.thumb_func
 570              	xQueueGiveMutexRecursive:
 571              	.LFB10:
 582:ThirdParty/FreeRTOS/queue.c **** 
 583:ThirdParty/FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 584:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 585:ThirdParty/FreeRTOS/queue.c **** 
 586:ThirdParty/FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 587:ThirdParty/FreeRTOS/queue.c **** 
 588:ThirdParty/FreeRTOS/queue.c ****     QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
 589:ThirdParty/FreeRTOS/queue.c ****                                            StaticQueue_t * pxStaticQueue )
 590:ThirdParty/FreeRTOS/queue.c ****     {
 591:ThirdParty/FreeRTOS/queue.c ****         QueueHandle_t xNewQueue;
 592:ThirdParty/FreeRTOS/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 593:ThirdParty/FreeRTOS/queue.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 25


 594:ThirdParty/FreeRTOS/queue.c ****         /* Prevent compiler warnings about unused parameters if
 595:ThirdParty/FreeRTOS/queue.c ****          * configUSE_TRACE_FACILITY does not equal 1. */
 596:ThirdParty/FreeRTOS/queue.c ****         ( void ) ucQueueType;
 597:ThirdParty/FreeRTOS/queue.c **** 
 598:ThirdParty/FreeRTOS/queue.c ****         xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQ
 599:ThirdParty/FreeRTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 600:ThirdParty/FreeRTOS/queue.c **** 
 601:ThirdParty/FreeRTOS/queue.c ****         return xNewQueue;
 602:ThirdParty/FreeRTOS/queue.c ****     }
 603:ThirdParty/FreeRTOS/queue.c **** 
 604:ThirdParty/FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 605:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 606:ThirdParty/FreeRTOS/queue.c **** 
 607:ThirdParty/FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 608:ThirdParty/FreeRTOS/queue.c **** 
 609:ThirdParty/FreeRTOS/queue.c ****     TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 610:ThirdParty/FreeRTOS/queue.c ****     {
 611:ThirdParty/FreeRTOS/queue.c ****         TaskHandle_t pxReturn;
 612:ThirdParty/FreeRTOS/queue.c ****         Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 613:ThirdParty/FreeRTOS/queue.c **** 
 614:ThirdParty/FreeRTOS/queue.c ****         configASSERT( xSemaphore );
 615:ThirdParty/FreeRTOS/queue.c **** 
 616:ThirdParty/FreeRTOS/queue.c ****         /* This function is called by xSemaphoreGetMutexHolder(), and should not
 617:ThirdParty/FreeRTOS/queue.c ****          * be called directly.  Note:  This is a good way of determining if the
 618:ThirdParty/FreeRTOS/queue.c ****          * calling task is the mutex holder, but not a good way of determining the
 619:ThirdParty/FreeRTOS/queue.c ****          * identity of the mutex holder, as the holder may change between the
 620:ThirdParty/FreeRTOS/queue.c ****          * following critical section exiting and the function returning. */
 621:ThirdParty/FreeRTOS/queue.c ****         taskENTER_CRITICAL();
 622:ThirdParty/FreeRTOS/queue.c ****         {
 623:ThirdParty/FreeRTOS/queue.c ****             if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 624:ThirdParty/FreeRTOS/queue.c ****             {
 625:ThirdParty/FreeRTOS/queue.c ****                 pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 626:ThirdParty/FreeRTOS/queue.c ****             }
 627:ThirdParty/FreeRTOS/queue.c ****             else
 628:ThirdParty/FreeRTOS/queue.c ****             {
 629:ThirdParty/FreeRTOS/queue.c ****                 pxReturn = NULL;
 630:ThirdParty/FreeRTOS/queue.c ****             }
 631:ThirdParty/FreeRTOS/queue.c ****         }
 632:ThirdParty/FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
 633:ThirdParty/FreeRTOS/queue.c **** 
 634:ThirdParty/FreeRTOS/queue.c ****         return pxReturn;
 635:ThirdParty/FreeRTOS/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 636:ThirdParty/FreeRTOS/queue.c **** 
 637:ThirdParty/FreeRTOS/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 638:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 639:ThirdParty/FreeRTOS/queue.c **** 
 640:ThirdParty/FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 641:ThirdParty/FreeRTOS/queue.c **** 
 642:ThirdParty/FreeRTOS/queue.c ****     TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 643:ThirdParty/FreeRTOS/queue.c ****     {
 644:ThirdParty/FreeRTOS/queue.c ****         TaskHandle_t pxReturn;
 645:ThirdParty/FreeRTOS/queue.c **** 
 646:ThirdParty/FreeRTOS/queue.c ****         configASSERT( xSemaphore );
 647:ThirdParty/FreeRTOS/queue.c **** 
 648:ThirdParty/FreeRTOS/queue.c ****         /* Mutexes cannot be used in interrupt service routines, so the mutex
 649:ThirdParty/FreeRTOS/queue.c ****          * holder should not change in an ISR, and therefore a critical section is
 650:ThirdParty/FreeRTOS/queue.c ****          * not required here. */
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 26


 651:ThirdParty/FreeRTOS/queue.c ****         if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 652:ThirdParty/FreeRTOS/queue.c ****         {
 653:ThirdParty/FreeRTOS/queue.c ****             pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 654:ThirdParty/FreeRTOS/queue.c ****         }
 655:ThirdParty/FreeRTOS/queue.c ****         else
 656:ThirdParty/FreeRTOS/queue.c ****         {
 657:ThirdParty/FreeRTOS/queue.c ****             pxReturn = NULL;
 658:ThirdParty/FreeRTOS/queue.c ****         }
 659:ThirdParty/FreeRTOS/queue.c **** 
 660:ThirdParty/FreeRTOS/queue.c ****         return pxReturn;
 661:ThirdParty/FreeRTOS/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 662:ThirdParty/FreeRTOS/queue.c **** 
 663:ThirdParty/FreeRTOS/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 664:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 665:ThirdParty/FreeRTOS/queue.c **** 
 666:ThirdParty/FreeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 667:ThirdParty/FreeRTOS/queue.c **** 
 668:ThirdParty/FreeRTOS/queue.c ****     BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 669:ThirdParty/FreeRTOS/queue.c ****     {
 572              		.loc 1 669 5
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 24
 575              		@ frame_needed = 1, uses_anonymous_args = 0
 576 0000 90B5     		push	{r4, r7, lr}
 577              	.LCFI25:
 578              		.cfi_def_cfa_offset 12
 579              		.cfi_offset 4, -12
 580              		.cfi_offset 7, -8
 581              		.cfi_offset 14, -4
 582 0002 87B0     		sub	sp, sp, #28
 583              	.LCFI26:
 584              		.cfi_def_cfa_offset 40
 585 0004 00AF     		add	r7, sp, #0
 586              	.LCFI27:
 587              		.cfi_def_cfa_register 7
 588 0006 7860     		str	r0, [r7, #4]
 670:ThirdParty/FreeRTOS/queue.c ****         BaseType_t xReturn;
 671:ThirdParty/FreeRTOS/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 589              		.loc 1 671 25
 590 0008 7B68     		ldr	r3, [r7, #4]
 591 000a 3B61     		str	r3, [r7, #16]
 672:ThirdParty/FreeRTOS/queue.c **** 
 673:ThirdParty/FreeRTOS/queue.c ****         configASSERT( pxMutex );
 592              		.loc 1 673 9
 593 000c 3B69     		ldr	r3, [r7, #16]
 594 000e 002B     		cmp	r3, #0
 595 0010 0AD1     		bne	.L30
 596              	.LBB120:
 597              	.LBB121:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 598              		.loc 2 198 9
 599              		.syntax unified
 600              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 601 0012 4FF05003 			mov r3, #80												
 602 0016 83F31188 		msr basepri, r3											
 603 001a BFF36F8F 		isb														
 604 001e BFF34F8F 		dsb														
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 27


 605              	
 606              	@ 0 "" 2
 607              		.thumb
 608              		.syntax unified
 609 0022 FB60     		str	r3, [r7, #12]
 610              		.loc 2 206 5
 611 0024 00BF     		nop
 612              	.L31:
 613              	.LBE121:
 614              	.LBE120:
 615              		.loc 1 673 9 discriminator 1
 616 0026 FEE7     		b	.L31
 617              	.L30:
 674:ThirdParty/FreeRTOS/queue.c **** 
 675:ThirdParty/FreeRTOS/queue.c ****         /* If this is the task that holds the mutex then xMutexHolder will not
 676:ThirdParty/FreeRTOS/queue.c ****          * change outside of this task.  If this task does not hold the mutex then
 677:ThirdParty/FreeRTOS/queue.c ****          * pxMutexHolder can never coincidentally equal the tasks handle, and as
 678:ThirdParty/FreeRTOS/queue.c ****          * this is the only condition we are interested in it does not matter if
 679:ThirdParty/FreeRTOS/queue.c ****          * pxMutexHolder is accessed simultaneously by another task.  Therefore no
 680:ThirdParty/FreeRTOS/queue.c ****          * mutual exclusion is required to test the pxMutexHolder variable. */
 681:ThirdParty/FreeRTOS/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 618              		.loc 1 681 34
 619 0028 3B69     		ldr	r3, [r7, #16]
 620 002a 9C68     		ldr	r4, [r3, #8]
 621              		.loc 1 681 51
 622 002c FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 623 0030 0346     		mov	r3, r0
 624              		.loc 1 681 11
 625 0032 9C42     		cmp	r4, r3
 626 0034 11D1     		bne	.L32
 682:ThirdParty/FreeRTOS/queue.c ****         {
 683:ThirdParty/FreeRTOS/queue.c ****             traceGIVE_MUTEX_RECURSIVE( pxMutex );
 684:ThirdParty/FreeRTOS/queue.c **** 
 685:ThirdParty/FreeRTOS/queue.c ****             /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 686:ThirdParty/FreeRTOS/queue.c ****              * the task handle, therefore no underflow check is required.  Also,
 687:ThirdParty/FreeRTOS/queue.c ****              * uxRecursiveCallCount is only modified by the mutex holder, and as
 688:ThirdParty/FreeRTOS/queue.c ****              * there can only be one, no mutual exclusion is required to modify the
 689:ThirdParty/FreeRTOS/queue.c ****              * uxRecursiveCallCount member. */
 690:ThirdParty/FreeRTOS/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 627              		.loc 1 690 36
 628 0036 3B69     		ldr	r3, [r7, #16]
 629 0038 DB68     		ldr	r3, [r3, #12]
 630              		.loc 1 690 59
 631 003a 5A1E     		subs	r2, r3, #1
 632 003c 3B69     		ldr	r3, [r7, #16]
 633 003e DA60     		str	r2, [r3, #12]
 691:ThirdParty/FreeRTOS/queue.c **** 
 692:ThirdParty/FreeRTOS/queue.c ****             /* Has the recursive call count unwound to 0? */
 693:ThirdParty/FreeRTOS/queue.c ****             if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 634              		.loc 1 693 38
 635 0040 3B69     		ldr	r3, [r7, #16]
 636 0042 DB68     		ldr	r3, [r3, #12]
 637              		.loc 1 693 15
 638 0044 002B     		cmp	r3, #0
 639 0046 05D1     		bne	.L33
 694:ThirdParty/FreeRTOS/queue.c ****             {
 695:ThirdParty/FreeRTOS/queue.c ****                 /* Return the mutex.  This will automatically unblock any other
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 28


 696:ThirdParty/FreeRTOS/queue.c ****                  * task that might be waiting to access the mutex. */
 697:ThirdParty/FreeRTOS/queue.c ****                 ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO
 640              		.loc 1 697 26
 641 0048 0023     		movs	r3, #0
 642 004a 0022     		movs	r2, #0
 643 004c 0021     		movs	r1, #0
 644 004e 3869     		ldr	r0, [r7, #16]
 645 0050 FFF7FEFF 		bl	xQueueGenericSend
 646              	.L33:
 698:ThirdParty/FreeRTOS/queue.c ****             }
 699:ThirdParty/FreeRTOS/queue.c ****             else
 700:ThirdParty/FreeRTOS/queue.c ****             {
 701:ThirdParty/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 702:ThirdParty/FreeRTOS/queue.c ****             }
 703:ThirdParty/FreeRTOS/queue.c **** 
 704:ThirdParty/FreeRTOS/queue.c ****             xReturn = pdPASS;
 647              		.loc 1 704 21
 648 0054 0123     		movs	r3, #1
 649 0056 7B61     		str	r3, [r7, #20]
 650 0058 01E0     		b	.L34
 651              	.L32:
 705:ThirdParty/FreeRTOS/queue.c ****         }
 706:ThirdParty/FreeRTOS/queue.c ****         else
 707:ThirdParty/FreeRTOS/queue.c ****         {
 708:ThirdParty/FreeRTOS/queue.c ****             /* The mutex cannot be given because the calling task is not the
 709:ThirdParty/FreeRTOS/queue.c ****              * holder. */
 710:ThirdParty/FreeRTOS/queue.c ****             xReturn = pdFAIL;
 652              		.loc 1 710 21
 653 005a 0023     		movs	r3, #0
 654 005c 7B61     		str	r3, [r7, #20]
 655              	.L34:
 711:ThirdParty/FreeRTOS/queue.c **** 
 712:ThirdParty/FreeRTOS/queue.c ****             traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 713:ThirdParty/FreeRTOS/queue.c ****         }
 714:ThirdParty/FreeRTOS/queue.c **** 
 715:ThirdParty/FreeRTOS/queue.c ****         return xReturn;
 656              		.loc 1 715 16
 657 005e 7B69     		ldr	r3, [r7, #20]
 716:ThirdParty/FreeRTOS/queue.c ****     }
 658              		.loc 1 716 5
 659 0060 1846     		mov	r0, r3
 660 0062 1C37     		adds	r7, r7, #28
 661              	.LCFI28:
 662              		.cfi_def_cfa_offset 12
 663 0064 BD46     		mov	sp, r7
 664              	.LCFI29:
 665              		.cfi_def_cfa_register 13
 666              		@ sp needed
 667 0066 90BD     		pop	{r4, r7, pc}
 668              		.cfi_endproc
 669              	.LFE10:
 671              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 672              		.align	1
 673              		.global	xQueueTakeMutexRecursive
 674              		.syntax unified
 675              		.thumb
 676              		.thumb_func
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 29


 678              	xQueueTakeMutexRecursive:
 679              	.LFB11:
 717:ThirdParty/FreeRTOS/queue.c **** 
 718:ThirdParty/FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 719:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 720:ThirdParty/FreeRTOS/queue.c **** 
 721:ThirdParty/FreeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 722:ThirdParty/FreeRTOS/queue.c **** 
 723:ThirdParty/FreeRTOS/queue.c ****     BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
 724:ThirdParty/FreeRTOS/queue.c ****                                          TickType_t xTicksToWait )
 725:ThirdParty/FreeRTOS/queue.c ****     {
 680              		.loc 1 725 5
 681              		.cfi_startproc
 682              		@ args = 0, pretend = 0, frame = 24
 683              		@ frame_needed = 1, uses_anonymous_args = 0
 684 0000 90B5     		push	{r4, r7, lr}
 685              	.LCFI30:
 686              		.cfi_def_cfa_offset 12
 687              		.cfi_offset 4, -12
 688              		.cfi_offset 7, -8
 689              		.cfi_offset 14, -4
 690 0002 87B0     		sub	sp, sp, #28
 691              	.LCFI31:
 692              		.cfi_def_cfa_offset 40
 693 0004 00AF     		add	r7, sp, #0
 694              	.LCFI32:
 695              		.cfi_def_cfa_register 7
 696 0006 7860     		str	r0, [r7, #4]
 697 0008 3960     		str	r1, [r7]
 726:ThirdParty/FreeRTOS/queue.c ****         BaseType_t xReturn;
 727:ThirdParty/FreeRTOS/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 698              		.loc 1 727 25
 699 000a 7B68     		ldr	r3, [r7, #4]
 700 000c 3B61     		str	r3, [r7, #16]
 728:ThirdParty/FreeRTOS/queue.c **** 
 729:ThirdParty/FreeRTOS/queue.c ****         configASSERT( pxMutex );
 701              		.loc 1 729 9
 702 000e 3B69     		ldr	r3, [r7, #16]
 703 0010 002B     		cmp	r3, #0
 704 0012 0AD1     		bne	.L37
 705              	.LBB122:
 706              	.LBB123:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 707              		.loc 2 198 9
 708              		.syntax unified
 709              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 710 0014 4FF05003 			mov r3, #80												
 711 0018 83F31188 		msr basepri, r3											
 712 001c BFF36F8F 		isb														
 713 0020 BFF34F8F 		dsb														
 714              	
 715              	@ 0 "" 2
 716              		.thumb
 717              		.syntax unified
 718 0024 FB60     		str	r3, [r7, #12]
 719              		.loc 2 206 5
 720 0026 00BF     		nop
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 30


 721              	.L38:
 722              	.LBE123:
 723              	.LBE122:
 724              		.loc 1 729 9 discriminator 1
 725 0028 FEE7     		b	.L38
 726              	.L37:
 730:ThirdParty/FreeRTOS/queue.c **** 
 731:ThirdParty/FreeRTOS/queue.c ****         /* Comments regarding mutual exclusion as per those within
 732:ThirdParty/FreeRTOS/queue.c ****          * xQueueGiveMutexRecursive(). */
 733:ThirdParty/FreeRTOS/queue.c **** 
 734:ThirdParty/FreeRTOS/queue.c ****         traceTAKE_MUTEX_RECURSIVE( pxMutex );
 735:ThirdParty/FreeRTOS/queue.c **** 
 736:ThirdParty/FreeRTOS/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 727              		.loc 1 736 34
 728 002a 3B69     		ldr	r3, [r7, #16]
 729 002c 9C68     		ldr	r4, [r3, #8]
 730              		.loc 1 736 51
 731 002e FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 732 0032 0346     		mov	r3, r0
 733              		.loc 1 736 11
 734 0034 9C42     		cmp	r4, r3
 735 0036 07D1     		bne	.L39
 737:ThirdParty/FreeRTOS/queue.c ****         {
 738:ThirdParty/FreeRTOS/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 736              		.loc 1 738 36
 737 0038 3B69     		ldr	r3, [r7, #16]
 738 003a DB68     		ldr	r3, [r3, #12]
 739              		.loc 1 738 59
 740 003c 5A1C     		adds	r2, r3, #1
 741 003e 3B69     		ldr	r3, [r7, #16]
 742 0040 DA60     		str	r2, [r3, #12]
 739:ThirdParty/FreeRTOS/queue.c ****             xReturn = pdPASS;
 743              		.loc 1 739 21
 744 0042 0123     		movs	r3, #1
 745 0044 7B61     		str	r3, [r7, #20]
 746 0046 0CE0     		b	.L40
 747              	.L39:
 740:ThirdParty/FreeRTOS/queue.c ****         }
 741:ThirdParty/FreeRTOS/queue.c ****         else
 742:ThirdParty/FreeRTOS/queue.c ****         {
 743:ThirdParty/FreeRTOS/queue.c ****             xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 748              		.loc 1 743 23
 749 0048 3968     		ldr	r1, [r7]
 750 004a 3869     		ldr	r0, [r7, #16]
 751 004c FFF7FEFF 		bl	xQueueSemaphoreTake
 752 0050 7861     		str	r0, [r7, #20]
 744:ThirdParty/FreeRTOS/queue.c **** 
 745:ThirdParty/FreeRTOS/queue.c ****             /* pdPASS will only be returned if the mutex was successfully
 746:ThirdParty/FreeRTOS/queue.c ****              * obtained.  The calling task may have entered the Blocked state
 747:ThirdParty/FreeRTOS/queue.c ****              * before reaching here. */
 748:ThirdParty/FreeRTOS/queue.c ****             if( xReturn != pdFAIL )
 753              		.loc 1 748 15
 754 0052 7B69     		ldr	r3, [r7, #20]
 755 0054 002B     		cmp	r3, #0
 756 0056 04D0     		beq	.L40
 749:ThirdParty/FreeRTOS/queue.c ****             {
 750:ThirdParty/FreeRTOS/queue.c ****                 ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 31


 757              		.loc 1 750 40
 758 0058 3B69     		ldr	r3, [r7, #16]
 759 005a DB68     		ldr	r3, [r3, #12]
 760              		.loc 1 750 63
 761 005c 5A1C     		adds	r2, r3, #1
 762 005e 3B69     		ldr	r3, [r7, #16]
 763 0060 DA60     		str	r2, [r3, #12]
 764              	.L40:
 751:ThirdParty/FreeRTOS/queue.c ****             }
 752:ThirdParty/FreeRTOS/queue.c ****             else
 753:ThirdParty/FreeRTOS/queue.c ****             {
 754:ThirdParty/FreeRTOS/queue.c ****                 traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 755:ThirdParty/FreeRTOS/queue.c ****             }
 756:ThirdParty/FreeRTOS/queue.c ****         }
 757:ThirdParty/FreeRTOS/queue.c **** 
 758:ThirdParty/FreeRTOS/queue.c ****         return xReturn;
 765              		.loc 1 758 16
 766 0062 7B69     		ldr	r3, [r7, #20]
 759:ThirdParty/FreeRTOS/queue.c ****     }
 767              		.loc 1 759 5
 768 0064 1846     		mov	r0, r3
 769 0066 1C37     		adds	r7, r7, #28
 770              	.LCFI33:
 771              		.cfi_def_cfa_offset 12
 772 0068 BD46     		mov	sp, r7
 773              	.LCFI34:
 774              		.cfi_def_cfa_register 13
 775              		@ sp needed
 776 006a 90BD     		pop	{r4, r7, pc}
 777              		.cfi_endproc
 778              	.LFE11:
 780              		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 781              		.align	1
 782              		.global	xQueueCreateCountingSemaphore
 783              		.syntax unified
 784              		.thumb
 785              		.thumb_func
 787              	xQueueCreateCountingSemaphore:
 788              	.LFB12:
 760:ThirdParty/FreeRTOS/queue.c **** 
 761:ThirdParty/FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 762:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 763:ThirdParty/FreeRTOS/queue.c **** 
 764:ThirdParty/FreeRTOS/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 765:ThirdParty/FreeRTOS/queue.c **** 
 766:ThirdParty/FreeRTOS/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
 767:ThirdParty/FreeRTOS/queue.c ****                                                        const UBaseType_t uxInitialCount,
 768:ThirdParty/FreeRTOS/queue.c ****                                                        StaticQueue_t * pxStaticQueue )
 769:ThirdParty/FreeRTOS/queue.c ****     {
 770:ThirdParty/FreeRTOS/queue.c ****         QueueHandle_t xHandle = NULL;
 771:ThirdParty/FreeRTOS/queue.c **** 
 772:ThirdParty/FreeRTOS/queue.c ****         if( ( uxMaxCount != 0 ) &&
 773:ThirdParty/FreeRTOS/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 774:ThirdParty/FreeRTOS/queue.c ****         {
 775:ThirdParty/FreeRTOS/queue.c ****             xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL
 776:ThirdParty/FreeRTOS/queue.c **** 
 777:ThirdParty/FreeRTOS/queue.c ****             if( xHandle != NULL )
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 32


 778:ThirdParty/FreeRTOS/queue.c ****             {
 779:ThirdParty/FreeRTOS/queue.c ****                 ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 780:ThirdParty/FreeRTOS/queue.c **** 
 781:ThirdParty/FreeRTOS/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE();
 782:ThirdParty/FreeRTOS/queue.c ****             }
 783:ThirdParty/FreeRTOS/queue.c ****             else
 784:ThirdParty/FreeRTOS/queue.c ****             {
 785:ThirdParty/FreeRTOS/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE_FAILED();
 786:ThirdParty/FreeRTOS/queue.c ****             }
 787:ThirdParty/FreeRTOS/queue.c ****         }
 788:ThirdParty/FreeRTOS/queue.c ****         else
 789:ThirdParty/FreeRTOS/queue.c ****         {
 790:ThirdParty/FreeRTOS/queue.c ****             configASSERT( xHandle );
 791:ThirdParty/FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 792:ThirdParty/FreeRTOS/queue.c ****         }
 793:ThirdParty/FreeRTOS/queue.c **** 
 794:ThirdParty/FreeRTOS/queue.c ****         return xHandle;
 795:ThirdParty/FreeRTOS/queue.c ****     }
 796:ThirdParty/FreeRTOS/queue.c **** 
 797:ThirdParty/FreeRTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 798:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 799:ThirdParty/FreeRTOS/queue.c **** 
 800:ThirdParty/FreeRTOS/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 801:ThirdParty/FreeRTOS/queue.c **** 
 802:ThirdParty/FreeRTOS/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
 803:ThirdParty/FreeRTOS/queue.c ****                                                  const UBaseType_t uxInitialCount )
 804:ThirdParty/FreeRTOS/queue.c ****     {
 789              		.loc 1 804 5
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 16
 792              		@ frame_needed = 1, uses_anonymous_args = 0
 793 0000 80B5     		push	{r7, lr}
 794              	.LCFI35:
 795              		.cfi_def_cfa_offset 8
 796              		.cfi_offset 7, -8
 797              		.cfi_offset 14, -4
 798 0002 84B0     		sub	sp, sp, #16
 799              	.LCFI36:
 800              		.cfi_def_cfa_offset 24
 801 0004 00AF     		add	r7, sp, #0
 802              	.LCFI37:
 803              		.cfi_def_cfa_register 7
 804 0006 7860     		str	r0, [r7, #4]
 805 0008 3960     		str	r1, [r7]
 805:ThirdParty/FreeRTOS/queue.c ****         QueueHandle_t xHandle = NULL;
 806              		.loc 1 805 23
 807 000a 0023     		movs	r3, #0
 808 000c FB60     		str	r3, [r7, #12]
 806:ThirdParty/FreeRTOS/queue.c **** 
 807:ThirdParty/FreeRTOS/queue.c ****         if( ( uxMaxCount != 0 ) &&
 809              		.loc 1 807 11
 810 000e 7B68     		ldr	r3, [r7, #4]
 811 0010 002B     		cmp	r3, #0
 812 0012 10D0     		beq	.L43
 813              		.loc 1 807 33 discriminator 1
 814 0014 3A68     		ldr	r2, [r7]
 815 0016 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 33


 816 0018 9A42     		cmp	r2, r3
 817 001a 0CD8     		bhi	.L43
 808:ThirdParty/FreeRTOS/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 809:ThirdParty/FreeRTOS/queue.c ****         {
 810:ThirdParty/FreeRTOS/queue.c ****             xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE
 818              		.loc 1 810 23
 819 001c 0222     		movs	r2, #2
 820 001e 0021     		movs	r1, #0
 821 0020 7868     		ldr	r0, [r7, #4]
 822 0022 FFF7FEFF 		bl	xQueueGenericCreate
 823 0026 F860     		str	r0, [r7, #12]
 811:ThirdParty/FreeRTOS/queue.c **** 
 812:ThirdParty/FreeRTOS/queue.c ****             if( xHandle != NULL )
 824              		.loc 1 812 15
 825 0028 FB68     		ldr	r3, [r7, #12]
 826 002a 002B     		cmp	r3, #0
 827 002c 11D0     		beq	.L45
 813:ThirdParty/FreeRTOS/queue.c ****             {
 814:ThirdParty/FreeRTOS/queue.c ****                 ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 828              		.loc 1 814 62
 829 002e FB68     		ldr	r3, [r7, #12]
 830 0030 3A68     		ldr	r2, [r7]
 831 0032 9A63     		str	r2, [r3, #56]
 812:ThirdParty/FreeRTOS/queue.c ****             {
 832              		.loc 1 812 15
 833 0034 0DE0     		b	.L45
 834              	.L43:
 815:ThirdParty/FreeRTOS/queue.c **** 
 816:ThirdParty/FreeRTOS/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE();
 817:ThirdParty/FreeRTOS/queue.c ****             }
 818:ThirdParty/FreeRTOS/queue.c ****             else
 819:ThirdParty/FreeRTOS/queue.c ****             {
 820:ThirdParty/FreeRTOS/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE_FAILED();
 821:ThirdParty/FreeRTOS/queue.c ****             }
 822:ThirdParty/FreeRTOS/queue.c ****         }
 823:ThirdParty/FreeRTOS/queue.c ****         else
 824:ThirdParty/FreeRTOS/queue.c ****         {
 825:ThirdParty/FreeRTOS/queue.c ****             configASSERT( xHandle );
 835              		.loc 1 825 13
 836 0036 FB68     		ldr	r3, [r7, #12]
 837 0038 002B     		cmp	r3, #0
 838 003a 0AD1     		bne	.L45
 839              	.LBB124:
 840              	.LBB125:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 841              		.loc 2 198 9
 842              		.syntax unified
 843              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 844 003c 4FF05003 			mov r3, #80												
 845 0040 83F31188 		msr basepri, r3											
 846 0044 BFF36F8F 		isb														
 847 0048 BFF34F8F 		dsb														
 848              	
 849              	@ 0 "" 2
 850              		.thumb
 851              		.syntax unified
 852 004c BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 34


 853              		.loc 2 206 5
 854 004e 00BF     		nop
 855              	.L46:
 856              	.LBE125:
 857              	.LBE124:
 858              		.loc 1 825 13 discriminator 1
 859 0050 FEE7     		b	.L46
 860              	.L45:
 826:ThirdParty/FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 827:ThirdParty/FreeRTOS/queue.c ****         }
 828:ThirdParty/FreeRTOS/queue.c **** 
 829:ThirdParty/FreeRTOS/queue.c ****         return xHandle;
 861              		.loc 1 829 16
 862 0052 FB68     		ldr	r3, [r7, #12]
 830:ThirdParty/FreeRTOS/queue.c ****     }
 863              		.loc 1 830 5
 864 0054 1846     		mov	r0, r3
 865 0056 1037     		adds	r7, r7, #16
 866              	.LCFI38:
 867              		.cfi_def_cfa_offset 8
 868 0058 BD46     		mov	sp, r7
 869              	.LCFI39:
 870              		.cfi_def_cfa_register 13
 871              		@ sp needed
 872 005a 80BD     		pop	{r7, pc}
 873              		.cfi_endproc
 874              	.LFE12:
 876              		.section	.text.xQueueGenericSend,"ax",%progbits
 877              		.align	1
 878              		.global	xQueueGenericSend
 879              		.syntax unified
 880              		.thumb
 881              		.thumb_func
 883              	xQueueGenericSend:
 884              	.LFB13:
 831:ThirdParty/FreeRTOS/queue.c **** 
 832:ThirdParty/FreeRTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 833:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 834:ThirdParty/FreeRTOS/queue.c **** 
 835:ThirdParty/FreeRTOS/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
 836:ThirdParty/FreeRTOS/queue.c ****                               const void * const pvItemToQueue,
 837:ThirdParty/FreeRTOS/queue.c ****                               TickType_t xTicksToWait,
 838:ThirdParty/FreeRTOS/queue.c ****                               const BaseType_t xCopyPosition )
 839:ThirdParty/FreeRTOS/queue.c **** {
 885              		.loc 1 839 1
 886              		.cfi_startproc
 887              		@ args = 0, pretend = 0, frame = 56
 888              		@ frame_needed = 1, uses_anonymous_args = 0
 889 0000 80B5     		push	{r7, lr}
 890              	.LCFI40:
 891              		.cfi_def_cfa_offset 8
 892              		.cfi_offset 7, -8
 893              		.cfi_offset 14, -4
 894 0002 8EB0     		sub	sp, sp, #56
 895              	.LCFI41:
 896              		.cfi_def_cfa_offset 64
 897 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 35


 898              	.LCFI42:
 899              		.cfi_def_cfa_register 7
 900 0006 F860     		str	r0, [r7, #12]
 901 0008 B960     		str	r1, [r7, #8]
 902 000a 7A60     		str	r2, [r7, #4]
 903 000c 3B60     		str	r3, [r7]
 840:ThirdParty/FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 904              		.loc 1 840 16
 905 000e 0023     		movs	r3, #0
 906 0010 7B63     		str	r3, [r7, #52]
 841:ThirdParty/FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
 842:ThirdParty/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 907              		.loc 1 842 21
 908 0012 FB68     		ldr	r3, [r7, #12]
 909 0014 3B63     		str	r3, [r7, #48]
 843:ThirdParty/FreeRTOS/queue.c **** 
 844:ThirdParty/FreeRTOS/queue.c ****     configASSERT( pxQueue );
 910              		.loc 1 844 5
 911 0016 3B6B     		ldr	r3, [r7, #48]
 912 0018 002B     		cmp	r3, #0
 913 001a 0AD1     		bne	.L49
 914              	.LBB126:
 915              	.LBB127:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 916              		.loc 2 198 9
 917              		.syntax unified
 918              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 919 001c 4FF05003 			mov r3, #80												
 920 0020 83F31188 		msr basepri, r3											
 921 0024 BFF36F8F 		isb														
 922 0028 BFF34F8F 		dsb														
 923              	
 924              	@ 0 "" 2
 925              		.thumb
 926              		.syntax unified
 927 002c BB62     		str	r3, [r7, #40]
 928              		.loc 2 206 5
 929 002e 00BF     		nop
 930              	.L50:
 931              	.LBE127:
 932              	.LBE126:
 933              		.loc 1 844 5 discriminator 1
 934 0030 FEE7     		b	.L50
 935              	.L49:
 845:ThirdParty/FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 936              		.loc 1 845 5
 937 0032 BB68     		ldr	r3, [r7, #8]
 938 0034 002B     		cmp	r3, #0
 939 0036 03D1     		bne	.L51
 940              		.loc 1 845 5 is_stmt 0 discriminator 2
 941 0038 3B6B     		ldr	r3, [r7, #48]
 942 003a 1B6C     		ldr	r3, [r3, #64]
 943 003c 002B     		cmp	r3, #0
 944 003e 01D1     		bne	.L52
 945              	.L51:
 946              		.loc 1 845 5 discriminator 3
 947 0040 0123     		movs	r3, #1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 36


 948 0042 00E0     		b	.L53
 949              	.L52:
 950              		.loc 1 845 5 discriminator 4
 951 0044 0023     		movs	r3, #0
 952              	.L53:
 953              		.loc 1 845 5 discriminator 6
 954 0046 002B     		cmp	r3, #0
 955 0048 0AD1     		bne	.L54
 956              	.LBB128:
 957              	.LBB129:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 958              		.loc 2 198 9 is_stmt 1
 959              		.syntax unified
 960              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 961 004a 4FF05003 			mov r3, #80												
 962 004e 83F31188 		msr basepri, r3											
 963 0052 BFF36F8F 		isb														
 964 0056 BFF34F8F 		dsb														
 965              	
 966              	@ 0 "" 2
 967              		.thumb
 968              		.syntax unified
 969 005a 7B62     		str	r3, [r7, #36]
 970              		.loc 2 206 5
 971 005c 00BF     		nop
 972              	.L55:
 973              	.LBE129:
 974              	.LBE128:
 975              		.loc 1 845 5 discriminator 2
 976 005e FEE7     		b	.L55
 977              	.L54:
 846:ThirdParty/FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 978              		.loc 1 846 5
 979 0060 3B68     		ldr	r3, [r7]
 980 0062 022B     		cmp	r3, #2
 981 0064 03D1     		bne	.L56
 982              		.loc 1 846 5 is_stmt 0 discriminator 2
 983 0066 3B6B     		ldr	r3, [r7, #48]
 984 0068 DB6B     		ldr	r3, [r3, #60]
 985 006a 012B     		cmp	r3, #1
 986 006c 01D1     		bne	.L57
 987              	.L56:
 988              		.loc 1 846 5 discriminator 3
 989 006e 0123     		movs	r3, #1
 990 0070 00E0     		b	.L58
 991              	.L57:
 992              		.loc 1 846 5 discriminator 4
 993 0072 0023     		movs	r3, #0
 994              	.L58:
 995              		.loc 1 846 5 discriminator 6
 996 0074 002B     		cmp	r3, #0
 997 0076 0AD1     		bne	.L59
 998              	.LBB130:
 999              	.LBB131:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1000              		.loc 2 198 9 is_stmt 1
 1001              		.syntax unified
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 37


 1002              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1003 0078 4FF05003 			mov r3, #80												
 1004 007c 83F31188 		msr basepri, r3											
 1005 0080 BFF36F8F 		isb														
 1006 0084 BFF34F8F 		dsb														
 1007              	
 1008              	@ 0 "" 2
 1009              		.thumb
 1010              		.syntax unified
 1011 0088 3B62     		str	r3, [r7, #32]
 1012              		.loc 2 206 5
 1013 008a 00BF     		nop
 1014              	.L60:
 1015              	.LBE131:
 1016              	.LBE130:
 1017              		.loc 1 846 5 discriminator 3
 1018 008c FEE7     		b	.L60
 1019              	.L59:
 847:ThirdParty/FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 848:ThirdParty/FreeRTOS/queue.c ****     {
 849:ThirdParty/FreeRTOS/queue.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
 1020              		.loc 1 849 9
 1021 008e FFF7FEFF 		bl	xTaskGetSchedulerState
 1022 0092 0346     		mov	r3, r0
 1023 0094 002B     		cmp	r3, #0
 1024 0096 02D1     		bne	.L61
 1025              		.loc 1 849 9 is_stmt 0 discriminator 2
 1026 0098 7B68     		ldr	r3, [r7, #4]
 1027 009a 002B     		cmp	r3, #0
 1028 009c 01D1     		bne	.L62
 1029              	.L61:
 1030              		.loc 1 849 9 discriminator 3
 1031 009e 0123     		movs	r3, #1
 1032 00a0 00E0     		b	.L63
 1033              	.L62:
 1034              		.loc 1 849 9 discriminator 4
 1035 00a2 0023     		movs	r3, #0
 1036              	.L63:
 1037              		.loc 1 849 9 discriminator 6
 1038 00a4 002B     		cmp	r3, #0
 1039 00a6 0AD1     		bne	.L64
 1040              	.LBB132:
 1041              	.LBB133:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1042              		.loc 2 198 9 is_stmt 1
 1043              		.syntax unified
 1044              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1045 00a8 4FF05003 			mov r3, #80												
 1046 00ac 83F31188 		msr basepri, r3											
 1047 00b0 BFF36F8F 		isb														
 1048 00b4 BFF34F8F 		dsb														
 1049              	
 1050              	@ 0 "" 2
 1051              		.thumb
 1052              		.syntax unified
 1053 00b8 FB61     		str	r3, [r7, #28]
 1054              		.loc 2 206 5
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 38


 1055 00ba 00BF     		nop
 1056              	.L65:
 1057              	.LBE133:
 1058              	.LBE132:
 1059              		.loc 1 849 9 discriminator 4
 1060 00bc FEE7     		b	.L65
 1061              	.L64:
 850:ThirdParty/FreeRTOS/queue.c ****     }
 851:ThirdParty/FreeRTOS/queue.c ****     #endif
 852:ThirdParty/FreeRTOS/queue.c **** 
 853:ThirdParty/FreeRTOS/queue.c ****     /*lint -save -e904 This function relaxes the coding standard somewhat to
 854:ThirdParty/FreeRTOS/queue.c ****      * allow return statements within the function itself.  This is done in the
 855:ThirdParty/FreeRTOS/queue.c ****      * interest of execution time efficiency. */
 856:ThirdParty/FreeRTOS/queue.c ****     for( ; ; )
 857:ThirdParty/FreeRTOS/queue.c ****     {
 858:ThirdParty/FreeRTOS/queue.c ****         taskENTER_CRITICAL();
 1062              		.loc 1 858 9
 1063 00be FFF7FEFF 		bl	vPortEnterCritical
 859:ThirdParty/FreeRTOS/queue.c ****         {
 860:ThirdParty/FreeRTOS/queue.c ****             /* Is there room on the queue now?  The running task must be the
 861:ThirdParty/FreeRTOS/queue.c ****              * highest priority task wanting to access the queue.  If the head item
 862:ThirdParty/FreeRTOS/queue.c ****              * in the queue is to be overwritten then it does not matter if the
 863:ThirdParty/FreeRTOS/queue.c ****              * queue is full. */
 864:ThirdParty/FreeRTOS/queue.c ****             if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERW
 1064              		.loc 1 864 26
 1065 00c2 3B6B     		ldr	r3, [r7, #48]
 1066 00c4 9A6B     		ldr	r2, [r3, #56]
 1067              		.loc 1 864 55
 1068 00c6 3B6B     		ldr	r3, [r7, #48]
 1069 00c8 DB6B     		ldr	r3, [r3, #60]
 1070              		.loc 1 864 15
 1071 00ca 9A42     		cmp	r2, r3
 1072 00cc 02D3     		bcc	.L66
 1073              		.loc 1 864 68 discriminator 1
 1074 00ce 3B68     		ldr	r3, [r7]
 1075 00d0 022B     		cmp	r3, #2
 1076 00d2 12D1     		bne	.L67
 1077              	.L66:
 865:ThirdParty/FreeRTOS/queue.c ****             {
 866:ThirdParty/FreeRTOS/queue.c ****                 traceQUEUE_SEND( pxQueue );
 867:ThirdParty/FreeRTOS/queue.c **** 
 868:ThirdParty/FreeRTOS/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
 869:ThirdParty/FreeRTOS/queue.c ****                 {
 870:ThirdParty/FreeRTOS/queue.c ****                     const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 871:ThirdParty/FreeRTOS/queue.c **** 
 872:ThirdParty/FreeRTOS/queue.c ****                     xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 873:ThirdParty/FreeRTOS/queue.c **** 
 874:ThirdParty/FreeRTOS/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
 875:ThirdParty/FreeRTOS/queue.c ****                     {
 876:ThirdParty/FreeRTOS/queue.c ****                         if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != (
 877:ThirdParty/FreeRTOS/queue.c ****                         {
 878:ThirdParty/FreeRTOS/queue.c ****                             /* Do not notify the queue set as an existing item
 879:ThirdParty/FreeRTOS/queue.c ****                              * was overwritten in the queue so the number of items
 880:ThirdParty/FreeRTOS/queue.c ****                              * in the queue has not changed. */
 881:ThirdParty/FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 882:ThirdParty/FreeRTOS/queue.c ****                         }
 883:ThirdParty/FreeRTOS/queue.c ****                         else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 39


 884:ThirdParty/FreeRTOS/queue.c ****                         {
 885:ThirdParty/FreeRTOS/queue.c ****                             /* The queue is a member of a queue set, and posting
 886:ThirdParty/FreeRTOS/queue.c ****                              * to the queue set caused a higher priority task to
 887:ThirdParty/FreeRTOS/queue.c ****                              * unblock. A context switch is required. */
 888:ThirdParty/FreeRTOS/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
 889:ThirdParty/FreeRTOS/queue.c ****                         }
 890:ThirdParty/FreeRTOS/queue.c ****                         else
 891:ThirdParty/FreeRTOS/queue.c ****                         {
 892:ThirdParty/FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 893:ThirdParty/FreeRTOS/queue.c ****                         }
 894:ThirdParty/FreeRTOS/queue.c ****                     }
 895:ThirdParty/FreeRTOS/queue.c ****                     else
 896:ThirdParty/FreeRTOS/queue.c ****                     {
 897:ThirdParty/FreeRTOS/queue.c ****                         /* If there was a task waiting for data to arrive on the
 898:ThirdParty/FreeRTOS/queue.c ****                          * queue then unblock it now. */
 899:ThirdParty/FreeRTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 900:ThirdParty/FreeRTOS/queue.c ****                         {
 901:ThirdParty/FreeRTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
 902:ThirdParty/FreeRTOS/queue.c ****                             {
 903:ThirdParty/FreeRTOS/queue.c ****                                 /* The unblocked task has a priority higher than
 904:ThirdParty/FreeRTOS/queue.c ****                                  * our own so yield immediately.  Yes it is ok to
 905:ThirdParty/FreeRTOS/queue.c ****                                  * do this from within the critical section - the
 906:ThirdParty/FreeRTOS/queue.c ****                                  * kernel takes care of that. */
 907:ThirdParty/FreeRTOS/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 908:ThirdParty/FreeRTOS/queue.c ****                             }
 909:ThirdParty/FreeRTOS/queue.c ****                             else
 910:ThirdParty/FreeRTOS/queue.c ****                             {
 911:ThirdParty/FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 912:ThirdParty/FreeRTOS/queue.c ****                             }
 913:ThirdParty/FreeRTOS/queue.c ****                         }
 914:ThirdParty/FreeRTOS/queue.c ****                         else if( xYieldRequired != pdFALSE )
 915:ThirdParty/FreeRTOS/queue.c ****                         {
 916:ThirdParty/FreeRTOS/queue.c ****                             /* This path is a special case that will only get
 917:ThirdParty/FreeRTOS/queue.c ****                              * executed if the task was holding multiple mutexes
 918:ThirdParty/FreeRTOS/queue.c ****                              * and the mutexes were given back in an order that is
 919:ThirdParty/FreeRTOS/queue.c ****                              * different to that in which they were taken. */
 920:ThirdParty/FreeRTOS/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
 921:ThirdParty/FreeRTOS/queue.c ****                         }
 922:ThirdParty/FreeRTOS/queue.c ****                         else
 923:ThirdParty/FreeRTOS/queue.c ****                         {
 924:ThirdParty/FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 925:ThirdParty/FreeRTOS/queue.c ****                         }
 926:ThirdParty/FreeRTOS/queue.c ****                     }
 927:ThirdParty/FreeRTOS/queue.c ****                 }
 928:ThirdParty/FreeRTOS/queue.c ****                 #else /* configUSE_QUEUE_SETS */
 929:ThirdParty/FreeRTOS/queue.c ****                 {
 930:ThirdParty/FreeRTOS/queue.c ****                     xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 1078              		.loc 1 930 38
 1079 00d4 3A68     		ldr	r2, [r7]
 1080 00d6 B968     		ldr	r1, [r7, #8]
 1081 00d8 386B     		ldr	r0, [r7, #48]
 1082 00da FFF7FEFF 		bl	prvCopyDataToQueue
 1083 00de F862     		str	r0, [r7, #44]
 931:ThirdParty/FreeRTOS/queue.c **** 
 932:ThirdParty/FreeRTOS/queue.c ****                     /* If there was a task waiting for data to arrive on the
 933:ThirdParty/FreeRTOS/queue.c ****                      * queue then unblock it now. */
 934:ThirdParty/FreeRTOS/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 40


 1084              		.loc 1 934 25
 1085 00e0 3B6B     		ldr	r3, [r7, #48]
 1086 00e2 5B6A     		ldr	r3, [r3, #36]
 1087              		.loc 1 934 23
 1088 00e4 002B     		cmp	r3, #0
 1089 00e6 04D0     		beq	.L68
 935:ThirdParty/FreeRTOS/queue.c ****                     {
 936:ThirdParty/FreeRTOS/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
 1090              		.loc 1 936 55
 1091 00e8 3B6B     		ldr	r3, [r7, #48]
 1092 00ea 2433     		adds	r3, r3, #36
 1093              		.loc 1 936 29
 1094 00ec 1846     		mov	r0, r3
 1095 00ee FFF7FEFF 		bl	xTaskRemoveFromEventList
 1096              	.L68:
 937:ThirdParty/FreeRTOS/queue.c ****                         {
 938:ThirdParty/FreeRTOS/queue.c ****                             /* The unblocked task has a priority higher than
 939:ThirdParty/FreeRTOS/queue.c ****                              * our own so yield immediately.  Yes it is ok to do
 940:ThirdParty/FreeRTOS/queue.c ****                              * this from within the critical section - the kernel
 941:ThirdParty/FreeRTOS/queue.c ****                              * takes care of that. */
 942:ThirdParty/FreeRTOS/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
 943:ThirdParty/FreeRTOS/queue.c ****                         }
 944:ThirdParty/FreeRTOS/queue.c ****                         else
 945:ThirdParty/FreeRTOS/queue.c ****                         {
 946:ThirdParty/FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 947:ThirdParty/FreeRTOS/queue.c ****                         }
 948:ThirdParty/FreeRTOS/queue.c ****                     }
 949:ThirdParty/FreeRTOS/queue.c ****                     else if( xYieldRequired != pdFALSE )
 950:ThirdParty/FreeRTOS/queue.c ****                     {
 951:ThirdParty/FreeRTOS/queue.c ****                         /* This path is a special case that will only get
 952:ThirdParty/FreeRTOS/queue.c ****                          * executed if the task was holding multiple mutexes and
 953:ThirdParty/FreeRTOS/queue.c ****                          * the mutexes were given back in an order that is
 954:ThirdParty/FreeRTOS/queue.c ****                          * different to that in which they were taken. */
 955:ThirdParty/FreeRTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
 956:ThirdParty/FreeRTOS/queue.c ****                     }
 957:ThirdParty/FreeRTOS/queue.c ****                     else
 958:ThirdParty/FreeRTOS/queue.c ****                     {
 959:ThirdParty/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
 960:ThirdParty/FreeRTOS/queue.c ****                     }
 961:ThirdParty/FreeRTOS/queue.c ****                 }
 962:ThirdParty/FreeRTOS/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
 963:ThirdParty/FreeRTOS/queue.c **** 
 964:ThirdParty/FreeRTOS/queue.c ****                 taskEXIT_CRITICAL();
 1097              		.loc 1 964 17
 1098 00f2 FFF7FEFF 		bl	vPortExitCritical
 965:ThirdParty/FreeRTOS/queue.c ****                 return pdPASS;
 1099              		.loc 1 965 24
 1100 00f6 0123     		movs	r3, #1
 1101 00f8 62E0     		b	.L77
 1102              	.L67:
 966:ThirdParty/FreeRTOS/queue.c ****             }
 967:ThirdParty/FreeRTOS/queue.c ****             else
 968:ThirdParty/FreeRTOS/queue.c ****             {
 969:ThirdParty/FreeRTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
 1103              		.loc 1 969 34
 1104 00fa 7B68     		ldr	r3, [r7, #4]
 1105              		.loc 1 969 19
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 41


 1106 00fc 002B     		cmp	r3, #0
 1107 00fe 03D1     		bne	.L70
 970:ThirdParty/FreeRTOS/queue.c ****                 {
 971:ThirdParty/FreeRTOS/queue.c ****                     /* The queue was full and no block time is specified (or
 972:ThirdParty/FreeRTOS/queue.c ****                      * the block time has expired) so leave now. */
 973:ThirdParty/FreeRTOS/queue.c ****                     taskEXIT_CRITICAL();
 1108              		.loc 1 973 21
 1109 0100 FFF7FEFF 		bl	vPortExitCritical
 974:ThirdParty/FreeRTOS/queue.c **** 
 975:ThirdParty/FreeRTOS/queue.c ****                     /* Return to the original privilege level before exiting
 976:ThirdParty/FreeRTOS/queue.c ****                      * the function. */
 977:ThirdParty/FreeRTOS/queue.c ****                     traceQUEUE_SEND_FAILED( pxQueue );
 978:ThirdParty/FreeRTOS/queue.c ****                     return errQUEUE_FULL;
 1110              		.loc 1 978 28
 1111 0104 0023     		movs	r3, #0
 1112 0106 5BE0     		b	.L77
 1113              	.L70:
 979:ThirdParty/FreeRTOS/queue.c ****                 }
 980:ThirdParty/FreeRTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
 1114              		.loc 1 980 24
 1115 0108 7B6B     		ldr	r3, [r7, #52]
 1116 010a 002B     		cmp	r3, #0
 1117 010c 06D1     		bne	.L71
 981:ThirdParty/FreeRTOS/queue.c ****                 {
 982:ThirdParty/FreeRTOS/queue.c ****                     /* The queue was full and a block time was specified so
 983:ThirdParty/FreeRTOS/queue.c ****                      * configure the timeout structure. */
 984:ThirdParty/FreeRTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 1118              		.loc 1 984 21
 1119 010e 07F11403 		add	r3, r7, #20
 1120 0112 1846     		mov	r0, r3
 1121 0114 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 985:ThirdParty/FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 1122              		.loc 1 985 35
 1123 0118 0123     		movs	r3, #1
 1124 011a 7B63     		str	r3, [r7, #52]
 1125              	.L71:
 986:ThirdParty/FreeRTOS/queue.c ****                 }
 987:ThirdParty/FreeRTOS/queue.c ****                 else
 988:ThirdParty/FreeRTOS/queue.c ****                 {
 989:ThirdParty/FreeRTOS/queue.c ****                     /* Entry time was already set. */
 990:ThirdParty/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
 991:ThirdParty/FreeRTOS/queue.c ****                 }
 992:ThirdParty/FreeRTOS/queue.c ****             }
 993:ThirdParty/FreeRTOS/queue.c ****         }
 994:ThirdParty/FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
 1126              		.loc 1 994 9
 1127 011c FFF7FEFF 		bl	vPortExitCritical
 995:ThirdParty/FreeRTOS/queue.c **** 
 996:ThirdParty/FreeRTOS/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
 997:ThirdParty/FreeRTOS/queue.c ****          * now the critical section has been exited. */
 998:ThirdParty/FreeRTOS/queue.c **** 
 999:ThirdParty/FreeRTOS/queue.c ****         vTaskSuspendAll();
 1128              		.loc 1 999 9
 1129 0120 FFF7FEFF 		bl	vTaskSuspendAll
1000:ThirdParty/FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 1130              		.loc 1 1000 9
 1131 0124 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 42


 1132 0128 3B6B     		ldr	r3, [r7, #48]
 1133 012a 93F84430 		ldrb	r3, [r3, #68]
 1134 012e 5BB2     		sxtb	r3, r3
 1135 0130 B3F1FF3F 		cmp	r3, #-1
 1136 0134 03D1     		bne	.L72
 1137              		.loc 1 1000 9 is_stmt 0 discriminator 1
 1138 0136 3B6B     		ldr	r3, [r7, #48]
 1139 0138 0022     		movs	r2, #0
 1140 013a 83F84420 		strb	r2, [r3, #68]
 1141              	.L72:
 1142              		.loc 1 1000 9 discriminator 3
 1143 013e 3B6B     		ldr	r3, [r7, #48]
 1144 0140 93F84530 		ldrb	r3, [r3, #69]
 1145 0144 5BB2     		sxtb	r3, r3
 1146 0146 B3F1FF3F 		cmp	r3, #-1
 1147 014a 03D1     		bne	.L73
 1148              		.loc 1 1000 9 discriminator 4
 1149 014c 3B6B     		ldr	r3, [r7, #48]
 1150 014e 0022     		movs	r2, #0
 1151 0150 83F84520 		strb	r2, [r3, #69]
 1152              	.L73:
 1153              		.loc 1 1000 9 discriminator 6
 1154 0154 FFF7FEFF 		bl	vPortExitCritical
1001:ThirdParty/FreeRTOS/queue.c **** 
1002:ThirdParty/FreeRTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1003:ThirdParty/FreeRTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1155              		.loc 1 1003 13 is_stmt 1 discriminator 6
 1156 0158 3A1D     		adds	r2, r7, #4
 1157 015a 07F11403 		add	r3, r7, #20
 1158 015e 1146     		mov	r1, r2
 1159 0160 1846     		mov	r0, r3
 1160 0162 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1161 0166 0346     		mov	r3, r0
 1162              		.loc 1 1003 11 discriminator 6
 1163 0168 002B     		cmp	r3, #0
 1164 016a 23D1     		bne	.L74
1004:ThirdParty/FreeRTOS/queue.c ****         {
1005:ThirdParty/FreeRTOS/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
 1165              		.loc 1 1005 17
 1166 016c 386B     		ldr	r0, [r7, #48]
 1167 016e FFF7FEFF 		bl	prvIsQueueFull
 1168 0172 0346     		mov	r3, r0
 1169              		.loc 1 1005 15
 1170 0174 002B     		cmp	r3, #0
 1171 0176 17D0     		beq	.L75
1006:ThirdParty/FreeRTOS/queue.c ****             {
1007:ThirdParty/FreeRTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_SEND( pxQueue );
1008:ThirdParty/FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 1172              		.loc 1 1008 17
 1173 0178 3B6B     		ldr	r3, [r7, #48]
 1174 017a 1033     		adds	r3, r3, #16
 1175 017c 7A68     		ldr	r2, [r7, #4]
 1176 017e 1146     		mov	r1, r2
 1177 0180 1846     		mov	r0, r3
 1178 0182 FFF7FEFF 		bl	vTaskPlaceOnEventList
1009:ThirdParty/FreeRTOS/queue.c **** 
1010:ThirdParty/FreeRTOS/queue.c ****                 /* Unlocking the queue means queue events can effect the
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 43


1011:ThirdParty/FreeRTOS/queue.c ****                  * event list. It is possible that interrupts occurring now
1012:ThirdParty/FreeRTOS/queue.c ****                  * remove this task from the event list again - but as the
1013:ThirdParty/FreeRTOS/queue.c ****                  * scheduler is suspended the task will go onto the pending
1014:ThirdParty/FreeRTOS/queue.c ****                  * ready list instead of the actual ready list. */
1015:ThirdParty/FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 1179              		.loc 1 1015 17
 1180 0186 386B     		ldr	r0, [r7, #48]
 1181 0188 FFF7FEFF 		bl	prvUnlockQueue
1016:ThirdParty/FreeRTOS/queue.c **** 
1017:ThirdParty/FreeRTOS/queue.c ****                 /* Resuming the scheduler will move tasks from the pending
1018:ThirdParty/FreeRTOS/queue.c ****                  * ready list into the ready list - so it is feasible that this
1019:ThirdParty/FreeRTOS/queue.c ****                  * task is already in the ready list before it yields - in which
1020:ThirdParty/FreeRTOS/queue.c ****                  * case the yield will not cause a context switch unless there
1021:ThirdParty/FreeRTOS/queue.c ****                  * is also a higher priority task in the pending ready list. */
1022:ThirdParty/FreeRTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
 1182              		.loc 1 1022 21
 1183 018c FFF7FEFF 		bl	xTaskResumeAll
 1184 0190 0346     		mov	r3, r0
 1185              		.loc 1 1022 19
 1186 0192 002B     		cmp	r3, #0
 1187 0194 93D1     		bne	.L64
1023:ThirdParty/FreeRTOS/queue.c ****                 {
1024:ThirdParty/FreeRTOS/queue.c ****                     portYIELD_WITHIN_API();
 1188              		.loc 1 1024 21
 1189 0196 0C4B     		ldr	r3, .L78
 1190 0198 4FF08052 		mov	r2, #268435456
 1191 019c 1A60     		str	r2, [r3]
 1192              		.syntax unified
 1193              	@ 1024 "ThirdParty/FreeRTOS/queue.c" 1
 1194 019e BFF34F8F 		dsb
 1195              	@ 0 "" 2
 1196              	@ 1024 "ThirdParty/FreeRTOS/queue.c" 1
 1197 01a2 BFF36F8F 		isb
 1198              	@ 0 "" 2
 1199              		.thumb
 1200              		.syntax unified
 1201 01a6 8AE7     		b	.L64
 1202              	.L75:
1025:ThirdParty/FreeRTOS/queue.c ****                 }
1026:ThirdParty/FreeRTOS/queue.c ****             }
1027:ThirdParty/FreeRTOS/queue.c ****             else
1028:ThirdParty/FreeRTOS/queue.c ****             {
1029:ThirdParty/FreeRTOS/queue.c ****                 /* Try again. */
1030:ThirdParty/FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 1203              		.loc 1 1030 17
 1204 01a8 386B     		ldr	r0, [r7, #48]
 1205 01aa FFF7FEFF 		bl	prvUnlockQueue
1031:ThirdParty/FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
 1206              		.loc 1 1031 26
 1207 01ae FFF7FEFF 		bl	xTaskResumeAll
 1208 01b2 84E7     		b	.L64
 1209              	.L74:
1032:ThirdParty/FreeRTOS/queue.c ****             }
1033:ThirdParty/FreeRTOS/queue.c ****         }
1034:ThirdParty/FreeRTOS/queue.c ****         else
1035:ThirdParty/FreeRTOS/queue.c ****         {
1036:ThirdParty/FreeRTOS/queue.c ****             /* The timeout has expired. */
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 44


1037:ThirdParty/FreeRTOS/queue.c ****             prvUnlockQueue( pxQueue );
 1210              		.loc 1 1037 13
 1211 01b4 386B     		ldr	r0, [r7, #48]
 1212 01b6 FFF7FEFF 		bl	prvUnlockQueue
1038:ThirdParty/FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
 1213              		.loc 1 1038 22
 1214 01ba FFF7FEFF 		bl	xTaskResumeAll
1039:ThirdParty/FreeRTOS/queue.c **** 
1040:ThirdParty/FreeRTOS/queue.c ****             traceQUEUE_SEND_FAILED( pxQueue );
1041:ThirdParty/FreeRTOS/queue.c ****             return errQUEUE_FULL;
 1215              		.loc 1 1041 20
 1216 01be 0023     		movs	r3, #0
 1217              	.L77:
1042:ThirdParty/FreeRTOS/queue.c ****         }
1043:ThirdParty/FreeRTOS/queue.c ****     } /*lint -restore */
1044:ThirdParty/FreeRTOS/queue.c **** }
 1218              		.loc 1 1044 1 discriminator 8
 1219 01c0 1846     		mov	r0, r3
 1220 01c2 3837     		adds	r7, r7, #56
 1221              	.LCFI43:
 1222              		.cfi_def_cfa_offset 8
 1223 01c4 BD46     		mov	sp, r7
 1224              	.LCFI44:
 1225              		.cfi_def_cfa_register 13
 1226              		@ sp needed
 1227 01c6 80BD     		pop	{r7, pc}
 1228              	.L79:
 1229              		.align	2
 1230              	.L78:
 1231 01c8 04ED00E0 		.word	-536810236
 1232              		.cfi_endproc
 1233              	.LFE13:
 1235              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1236              		.align	1
 1237              		.global	xQueueGenericSendFromISR
 1238              		.syntax unified
 1239              		.thumb
 1240              		.thumb_func
 1242              	xQueueGenericSendFromISR:
 1243              	.LFB14:
1045:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1046:ThirdParty/FreeRTOS/queue.c **** 
1047:ThirdParty/FreeRTOS/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
1048:ThirdParty/FreeRTOS/queue.c ****                                      const void * const pvItemToQueue,
1049:ThirdParty/FreeRTOS/queue.c ****                                      BaseType_t * const pxHigherPriorityTaskWoken,
1050:ThirdParty/FreeRTOS/queue.c ****                                      const BaseType_t xCopyPosition )
1051:ThirdParty/FreeRTOS/queue.c **** {
 1244              		.loc 1 1051 1
 1245              		.cfi_startproc
 1246              		@ args = 0, pretend = 0, frame = 72
 1247              		@ frame_needed = 1, uses_anonymous_args = 0
 1248 0000 80B5     		push	{r7, lr}
 1249              	.LCFI45:
 1250              		.cfi_def_cfa_offset 8
 1251              		.cfi_offset 7, -8
 1252              		.cfi_offset 14, -4
 1253 0002 92B0     		sub	sp, sp, #72
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 45


 1254              	.LCFI46:
 1255              		.cfi_def_cfa_offset 80
 1256 0004 00AF     		add	r7, sp, #0
 1257              	.LCFI47:
 1258              		.cfi_def_cfa_register 7
 1259 0006 F860     		str	r0, [r7, #12]
 1260 0008 B960     		str	r1, [r7, #8]
 1261 000a 7A60     		str	r2, [r7, #4]
 1262 000c 3B60     		str	r3, [r7]
1052:ThirdParty/FreeRTOS/queue.c ****     BaseType_t xReturn;
1053:ThirdParty/FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1054:ThirdParty/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 1263              		.loc 1 1054 21
 1264 000e FB68     		ldr	r3, [r7, #12]
 1265 0010 3B64     		str	r3, [r7, #64]
1055:ThirdParty/FreeRTOS/queue.c **** 
1056:ThirdParty/FreeRTOS/queue.c ****     configASSERT( pxQueue );
 1266              		.loc 1 1056 5
 1267 0012 3B6C     		ldr	r3, [r7, #64]
 1268 0014 002B     		cmp	r3, #0
 1269 0016 0AD1     		bne	.L81
 1270              	.LBB134:
 1271              	.LBB135:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1272              		.loc 2 198 9
 1273              		.syntax unified
 1274              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1275 0018 4FF05003 			mov r3, #80												
 1276 001c 83F31188 		msr basepri, r3											
 1277 0020 BFF36F8F 		isb														
 1278 0024 BFF34F8F 		dsb														
 1279              	
 1280              	@ 0 "" 2
 1281              		.thumb
 1282              		.syntax unified
 1283 0028 FB62     		str	r3, [r7, #44]
 1284              		.loc 2 206 5
 1285 002a 00BF     		nop
 1286              	.L82:
 1287              	.LBE135:
 1288              	.LBE134:
 1289              		.loc 1 1056 5 discriminator 1
 1290 002c FEE7     		b	.L82
 1291              	.L81:
1057:ThirdParty/FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1292              		.loc 1 1057 5
 1293 002e BB68     		ldr	r3, [r7, #8]
 1294 0030 002B     		cmp	r3, #0
 1295 0032 03D1     		bne	.L83
 1296              		.loc 1 1057 5 is_stmt 0 discriminator 2
 1297 0034 3B6C     		ldr	r3, [r7, #64]
 1298 0036 1B6C     		ldr	r3, [r3, #64]
 1299 0038 002B     		cmp	r3, #0
 1300 003a 01D1     		bne	.L84
 1301              	.L83:
 1302              		.loc 1 1057 5 discriminator 3
 1303 003c 0123     		movs	r3, #1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 46


 1304 003e 00E0     		b	.L85
 1305              	.L84:
 1306              		.loc 1 1057 5 discriminator 4
 1307 0040 0023     		movs	r3, #0
 1308              	.L85:
 1309              		.loc 1 1057 5 discriminator 6
 1310 0042 002B     		cmp	r3, #0
 1311 0044 0AD1     		bne	.L86
 1312              	.LBB136:
 1313              	.LBB137:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1314              		.loc 2 198 9 is_stmt 1
 1315              		.syntax unified
 1316              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1317 0046 4FF05003 			mov r3, #80												
 1318 004a 83F31188 		msr basepri, r3											
 1319 004e BFF36F8F 		isb														
 1320 0052 BFF34F8F 		dsb														
 1321              	
 1322              	@ 0 "" 2
 1323              		.thumb
 1324              		.syntax unified
 1325 0056 BB62     		str	r3, [r7, #40]
 1326              		.loc 2 206 5
 1327 0058 00BF     		nop
 1328              	.L87:
 1329              	.LBE137:
 1330              	.LBE136:
 1331              		.loc 1 1057 5 discriminator 2
 1332 005a FEE7     		b	.L87
 1333              	.L86:
1058:ThirdParty/FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1334              		.loc 1 1058 5
 1335 005c 3B68     		ldr	r3, [r7]
 1336 005e 022B     		cmp	r3, #2
 1337 0060 03D1     		bne	.L88
 1338              		.loc 1 1058 5 is_stmt 0 discriminator 2
 1339 0062 3B6C     		ldr	r3, [r7, #64]
 1340 0064 DB6B     		ldr	r3, [r3, #60]
 1341 0066 012B     		cmp	r3, #1
 1342 0068 01D1     		bne	.L89
 1343              	.L88:
 1344              		.loc 1 1058 5 discriminator 3
 1345 006a 0123     		movs	r3, #1
 1346 006c 00E0     		b	.L90
 1347              	.L89:
 1348              		.loc 1 1058 5 discriminator 4
 1349 006e 0023     		movs	r3, #0
 1350              	.L90:
 1351              		.loc 1 1058 5 discriminator 6
 1352 0070 002B     		cmp	r3, #0
 1353 0072 0AD1     		bne	.L91
 1354              	.LBB138:
 1355              	.LBB139:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1356              		.loc 2 198 9 is_stmt 1
 1357              		.syntax unified
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 47


 1358              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1359 0074 4FF05003 			mov r3, #80												
 1360 0078 83F31188 		msr basepri, r3											
 1361 007c BFF36F8F 		isb														
 1362 0080 BFF34F8F 		dsb														
 1363              	
 1364              	@ 0 "" 2
 1365              		.thumb
 1366              		.syntax unified
 1367 0084 7B62     		str	r3, [r7, #36]
 1368              		.loc 2 206 5
 1369 0086 00BF     		nop
 1370              	.L92:
 1371              	.LBE139:
 1372              	.LBE138:
 1373              		.loc 1 1058 5 discriminator 3
 1374 0088 FEE7     		b	.L92
 1375              	.L91:
1059:ThirdParty/FreeRTOS/queue.c **** 
1060:ThirdParty/FreeRTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1061:ThirdParty/FreeRTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1062:ThirdParty/FreeRTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1063:ThirdParty/FreeRTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1064:ThirdParty/FreeRTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1065:ThirdParty/FreeRTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1066:ThirdParty/FreeRTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1067:ThirdParty/FreeRTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1068:ThirdParty/FreeRTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1069:ThirdParty/FreeRTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1070:ThirdParty/FreeRTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1071:ThirdParty/FreeRTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1072:ThirdParty/FreeRTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1073:ThirdParty/FreeRTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1074:ThirdParty/FreeRTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1376              		.loc 1 1074 5
 1377 008a FFF7FEFF 		bl	vPortValidateInterruptPriority
 1378              	.LBB140:
 1379              	.LBB141:
 207:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 208:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 209:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 210:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 211:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 212:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 213:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 214:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 1380              		.loc 2 214 9
 1381              		.syntax unified
 1382              	@ 214 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1383 008e EFF31182 			mrs r2, basepri											
 1384 0092 4FF05003 		mov r3, #80												
 1385 0096 83F31188 		msr basepri, r3											
 1386 009a BFF36F8F 		isb														
 1387 009e BFF34F8F 		dsb														
 1388              	
 1389              	@ 0 "" 2
 1390              		.thumb
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 48


 1391              		.syntax unified
 1392 00a2 3A62     		str	r2, [r7, #32]
 1393 00a4 FB61     		str	r3, [r7, #28]
 215:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 216:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mrs %0, basepri											\n"\
 217:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mov %1, %2												\n"\
 218:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %1											\n"\
 219:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	isb														\n"\
 220:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	dsb														\n"\
 221:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 222:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         );
 223:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 224:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 225:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****          * warnings. */
 226:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         return ulOriginalBASEPRI;
 1394              		.loc 2 226 16
 1395 00a6 3B6A     		ldr	r3, [r7, #32]
 1396              	.LBE141:
 1397              	.LBE140:
1075:ThirdParty/FreeRTOS/queue.c **** 
1076:ThirdParty/FreeRTOS/queue.c ****     /* Similar to xQueueGenericSend, except without blocking if there is no room
1077:ThirdParty/FreeRTOS/queue.c ****      * in the queue.  Also don't directly wake a task that was blocked on a queue
1078:ThirdParty/FreeRTOS/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1079:ThirdParty/FreeRTOS/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1080:ThirdParty/FreeRTOS/queue.c ****      * post). */
1081:ThirdParty/FreeRTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1398              		.loc 1 1081 30
 1399 00a8 FB63     		str	r3, [r7, #60]
1082:ThirdParty/FreeRTOS/queue.c ****     {
1083:ThirdParty/FreeRTOS/queue.c ****         if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE
 1400              		.loc 1 1083 22
 1401 00aa 3B6C     		ldr	r3, [r7, #64]
 1402 00ac 9A6B     		ldr	r2, [r3, #56]
 1403              		.loc 1 1083 51
 1404 00ae 3B6C     		ldr	r3, [r7, #64]
 1405 00b0 DB6B     		ldr	r3, [r3, #60]
 1406              		.loc 1 1083 11
 1407 00b2 9A42     		cmp	r2, r3
 1408 00b4 02D3     		bcc	.L94
 1409              		.loc 1 1083 64 discriminator 1
 1410 00b6 3B68     		ldr	r3, [r7]
 1411 00b8 022B     		cmp	r3, #2
 1412 00ba 46D1     		bne	.L95
 1413              	.L94:
 1414              	.LBB142:
1084:ThirdParty/FreeRTOS/queue.c ****         {
1085:ThirdParty/FreeRTOS/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
 1415              		.loc 1 1085 26
 1416 00bc 3B6C     		ldr	r3, [r7, #64]
 1417 00be 93F84530 		ldrb	r3, [r3, #69]
 1418 00c2 87F83B30 		strb	r3, [r7, #59]
1086:ThirdParty/FreeRTOS/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1419              		.loc 1 1086 31
 1420 00c6 3B6C     		ldr	r3, [r7, #64]
 1421 00c8 9B6B     		ldr	r3, [r3, #56]
 1422 00ca 7B63     		str	r3, [r7, #52]
1087:ThirdParty/FreeRTOS/queue.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 49


1088:ThirdParty/FreeRTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1089:ThirdParty/FreeRTOS/queue.c **** 
1090:ThirdParty/FreeRTOS/queue.c ****             /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
1091:ThirdParty/FreeRTOS/queue.c ****              *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
1092:ThirdParty/FreeRTOS/queue.c ****              *  in a task disinheriting a priority and prvCopyDataToQueue() can be
1093:ThirdParty/FreeRTOS/queue.c ****              *  called here even though the disinherit function does not check if
1094:ThirdParty/FreeRTOS/queue.c ****              *  the scheduler is suspended before accessing the ready lists. */
1095:ThirdParty/FreeRTOS/queue.c ****             ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 1423              		.loc 1 1095 22
 1424 00cc 3A68     		ldr	r2, [r7]
 1425 00ce B968     		ldr	r1, [r7, #8]
 1426 00d0 386C     		ldr	r0, [r7, #64]
 1427 00d2 FFF7FEFF 		bl	prvCopyDataToQueue
1096:ThirdParty/FreeRTOS/queue.c **** 
1097:ThirdParty/FreeRTOS/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1098:ThirdParty/FreeRTOS/queue.c ****              * be done when the queue is unlocked later. */
1099:ThirdParty/FreeRTOS/queue.c ****             if( cTxLock == queueUNLOCKED )
 1428              		.loc 1 1099 15
 1429 00d6 97F93B30 		ldrsb	r3, [r7, #59]
 1430 00da B3F1FF3F 		cmp	r3, #-1
 1431 00de 12D1     		bne	.L96
1100:ThirdParty/FreeRTOS/queue.c ****             {
1101:ThirdParty/FreeRTOS/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1102:ThirdParty/FreeRTOS/queue.c ****                 {
1103:ThirdParty/FreeRTOS/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
1104:ThirdParty/FreeRTOS/queue.c ****                     {
1105:ThirdParty/FreeRTOS/queue.c ****                         if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != (
1106:ThirdParty/FreeRTOS/queue.c ****                         {
1107:ThirdParty/FreeRTOS/queue.c ****                             /* Do not notify the queue set as an existing item
1108:ThirdParty/FreeRTOS/queue.c ****                              * was overwritten in the queue so the number of items
1109:ThirdParty/FreeRTOS/queue.c ****                              * in the queue has not changed. */
1110:ThirdParty/FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1111:ThirdParty/FreeRTOS/queue.c ****                         }
1112:ThirdParty/FreeRTOS/queue.c ****                         else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1113:ThirdParty/FreeRTOS/queue.c ****                         {
1114:ThirdParty/FreeRTOS/queue.c ****                             /* The queue is a member of a queue set, and posting
1115:ThirdParty/FreeRTOS/queue.c ****                              * to the queue set caused a higher priority task to
1116:ThirdParty/FreeRTOS/queue.c ****                              * unblock.  A context switch is required. */
1117:ThirdParty/FreeRTOS/queue.c ****                             if( pxHigherPriorityTaskWoken != NULL )
1118:ThirdParty/FreeRTOS/queue.c ****                             {
1119:ThirdParty/FreeRTOS/queue.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
1120:ThirdParty/FreeRTOS/queue.c ****                             }
1121:ThirdParty/FreeRTOS/queue.c ****                             else
1122:ThirdParty/FreeRTOS/queue.c ****                             {
1123:ThirdParty/FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1124:ThirdParty/FreeRTOS/queue.c ****                             }
1125:ThirdParty/FreeRTOS/queue.c ****                         }
1126:ThirdParty/FreeRTOS/queue.c ****                         else
1127:ThirdParty/FreeRTOS/queue.c ****                         {
1128:ThirdParty/FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1129:ThirdParty/FreeRTOS/queue.c ****                         }
1130:ThirdParty/FreeRTOS/queue.c ****                     }
1131:ThirdParty/FreeRTOS/queue.c ****                     else
1132:ThirdParty/FreeRTOS/queue.c ****                     {
1133:ThirdParty/FreeRTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1134:ThirdParty/FreeRTOS/queue.c ****                         {
1135:ThirdParty/FreeRTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 50


1136:ThirdParty/FreeRTOS/queue.c ****                             {
1137:ThirdParty/FreeRTOS/queue.c ****                                 /* The task waiting has a higher priority so
1138:ThirdParty/FreeRTOS/queue.c ****                                  *  record that a context switch is required. */
1139:ThirdParty/FreeRTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1140:ThirdParty/FreeRTOS/queue.c ****                                 {
1141:ThirdParty/FreeRTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1142:ThirdParty/FreeRTOS/queue.c ****                                 }
1143:ThirdParty/FreeRTOS/queue.c ****                                 else
1144:ThirdParty/FreeRTOS/queue.c ****                                 {
1145:ThirdParty/FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1146:ThirdParty/FreeRTOS/queue.c ****                                 }
1147:ThirdParty/FreeRTOS/queue.c ****                             }
1148:ThirdParty/FreeRTOS/queue.c ****                             else
1149:ThirdParty/FreeRTOS/queue.c ****                             {
1150:ThirdParty/FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1151:ThirdParty/FreeRTOS/queue.c ****                             }
1152:ThirdParty/FreeRTOS/queue.c ****                         }
1153:ThirdParty/FreeRTOS/queue.c ****                         else
1154:ThirdParty/FreeRTOS/queue.c ****                         {
1155:ThirdParty/FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1156:ThirdParty/FreeRTOS/queue.c ****                         }
1157:ThirdParty/FreeRTOS/queue.c ****                     }
1158:ThirdParty/FreeRTOS/queue.c ****                 }
1159:ThirdParty/FreeRTOS/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1160:ThirdParty/FreeRTOS/queue.c ****                 {
1161:ThirdParty/FreeRTOS/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1432              		.loc 1 1161 25
 1433 00e0 3B6C     		ldr	r3, [r7, #64]
 1434 00e2 5B6A     		ldr	r3, [r3, #36]
 1435              		.loc 1 1161 23
 1436 00e4 002B     		cmp	r3, #0
 1437 00e6 2DD0     		beq	.L97
1162:ThirdParty/FreeRTOS/queue.c ****                     {
1163:ThirdParty/FreeRTOS/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
 1438              		.loc 1 1163 55
 1439 00e8 3B6C     		ldr	r3, [r7, #64]
 1440 00ea 2433     		adds	r3, r3, #36
 1441              		.loc 1 1163 29
 1442 00ec 1846     		mov	r0, r3
 1443 00ee FFF7FEFF 		bl	xTaskRemoveFromEventList
 1444 00f2 0346     		mov	r3, r0
 1445              		.loc 1 1163 27
 1446 00f4 002B     		cmp	r3, #0
 1447 00f6 25D0     		beq	.L97
1164:ThirdParty/FreeRTOS/queue.c ****                         {
1165:ThirdParty/FreeRTOS/queue.c ****                             /* The task waiting has a higher priority so record that a
1166:ThirdParty/FreeRTOS/queue.c ****                              * context switch is required. */
1167:ThirdParty/FreeRTOS/queue.c ****                             if( pxHigherPriorityTaskWoken != NULL )
 1448              		.loc 1 1167 31
 1449 00f8 7B68     		ldr	r3, [r7, #4]
 1450 00fa 002B     		cmp	r3, #0
 1451 00fc 22D0     		beq	.L97
1168:ThirdParty/FreeRTOS/queue.c ****                             {
1169:ThirdParty/FreeRTOS/queue.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
 1452              		.loc 1 1169 60
 1453 00fe 7B68     		ldr	r3, [r7, #4]
 1454 0100 0122     		movs	r2, #1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 51


 1455 0102 1A60     		str	r2, [r3]
 1456 0104 1EE0     		b	.L97
 1457              	.L96:
 1458              	.LBB143:
1170:ThirdParty/FreeRTOS/queue.c ****                             }
1171:ThirdParty/FreeRTOS/queue.c ****                             else
1172:ThirdParty/FreeRTOS/queue.c ****                             {
1173:ThirdParty/FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1174:ThirdParty/FreeRTOS/queue.c ****                             }
1175:ThirdParty/FreeRTOS/queue.c ****                         }
1176:ThirdParty/FreeRTOS/queue.c ****                         else
1177:ThirdParty/FreeRTOS/queue.c ****                         {
1178:ThirdParty/FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1179:ThirdParty/FreeRTOS/queue.c ****                         }
1180:ThirdParty/FreeRTOS/queue.c ****                     }
1181:ThirdParty/FreeRTOS/queue.c ****                     else
1182:ThirdParty/FreeRTOS/queue.c ****                     {
1183:ThirdParty/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1184:ThirdParty/FreeRTOS/queue.c ****                     }
1185:ThirdParty/FreeRTOS/queue.c **** 
1186:ThirdParty/FreeRTOS/queue.c ****                     /* Not used in this path. */
1187:ThirdParty/FreeRTOS/queue.c ****                     ( void ) uxPreviousMessagesWaiting;
1188:ThirdParty/FreeRTOS/queue.c ****                 }
1189:ThirdParty/FreeRTOS/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1190:ThirdParty/FreeRTOS/queue.c ****             }
1191:ThirdParty/FreeRTOS/queue.c ****             else
1192:ThirdParty/FreeRTOS/queue.c ****             {
1193:ThirdParty/FreeRTOS/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1194:ThirdParty/FreeRTOS/queue.c ****                  * knows that data was posted while it was locked. */
1195:ThirdParty/FreeRTOS/queue.c ****                 prvIncrementQueueTxLock( pxQueue, cTxLock );
 1459              		.loc 1 1195 17
 1460 0106 FFF7FEFF 		bl	uxTaskGetNumberOfTasks
 1461 010a 3863     		str	r0, [r7, #48]
 1462 010c 97F93B30 		ldrsb	r3, [r7, #59]
 1463 0110 3A6B     		ldr	r2, [r7, #48]
 1464 0112 9A42     		cmp	r2, r3
 1465 0114 16D9     		bls	.L97
 1466              		.loc 1 1195 17 is_stmt 0 discriminator 1
 1467 0116 97F93B30 		ldrsb	r3, [r7, #59]
 1468 011a 7F2B     		cmp	r3, #127
 1469 011c 0AD1     		bne	.L98
 1470              	.LBB144:
 1471              	.LBB145:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1472              		.loc 2 198 9 is_stmt 1
 1473              		.syntax unified
 1474              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1475 011e 4FF05003 			mov r3, #80												
 1476 0122 83F31188 		msr basepri, r3											
 1477 0126 BFF36F8F 		isb														
 1478 012a BFF34F8F 		dsb														
 1479              	
 1480              	@ 0 "" 2
 1481              		.thumb
 1482              		.syntax unified
 1483 012e BB61     		str	r3, [r7, #24]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 52


 1484              		.loc 2 206 5
 1485 0130 00BF     		nop
 1486              	.L99:
 1487              	.LBE145:
 1488              	.LBE144:
 1489              		.loc 1 1195 17 discriminator 6
 1490 0132 FEE7     		b	.L99
 1491              	.L98:
 1492              		.loc 1 1195 17 is_stmt 0 discriminator 3
 1493 0134 97F83B30 		ldrb	r3, [r7, #59]	@ zero_extendqisi2
 1494 0138 0133     		adds	r3, r3, #1
 1495 013a DBB2     		uxtb	r3, r3
 1496 013c 5AB2     		sxtb	r2, r3
 1497 013e 3B6C     		ldr	r3, [r7, #64]
 1498 0140 83F84520 		strb	r2, [r3, #69]
 1499              	.L97:
 1500              	.LBE143:
1196:ThirdParty/FreeRTOS/queue.c ****             }
1197:ThirdParty/FreeRTOS/queue.c **** 
1198:ThirdParty/FreeRTOS/queue.c ****             xReturn = pdPASS;
 1501              		.loc 1 1198 21 is_stmt 1
 1502 0144 0123     		movs	r3, #1
 1503 0146 7B64     		str	r3, [r7, #68]
 1504              	.LBE142:
1084:ThirdParty/FreeRTOS/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
 1505              		.loc 1 1084 9
 1506 0148 01E0     		b	.L100
 1507              	.L95:
1199:ThirdParty/FreeRTOS/queue.c ****         }
1200:ThirdParty/FreeRTOS/queue.c ****         else
1201:ThirdParty/FreeRTOS/queue.c ****         {
1202:ThirdParty/FreeRTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1203:ThirdParty/FreeRTOS/queue.c ****             xReturn = errQUEUE_FULL;
 1508              		.loc 1 1203 21
 1509 014a 0023     		movs	r3, #0
 1510 014c 7B64     		str	r3, [r7, #68]
 1511              	.L100:
 1512 014e FB6B     		ldr	r3, [r7, #60]
 1513 0150 7B61     		str	r3, [r7, #20]
 1514              	.LBB146:
 1515              	.LBB147:
 227:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 228:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 229:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 230:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 231:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 232:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 1516              		.loc 2 232 9
 1517 0152 7B69     		ldr	r3, [r7, #20]
 1518              		.syntax unified
 1519              	@ 232 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1520 0154 83F31188 			msr basepri, r3	
 1521              	@ 0 "" 2
 233:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 234:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
 235:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         );
 236:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 53


 1522              		.loc 2 236 5
 1523              		.thumb
 1524              		.syntax unified
 1525 0158 00BF     		nop
 1526              	.LBE147:
 1527              	.LBE146:
1204:ThirdParty/FreeRTOS/queue.c ****         }
1205:ThirdParty/FreeRTOS/queue.c ****     }
1206:ThirdParty/FreeRTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1207:ThirdParty/FreeRTOS/queue.c **** 
1208:ThirdParty/FreeRTOS/queue.c ****     return xReturn;
 1528              		.loc 1 1208 12
 1529 015a 7B6C     		ldr	r3, [r7, #68]
1209:ThirdParty/FreeRTOS/queue.c **** }
 1530              		.loc 1 1209 1
 1531 015c 1846     		mov	r0, r3
 1532 015e 4837     		adds	r7, r7, #72
 1533              	.LCFI48:
 1534              		.cfi_def_cfa_offset 8
 1535 0160 BD46     		mov	sp, r7
 1536              	.LCFI49:
 1537              		.cfi_def_cfa_register 13
 1538              		@ sp needed
 1539 0162 80BD     		pop	{r7, pc}
 1540              		.cfi_endproc
 1541              	.LFE14:
 1543              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1544              		.align	1
 1545              		.global	xQueueGiveFromISR
 1546              		.syntax unified
 1547              		.thumb
 1548              		.thumb_func
 1550              	xQueueGiveFromISR:
 1551              	.LFB15:
1210:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1211:ThirdParty/FreeRTOS/queue.c **** 
1212:ThirdParty/FreeRTOS/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
1213:ThirdParty/FreeRTOS/queue.c ****                               BaseType_t * const pxHigherPriorityTaskWoken )
1214:ThirdParty/FreeRTOS/queue.c **** {
 1552              		.loc 1 1214 1
 1553              		.cfi_startproc
 1554              		@ args = 0, pretend = 0, frame = 64
 1555              		@ frame_needed = 1, uses_anonymous_args = 0
 1556 0000 80B5     		push	{r7, lr}
 1557              	.LCFI50:
 1558              		.cfi_def_cfa_offset 8
 1559              		.cfi_offset 7, -8
 1560              		.cfi_offset 14, -4
 1561 0002 90B0     		sub	sp, sp, #64
 1562              	.LCFI51:
 1563              		.cfi_def_cfa_offset 72
 1564 0004 00AF     		add	r7, sp, #0
 1565              	.LCFI52:
 1566              		.cfi_def_cfa_register 7
 1567 0006 7860     		str	r0, [r7, #4]
 1568 0008 3960     		str	r1, [r7]
1215:ThirdParty/FreeRTOS/queue.c ****     BaseType_t xReturn;
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 54


1216:ThirdParty/FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1217:ThirdParty/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 1569              		.loc 1 1217 21
 1570 000a 7B68     		ldr	r3, [r7, #4]
 1571 000c BB63     		str	r3, [r7, #56]
1218:ThirdParty/FreeRTOS/queue.c **** 
1219:ThirdParty/FreeRTOS/queue.c ****     /* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1220:ThirdParty/FreeRTOS/queue.c ****      * item size is 0.  Don't directly wake a task that was blocked on a queue
1221:ThirdParty/FreeRTOS/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1222:ThirdParty/FreeRTOS/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1223:ThirdParty/FreeRTOS/queue.c ****      * post). */
1224:ThirdParty/FreeRTOS/queue.c **** 
1225:ThirdParty/FreeRTOS/queue.c ****     configASSERT( pxQueue );
 1572              		.loc 1 1225 5
 1573 000e BB6B     		ldr	r3, [r7, #56]
 1574 0010 002B     		cmp	r3, #0
 1575 0012 0AD1     		bne	.L103
 1576              	.LBB148:
 1577              	.LBB149:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1578              		.loc 2 198 9
 1579              		.syntax unified
 1580              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1581 0014 4FF05003 			mov r3, #80												
 1582 0018 83F31188 		msr basepri, r3											
 1583 001c BFF36F8F 		isb														
 1584 0020 BFF34F8F 		dsb														
 1585              	
 1586              	@ 0 "" 2
 1587              		.thumb
 1588              		.syntax unified
 1589 0024 7B62     		str	r3, [r7, #36]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1590              		.loc 2 206 5
 1591 0026 00BF     		nop
 1592              	.L104:
 1593              	.LBE149:
 1594              	.LBE148:
 1595              		.loc 1 1225 5 discriminator 1
 1596 0028 FEE7     		b	.L104
 1597              	.L103:
1226:ThirdParty/FreeRTOS/queue.c **** 
1227:ThirdParty/FreeRTOS/queue.c ****     /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1228:ThirdParty/FreeRTOS/queue.c ****      * if the item size is not 0. */
1229:ThirdParty/FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
 1598              		.loc 1 1229 5
 1599 002a BB6B     		ldr	r3, [r7, #56]
 1600 002c 1B6C     		ldr	r3, [r3, #64]
 1601 002e 002B     		cmp	r3, #0
 1602 0030 0AD0     		beq	.L105
 1603              	.LBB150:
 1604              	.LBB151:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1605              		.loc 2 198 9
 1606              		.syntax unified
 1607              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1608 0032 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 55


 1609 0036 83F31188 		msr basepri, r3											
 1610 003a BFF36F8F 		isb														
 1611 003e BFF34F8F 		dsb														
 1612              	
 1613              	@ 0 "" 2
 1614              		.thumb
 1615              		.syntax unified
 1616 0042 3B62     		str	r3, [r7, #32]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1617              		.loc 2 206 5
 1618 0044 00BF     		nop
 1619              	.L106:
 1620              	.LBE151:
 1621              	.LBE150:
 1622              		.loc 1 1229 5 discriminator 2
 1623 0046 FEE7     		b	.L106
 1624              	.L105:
1230:ThirdParty/FreeRTOS/queue.c **** 
1231:ThirdParty/FreeRTOS/queue.c ****     /* Normally a mutex would not be given from an interrupt, especially if
1232:ThirdParty/FreeRTOS/queue.c ****      * there is a mutex holder, as priority inheritance makes no sense for an
1233:ThirdParty/FreeRTOS/queue.c ****      * interrupts, only tasks. */
1234:ThirdParty/FreeRTOS/queue.c ****     configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMu
 1625              		.loc 1 1234 5
 1626 0048 BB6B     		ldr	r3, [r7, #56]
 1627 004a 1B68     		ldr	r3, [r3]
 1628 004c 002B     		cmp	r3, #0
 1629 004e 03D1     		bne	.L107
 1630              		.loc 1 1234 5 is_stmt 0 discriminator 2
 1631 0050 BB6B     		ldr	r3, [r7, #56]
 1632 0052 9B68     		ldr	r3, [r3, #8]
 1633 0054 002B     		cmp	r3, #0
 1634 0056 01D1     		bne	.L108
 1635              	.L107:
 1636              		.loc 1 1234 5 discriminator 3
 1637 0058 0123     		movs	r3, #1
 1638 005a 00E0     		b	.L109
 1639              	.L108:
 1640              		.loc 1 1234 5 discriminator 4
 1641 005c 0023     		movs	r3, #0
 1642              	.L109:
 1643              		.loc 1 1234 5 discriminator 6
 1644 005e 002B     		cmp	r3, #0
 1645 0060 0AD1     		bne	.L110
 1646              	.LBB152:
 1647              	.LBB153:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1648              		.loc 2 198 9 is_stmt 1
 1649              		.syntax unified
 1650              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1651 0062 4FF05003 			mov r3, #80												
 1652 0066 83F31188 		msr basepri, r3											
 1653 006a BFF36F8F 		isb														
 1654 006e BFF34F8F 		dsb														
 1655              	
 1656              	@ 0 "" 2
 1657              		.thumb
 1658              		.syntax unified
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 56


 1659 0072 FB61     		str	r3, [r7, #28]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1660              		.loc 2 206 5
 1661 0074 00BF     		nop
 1662              	.L111:
 1663              	.LBE153:
 1664              	.LBE152:
 1665              		.loc 1 1234 5 discriminator 3
 1666 0076 FEE7     		b	.L111
 1667              	.L110:
1235:ThirdParty/FreeRTOS/queue.c **** 
1236:ThirdParty/FreeRTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1237:ThirdParty/FreeRTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1238:ThirdParty/FreeRTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1239:ThirdParty/FreeRTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1240:ThirdParty/FreeRTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1241:ThirdParty/FreeRTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1242:ThirdParty/FreeRTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1243:ThirdParty/FreeRTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1244:ThirdParty/FreeRTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1245:ThirdParty/FreeRTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1246:ThirdParty/FreeRTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1247:ThirdParty/FreeRTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1248:ThirdParty/FreeRTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1249:ThirdParty/FreeRTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1250:ThirdParty/FreeRTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1668              		.loc 1 1250 5
 1669 0078 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1670              	.LBB154:
 1671              	.LBB155:
 214:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1672              		.loc 2 214 9
 1673              		.syntax unified
 1674              	@ 214 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1675 007c EFF31182 			mrs r2, basepri											
 1676 0080 4FF05003 		mov r3, #80												
 1677 0084 83F31188 		msr basepri, r3											
 1678 0088 BFF36F8F 		isb														
 1679 008c BFF34F8F 		dsb														
 1680              	
 1681              	@ 0 "" 2
 1682              		.thumb
 1683              		.syntax unified
 1684 0090 BA61     		str	r2, [r7, #24]
 1685 0092 7B61     		str	r3, [r7, #20]
 226:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 1686              		.loc 2 226 16
 1687 0094 BB69     		ldr	r3, [r7, #24]
 1688              	.LBE155:
 1689              	.LBE154:
1251:ThirdParty/FreeRTOS/queue.c **** 
1252:ThirdParty/FreeRTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1690              		.loc 1 1252 30
 1691 0096 7B63     		str	r3, [r7, #52]
 1692              	.LBB156:
1253:ThirdParty/FreeRTOS/queue.c ****     {
1254:ThirdParty/FreeRTOS/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 57


 1693              		.loc 1 1254 27
 1694 0098 BB6B     		ldr	r3, [r7, #56]
 1695 009a 9B6B     		ldr	r3, [r3, #56]
 1696 009c 3B63     		str	r3, [r7, #48]
1255:ThirdParty/FreeRTOS/queue.c **** 
1256:ThirdParty/FreeRTOS/queue.c ****         /* When the queue is used to implement a semaphore no data is ever
1257:ThirdParty/FreeRTOS/queue.c ****          * moved through the queue but it is still valid to see if the queue 'has
1258:ThirdParty/FreeRTOS/queue.c ****          * space'. */
1259:ThirdParty/FreeRTOS/queue.c ****         if( uxMessagesWaiting < pxQueue->uxLength )
 1697              		.loc 1 1259 40
 1698 009e BB6B     		ldr	r3, [r7, #56]
 1699 00a0 DB6B     		ldr	r3, [r3, #60]
 1700              		.loc 1 1259 11
 1701 00a2 3A6B     		ldr	r2, [r7, #48]
 1702 00a4 9A42     		cmp	r2, r3
 1703 00a6 42D2     		bcs	.L113
 1704              	.LBB157:
1260:ThirdParty/FreeRTOS/queue.c ****         {
1261:ThirdParty/FreeRTOS/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
 1705              		.loc 1 1261 26
 1706 00a8 BB6B     		ldr	r3, [r7, #56]
 1707 00aa 93F84530 		ldrb	r3, [r3, #69]
 1708 00ae 87F82F30 		strb	r3, [r7, #47]
1262:ThirdParty/FreeRTOS/queue.c **** 
1263:ThirdParty/FreeRTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1264:ThirdParty/FreeRTOS/queue.c **** 
1265:ThirdParty/FreeRTOS/queue.c ****             /* A task can only have an inherited priority if it is a mutex
1266:ThirdParty/FreeRTOS/queue.c ****              * holder - and if there is a mutex holder then the mutex cannot be
1267:ThirdParty/FreeRTOS/queue.c ****              * given from an ISR.  As this is the ISR version of the function it
1268:ThirdParty/FreeRTOS/queue.c ****              * can be assumed there is no mutex holder and no need to determine if
1269:ThirdParty/FreeRTOS/queue.c ****              * priority disinheritance is needed.  Simply increase the count of
1270:ThirdParty/FreeRTOS/queue.c ****              * messages (semaphores) available. */
1271:ThirdParty/FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 1709              		.loc 1 1271 60
 1710 00b2 3B6B     		ldr	r3, [r7, #48]
 1711 00b4 5A1C     		adds	r2, r3, #1
 1712              		.loc 1 1271 40
 1713 00b6 BB6B     		ldr	r3, [r7, #56]
 1714 00b8 9A63     		str	r2, [r3, #56]
1272:ThirdParty/FreeRTOS/queue.c **** 
1273:ThirdParty/FreeRTOS/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1274:ThirdParty/FreeRTOS/queue.c ****              * be done when the queue is unlocked later. */
1275:ThirdParty/FreeRTOS/queue.c ****             if( cTxLock == queueUNLOCKED )
 1715              		.loc 1 1275 15
 1716 00ba 97F92F30 		ldrsb	r3, [r7, #47]
 1717 00be B3F1FF3F 		cmp	r3, #-1
 1718 00c2 12D1     		bne	.L114
1276:ThirdParty/FreeRTOS/queue.c ****             {
1277:ThirdParty/FreeRTOS/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1278:ThirdParty/FreeRTOS/queue.c ****                 {
1279:ThirdParty/FreeRTOS/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
1280:ThirdParty/FreeRTOS/queue.c ****                     {
1281:ThirdParty/FreeRTOS/queue.c ****                         if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1282:ThirdParty/FreeRTOS/queue.c ****                         {
1283:ThirdParty/FreeRTOS/queue.c ****                             /* The semaphore is a member of a queue set, and
1284:ThirdParty/FreeRTOS/queue.c ****                              * posting to the queue set caused a higher priority
1285:ThirdParty/FreeRTOS/queue.c ****                              * task to unblock.  A context switch is required. */
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 58


1286:ThirdParty/FreeRTOS/queue.c ****                             if( pxHigherPriorityTaskWoken != NULL )
1287:ThirdParty/FreeRTOS/queue.c ****                             {
1288:ThirdParty/FreeRTOS/queue.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
1289:ThirdParty/FreeRTOS/queue.c ****                             }
1290:ThirdParty/FreeRTOS/queue.c ****                             else
1291:ThirdParty/FreeRTOS/queue.c ****                             {
1292:ThirdParty/FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1293:ThirdParty/FreeRTOS/queue.c ****                             }
1294:ThirdParty/FreeRTOS/queue.c ****                         }
1295:ThirdParty/FreeRTOS/queue.c ****                         else
1296:ThirdParty/FreeRTOS/queue.c ****                         {
1297:ThirdParty/FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1298:ThirdParty/FreeRTOS/queue.c ****                         }
1299:ThirdParty/FreeRTOS/queue.c ****                     }
1300:ThirdParty/FreeRTOS/queue.c ****                     else
1301:ThirdParty/FreeRTOS/queue.c ****                     {
1302:ThirdParty/FreeRTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1303:ThirdParty/FreeRTOS/queue.c ****                         {
1304:ThirdParty/FreeRTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1305:ThirdParty/FreeRTOS/queue.c ****                             {
1306:ThirdParty/FreeRTOS/queue.c ****                                 /* The task waiting has a higher priority so
1307:ThirdParty/FreeRTOS/queue.c ****                                  *  record that a context switch is required. */
1308:ThirdParty/FreeRTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1309:ThirdParty/FreeRTOS/queue.c ****                                 {
1310:ThirdParty/FreeRTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1311:ThirdParty/FreeRTOS/queue.c ****                                 }
1312:ThirdParty/FreeRTOS/queue.c ****                                 else
1313:ThirdParty/FreeRTOS/queue.c ****                                 {
1314:ThirdParty/FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1315:ThirdParty/FreeRTOS/queue.c ****                                 }
1316:ThirdParty/FreeRTOS/queue.c ****                             }
1317:ThirdParty/FreeRTOS/queue.c ****                             else
1318:ThirdParty/FreeRTOS/queue.c ****                             {
1319:ThirdParty/FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1320:ThirdParty/FreeRTOS/queue.c ****                             }
1321:ThirdParty/FreeRTOS/queue.c ****                         }
1322:ThirdParty/FreeRTOS/queue.c ****                         else
1323:ThirdParty/FreeRTOS/queue.c ****                         {
1324:ThirdParty/FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1325:ThirdParty/FreeRTOS/queue.c ****                         }
1326:ThirdParty/FreeRTOS/queue.c ****                     }
1327:ThirdParty/FreeRTOS/queue.c ****                 }
1328:ThirdParty/FreeRTOS/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1329:ThirdParty/FreeRTOS/queue.c ****                 {
1330:ThirdParty/FreeRTOS/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1719              		.loc 1 1330 25
 1720 00c4 BB6B     		ldr	r3, [r7, #56]
 1721 00c6 5B6A     		ldr	r3, [r3, #36]
 1722              		.loc 1 1330 23
 1723 00c8 002B     		cmp	r3, #0
 1724 00ca 2DD0     		beq	.L115
1331:ThirdParty/FreeRTOS/queue.c ****                     {
1332:ThirdParty/FreeRTOS/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
 1725              		.loc 1 1332 55
 1726 00cc BB6B     		ldr	r3, [r7, #56]
 1727 00ce 2433     		adds	r3, r3, #36
 1728              		.loc 1 1332 29
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 59


 1729 00d0 1846     		mov	r0, r3
 1730 00d2 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1731 00d6 0346     		mov	r3, r0
 1732              		.loc 1 1332 27
 1733 00d8 002B     		cmp	r3, #0
 1734 00da 25D0     		beq	.L115
1333:ThirdParty/FreeRTOS/queue.c ****                         {
1334:ThirdParty/FreeRTOS/queue.c ****                             /* The task waiting has a higher priority so record that a
1335:ThirdParty/FreeRTOS/queue.c ****                              * context switch is required. */
1336:ThirdParty/FreeRTOS/queue.c ****                             if( pxHigherPriorityTaskWoken != NULL )
 1735              		.loc 1 1336 31
 1736 00dc 3B68     		ldr	r3, [r7]
 1737 00de 002B     		cmp	r3, #0
 1738 00e0 22D0     		beq	.L115
1337:ThirdParty/FreeRTOS/queue.c ****                             {
1338:ThirdParty/FreeRTOS/queue.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
 1739              		.loc 1 1338 60
 1740 00e2 3B68     		ldr	r3, [r7]
 1741 00e4 0122     		movs	r2, #1
 1742 00e6 1A60     		str	r2, [r3]
 1743 00e8 1EE0     		b	.L115
 1744              	.L114:
 1745              	.LBB158:
1339:ThirdParty/FreeRTOS/queue.c ****                             }
1340:ThirdParty/FreeRTOS/queue.c ****                             else
1341:ThirdParty/FreeRTOS/queue.c ****                             {
1342:ThirdParty/FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1343:ThirdParty/FreeRTOS/queue.c ****                             }
1344:ThirdParty/FreeRTOS/queue.c ****                         }
1345:ThirdParty/FreeRTOS/queue.c ****                         else
1346:ThirdParty/FreeRTOS/queue.c ****                         {
1347:ThirdParty/FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1348:ThirdParty/FreeRTOS/queue.c ****                         }
1349:ThirdParty/FreeRTOS/queue.c ****                     }
1350:ThirdParty/FreeRTOS/queue.c ****                     else
1351:ThirdParty/FreeRTOS/queue.c ****                     {
1352:ThirdParty/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1353:ThirdParty/FreeRTOS/queue.c ****                     }
1354:ThirdParty/FreeRTOS/queue.c ****                 }
1355:ThirdParty/FreeRTOS/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1356:ThirdParty/FreeRTOS/queue.c ****             }
1357:ThirdParty/FreeRTOS/queue.c ****             else
1358:ThirdParty/FreeRTOS/queue.c ****             {
1359:ThirdParty/FreeRTOS/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1360:ThirdParty/FreeRTOS/queue.c ****                  * knows that data was posted while it was locked. */
1361:ThirdParty/FreeRTOS/queue.c ****                 prvIncrementQueueTxLock( pxQueue, cTxLock );
 1746              		.loc 1 1361 17
 1747 00ea FFF7FEFF 		bl	uxTaskGetNumberOfTasks
 1748 00ee B862     		str	r0, [r7, #40]
 1749 00f0 97F92F30 		ldrsb	r3, [r7, #47]
 1750 00f4 BA6A     		ldr	r2, [r7, #40]
 1751 00f6 9A42     		cmp	r2, r3
 1752 00f8 16D9     		bls	.L115
 1753              		.loc 1 1361 17 is_stmt 0 discriminator 1
 1754 00fa 97F92F30 		ldrsb	r3, [r7, #47]
 1755 00fe 7F2B     		cmp	r3, #127
 1756 0100 0AD1     		bne	.L116
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 60


 1757              	.LBB159:
 1758              	.LBB160:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1759              		.loc 2 198 9 is_stmt 1
 1760              		.syntax unified
 1761              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1762 0102 4FF05003 			mov r3, #80												
 1763 0106 83F31188 		msr basepri, r3											
 1764 010a BFF36F8F 		isb														
 1765 010e BFF34F8F 		dsb														
 1766              	
 1767              	@ 0 "" 2
 1768              		.thumb
 1769              		.syntax unified
 1770 0112 3B61     		str	r3, [r7, #16]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1771              		.loc 2 206 5
 1772 0114 00BF     		nop
 1773              	.L117:
 1774              	.LBE160:
 1775              	.LBE159:
 1776              		.loc 1 1361 17 discriminator 6
 1777 0116 FEE7     		b	.L117
 1778              	.L116:
 1779              		.loc 1 1361 17 is_stmt 0 discriminator 3
 1780 0118 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 1781 011c 0133     		adds	r3, r3, #1
 1782 011e DBB2     		uxtb	r3, r3
 1783 0120 5AB2     		sxtb	r2, r3
 1784 0122 BB6B     		ldr	r3, [r7, #56]
 1785 0124 83F84520 		strb	r2, [r3, #69]
 1786              	.L115:
 1787              	.LBE158:
1362:ThirdParty/FreeRTOS/queue.c ****             }
1363:ThirdParty/FreeRTOS/queue.c **** 
1364:ThirdParty/FreeRTOS/queue.c ****             xReturn = pdPASS;
 1788              		.loc 1 1364 21 is_stmt 1
 1789 0128 0123     		movs	r3, #1
 1790 012a FB63     		str	r3, [r7, #60]
 1791              	.LBE157:
 1792 012c 01E0     		b	.L118
 1793              	.L113:
1365:ThirdParty/FreeRTOS/queue.c ****         }
1366:ThirdParty/FreeRTOS/queue.c ****         else
1367:ThirdParty/FreeRTOS/queue.c ****         {
1368:ThirdParty/FreeRTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1369:ThirdParty/FreeRTOS/queue.c ****             xReturn = errQUEUE_FULL;
 1794              		.loc 1 1369 21
 1795 012e 0023     		movs	r3, #0
 1796 0130 FB63     		str	r3, [r7, #60]
 1797              	.L118:
 1798 0132 7B6B     		ldr	r3, [r7, #52]
 1799 0134 FB60     		str	r3, [r7, #12]
 1800              	.LBE156:
 1801              	.LBB161:
 1802              	.LBB162:
 232:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 61


 1803              		.loc 2 232 9
 1804 0136 FB68     		ldr	r3, [r7, #12]
 1805              		.syntax unified
 1806              	@ 232 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1807 0138 83F31188 			msr basepri, r3	
 1808              	@ 0 "" 2
 1809              		.loc 2 236 5
 1810              		.thumb
 1811              		.syntax unified
 1812 013c 00BF     		nop
 1813              	.LBE162:
 1814              	.LBE161:
1370:ThirdParty/FreeRTOS/queue.c ****         }
1371:ThirdParty/FreeRTOS/queue.c ****     }
1372:ThirdParty/FreeRTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1373:ThirdParty/FreeRTOS/queue.c **** 
1374:ThirdParty/FreeRTOS/queue.c ****     return xReturn;
 1815              		.loc 1 1374 12
 1816 013e FB6B     		ldr	r3, [r7, #60]
1375:ThirdParty/FreeRTOS/queue.c **** }
 1817              		.loc 1 1375 1
 1818 0140 1846     		mov	r0, r3
 1819 0142 4037     		adds	r7, r7, #64
 1820              	.LCFI53:
 1821              		.cfi_def_cfa_offset 8
 1822 0144 BD46     		mov	sp, r7
 1823              	.LCFI54:
 1824              		.cfi_def_cfa_register 13
 1825              		@ sp needed
 1826 0146 80BD     		pop	{r7, pc}
 1827              		.cfi_endproc
 1828              	.LFE15:
 1830              		.section	.text.xQueueReceive,"ax",%progbits
 1831              		.align	1
 1832              		.global	xQueueReceive
 1833              		.syntax unified
 1834              		.thumb
 1835              		.thumb_func
 1837              	xQueueReceive:
 1838              	.LFB16:
1376:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1377:ThirdParty/FreeRTOS/queue.c **** 
1378:ThirdParty/FreeRTOS/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue,
1379:ThirdParty/FreeRTOS/queue.c ****                           void * const pvBuffer,
1380:ThirdParty/FreeRTOS/queue.c ****                           TickType_t xTicksToWait )
1381:ThirdParty/FreeRTOS/queue.c **** {
 1839              		.loc 1 1381 1
 1840              		.cfi_startproc
 1841              		@ args = 0, pretend = 0, frame = 48
 1842              		@ frame_needed = 1, uses_anonymous_args = 0
 1843 0000 80B5     		push	{r7, lr}
 1844              	.LCFI55:
 1845              		.cfi_def_cfa_offset 8
 1846              		.cfi_offset 7, -8
 1847              		.cfi_offset 14, -4
 1848 0002 8CB0     		sub	sp, sp, #48
 1849              	.LCFI56:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 62


 1850              		.cfi_def_cfa_offset 56
 1851 0004 00AF     		add	r7, sp, #0
 1852              	.LCFI57:
 1853              		.cfi_def_cfa_register 7
 1854 0006 F860     		str	r0, [r7, #12]
 1855 0008 B960     		str	r1, [r7, #8]
 1856 000a 7A60     		str	r2, [r7, #4]
1382:ThirdParty/FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 1857              		.loc 1 1382 16
 1858 000c 0023     		movs	r3, #0
 1859 000e FB62     		str	r3, [r7, #44]
1383:ThirdParty/FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
1384:ThirdParty/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 1860              		.loc 1 1384 21
 1861 0010 FB68     		ldr	r3, [r7, #12]
 1862 0012 BB62     		str	r3, [r7, #40]
1385:ThirdParty/FreeRTOS/queue.c **** 
1386:ThirdParty/FreeRTOS/queue.c ****     /* Check the pointer is not NULL. */
1387:ThirdParty/FreeRTOS/queue.c ****     configASSERT( ( pxQueue ) );
 1863              		.loc 1 1387 5
 1864 0014 BB6A     		ldr	r3, [r7, #40]
 1865 0016 002B     		cmp	r3, #0
 1866 0018 0AD1     		bne	.L121
 1867              	.LBB163:
 1868              	.LBB164:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1869              		.loc 2 198 9
 1870              		.syntax unified
 1871              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1872 001a 4FF05003 			mov r3, #80												
 1873 001e 83F31188 		msr basepri, r3											
 1874 0022 BFF36F8F 		isb														
 1875 0026 BFF34F8F 		dsb														
 1876              	
 1877              	@ 0 "" 2
 1878              		.thumb
 1879              		.syntax unified
 1880 002a 3B62     		str	r3, [r7, #32]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1881              		.loc 2 206 5
 1882 002c 00BF     		nop
 1883              	.L122:
 1884              	.LBE164:
 1885              	.LBE163:
 1886              		.loc 1 1387 5 discriminator 1
 1887 002e FEE7     		b	.L122
 1888              	.L121:
1388:ThirdParty/FreeRTOS/queue.c **** 
1389:ThirdParty/FreeRTOS/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1390:ThirdParty/FreeRTOS/queue.c ****      * is zero (so no data is copied into the buffer). */
1391:ThirdParty/FreeRTOS/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
 1889              		.loc 1 1391 5
 1890 0030 BB68     		ldr	r3, [r7, #8]
 1891 0032 002B     		cmp	r3, #0
 1892 0034 03D1     		bne	.L123
 1893              		.loc 1 1391 5 is_stmt 0 discriminator 2
 1894 0036 BB6A     		ldr	r3, [r7, #40]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 63


 1895 0038 1B6C     		ldr	r3, [r3, #64]
 1896 003a 002B     		cmp	r3, #0
 1897 003c 01D1     		bne	.L124
 1898              	.L123:
 1899              		.loc 1 1391 5 discriminator 3
 1900 003e 0123     		movs	r3, #1
 1901 0040 00E0     		b	.L125
 1902              	.L124:
 1903              		.loc 1 1391 5 discriminator 4
 1904 0042 0023     		movs	r3, #0
 1905              	.L125:
 1906              		.loc 1 1391 5 discriminator 6
 1907 0044 002B     		cmp	r3, #0
 1908 0046 0AD1     		bne	.L126
 1909              	.LBB165:
 1910              	.LBB166:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1911              		.loc 2 198 9 is_stmt 1
 1912              		.syntax unified
 1913              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1914 0048 4FF05003 			mov r3, #80												
 1915 004c 83F31188 		msr basepri, r3											
 1916 0050 BFF36F8F 		isb														
 1917 0054 BFF34F8F 		dsb														
 1918              	
 1919              	@ 0 "" 2
 1920              		.thumb
 1921              		.syntax unified
 1922 0058 FB61     		str	r3, [r7, #28]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1923              		.loc 2 206 5
 1924 005a 00BF     		nop
 1925              	.L127:
 1926              	.LBE166:
 1927              	.LBE165:
 1928              		.loc 1 1391 5 discriminator 2
 1929 005c FEE7     		b	.L127
 1930              	.L126:
1392:ThirdParty/FreeRTOS/queue.c **** 
1393:ThirdParty/FreeRTOS/queue.c ****     /* Cannot block if the scheduler is suspended. */
1394:ThirdParty/FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1395:ThirdParty/FreeRTOS/queue.c ****     {
1396:ThirdParty/FreeRTOS/queue.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
 1931              		.loc 1 1396 9
 1932 005e FFF7FEFF 		bl	xTaskGetSchedulerState
 1933 0062 0346     		mov	r3, r0
 1934 0064 002B     		cmp	r3, #0
 1935 0066 02D1     		bne	.L128
 1936              		.loc 1 1396 9 is_stmt 0 discriminator 2
 1937 0068 7B68     		ldr	r3, [r7, #4]
 1938 006a 002B     		cmp	r3, #0
 1939 006c 01D1     		bne	.L129
 1940              	.L128:
 1941              		.loc 1 1396 9 discriminator 3
 1942 006e 0123     		movs	r3, #1
 1943 0070 00E0     		b	.L130
 1944              	.L129:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 64


 1945              		.loc 1 1396 9 discriminator 4
 1946 0072 0023     		movs	r3, #0
 1947              	.L130:
 1948              		.loc 1 1396 9 discriminator 6
 1949 0074 002B     		cmp	r3, #0
 1950 0076 0AD1     		bne	.L131
 1951              	.LBB167:
 1952              	.LBB168:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1953              		.loc 2 198 9 is_stmt 1
 1954              		.syntax unified
 1955              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1956 0078 4FF05003 			mov r3, #80												
 1957 007c 83F31188 		msr basepri, r3											
 1958 0080 BFF36F8F 		isb														
 1959 0084 BFF34F8F 		dsb														
 1960              	
 1961              	@ 0 "" 2
 1962              		.thumb
 1963              		.syntax unified
 1964 0088 BB61     		str	r3, [r7, #24]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1965              		.loc 2 206 5
 1966 008a 00BF     		nop
 1967              	.L132:
 1968              	.LBE168:
 1969              	.LBE167:
 1970              		.loc 1 1396 9 discriminator 3
 1971 008c FEE7     		b	.L132
 1972              	.L131:
1397:ThirdParty/FreeRTOS/queue.c ****     }
1398:ThirdParty/FreeRTOS/queue.c ****     #endif
1399:ThirdParty/FreeRTOS/queue.c **** 
1400:ThirdParty/FreeRTOS/queue.c ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1401:ThirdParty/FreeRTOS/queue.c ****      * allow return statements within the function itself.  This is done in the
1402:ThirdParty/FreeRTOS/queue.c ****      * interest of execution time efficiency. */
1403:ThirdParty/FreeRTOS/queue.c ****     for( ; ; )
1404:ThirdParty/FreeRTOS/queue.c ****     {
1405:ThirdParty/FreeRTOS/queue.c ****         taskENTER_CRITICAL();
 1973              		.loc 1 1405 9
 1974 008e FFF7FEFF 		bl	vPortEnterCritical
 1975              	.LBB169:
1406:ThirdParty/FreeRTOS/queue.c ****         {
1407:ThirdParty/FreeRTOS/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1976              		.loc 1 1407 31
 1977 0092 BB6A     		ldr	r3, [r7, #40]
 1978 0094 9B6B     		ldr	r3, [r3, #56]
 1979 0096 7B62     		str	r3, [r7, #36]
1408:ThirdParty/FreeRTOS/queue.c **** 
1409:ThirdParty/FreeRTOS/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1410:ThirdParty/FreeRTOS/queue.c ****              * must be the highest priority task wanting to access the queue. */
1411:ThirdParty/FreeRTOS/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1980              		.loc 1 1411 15
 1981 0098 7B6A     		ldr	r3, [r7, #36]
 1982 009a 002B     		cmp	r3, #0
 1983 009c 14D0     		beq	.L133
1412:ThirdParty/FreeRTOS/queue.c ****             {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 65


1413:ThirdParty/FreeRTOS/queue.c ****                 /* Data available, remove one item. */
1414:ThirdParty/FreeRTOS/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
 1984              		.loc 1 1414 17
 1985 009e B968     		ldr	r1, [r7, #8]
 1986 00a0 B86A     		ldr	r0, [r7, #40]
 1987 00a2 FFF7FEFF 		bl	prvCopyDataFromQueue
1415:ThirdParty/FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1416:ThirdParty/FreeRTOS/queue.c ****                 pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 1988              		.loc 1 1416 64
 1989 00a6 7B6A     		ldr	r3, [r7, #36]
 1990 00a8 5A1E     		subs	r2, r3, #1
 1991              		.loc 1 1416 44
 1992 00aa BB6A     		ldr	r3, [r7, #40]
 1993 00ac 9A63     		str	r2, [r3, #56]
1417:ThirdParty/FreeRTOS/queue.c **** 
1418:ThirdParty/FreeRTOS/queue.c ****                 /* There is now space in the queue, were any tasks waiting to
1419:ThirdParty/FreeRTOS/queue.c ****                  * post to the queue?  If so, unblock the highest priority waiting
1420:ThirdParty/FreeRTOS/queue.c ****                  * task. */
1421:ThirdParty/FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1994              		.loc 1 1421 21
 1995 00ae BB6A     		ldr	r3, [r7, #40]
 1996 00b0 1B69     		ldr	r3, [r3, #16]
 1997              		.loc 1 1421 19
 1998 00b2 002B     		cmp	r3, #0
 1999 00b4 04D0     		beq	.L134
1422:ThirdParty/FreeRTOS/queue.c ****                 {
1423:ThirdParty/FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2000              		.loc 1 1423 51
 2001 00b6 BB6A     		ldr	r3, [r7, #40]
 2002 00b8 1033     		adds	r3, r3, #16
 2003              		.loc 1 1423 25
 2004 00ba 1846     		mov	r0, r3
 2005 00bc FFF7FEFF 		bl	xTaskRemoveFromEventList
 2006              	.L134:
1424:ThirdParty/FreeRTOS/queue.c ****                     {
1425:ThirdParty/FreeRTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1426:ThirdParty/FreeRTOS/queue.c ****                     }
1427:ThirdParty/FreeRTOS/queue.c ****                     else
1428:ThirdParty/FreeRTOS/queue.c ****                     {
1429:ThirdParty/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1430:ThirdParty/FreeRTOS/queue.c ****                     }
1431:ThirdParty/FreeRTOS/queue.c ****                 }
1432:ThirdParty/FreeRTOS/queue.c ****                 else
1433:ThirdParty/FreeRTOS/queue.c ****                 {
1434:ThirdParty/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1435:ThirdParty/FreeRTOS/queue.c ****                 }
1436:ThirdParty/FreeRTOS/queue.c **** 
1437:ThirdParty/FreeRTOS/queue.c ****                 taskEXIT_CRITICAL();
 2007              		.loc 1 1437 17
 2008 00c0 FFF7FEFF 		bl	vPortExitCritical
1438:ThirdParty/FreeRTOS/queue.c ****                 return pdPASS;
 2009              		.loc 1 1438 24
 2010 00c4 0123     		movs	r3, #1
 2011 00c6 69E0     		b	.L143
 2012              	.L133:
1439:ThirdParty/FreeRTOS/queue.c ****             }
1440:ThirdParty/FreeRTOS/queue.c ****             else
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 66


1441:ThirdParty/FreeRTOS/queue.c ****             {
1442:ThirdParty/FreeRTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
 2013              		.loc 1 1442 34
 2014 00c8 7B68     		ldr	r3, [r7, #4]
 2015              		.loc 1 1442 19
 2016 00ca 002B     		cmp	r3, #0
 2017 00cc 03D1     		bne	.L136
1443:ThirdParty/FreeRTOS/queue.c ****                 {
1444:ThirdParty/FreeRTOS/queue.c ****                     /* The queue was empty and no block time is specified (or
1445:ThirdParty/FreeRTOS/queue.c ****                      * the block time has expired) so leave now. */
1446:ThirdParty/FreeRTOS/queue.c ****                     taskEXIT_CRITICAL();
 2018              		.loc 1 1446 21
 2019 00ce FFF7FEFF 		bl	vPortExitCritical
1447:ThirdParty/FreeRTOS/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1448:ThirdParty/FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
 2020              		.loc 1 1448 28
 2021 00d2 0023     		movs	r3, #0
 2022 00d4 62E0     		b	.L143
 2023              	.L136:
1449:ThirdParty/FreeRTOS/queue.c ****                 }
1450:ThirdParty/FreeRTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
 2024              		.loc 1 1450 24
 2025 00d6 FB6A     		ldr	r3, [r7, #44]
 2026 00d8 002B     		cmp	r3, #0
 2027 00da 06D1     		bne	.L137
1451:ThirdParty/FreeRTOS/queue.c ****                 {
1452:ThirdParty/FreeRTOS/queue.c ****                     /* The queue was empty and a block time was specified so
1453:ThirdParty/FreeRTOS/queue.c ****                      * configure the timeout structure. */
1454:ThirdParty/FreeRTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 2028              		.loc 1 1454 21
 2029 00dc 07F11003 		add	r3, r7, #16
 2030 00e0 1846     		mov	r0, r3
 2031 00e2 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
1455:ThirdParty/FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 2032              		.loc 1 1455 35
 2033 00e6 0123     		movs	r3, #1
 2034 00e8 FB62     		str	r3, [r7, #44]
 2035              	.L137:
 2036              	.LBE169:
1456:ThirdParty/FreeRTOS/queue.c ****                 }
1457:ThirdParty/FreeRTOS/queue.c ****                 else
1458:ThirdParty/FreeRTOS/queue.c ****                 {
1459:ThirdParty/FreeRTOS/queue.c ****                     /* Entry time was already set. */
1460:ThirdParty/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1461:ThirdParty/FreeRTOS/queue.c ****                 }
1462:ThirdParty/FreeRTOS/queue.c ****             }
1463:ThirdParty/FreeRTOS/queue.c ****         }
1464:ThirdParty/FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
 2037              		.loc 1 1464 9
 2038 00ea FFF7FEFF 		bl	vPortExitCritical
1465:ThirdParty/FreeRTOS/queue.c **** 
1466:ThirdParty/FreeRTOS/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1467:ThirdParty/FreeRTOS/queue.c ****          * now the critical section has been exited. */
1468:ThirdParty/FreeRTOS/queue.c **** 
1469:ThirdParty/FreeRTOS/queue.c ****         vTaskSuspendAll();
 2039              		.loc 1 1469 9
 2040 00ee FFF7FEFF 		bl	vTaskSuspendAll
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 67


1470:ThirdParty/FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 2041              		.loc 1 1470 9
 2042 00f2 FFF7FEFF 		bl	vPortEnterCritical
 2043 00f6 BB6A     		ldr	r3, [r7, #40]
 2044 00f8 93F84430 		ldrb	r3, [r3, #68]
 2045 00fc 5BB2     		sxtb	r3, r3
 2046 00fe B3F1FF3F 		cmp	r3, #-1
 2047 0102 03D1     		bne	.L138
 2048              		.loc 1 1470 9 is_stmt 0 discriminator 1
 2049 0104 BB6A     		ldr	r3, [r7, #40]
 2050 0106 0022     		movs	r2, #0
 2051 0108 83F84420 		strb	r2, [r3, #68]
 2052              	.L138:
 2053              		.loc 1 1470 9 discriminator 3
 2054 010c BB6A     		ldr	r3, [r7, #40]
 2055 010e 93F84530 		ldrb	r3, [r3, #69]
 2056 0112 5BB2     		sxtb	r3, r3
 2057 0114 B3F1FF3F 		cmp	r3, #-1
 2058 0118 03D1     		bne	.L139
 2059              		.loc 1 1470 9 discriminator 4
 2060 011a BB6A     		ldr	r3, [r7, #40]
 2061 011c 0022     		movs	r2, #0
 2062 011e 83F84520 		strb	r2, [r3, #69]
 2063              	.L139:
 2064              		.loc 1 1470 9 discriminator 6
 2065 0122 FFF7FEFF 		bl	vPortExitCritical
1471:ThirdParty/FreeRTOS/queue.c **** 
1472:ThirdParty/FreeRTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1473:ThirdParty/FreeRTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2066              		.loc 1 1473 13 is_stmt 1 discriminator 6
 2067 0126 3A1D     		adds	r2, r7, #4
 2068 0128 07F11003 		add	r3, r7, #16
 2069 012c 1146     		mov	r1, r2
 2070 012e 1846     		mov	r0, r3
 2071 0130 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2072 0134 0346     		mov	r3, r0
 2073              		.loc 1 1473 11 discriminator 6
 2074 0136 002B     		cmp	r3, #0
 2075 0138 23D1     		bne	.L140
1474:ThirdParty/FreeRTOS/queue.c ****         {
1475:ThirdParty/FreeRTOS/queue.c ****             /* The timeout has not expired.  If the queue is still empty place
1476:ThirdParty/FreeRTOS/queue.c ****              * the task on the list of tasks waiting to receive from the queue. */
1477:ThirdParty/FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2076              		.loc 1 1477 17
 2077 013a B86A     		ldr	r0, [r7, #40]
 2078 013c FFF7FEFF 		bl	prvIsQueueEmpty
 2079 0140 0346     		mov	r3, r0
 2080              		.loc 1 1477 15
 2081 0142 002B     		cmp	r3, #0
 2082 0144 17D0     		beq	.L141
1478:ThirdParty/FreeRTOS/queue.c ****             {
1479:ThirdParty/FreeRTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1480:ThirdParty/FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2083              		.loc 1 1480 17
 2084 0146 BB6A     		ldr	r3, [r7, #40]
 2085 0148 2433     		adds	r3, r3, #36
 2086 014a 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 68


 2087 014c 1146     		mov	r1, r2
 2088 014e 1846     		mov	r0, r3
 2089 0150 FFF7FEFF 		bl	vTaskPlaceOnEventList
1481:ThirdParty/FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2090              		.loc 1 1481 17
 2091 0154 B86A     		ldr	r0, [r7, #40]
 2092 0156 FFF7FEFF 		bl	prvUnlockQueue
1482:ThirdParty/FreeRTOS/queue.c **** 
1483:ThirdParty/FreeRTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
 2093              		.loc 1 1483 21
 2094 015a FFF7FEFF 		bl	xTaskResumeAll
 2095 015e 0346     		mov	r3, r0
 2096              		.loc 1 1483 19
 2097 0160 002B     		cmp	r3, #0
 2098 0162 94D1     		bne	.L131
1484:ThirdParty/FreeRTOS/queue.c ****                 {
1485:ThirdParty/FreeRTOS/queue.c ****                     portYIELD_WITHIN_API();
 2099              		.loc 1 1485 21
 2100 0164 0F4B     		ldr	r3, .L144
 2101 0166 4FF08052 		mov	r2, #268435456
 2102 016a 1A60     		str	r2, [r3]
 2103              		.syntax unified
 2104              	@ 1485 "ThirdParty/FreeRTOS/queue.c" 1
 2105 016c BFF34F8F 		dsb
 2106              	@ 0 "" 2
 2107              	@ 1485 "ThirdParty/FreeRTOS/queue.c" 1
 2108 0170 BFF36F8F 		isb
 2109              	@ 0 "" 2
 2110              		.thumb
 2111              		.syntax unified
 2112 0174 8BE7     		b	.L131
 2113              	.L141:
1486:ThirdParty/FreeRTOS/queue.c ****                 }
1487:ThirdParty/FreeRTOS/queue.c ****                 else
1488:ThirdParty/FreeRTOS/queue.c ****                 {
1489:ThirdParty/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1490:ThirdParty/FreeRTOS/queue.c ****                 }
1491:ThirdParty/FreeRTOS/queue.c ****             }
1492:ThirdParty/FreeRTOS/queue.c ****             else
1493:ThirdParty/FreeRTOS/queue.c ****             {
1494:ThirdParty/FreeRTOS/queue.c ****                 /* The queue contains data again.  Loop back to try and read the
1495:ThirdParty/FreeRTOS/queue.c ****                  * data. */
1496:ThirdParty/FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2114              		.loc 1 1496 17
 2115 0176 B86A     		ldr	r0, [r7, #40]
 2116 0178 FFF7FEFF 		bl	prvUnlockQueue
1497:ThirdParty/FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
 2117              		.loc 1 1497 26
 2118 017c FFF7FEFF 		bl	xTaskResumeAll
 2119 0180 85E7     		b	.L131
 2120              	.L140:
1498:ThirdParty/FreeRTOS/queue.c ****             }
1499:ThirdParty/FreeRTOS/queue.c ****         }
1500:ThirdParty/FreeRTOS/queue.c ****         else
1501:ThirdParty/FreeRTOS/queue.c ****         {
1502:ThirdParty/FreeRTOS/queue.c ****             /* Timed out.  If there is no data in the queue exit, otherwise loop
1503:ThirdParty/FreeRTOS/queue.c ****              * back and attempt to read the data. */
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 69


1504:ThirdParty/FreeRTOS/queue.c ****             prvUnlockQueue( pxQueue );
 2121              		.loc 1 1504 13
 2122 0182 B86A     		ldr	r0, [r7, #40]
 2123 0184 FFF7FEFF 		bl	prvUnlockQueue
1505:ThirdParty/FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
 2124              		.loc 1 1505 22
 2125 0188 FFF7FEFF 		bl	xTaskResumeAll
1506:ThirdParty/FreeRTOS/queue.c **** 
1507:ThirdParty/FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2126              		.loc 1 1507 17
 2127 018c B86A     		ldr	r0, [r7, #40]
 2128 018e FFF7FEFF 		bl	prvIsQueueEmpty
 2129 0192 0346     		mov	r3, r0
 2130              		.loc 1 1507 15
 2131 0194 002B     		cmp	r3, #0
 2132 0196 3FF47AAF 		beq	.L131
1508:ThirdParty/FreeRTOS/queue.c ****             {
1509:ThirdParty/FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1510:ThirdParty/FreeRTOS/queue.c ****                 return errQUEUE_EMPTY;
 2133              		.loc 1 1510 24
 2134 019a 0023     		movs	r3, #0
 2135              	.L143:
1511:ThirdParty/FreeRTOS/queue.c ****             }
1512:ThirdParty/FreeRTOS/queue.c ****             else
1513:ThirdParty/FreeRTOS/queue.c ****             {
1514:ThirdParty/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1515:ThirdParty/FreeRTOS/queue.c ****             }
1516:ThirdParty/FreeRTOS/queue.c ****         }
1517:ThirdParty/FreeRTOS/queue.c ****     } /*lint -restore */
1518:ThirdParty/FreeRTOS/queue.c **** }
 2136              		.loc 1 1518 1 discriminator 7
 2137 019c 1846     		mov	r0, r3
 2138 019e 3037     		adds	r7, r7, #48
 2139              	.LCFI58:
 2140              		.cfi_def_cfa_offset 8
 2141 01a0 BD46     		mov	sp, r7
 2142              	.LCFI59:
 2143              		.cfi_def_cfa_register 13
 2144              		@ sp needed
 2145 01a2 80BD     		pop	{r7, pc}
 2146              	.L145:
 2147              		.align	2
 2148              	.L144:
 2149 01a4 04ED00E0 		.word	-536810236
 2150              		.cfi_endproc
 2151              	.LFE16:
 2153              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 2154              		.align	1
 2155              		.global	xQueueSemaphoreTake
 2156              		.syntax unified
 2157              		.thumb
 2158              		.thumb_func
 2160              	xQueueSemaphoreTake:
 2161              	.LFB17:
1519:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1520:ThirdParty/FreeRTOS/queue.c **** 
1521:ThirdParty/FreeRTOS/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 70


1522:ThirdParty/FreeRTOS/queue.c ****                                 TickType_t xTicksToWait )
1523:ThirdParty/FreeRTOS/queue.c **** {
 2162              		.loc 1 1523 1
 2163              		.cfi_startproc
 2164              		@ args = 0, pretend = 0, frame = 48
 2165              		@ frame_needed = 1, uses_anonymous_args = 0
 2166 0000 80B5     		push	{r7, lr}
 2167              	.LCFI60:
 2168              		.cfi_def_cfa_offset 8
 2169              		.cfi_offset 7, -8
 2170              		.cfi_offset 14, -4
 2171 0002 8CB0     		sub	sp, sp, #48
 2172              	.LCFI61:
 2173              		.cfi_def_cfa_offset 56
 2174 0004 00AF     		add	r7, sp, #0
 2175              	.LCFI62:
 2176              		.cfi_def_cfa_register 7
 2177 0006 7860     		str	r0, [r7, #4]
 2178 0008 3960     		str	r1, [r7]
1524:ThirdParty/FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 2179              		.loc 1 1524 16
 2180 000a 0023     		movs	r3, #0
 2181 000c FB62     		str	r3, [r7, #44]
1525:ThirdParty/FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
1526:ThirdParty/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 2182              		.loc 1 1526 21
 2183 000e 7B68     		ldr	r3, [r7, #4]
 2184 0010 7B62     		str	r3, [r7, #36]
1527:ThirdParty/FreeRTOS/queue.c **** 
1528:ThirdParty/FreeRTOS/queue.c ****     #if ( configUSE_MUTEXES == 1 )
1529:ThirdParty/FreeRTOS/queue.c ****         BaseType_t xInheritanceOccurred = pdFALSE;
 2185              		.loc 1 1529 20
 2186 0012 0023     		movs	r3, #0
 2187 0014 BB62     		str	r3, [r7, #40]
1530:ThirdParty/FreeRTOS/queue.c ****     #endif
1531:ThirdParty/FreeRTOS/queue.c **** 
1532:ThirdParty/FreeRTOS/queue.c ****     /* Check the queue pointer is not NULL. */
1533:ThirdParty/FreeRTOS/queue.c ****     configASSERT( ( pxQueue ) );
 2188              		.loc 1 1533 5
 2189 0016 7B6A     		ldr	r3, [r7, #36]
 2190 0018 002B     		cmp	r3, #0
 2191 001a 0AD1     		bne	.L147
 2192              	.LBB170:
 2193              	.LBB171:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2194              		.loc 2 198 9
 2195              		.syntax unified
 2196              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2197 001c 4FF05003 			mov r3, #80												
 2198 0020 83F31188 		msr basepri, r3											
 2199 0024 BFF36F8F 		isb														
 2200 0028 BFF34F8F 		dsb														
 2201              	
 2202              	@ 0 "" 2
 2203              		.thumb
 2204              		.syntax unified
 2205 002c BB61     		str	r3, [r7, #24]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 71


 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2206              		.loc 2 206 5
 2207 002e 00BF     		nop
 2208              	.L148:
 2209              	.LBE171:
 2210              	.LBE170:
 2211              		.loc 1 1533 5 discriminator 1
 2212 0030 FEE7     		b	.L148
 2213              	.L147:
1534:ThirdParty/FreeRTOS/queue.c **** 
1535:ThirdParty/FreeRTOS/queue.c ****     /* Check this really is a semaphore, in which case the item size will be
1536:ThirdParty/FreeRTOS/queue.c ****      * 0. */
1537:ThirdParty/FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
 2214              		.loc 1 1537 5
 2215 0032 7B6A     		ldr	r3, [r7, #36]
 2216 0034 1B6C     		ldr	r3, [r3, #64]
 2217 0036 002B     		cmp	r3, #0
 2218 0038 0AD0     		beq	.L149
 2219              	.LBB172:
 2220              	.LBB173:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2221              		.loc 2 198 9
 2222              		.syntax unified
 2223              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2224 003a 4FF05003 			mov r3, #80												
 2225 003e 83F31188 		msr basepri, r3											
 2226 0042 BFF36F8F 		isb														
 2227 0046 BFF34F8F 		dsb														
 2228              	
 2229              	@ 0 "" 2
 2230              		.thumb
 2231              		.syntax unified
 2232 004a 7B61     		str	r3, [r7, #20]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2233              		.loc 2 206 5
 2234 004c 00BF     		nop
 2235              	.L150:
 2236              	.LBE173:
 2237              	.LBE172:
 2238              		.loc 1 1537 5 discriminator 2
 2239 004e FEE7     		b	.L150
 2240              	.L149:
1538:ThirdParty/FreeRTOS/queue.c **** 
1539:ThirdParty/FreeRTOS/queue.c ****     /* Cannot block if the scheduler is suspended. */
1540:ThirdParty/FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1541:ThirdParty/FreeRTOS/queue.c ****     {
1542:ThirdParty/FreeRTOS/queue.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
 2241              		.loc 1 1542 9
 2242 0050 FFF7FEFF 		bl	xTaskGetSchedulerState
 2243 0054 0346     		mov	r3, r0
 2244 0056 002B     		cmp	r3, #0
 2245 0058 02D1     		bne	.L151
 2246              		.loc 1 1542 9 is_stmt 0 discriminator 2
 2247 005a 3B68     		ldr	r3, [r7]
 2248 005c 002B     		cmp	r3, #0
 2249 005e 01D1     		bne	.L152
 2250              	.L151:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 72


 2251              		.loc 1 1542 9 discriminator 3
 2252 0060 0123     		movs	r3, #1
 2253 0062 00E0     		b	.L153
 2254              	.L152:
 2255              		.loc 1 1542 9 discriminator 4
 2256 0064 0023     		movs	r3, #0
 2257              	.L153:
 2258              		.loc 1 1542 9 discriminator 6
 2259 0066 002B     		cmp	r3, #0
 2260 0068 0AD1     		bne	.L154
 2261              	.LBB174:
 2262              	.LBB175:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2263              		.loc 2 198 9 is_stmt 1
 2264              		.syntax unified
 2265              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2266 006a 4FF05003 			mov r3, #80												
 2267 006e 83F31188 		msr basepri, r3											
 2268 0072 BFF36F8F 		isb														
 2269 0076 BFF34F8F 		dsb														
 2270              	
 2271              	@ 0 "" 2
 2272              		.thumb
 2273              		.syntax unified
 2274 007a 3B61     		str	r3, [r7, #16]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2275              		.loc 2 206 5
 2276 007c 00BF     		nop
 2277              	.L155:
 2278              	.LBE175:
 2279              	.LBE174:
 2280              		.loc 1 1542 9 discriminator 3
 2281 007e FEE7     		b	.L155
 2282              	.L154:
1543:ThirdParty/FreeRTOS/queue.c ****     }
1544:ThirdParty/FreeRTOS/queue.c ****     #endif
1545:ThirdParty/FreeRTOS/queue.c **** 
1546:ThirdParty/FreeRTOS/queue.c ****     /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1547:ThirdParty/FreeRTOS/queue.c ****      * statements within the function itself.  This is done in the interest
1548:ThirdParty/FreeRTOS/queue.c ****      * of execution time efficiency. */
1549:ThirdParty/FreeRTOS/queue.c ****     for( ; ; )
1550:ThirdParty/FreeRTOS/queue.c ****     {
1551:ThirdParty/FreeRTOS/queue.c ****         taskENTER_CRITICAL();
 2283              		.loc 1 1551 9
 2284 0080 FFF7FEFF 		bl	vPortEnterCritical
 2285              	.LBB176:
1552:ThirdParty/FreeRTOS/queue.c ****         {
1553:ThirdParty/FreeRTOS/queue.c ****             /* Semaphores are queues with an item size of 0, and where the
1554:ThirdParty/FreeRTOS/queue.c ****              * number of messages in the queue is the semaphore's count value. */
1555:ThirdParty/FreeRTOS/queue.c ****             const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 2286              		.loc 1 1555 31
 2287 0084 7B6A     		ldr	r3, [r7, #36]
 2288 0086 9B6B     		ldr	r3, [r3, #56]
 2289 0088 3B62     		str	r3, [r7, #32]
1556:ThirdParty/FreeRTOS/queue.c **** 
1557:ThirdParty/FreeRTOS/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1558:ThirdParty/FreeRTOS/queue.c ****              * must be the highest priority task wanting to access the queue. */
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 73


1559:ThirdParty/FreeRTOS/queue.c ****             if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 2290              		.loc 1 1559 15
 2291 008a 3B6A     		ldr	r3, [r7, #32]
 2292 008c 002B     		cmp	r3, #0
 2293 008e 19D0     		beq	.L156
1560:ThirdParty/FreeRTOS/queue.c ****             {
1561:ThirdParty/FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1562:ThirdParty/FreeRTOS/queue.c **** 
1563:ThirdParty/FreeRTOS/queue.c ****                 /* Semaphores are queues with a data size of zero and where the
1564:ThirdParty/FreeRTOS/queue.c ****                  * messages waiting is the semaphore's count.  Reduce the count. */
1565:ThirdParty/FreeRTOS/queue.c ****                 pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 2294              		.loc 1 1565 63
 2295 0090 3B6A     		ldr	r3, [r7, #32]
 2296 0092 5A1E     		subs	r2, r3, #1
 2297              		.loc 1 1565 44
 2298 0094 7B6A     		ldr	r3, [r7, #36]
 2299 0096 9A63     		str	r2, [r3, #56]
1566:ThirdParty/FreeRTOS/queue.c **** 
1567:ThirdParty/FreeRTOS/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1568:ThirdParty/FreeRTOS/queue.c ****                 {
1569:ThirdParty/FreeRTOS/queue.c ****                     if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2300              		.loc 1 1569 32
 2301 0098 7B6A     		ldr	r3, [r7, #36]
 2302 009a 1B68     		ldr	r3, [r3]
 2303              		.loc 1 1569 23
 2304 009c 002B     		cmp	r3, #0
 2305 009e 04D1     		bne	.L157
1570:ThirdParty/FreeRTOS/queue.c ****                     {
1571:ThirdParty/FreeRTOS/queue.c ****                         /* Record the information required to implement
1572:ThirdParty/FreeRTOS/queue.c ****                          * priority inheritance should it become necessary. */
1573:ThirdParty/FreeRTOS/queue.c ****                         pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 2306              		.loc 1 1573 62
 2307 00a0 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 2308 00a4 0246     		mov	r2, r0
 2309              		.loc 1 1573 60
 2310 00a6 7B6A     		ldr	r3, [r7, #36]
 2311 00a8 9A60     		str	r2, [r3, #8]
 2312              	.L157:
1574:ThirdParty/FreeRTOS/queue.c ****                     }
1575:ThirdParty/FreeRTOS/queue.c ****                     else
1576:ThirdParty/FreeRTOS/queue.c ****                     {
1577:ThirdParty/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1578:ThirdParty/FreeRTOS/queue.c ****                     }
1579:ThirdParty/FreeRTOS/queue.c ****                 }
1580:ThirdParty/FreeRTOS/queue.c ****                 #endif /* configUSE_MUTEXES */
1581:ThirdParty/FreeRTOS/queue.c **** 
1582:ThirdParty/FreeRTOS/queue.c ****                 /* Check to see if other tasks are blocked waiting to give the
1583:ThirdParty/FreeRTOS/queue.c ****                  * semaphore, and if so, unblock the highest priority such task. */
1584:ThirdParty/FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2313              		.loc 1 1584 21
 2314 00aa 7B6A     		ldr	r3, [r7, #36]
 2315 00ac 1B69     		ldr	r3, [r3, #16]
 2316              		.loc 1 1584 19
 2317 00ae 002B     		cmp	r3, #0
 2318 00b0 04D0     		beq	.L158
1585:ThirdParty/FreeRTOS/queue.c ****                 {
1586:ThirdParty/FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 74


 2319              		.loc 1 1586 51
 2320 00b2 7B6A     		ldr	r3, [r7, #36]
 2321 00b4 1033     		adds	r3, r3, #16
 2322              		.loc 1 1586 25
 2323 00b6 1846     		mov	r0, r3
 2324 00b8 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2325              	.L158:
1587:ThirdParty/FreeRTOS/queue.c ****                     {
1588:ThirdParty/FreeRTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1589:ThirdParty/FreeRTOS/queue.c ****                     }
1590:ThirdParty/FreeRTOS/queue.c ****                     else
1591:ThirdParty/FreeRTOS/queue.c ****                     {
1592:ThirdParty/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1593:ThirdParty/FreeRTOS/queue.c ****                     }
1594:ThirdParty/FreeRTOS/queue.c ****                 }
1595:ThirdParty/FreeRTOS/queue.c ****                 else
1596:ThirdParty/FreeRTOS/queue.c ****                 {
1597:ThirdParty/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1598:ThirdParty/FreeRTOS/queue.c ****                 }
1599:ThirdParty/FreeRTOS/queue.c **** 
1600:ThirdParty/FreeRTOS/queue.c ****                 taskEXIT_CRITICAL();
 2326              		.loc 1 1600 17
 2327 00bc FFF7FEFF 		bl	vPortExitCritical
1601:ThirdParty/FreeRTOS/queue.c ****                 return pdPASS;
 2328              		.loc 1 1601 24
 2329 00c0 0123     		movs	r3, #1
 2330 00c2 88E0     		b	.L169
 2331              	.L156:
1602:ThirdParty/FreeRTOS/queue.c ****             }
1603:ThirdParty/FreeRTOS/queue.c ****             else
1604:ThirdParty/FreeRTOS/queue.c ****             {
1605:ThirdParty/FreeRTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
 2332              		.loc 1 1605 34
 2333 00c4 3B68     		ldr	r3, [r7]
 2334              		.loc 1 1605 19
 2335 00c6 002B     		cmp	r3, #0
 2336 00c8 03D1     		bne	.L160
1606:ThirdParty/FreeRTOS/queue.c ****                 {
1607:ThirdParty/FreeRTOS/queue.c ****                     /* The semaphore count was 0 and no block time is specified
1608:ThirdParty/FreeRTOS/queue.c ****                      * (or the block time has expired) so exit now. */
1609:ThirdParty/FreeRTOS/queue.c ****                     taskEXIT_CRITICAL();
 2337              		.loc 1 1609 21
 2338 00ca FFF7FEFF 		bl	vPortExitCritical
1610:ThirdParty/FreeRTOS/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1611:ThirdParty/FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
 2339              		.loc 1 1611 28
 2340 00ce 0023     		movs	r3, #0
 2341 00d0 81E0     		b	.L169
 2342              	.L160:
1612:ThirdParty/FreeRTOS/queue.c ****                 }
1613:ThirdParty/FreeRTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
 2343              		.loc 1 1613 24
 2344 00d2 FB6A     		ldr	r3, [r7, #44]
 2345 00d4 002B     		cmp	r3, #0
 2346 00d6 06D1     		bne	.L161
1614:ThirdParty/FreeRTOS/queue.c ****                 {
1615:ThirdParty/FreeRTOS/queue.c ****                     /* The semaphore count was 0 and a block time was specified
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 75


1616:ThirdParty/FreeRTOS/queue.c ****                      * so configure the timeout structure ready to block. */
1617:ThirdParty/FreeRTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 2347              		.loc 1 1617 21
 2348 00d8 07F10803 		add	r3, r7, #8
 2349 00dc 1846     		mov	r0, r3
 2350 00de FFF7FEFF 		bl	vTaskInternalSetTimeOutState
1618:ThirdParty/FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 2351              		.loc 1 1618 35
 2352 00e2 0123     		movs	r3, #1
 2353 00e4 FB62     		str	r3, [r7, #44]
 2354              	.L161:
 2355              	.LBE176:
1619:ThirdParty/FreeRTOS/queue.c ****                 }
1620:ThirdParty/FreeRTOS/queue.c ****                 else
1621:ThirdParty/FreeRTOS/queue.c ****                 {
1622:ThirdParty/FreeRTOS/queue.c ****                     /* Entry time was already set. */
1623:ThirdParty/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1624:ThirdParty/FreeRTOS/queue.c ****                 }
1625:ThirdParty/FreeRTOS/queue.c ****             }
1626:ThirdParty/FreeRTOS/queue.c ****         }
1627:ThirdParty/FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
 2356              		.loc 1 1627 9
 2357 00e6 FFF7FEFF 		bl	vPortExitCritical
1628:ThirdParty/FreeRTOS/queue.c **** 
1629:ThirdParty/FreeRTOS/queue.c ****         /* Interrupts and other tasks can give to and take from the semaphore
1630:ThirdParty/FreeRTOS/queue.c ****          * now the critical section has been exited. */
1631:ThirdParty/FreeRTOS/queue.c **** 
1632:ThirdParty/FreeRTOS/queue.c ****         vTaskSuspendAll();
 2358              		.loc 1 1632 9
 2359 00ea FFF7FEFF 		bl	vTaskSuspendAll
1633:ThirdParty/FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 2360              		.loc 1 1633 9
 2361 00ee FFF7FEFF 		bl	vPortEnterCritical
 2362 00f2 7B6A     		ldr	r3, [r7, #36]
 2363 00f4 93F84430 		ldrb	r3, [r3, #68]
 2364 00f8 5BB2     		sxtb	r3, r3
 2365 00fa B3F1FF3F 		cmp	r3, #-1
 2366 00fe 03D1     		bne	.L162
 2367              		.loc 1 1633 9 is_stmt 0 discriminator 1
 2368 0100 7B6A     		ldr	r3, [r7, #36]
 2369 0102 0022     		movs	r2, #0
 2370 0104 83F84420 		strb	r2, [r3, #68]
 2371              	.L162:
 2372              		.loc 1 1633 9 discriminator 3
 2373 0108 7B6A     		ldr	r3, [r7, #36]
 2374 010a 93F84530 		ldrb	r3, [r3, #69]
 2375 010e 5BB2     		sxtb	r3, r3
 2376 0110 B3F1FF3F 		cmp	r3, #-1
 2377 0114 03D1     		bne	.L163
 2378              		.loc 1 1633 9 discriminator 4
 2379 0116 7B6A     		ldr	r3, [r7, #36]
 2380 0118 0022     		movs	r2, #0
 2381 011a 83F84520 		strb	r2, [r3, #69]
 2382              	.L163:
 2383              		.loc 1 1633 9 discriminator 6
 2384 011e FFF7FEFF 		bl	vPortExitCritical
1634:ThirdParty/FreeRTOS/queue.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 76


1635:ThirdParty/FreeRTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1636:ThirdParty/FreeRTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2385              		.loc 1 1636 13 is_stmt 1 discriminator 6
 2386 0122 3A46     		mov	r2, r7
 2387 0124 07F10803 		add	r3, r7, #8
 2388 0128 1146     		mov	r1, r2
 2389 012a 1846     		mov	r0, r3
 2390 012c FFF7FEFF 		bl	xTaskCheckForTimeOut
 2391 0130 0346     		mov	r3, r0
 2392              		.loc 1 1636 11 discriminator 6
 2393 0132 002B     		cmp	r3, #0
 2394 0134 31D1     		bne	.L164
1637:ThirdParty/FreeRTOS/queue.c ****         {
1638:ThirdParty/FreeRTOS/queue.c ****             /* A block time is specified and not expired.  If the semaphore
1639:ThirdParty/FreeRTOS/queue.c ****              * count is 0 then enter the Blocked state to wait for a semaphore to
1640:ThirdParty/FreeRTOS/queue.c ****              * become available.  As semaphores are implemented with queues the
1641:ThirdParty/FreeRTOS/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1642:ThirdParty/FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2395              		.loc 1 1642 17
 2396 0136 786A     		ldr	r0, [r7, #36]
 2397 0138 FFF7FEFF 		bl	prvIsQueueEmpty
 2398 013c 0346     		mov	r3, r0
 2399              		.loc 1 1642 15
 2400 013e 002B     		cmp	r3, #0
 2401 0140 25D0     		beq	.L165
1643:ThirdParty/FreeRTOS/queue.c ****             {
1644:ThirdParty/FreeRTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1645:ThirdParty/FreeRTOS/queue.c **** 
1646:ThirdParty/FreeRTOS/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1647:ThirdParty/FreeRTOS/queue.c ****                 {
1648:ThirdParty/FreeRTOS/queue.c ****                     if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2402              		.loc 1 1648 32
 2403 0142 7B6A     		ldr	r3, [r7, #36]
 2404 0144 1B68     		ldr	r3, [r3]
 2405              		.loc 1 1648 23
 2406 0146 002B     		cmp	r3, #0
 2407 0148 09D1     		bne	.L166
1649:ThirdParty/FreeRTOS/queue.c ****                     {
1650:ThirdParty/FreeRTOS/queue.c ****                         taskENTER_CRITICAL();
 2408              		.loc 1 1650 25
 2409 014a FFF7FEFF 		bl	vPortEnterCritical
1651:ThirdParty/FreeRTOS/queue.c ****                         {
1652:ThirdParty/FreeRTOS/queue.c ****                             xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMut
 2410              		.loc 1 1652 52
 2411 014e 7B6A     		ldr	r3, [r7, #36]
 2412 0150 9B68     		ldr	r3, [r3, #8]
 2413 0152 1846     		mov	r0, r3
 2414 0154 FFF7FEFF 		bl	xTaskPriorityInherit
 2415 0158 B862     		str	r0, [r7, #40]
1653:ThirdParty/FreeRTOS/queue.c ****                         }
1654:ThirdParty/FreeRTOS/queue.c ****                         taskEXIT_CRITICAL();
 2416              		.loc 1 1654 25
 2417 015a FFF7FEFF 		bl	vPortExitCritical
 2418              	.L166:
1655:ThirdParty/FreeRTOS/queue.c ****                     }
1656:ThirdParty/FreeRTOS/queue.c ****                     else
1657:ThirdParty/FreeRTOS/queue.c ****                     {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 77


1658:ThirdParty/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1659:ThirdParty/FreeRTOS/queue.c ****                     }
1660:ThirdParty/FreeRTOS/queue.c ****                 }
1661:ThirdParty/FreeRTOS/queue.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1662:ThirdParty/FreeRTOS/queue.c **** 
1663:ThirdParty/FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2419              		.loc 1 1663 17
 2420 015e 7B6A     		ldr	r3, [r7, #36]
 2421 0160 2433     		adds	r3, r3, #36
 2422 0162 3A68     		ldr	r2, [r7]
 2423 0164 1146     		mov	r1, r2
 2424 0166 1846     		mov	r0, r3
 2425 0168 FFF7FEFF 		bl	vTaskPlaceOnEventList
1664:ThirdParty/FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2426              		.loc 1 1664 17
 2427 016c 786A     		ldr	r0, [r7, #36]
 2428 016e FFF7FEFF 		bl	prvUnlockQueue
1665:ThirdParty/FreeRTOS/queue.c **** 
1666:ThirdParty/FreeRTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
 2429              		.loc 1 1666 21
 2430 0172 FFF7FEFF 		bl	xTaskResumeAll
 2431 0176 0346     		mov	r3, r0
 2432              		.loc 1 1666 19
 2433 0178 002B     		cmp	r3, #0
 2434 017a 81D1     		bne	.L154
1667:ThirdParty/FreeRTOS/queue.c ****                 {
1668:ThirdParty/FreeRTOS/queue.c ****                     portYIELD_WITHIN_API();
 2435              		.loc 1 1668 21
 2436 017c 184B     		ldr	r3, .L170
 2437 017e 4FF08052 		mov	r2, #268435456
 2438 0182 1A60     		str	r2, [r3]
 2439              		.syntax unified
 2440              	@ 1668 "ThirdParty/FreeRTOS/queue.c" 1
 2441 0184 BFF34F8F 		dsb
 2442              	@ 0 "" 2
 2443              	@ 1668 "ThirdParty/FreeRTOS/queue.c" 1
 2444 0188 BFF36F8F 		isb
 2445              	@ 0 "" 2
 2446              		.thumb
 2447              		.syntax unified
 2448 018c 78E7     		b	.L154
 2449              	.L165:
1669:ThirdParty/FreeRTOS/queue.c ****                 }
1670:ThirdParty/FreeRTOS/queue.c ****                 else
1671:ThirdParty/FreeRTOS/queue.c ****                 {
1672:ThirdParty/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1673:ThirdParty/FreeRTOS/queue.c ****                 }
1674:ThirdParty/FreeRTOS/queue.c ****             }
1675:ThirdParty/FreeRTOS/queue.c ****             else
1676:ThirdParty/FreeRTOS/queue.c ****             {
1677:ThirdParty/FreeRTOS/queue.c ****                 /* There was no timeout and the semaphore count was not 0, so
1678:ThirdParty/FreeRTOS/queue.c ****                  * attempt to take the semaphore again. */
1679:ThirdParty/FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2450              		.loc 1 1679 17
 2451 018e 786A     		ldr	r0, [r7, #36]
 2452 0190 FFF7FEFF 		bl	prvUnlockQueue
1680:ThirdParty/FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 78


 2453              		.loc 1 1680 26
 2454 0194 FFF7FEFF 		bl	xTaskResumeAll
 2455 0198 72E7     		b	.L154
 2456              	.L164:
1681:ThirdParty/FreeRTOS/queue.c ****             }
1682:ThirdParty/FreeRTOS/queue.c ****         }
1683:ThirdParty/FreeRTOS/queue.c ****         else
1684:ThirdParty/FreeRTOS/queue.c ****         {
1685:ThirdParty/FreeRTOS/queue.c ****             /* Timed out. */
1686:ThirdParty/FreeRTOS/queue.c ****             prvUnlockQueue( pxQueue );
 2457              		.loc 1 1686 13
 2458 019a 786A     		ldr	r0, [r7, #36]
 2459 019c FFF7FEFF 		bl	prvUnlockQueue
1687:ThirdParty/FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
 2460              		.loc 1 1687 22
 2461 01a0 FFF7FEFF 		bl	xTaskResumeAll
1688:ThirdParty/FreeRTOS/queue.c **** 
1689:ThirdParty/FreeRTOS/queue.c ****             /* If the semaphore count is 0 exit now as the timeout has
1690:ThirdParty/FreeRTOS/queue.c ****              * expired.  Otherwise return to attempt to take the semaphore that is
1691:ThirdParty/FreeRTOS/queue.c ****              * known to be available.  As semaphores are implemented by queues the
1692:ThirdParty/FreeRTOS/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1693:ThirdParty/FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2462              		.loc 1 1693 17
 2463 01a4 786A     		ldr	r0, [r7, #36]
 2464 01a6 FFF7FEFF 		bl	prvIsQueueEmpty
 2465 01aa 0346     		mov	r3, r0
 2466              		.loc 1 1693 15
 2467 01ac 002B     		cmp	r3, #0
 2468 01ae 3FF467AF 		beq	.L154
1694:ThirdParty/FreeRTOS/queue.c ****             {
1695:ThirdParty/FreeRTOS/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1696:ThirdParty/FreeRTOS/queue.c ****                 {
1697:ThirdParty/FreeRTOS/queue.c ****                     /* xInheritanceOccurred could only have be set if
1698:ThirdParty/FreeRTOS/queue.c ****                      * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1699:ThirdParty/FreeRTOS/queue.c ****                      * test the mutex type again to check it is actually a mutex. */
1700:ThirdParty/FreeRTOS/queue.c ****                     if( xInheritanceOccurred != pdFALSE )
 2469              		.loc 1 1700 23
 2470 01b2 BB6A     		ldr	r3, [r7, #40]
 2471 01b4 002B     		cmp	r3, #0
 2472 01b6 0DD0     		beq	.L168
1701:ThirdParty/FreeRTOS/queue.c ****                     {
1702:ThirdParty/FreeRTOS/queue.c ****                         taskENTER_CRITICAL();
 2473              		.loc 1 1702 25
 2474 01b8 FFF7FEFF 		bl	vPortEnterCritical
 2475              	.LBB177:
1703:ThirdParty/FreeRTOS/queue.c ****                         {
1704:ThirdParty/FreeRTOS/queue.c ****                             UBaseType_t uxHighestWaitingPriority;
1705:ThirdParty/FreeRTOS/queue.c **** 
1706:ThirdParty/FreeRTOS/queue.c ****                             /* This task blocking on the mutex caused another
1707:ThirdParty/FreeRTOS/queue.c ****                              * task to inherit this task's priority.  Now this task
1708:ThirdParty/FreeRTOS/queue.c ****                              * has timed out the priority should be disinherited
1709:ThirdParty/FreeRTOS/queue.c ****                              * again, but only as low as the next highest priority
1710:ThirdParty/FreeRTOS/queue.c ****                              * task that is waiting for the same mutex. */
1711:ThirdParty/FreeRTOS/queue.c ****                             uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueu
 2476              		.loc 1 1711 56
 2477 01bc 786A     		ldr	r0, [r7, #36]
 2478 01be FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 79


 2479 01c2 F861     		str	r0, [r7, #28]
1712:ThirdParty/FreeRTOS/queue.c ****                             vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder
 2480              		.loc 1 1712 29
 2481 01c4 7B6A     		ldr	r3, [r7, #36]
 2482 01c6 9B68     		ldr	r3, [r3, #8]
 2483 01c8 F969     		ldr	r1, [r7, #28]
 2484 01ca 1846     		mov	r0, r3
 2485 01cc FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 2486              	.LBE177:
1713:ThirdParty/FreeRTOS/queue.c ****                         }
1714:ThirdParty/FreeRTOS/queue.c ****                         taskEXIT_CRITICAL();
 2487              		.loc 1 1714 25
 2488 01d0 FFF7FEFF 		bl	vPortExitCritical
 2489              	.L168:
1715:ThirdParty/FreeRTOS/queue.c ****                     }
1716:ThirdParty/FreeRTOS/queue.c ****                 }
1717:ThirdParty/FreeRTOS/queue.c ****                 #endif /* configUSE_MUTEXES */
1718:ThirdParty/FreeRTOS/queue.c **** 
1719:ThirdParty/FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1720:ThirdParty/FreeRTOS/queue.c ****                 return errQUEUE_EMPTY;
 2490              		.loc 1 1720 24
 2491 01d4 0023     		movs	r3, #0
 2492              	.L169:
1721:ThirdParty/FreeRTOS/queue.c ****             }
1722:ThirdParty/FreeRTOS/queue.c ****             else
1723:ThirdParty/FreeRTOS/queue.c ****             {
1724:ThirdParty/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1725:ThirdParty/FreeRTOS/queue.c ****             }
1726:ThirdParty/FreeRTOS/queue.c ****         }
1727:ThirdParty/FreeRTOS/queue.c ****     } /*lint -restore */
1728:ThirdParty/FreeRTOS/queue.c **** }
 2493              		.loc 1 1728 1 discriminator 7
 2494 01d6 1846     		mov	r0, r3
 2495 01d8 3037     		adds	r7, r7, #48
 2496              	.LCFI63:
 2497              		.cfi_def_cfa_offset 8
 2498 01da BD46     		mov	sp, r7
 2499              	.LCFI64:
 2500              		.cfi_def_cfa_register 13
 2501              		@ sp needed
 2502 01dc 80BD     		pop	{r7, pc}
 2503              	.L171:
 2504 01de 00BF     		.align	2
 2505              	.L170:
 2506 01e0 04ED00E0 		.word	-536810236
 2507              		.cfi_endproc
 2508              	.LFE17:
 2510              		.section	.text.xQueuePeek,"ax",%progbits
 2511              		.align	1
 2512              		.global	xQueuePeek
 2513              		.syntax unified
 2514              		.thumb
 2515              		.thumb_func
 2517              	xQueuePeek:
 2518              	.LFB18:
1729:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1730:ThirdParty/FreeRTOS/queue.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 80


1731:ThirdParty/FreeRTOS/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue,
1732:ThirdParty/FreeRTOS/queue.c ****                        void * const pvBuffer,
1733:ThirdParty/FreeRTOS/queue.c ****                        TickType_t xTicksToWait )
1734:ThirdParty/FreeRTOS/queue.c **** {
 2519              		.loc 1 1734 1
 2520              		.cfi_startproc
 2521              		@ args = 0, pretend = 0, frame = 56
 2522              		@ frame_needed = 1, uses_anonymous_args = 0
 2523 0000 80B5     		push	{r7, lr}
 2524              	.LCFI65:
 2525              		.cfi_def_cfa_offset 8
 2526              		.cfi_offset 7, -8
 2527              		.cfi_offset 14, -4
 2528 0002 8EB0     		sub	sp, sp, #56
 2529              	.LCFI66:
 2530              		.cfi_def_cfa_offset 64
 2531 0004 00AF     		add	r7, sp, #0
 2532              	.LCFI67:
 2533              		.cfi_def_cfa_register 7
 2534 0006 F860     		str	r0, [r7, #12]
 2535 0008 B960     		str	r1, [r7, #8]
 2536 000a 7A60     		str	r2, [r7, #4]
1735:ThirdParty/FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 2537              		.loc 1 1735 16
 2538 000c 0023     		movs	r3, #0
 2539 000e 7B63     		str	r3, [r7, #52]
1736:ThirdParty/FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
1737:ThirdParty/FreeRTOS/queue.c ****     int8_t * pcOriginalReadPosition;
1738:ThirdParty/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 2540              		.loc 1 1738 21
 2541 0010 FB68     		ldr	r3, [r7, #12]
 2542 0012 3B63     		str	r3, [r7, #48]
1739:ThirdParty/FreeRTOS/queue.c **** 
1740:ThirdParty/FreeRTOS/queue.c ****     /* Check the pointer is not NULL. */
1741:ThirdParty/FreeRTOS/queue.c ****     configASSERT( ( pxQueue ) );
 2543              		.loc 1 1741 5
 2544 0014 3B6B     		ldr	r3, [r7, #48]
 2545 0016 002B     		cmp	r3, #0
 2546 0018 0AD1     		bne	.L173
 2547              	.LBB178:
 2548              	.LBB179:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2549              		.loc 2 198 9
 2550              		.syntax unified
 2551              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2552 001a 4FF05003 			mov r3, #80												
 2553 001e 83F31188 		msr basepri, r3											
 2554 0022 BFF36F8F 		isb														
 2555 0026 BFF34F8F 		dsb														
 2556              	
 2557              	@ 0 "" 2
 2558              		.thumb
 2559              		.syntax unified
 2560 002a 7B62     		str	r3, [r7, #36]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2561              		.loc 2 206 5
 2562 002c 00BF     		nop
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 81


 2563              	.L174:
 2564              	.LBE179:
 2565              	.LBE178:
 2566              		.loc 1 1741 5 discriminator 1
 2567 002e FEE7     		b	.L174
 2568              	.L173:
1742:ThirdParty/FreeRTOS/queue.c **** 
1743:ThirdParty/FreeRTOS/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1744:ThirdParty/FreeRTOS/queue.c ****      * is zero (so no data is copied into the buffer. */
1745:ThirdParty/FreeRTOS/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
 2569              		.loc 1 1745 5
 2570 0030 BB68     		ldr	r3, [r7, #8]
 2571 0032 002B     		cmp	r3, #0
 2572 0034 03D1     		bne	.L175
 2573              		.loc 1 1745 5 is_stmt 0 discriminator 2
 2574 0036 3B6B     		ldr	r3, [r7, #48]
 2575 0038 1B6C     		ldr	r3, [r3, #64]
 2576 003a 002B     		cmp	r3, #0
 2577 003c 01D1     		bne	.L176
 2578              	.L175:
 2579              		.loc 1 1745 5 discriminator 3
 2580 003e 0123     		movs	r3, #1
 2581 0040 00E0     		b	.L177
 2582              	.L176:
 2583              		.loc 1 1745 5 discriminator 4
 2584 0042 0023     		movs	r3, #0
 2585              	.L177:
 2586              		.loc 1 1745 5 discriminator 6
 2587 0044 002B     		cmp	r3, #0
 2588 0046 0AD1     		bne	.L178
 2589              	.LBB180:
 2590              	.LBB181:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2591              		.loc 2 198 9 is_stmt 1
 2592              		.syntax unified
 2593              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2594 0048 4FF05003 			mov r3, #80												
 2595 004c 83F31188 		msr basepri, r3											
 2596 0050 BFF36F8F 		isb														
 2597 0054 BFF34F8F 		dsb														
 2598              	
 2599              	@ 0 "" 2
 2600              		.thumb
 2601              		.syntax unified
 2602 0058 3B62     		str	r3, [r7, #32]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2603              		.loc 2 206 5
 2604 005a 00BF     		nop
 2605              	.L179:
 2606              	.LBE181:
 2607              	.LBE180:
 2608              		.loc 1 1745 5 discriminator 2
 2609 005c FEE7     		b	.L179
 2610              	.L178:
1746:ThirdParty/FreeRTOS/queue.c **** 
1747:ThirdParty/FreeRTOS/queue.c ****     /* Cannot block if the scheduler is suspended. */
1748:ThirdParty/FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 82


1749:ThirdParty/FreeRTOS/queue.c ****     {
1750:ThirdParty/FreeRTOS/queue.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
 2611              		.loc 1 1750 9
 2612 005e FFF7FEFF 		bl	xTaskGetSchedulerState
 2613 0062 0346     		mov	r3, r0
 2614 0064 002B     		cmp	r3, #0
 2615 0066 02D1     		bne	.L180
 2616              		.loc 1 1750 9 is_stmt 0 discriminator 2
 2617 0068 7B68     		ldr	r3, [r7, #4]
 2618 006a 002B     		cmp	r3, #0
 2619 006c 01D1     		bne	.L181
 2620              	.L180:
 2621              		.loc 1 1750 9 discriminator 3
 2622 006e 0123     		movs	r3, #1
 2623 0070 00E0     		b	.L182
 2624              	.L181:
 2625              		.loc 1 1750 9 discriminator 4
 2626 0072 0023     		movs	r3, #0
 2627              	.L182:
 2628              		.loc 1 1750 9 discriminator 6
 2629 0074 002B     		cmp	r3, #0
 2630 0076 0AD1     		bne	.L183
 2631              	.LBB182:
 2632              	.LBB183:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2633              		.loc 2 198 9 is_stmt 1
 2634              		.syntax unified
 2635              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2636 0078 4FF05003 			mov r3, #80												
 2637 007c 83F31188 		msr basepri, r3											
 2638 0080 BFF36F8F 		isb														
 2639 0084 BFF34F8F 		dsb														
 2640              	
 2641              	@ 0 "" 2
 2642              		.thumb
 2643              		.syntax unified
 2644 0088 FB61     		str	r3, [r7, #28]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2645              		.loc 2 206 5
 2646 008a 00BF     		nop
 2647              	.L184:
 2648              	.LBE183:
 2649              	.LBE182:
 2650              		.loc 1 1750 9 discriminator 3
 2651 008c FEE7     		b	.L184
 2652              	.L183:
1751:ThirdParty/FreeRTOS/queue.c ****     }
1752:ThirdParty/FreeRTOS/queue.c ****     #endif
1753:ThirdParty/FreeRTOS/queue.c **** 
1754:ThirdParty/FreeRTOS/queue.c ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1755:ThirdParty/FreeRTOS/queue.c ****      * allow return statements within the function itself.  This is done in the
1756:ThirdParty/FreeRTOS/queue.c ****      * interest of execution time efficiency. */
1757:ThirdParty/FreeRTOS/queue.c ****     for( ; ; )
1758:ThirdParty/FreeRTOS/queue.c ****     {
1759:ThirdParty/FreeRTOS/queue.c ****         taskENTER_CRITICAL();
 2653              		.loc 1 1759 9
 2654 008e FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 83


 2655              	.LBB184:
1760:ThirdParty/FreeRTOS/queue.c ****         {
1761:ThirdParty/FreeRTOS/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2656              		.loc 1 1761 31
 2657 0092 3B6B     		ldr	r3, [r7, #48]
 2658 0094 9B6B     		ldr	r3, [r3, #56]
 2659 0096 FB62     		str	r3, [r7, #44]
1762:ThirdParty/FreeRTOS/queue.c **** 
1763:ThirdParty/FreeRTOS/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1764:ThirdParty/FreeRTOS/queue.c ****              * must be the highest priority task wanting to access the queue. */
1765:ThirdParty/FreeRTOS/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2660              		.loc 1 1765 15
 2661 0098 FB6A     		ldr	r3, [r7, #44]
 2662 009a 002B     		cmp	r3, #0
 2663 009c 16D0     		beq	.L185
1766:ThirdParty/FreeRTOS/queue.c ****             {
1767:ThirdParty/FreeRTOS/queue.c ****                 /* Remember the read position so it can be reset after the data
1768:ThirdParty/FreeRTOS/queue.c ****                  * is read from the queue as this function is only peeking the
1769:ThirdParty/FreeRTOS/queue.c ****                  * data, not removing it. */
1770:ThirdParty/FreeRTOS/queue.c ****                 pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 2664              		.loc 1 1770 40
 2665 009e 3B6B     		ldr	r3, [r7, #48]
 2666 00a0 DB68     		ldr	r3, [r3, #12]
 2667 00a2 BB62     		str	r3, [r7, #40]
1771:ThirdParty/FreeRTOS/queue.c **** 
1772:ThirdParty/FreeRTOS/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
 2668              		.loc 1 1772 17
 2669 00a4 B968     		ldr	r1, [r7, #8]
 2670 00a6 386B     		ldr	r0, [r7, #48]
 2671 00a8 FFF7FEFF 		bl	prvCopyDataFromQueue
1773:ThirdParty/FreeRTOS/queue.c ****                 traceQUEUE_PEEK( pxQueue );
1774:ThirdParty/FreeRTOS/queue.c **** 
1775:ThirdParty/FreeRTOS/queue.c ****                 /* The data is not being removed, so reset the read pointer. */
1776:ThirdParty/FreeRTOS/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 2672              		.loc 1 1776 46
 2673 00ac 3B6B     		ldr	r3, [r7, #48]
 2674 00ae BA6A     		ldr	r2, [r7, #40]
 2675 00b0 DA60     		str	r2, [r3, #12]
1777:ThirdParty/FreeRTOS/queue.c **** 
1778:ThirdParty/FreeRTOS/queue.c ****                 /* The data is being left in the queue, so see if there are
1779:ThirdParty/FreeRTOS/queue.c ****                  * any other tasks waiting for the data. */
1780:ThirdParty/FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 2676              		.loc 1 1780 21
 2677 00b2 3B6B     		ldr	r3, [r7, #48]
 2678 00b4 5B6A     		ldr	r3, [r3, #36]
 2679              		.loc 1 1780 19
 2680 00b6 002B     		cmp	r3, #0
 2681 00b8 04D0     		beq	.L186
1781:ThirdParty/FreeRTOS/queue.c ****                 {
1782:ThirdParty/FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE
 2682              		.loc 1 1782 51
 2683 00ba 3B6B     		ldr	r3, [r7, #48]
 2684 00bc 2433     		adds	r3, r3, #36
 2685              		.loc 1 1782 25
 2686 00be 1846     		mov	r0, r3
 2687 00c0 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2688              	.L186:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 84


1783:ThirdParty/FreeRTOS/queue.c ****                     {
1784:ThirdParty/FreeRTOS/queue.c ****                         /* The task waiting has a higher priority than this task. */
1785:ThirdParty/FreeRTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1786:ThirdParty/FreeRTOS/queue.c ****                     }
1787:ThirdParty/FreeRTOS/queue.c ****                     else
1788:ThirdParty/FreeRTOS/queue.c ****                     {
1789:ThirdParty/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1790:ThirdParty/FreeRTOS/queue.c ****                     }
1791:ThirdParty/FreeRTOS/queue.c ****                 }
1792:ThirdParty/FreeRTOS/queue.c ****                 else
1793:ThirdParty/FreeRTOS/queue.c ****                 {
1794:ThirdParty/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1795:ThirdParty/FreeRTOS/queue.c ****                 }
1796:ThirdParty/FreeRTOS/queue.c **** 
1797:ThirdParty/FreeRTOS/queue.c ****                 taskEXIT_CRITICAL();
 2689              		.loc 1 1797 17
 2690 00c4 FFF7FEFF 		bl	vPortExitCritical
1798:ThirdParty/FreeRTOS/queue.c ****                 return pdPASS;
 2691              		.loc 1 1798 24
 2692 00c8 0123     		movs	r3, #1
 2693 00ca 69E0     		b	.L195
 2694              	.L185:
1799:ThirdParty/FreeRTOS/queue.c ****             }
1800:ThirdParty/FreeRTOS/queue.c ****             else
1801:ThirdParty/FreeRTOS/queue.c ****             {
1802:ThirdParty/FreeRTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
 2695              		.loc 1 1802 34
 2696 00cc 7B68     		ldr	r3, [r7, #4]
 2697              		.loc 1 1802 19
 2698 00ce 002B     		cmp	r3, #0
 2699 00d0 03D1     		bne	.L188
1803:ThirdParty/FreeRTOS/queue.c ****                 {
1804:ThirdParty/FreeRTOS/queue.c ****                     /* The queue was empty and no block time is specified (or
1805:ThirdParty/FreeRTOS/queue.c ****                      * the block time has expired) so leave now. */
1806:ThirdParty/FreeRTOS/queue.c ****                     taskEXIT_CRITICAL();
 2700              		.loc 1 1806 21
 2701 00d2 FFF7FEFF 		bl	vPortExitCritical
1807:ThirdParty/FreeRTOS/queue.c ****                     traceQUEUE_PEEK_FAILED( pxQueue );
1808:ThirdParty/FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
 2702              		.loc 1 1808 28
 2703 00d6 0023     		movs	r3, #0
 2704 00d8 62E0     		b	.L195
 2705              	.L188:
1809:ThirdParty/FreeRTOS/queue.c ****                 }
1810:ThirdParty/FreeRTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
 2706              		.loc 1 1810 24
 2707 00da 7B6B     		ldr	r3, [r7, #52]
 2708 00dc 002B     		cmp	r3, #0
 2709 00de 06D1     		bne	.L189
1811:ThirdParty/FreeRTOS/queue.c ****                 {
1812:ThirdParty/FreeRTOS/queue.c ****                     /* The queue was empty and a block time was specified so
1813:ThirdParty/FreeRTOS/queue.c ****                      * configure the timeout structure ready to enter the blocked
1814:ThirdParty/FreeRTOS/queue.c ****                      * state. */
1815:ThirdParty/FreeRTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 2710              		.loc 1 1815 21
 2711 00e0 07F11403 		add	r3, r7, #20
 2712 00e4 1846     		mov	r0, r3
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 85


 2713 00e6 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
1816:ThirdParty/FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 2714              		.loc 1 1816 35
 2715 00ea 0123     		movs	r3, #1
 2716 00ec 7B63     		str	r3, [r7, #52]
 2717              	.L189:
 2718              	.LBE184:
1817:ThirdParty/FreeRTOS/queue.c ****                 }
1818:ThirdParty/FreeRTOS/queue.c ****                 else
1819:ThirdParty/FreeRTOS/queue.c ****                 {
1820:ThirdParty/FreeRTOS/queue.c ****                     /* Entry time was already set. */
1821:ThirdParty/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1822:ThirdParty/FreeRTOS/queue.c ****                 }
1823:ThirdParty/FreeRTOS/queue.c ****             }
1824:ThirdParty/FreeRTOS/queue.c ****         }
1825:ThirdParty/FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
 2719              		.loc 1 1825 9
 2720 00ee FFF7FEFF 		bl	vPortExitCritical
1826:ThirdParty/FreeRTOS/queue.c **** 
1827:ThirdParty/FreeRTOS/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1828:ThirdParty/FreeRTOS/queue.c ****          * now that the critical section has been exited. */
1829:ThirdParty/FreeRTOS/queue.c **** 
1830:ThirdParty/FreeRTOS/queue.c ****         vTaskSuspendAll();
 2721              		.loc 1 1830 9
 2722 00f2 FFF7FEFF 		bl	vTaskSuspendAll
1831:ThirdParty/FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 2723              		.loc 1 1831 9
 2724 00f6 FFF7FEFF 		bl	vPortEnterCritical
 2725 00fa 3B6B     		ldr	r3, [r7, #48]
 2726 00fc 93F84430 		ldrb	r3, [r3, #68]
 2727 0100 5BB2     		sxtb	r3, r3
 2728 0102 B3F1FF3F 		cmp	r3, #-1
 2729 0106 03D1     		bne	.L190
 2730              		.loc 1 1831 9 is_stmt 0 discriminator 1
 2731 0108 3B6B     		ldr	r3, [r7, #48]
 2732 010a 0022     		movs	r2, #0
 2733 010c 83F84420 		strb	r2, [r3, #68]
 2734              	.L190:
 2735              		.loc 1 1831 9 discriminator 3
 2736 0110 3B6B     		ldr	r3, [r7, #48]
 2737 0112 93F84530 		ldrb	r3, [r3, #69]
 2738 0116 5BB2     		sxtb	r3, r3
 2739 0118 B3F1FF3F 		cmp	r3, #-1
 2740 011c 03D1     		bne	.L191
 2741              		.loc 1 1831 9 discriminator 4
 2742 011e 3B6B     		ldr	r3, [r7, #48]
 2743 0120 0022     		movs	r2, #0
 2744 0122 83F84520 		strb	r2, [r3, #69]
 2745              	.L191:
 2746              		.loc 1 1831 9 discriminator 6
 2747 0126 FFF7FEFF 		bl	vPortExitCritical
1832:ThirdParty/FreeRTOS/queue.c **** 
1833:ThirdParty/FreeRTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1834:ThirdParty/FreeRTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2748              		.loc 1 1834 13 is_stmt 1 discriminator 6
 2749 012a 3A1D     		adds	r2, r7, #4
 2750 012c 07F11403 		add	r3, r7, #20
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 86


 2751 0130 1146     		mov	r1, r2
 2752 0132 1846     		mov	r0, r3
 2753 0134 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2754 0138 0346     		mov	r3, r0
 2755              		.loc 1 1834 11 discriminator 6
 2756 013a 002B     		cmp	r3, #0
 2757 013c 23D1     		bne	.L192
1835:ThirdParty/FreeRTOS/queue.c ****         {
1836:ThirdParty/FreeRTOS/queue.c ****             /* Timeout has not expired yet, check to see if there is data in the
1837:ThirdParty/FreeRTOS/queue.c ****             * queue now, and if not enter the Blocked state to wait for data. */
1838:ThirdParty/FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2758              		.loc 1 1838 17
 2759 013e 386B     		ldr	r0, [r7, #48]
 2760 0140 FFF7FEFF 		bl	prvIsQueueEmpty
 2761 0144 0346     		mov	r3, r0
 2762              		.loc 1 1838 15
 2763 0146 002B     		cmp	r3, #0
 2764 0148 17D0     		beq	.L193
1839:ThirdParty/FreeRTOS/queue.c ****             {
1840:ThirdParty/FreeRTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1841:ThirdParty/FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2765              		.loc 1 1841 17
 2766 014a 3B6B     		ldr	r3, [r7, #48]
 2767 014c 2433     		adds	r3, r3, #36
 2768 014e 7A68     		ldr	r2, [r7, #4]
 2769 0150 1146     		mov	r1, r2
 2770 0152 1846     		mov	r0, r3
 2771 0154 FFF7FEFF 		bl	vTaskPlaceOnEventList
1842:ThirdParty/FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2772              		.loc 1 1842 17
 2773 0158 386B     		ldr	r0, [r7, #48]
 2774 015a FFF7FEFF 		bl	prvUnlockQueue
1843:ThirdParty/FreeRTOS/queue.c **** 
1844:ThirdParty/FreeRTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
 2775              		.loc 1 1844 21
 2776 015e FFF7FEFF 		bl	xTaskResumeAll
 2777 0162 0346     		mov	r3, r0
 2778              		.loc 1 1844 19
 2779 0164 002B     		cmp	r3, #0
 2780 0166 92D1     		bne	.L183
1845:ThirdParty/FreeRTOS/queue.c ****                 {
1846:ThirdParty/FreeRTOS/queue.c ****                     portYIELD_WITHIN_API();
 2781              		.loc 1 1846 21
 2782 0168 0F4B     		ldr	r3, .L196
 2783 016a 4FF08052 		mov	r2, #268435456
 2784 016e 1A60     		str	r2, [r3]
 2785              		.syntax unified
 2786              	@ 1846 "ThirdParty/FreeRTOS/queue.c" 1
 2787 0170 BFF34F8F 		dsb
 2788              	@ 0 "" 2
 2789              	@ 1846 "ThirdParty/FreeRTOS/queue.c" 1
 2790 0174 BFF36F8F 		isb
 2791              	@ 0 "" 2
 2792              		.thumb
 2793              		.syntax unified
 2794 0178 89E7     		b	.L183
 2795              	.L193:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 87


1847:ThirdParty/FreeRTOS/queue.c ****                 }
1848:ThirdParty/FreeRTOS/queue.c ****                 else
1849:ThirdParty/FreeRTOS/queue.c ****                 {
1850:ThirdParty/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1851:ThirdParty/FreeRTOS/queue.c ****                 }
1852:ThirdParty/FreeRTOS/queue.c ****             }
1853:ThirdParty/FreeRTOS/queue.c ****             else
1854:ThirdParty/FreeRTOS/queue.c ****             {
1855:ThirdParty/FreeRTOS/queue.c ****                 /* There is data in the queue now, so don't enter the blocked
1856:ThirdParty/FreeRTOS/queue.c ****                  * state, instead return to try and obtain the data. */
1857:ThirdParty/FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2796              		.loc 1 1857 17
 2797 017a 386B     		ldr	r0, [r7, #48]
 2798 017c FFF7FEFF 		bl	prvUnlockQueue
1858:ThirdParty/FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
 2799              		.loc 1 1858 26
 2800 0180 FFF7FEFF 		bl	xTaskResumeAll
 2801 0184 83E7     		b	.L183
 2802              	.L192:
1859:ThirdParty/FreeRTOS/queue.c ****             }
1860:ThirdParty/FreeRTOS/queue.c ****         }
1861:ThirdParty/FreeRTOS/queue.c ****         else
1862:ThirdParty/FreeRTOS/queue.c ****         {
1863:ThirdParty/FreeRTOS/queue.c ****             /* The timeout has expired.  If there is still no data in the queue
1864:ThirdParty/FreeRTOS/queue.c ****              * exit, otherwise go back and try to read the data again. */
1865:ThirdParty/FreeRTOS/queue.c ****             prvUnlockQueue( pxQueue );
 2803              		.loc 1 1865 13
 2804 0186 386B     		ldr	r0, [r7, #48]
 2805 0188 FFF7FEFF 		bl	prvUnlockQueue
1866:ThirdParty/FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
 2806              		.loc 1 1866 22
 2807 018c FFF7FEFF 		bl	xTaskResumeAll
1867:ThirdParty/FreeRTOS/queue.c **** 
1868:ThirdParty/FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2808              		.loc 1 1868 17
 2809 0190 386B     		ldr	r0, [r7, #48]
 2810 0192 FFF7FEFF 		bl	prvIsQueueEmpty
 2811 0196 0346     		mov	r3, r0
 2812              		.loc 1 1868 15
 2813 0198 002B     		cmp	r3, #0
 2814 019a 3FF478AF 		beq	.L183
1869:ThirdParty/FreeRTOS/queue.c ****             {
1870:ThirdParty/FreeRTOS/queue.c ****                 traceQUEUE_PEEK_FAILED( pxQueue );
1871:ThirdParty/FreeRTOS/queue.c ****                 return errQUEUE_EMPTY;
 2815              		.loc 1 1871 24
 2816 019e 0023     		movs	r3, #0
 2817              	.L195:
1872:ThirdParty/FreeRTOS/queue.c ****             }
1873:ThirdParty/FreeRTOS/queue.c ****             else
1874:ThirdParty/FreeRTOS/queue.c ****             {
1875:ThirdParty/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1876:ThirdParty/FreeRTOS/queue.c ****             }
1877:ThirdParty/FreeRTOS/queue.c ****         }
1878:ThirdParty/FreeRTOS/queue.c ****     } /*lint -restore */
1879:ThirdParty/FreeRTOS/queue.c **** }
 2818              		.loc 1 1879 1 discriminator 7
 2819 01a0 1846     		mov	r0, r3
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 88


 2820 01a2 3837     		adds	r7, r7, #56
 2821              	.LCFI68:
 2822              		.cfi_def_cfa_offset 8
 2823 01a4 BD46     		mov	sp, r7
 2824              	.LCFI69:
 2825              		.cfi_def_cfa_register 13
 2826              		@ sp needed
 2827 01a6 80BD     		pop	{r7, pc}
 2828              	.L197:
 2829              		.align	2
 2830              	.L196:
 2831 01a8 04ED00E0 		.word	-536810236
 2832              		.cfi_endproc
 2833              	.LFE18:
 2835              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2836              		.align	1
 2837              		.global	xQueueReceiveFromISR
 2838              		.syntax unified
 2839              		.thumb
 2840              		.thumb_func
 2842              	xQueueReceiveFromISR:
 2843              	.LFB19:
1880:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1881:ThirdParty/FreeRTOS/queue.c **** 
1882:ThirdParty/FreeRTOS/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
1883:ThirdParty/FreeRTOS/queue.c ****                                  void * const pvBuffer,
1884:ThirdParty/FreeRTOS/queue.c ****                                  BaseType_t * const pxHigherPriorityTaskWoken )
1885:ThirdParty/FreeRTOS/queue.c **** {
 2844              		.loc 1 1885 1
 2845              		.cfi_startproc
 2846              		@ args = 0, pretend = 0, frame = 64
 2847              		@ frame_needed = 1, uses_anonymous_args = 0
 2848 0000 80B5     		push	{r7, lr}
 2849              	.LCFI70:
 2850              		.cfi_def_cfa_offset 8
 2851              		.cfi_offset 7, -8
 2852              		.cfi_offset 14, -4
 2853 0002 90B0     		sub	sp, sp, #64
 2854              	.LCFI71:
 2855              		.cfi_def_cfa_offset 72
 2856 0004 00AF     		add	r7, sp, #0
 2857              	.LCFI72:
 2858              		.cfi_def_cfa_register 7
 2859 0006 F860     		str	r0, [r7, #12]
 2860 0008 B960     		str	r1, [r7, #8]
 2861 000a 7A60     		str	r2, [r7, #4]
1886:ThirdParty/FreeRTOS/queue.c ****     BaseType_t xReturn;
1887:ThirdParty/FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1888:ThirdParty/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 2862              		.loc 1 1888 21
 2863 000c FB68     		ldr	r3, [r7, #12]
 2864 000e BB63     		str	r3, [r7, #56]
1889:ThirdParty/FreeRTOS/queue.c **** 
1890:ThirdParty/FreeRTOS/queue.c ****     configASSERT( pxQueue );
 2865              		.loc 1 1890 5
 2866 0010 BB6B     		ldr	r3, [r7, #56]
 2867 0012 002B     		cmp	r3, #0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 89


 2868 0014 0AD1     		bne	.L199
 2869              	.LBB185:
 2870              	.LBB186:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2871              		.loc 2 198 9
 2872              		.syntax unified
 2873              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2874 0016 4FF05003 			mov r3, #80												
 2875 001a 83F31188 		msr basepri, r3											
 2876 001e BFF36F8F 		isb														
 2877 0022 BFF34F8F 		dsb														
 2878              	
 2879              	@ 0 "" 2
 2880              		.thumb
 2881              		.syntax unified
 2882 0026 7B62     		str	r3, [r7, #36]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2883              		.loc 2 206 5
 2884 0028 00BF     		nop
 2885              	.L200:
 2886              	.LBE186:
 2887              	.LBE185:
 2888              		.loc 1 1890 5 discriminator 1
 2889 002a FEE7     		b	.L200
 2890              	.L199:
1891:ThirdParty/FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2891              		.loc 1 1891 5
 2892 002c BB68     		ldr	r3, [r7, #8]
 2893 002e 002B     		cmp	r3, #0
 2894 0030 03D1     		bne	.L201
 2895              		.loc 1 1891 5 is_stmt 0 discriminator 2
 2896 0032 BB6B     		ldr	r3, [r7, #56]
 2897 0034 1B6C     		ldr	r3, [r3, #64]
 2898 0036 002B     		cmp	r3, #0
 2899 0038 01D1     		bne	.L202
 2900              	.L201:
 2901              		.loc 1 1891 5 discriminator 3
 2902 003a 0123     		movs	r3, #1
 2903 003c 00E0     		b	.L203
 2904              	.L202:
 2905              		.loc 1 1891 5 discriminator 4
 2906 003e 0023     		movs	r3, #0
 2907              	.L203:
 2908              		.loc 1 1891 5 discriminator 6
 2909 0040 002B     		cmp	r3, #0
 2910 0042 0AD1     		bne	.L204
 2911              	.LBB187:
 2912              	.LBB188:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2913              		.loc 2 198 9 is_stmt 1
 2914              		.syntax unified
 2915              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2916 0044 4FF05003 			mov r3, #80												
 2917 0048 83F31188 		msr basepri, r3											
 2918 004c BFF36F8F 		isb														
 2919 0050 BFF34F8F 		dsb														
 2920              	
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 90


 2921              	@ 0 "" 2
 2922              		.thumb
 2923              		.syntax unified
 2924 0054 3B62     		str	r3, [r7, #32]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2925              		.loc 2 206 5
 2926 0056 00BF     		nop
 2927              	.L205:
 2928              	.LBE188:
 2929              	.LBE187:
 2930              		.loc 1 1891 5 discriminator 2
 2931 0058 FEE7     		b	.L205
 2932              	.L204:
1892:ThirdParty/FreeRTOS/queue.c **** 
1893:ThirdParty/FreeRTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1894:ThirdParty/FreeRTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1895:ThirdParty/FreeRTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1896:ThirdParty/FreeRTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1897:ThirdParty/FreeRTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1898:ThirdParty/FreeRTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1899:ThirdParty/FreeRTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1900:ThirdParty/FreeRTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1901:ThirdParty/FreeRTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1902:ThirdParty/FreeRTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1903:ThirdParty/FreeRTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1904:ThirdParty/FreeRTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1905:ThirdParty/FreeRTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1906:ThirdParty/FreeRTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1907:ThirdParty/FreeRTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2933              		.loc 1 1907 5
 2934 005a FFF7FEFF 		bl	vPortValidateInterruptPriority
 2935              	.LBB189:
 2936              	.LBB190:
 214:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2937              		.loc 2 214 9
 2938              		.syntax unified
 2939              	@ 214 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2940 005e EFF31182 			mrs r2, basepri											
 2941 0062 4FF05003 		mov r3, #80												
 2942 0066 83F31188 		msr basepri, r3											
 2943 006a BFF36F8F 		isb														
 2944 006e BFF34F8F 		dsb														
 2945              	
 2946              	@ 0 "" 2
 2947              		.thumb
 2948              		.syntax unified
 2949 0072 FA61     		str	r2, [r7, #28]
 2950 0074 BB61     		str	r3, [r7, #24]
 226:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 2951              		.loc 2 226 16
 2952 0076 FB69     		ldr	r3, [r7, #28]
 2953              	.LBE190:
 2954              	.LBE189:
1908:ThirdParty/FreeRTOS/queue.c **** 
1909:ThirdParty/FreeRTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2955              		.loc 1 1909 30
 2956 0078 7B63     		str	r3, [r7, #52]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 91


 2957              	.LBB191:
1910:ThirdParty/FreeRTOS/queue.c ****     {
1911:ThirdParty/FreeRTOS/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2958              		.loc 1 1911 27
 2959 007a BB6B     		ldr	r3, [r7, #56]
 2960 007c 9B6B     		ldr	r3, [r3, #56]
 2961 007e 3B63     		str	r3, [r7, #48]
1912:ThirdParty/FreeRTOS/queue.c **** 
1913:ThirdParty/FreeRTOS/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
1914:ThirdParty/FreeRTOS/queue.c ****         if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2962              		.loc 1 1914 11
 2963 0080 3B6B     		ldr	r3, [r7, #48]
 2964 0082 002B     		cmp	r3, #0
 2965 0084 46D0     		beq	.L207
 2966              	.LBB192:
1915:ThirdParty/FreeRTOS/queue.c ****         {
1916:ThirdParty/FreeRTOS/queue.c ****             const int8_t cRxLock = pxQueue->cRxLock;
 2967              		.loc 1 1916 26
 2968 0086 BB6B     		ldr	r3, [r7, #56]
 2969 0088 93F84430 		ldrb	r3, [r3, #68]
 2970 008c 87F82F30 		strb	r3, [r7, #47]
1917:ThirdParty/FreeRTOS/queue.c **** 
1918:ThirdParty/FreeRTOS/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1919:ThirdParty/FreeRTOS/queue.c **** 
1920:ThirdParty/FreeRTOS/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 2971              		.loc 1 1920 13
 2972 0090 B968     		ldr	r1, [r7, #8]
 2973 0092 B86B     		ldr	r0, [r7, #56]
 2974 0094 FFF7FEFF 		bl	prvCopyDataFromQueue
1921:ThirdParty/FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2975              		.loc 1 1921 60
 2976 0098 3B6B     		ldr	r3, [r7, #48]
 2977 009a 5A1E     		subs	r2, r3, #1
 2978              		.loc 1 1921 40
 2979 009c BB6B     		ldr	r3, [r7, #56]
 2980 009e 9A63     		str	r2, [r3, #56]
1922:ThirdParty/FreeRTOS/queue.c **** 
1923:ThirdParty/FreeRTOS/queue.c ****             /* If the queue is locked the event list will not be modified.
1924:ThirdParty/FreeRTOS/queue.c ****              * Instead update the lock count so the task that unlocks the queue
1925:ThirdParty/FreeRTOS/queue.c ****              * will know that an ISR has removed data while the queue was
1926:ThirdParty/FreeRTOS/queue.c ****              * locked. */
1927:ThirdParty/FreeRTOS/queue.c ****             if( cRxLock == queueUNLOCKED )
 2981              		.loc 1 1927 15
 2982 00a0 97F92F30 		ldrsb	r3, [r7, #47]
 2983 00a4 B3F1FF3F 		cmp	r3, #-1
 2984 00a8 12D1     		bne	.L208
1928:ThirdParty/FreeRTOS/queue.c ****             {
1929:ThirdParty/FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2985              		.loc 1 1929 21
 2986 00aa BB6B     		ldr	r3, [r7, #56]
 2987 00ac 1B69     		ldr	r3, [r3, #16]
 2988              		.loc 1 1929 19
 2989 00ae 002B     		cmp	r3, #0
 2990 00b0 2DD0     		beq	.L209
1930:ThirdParty/FreeRTOS/queue.c ****                 {
1931:ThirdParty/FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2991              		.loc 1 1931 51
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 92


 2992 00b2 BB6B     		ldr	r3, [r7, #56]
 2993 00b4 1033     		adds	r3, r3, #16
 2994              		.loc 1 1931 25
 2995 00b6 1846     		mov	r0, r3
 2996 00b8 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2997 00bc 0346     		mov	r3, r0
 2998              		.loc 1 1931 23
 2999 00be 002B     		cmp	r3, #0
 3000 00c0 25D0     		beq	.L209
1932:ThirdParty/FreeRTOS/queue.c ****                     {
1933:ThirdParty/FreeRTOS/queue.c ****                         /* The task waiting has a higher priority than us so
1934:ThirdParty/FreeRTOS/queue.c ****                          * force a context switch. */
1935:ThirdParty/FreeRTOS/queue.c ****                         if( pxHigherPriorityTaskWoken != NULL )
 3001              		.loc 1 1935 27
 3002 00c2 7B68     		ldr	r3, [r7, #4]
 3003 00c4 002B     		cmp	r3, #0
 3004 00c6 22D0     		beq	.L209
1936:ThirdParty/FreeRTOS/queue.c ****                         {
1937:ThirdParty/FreeRTOS/queue.c ****                             *pxHigherPriorityTaskWoken = pdTRUE;
 3005              		.loc 1 1937 56
 3006 00c8 7B68     		ldr	r3, [r7, #4]
 3007 00ca 0122     		movs	r2, #1
 3008 00cc 1A60     		str	r2, [r3]
 3009 00ce 1EE0     		b	.L209
 3010              	.L208:
 3011              	.LBB193:
1938:ThirdParty/FreeRTOS/queue.c ****                         }
1939:ThirdParty/FreeRTOS/queue.c ****                         else
1940:ThirdParty/FreeRTOS/queue.c ****                         {
1941:ThirdParty/FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1942:ThirdParty/FreeRTOS/queue.c ****                         }
1943:ThirdParty/FreeRTOS/queue.c ****                     }
1944:ThirdParty/FreeRTOS/queue.c ****                     else
1945:ThirdParty/FreeRTOS/queue.c ****                     {
1946:ThirdParty/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1947:ThirdParty/FreeRTOS/queue.c ****                     }
1948:ThirdParty/FreeRTOS/queue.c ****                 }
1949:ThirdParty/FreeRTOS/queue.c ****                 else
1950:ThirdParty/FreeRTOS/queue.c ****                 {
1951:ThirdParty/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1952:ThirdParty/FreeRTOS/queue.c ****                 }
1953:ThirdParty/FreeRTOS/queue.c ****             }
1954:ThirdParty/FreeRTOS/queue.c ****             else
1955:ThirdParty/FreeRTOS/queue.c ****             {
1956:ThirdParty/FreeRTOS/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1957:ThirdParty/FreeRTOS/queue.c ****                  * knows that data was removed while it was locked. */
1958:ThirdParty/FreeRTOS/queue.c ****                 prvIncrementQueueRxLock( pxQueue, cRxLock );
 3012              		.loc 1 1958 17
 3013 00d0 FFF7FEFF 		bl	uxTaskGetNumberOfTasks
 3014 00d4 B862     		str	r0, [r7, #40]
 3015 00d6 97F92F30 		ldrsb	r3, [r7, #47]
 3016 00da BA6A     		ldr	r2, [r7, #40]
 3017 00dc 9A42     		cmp	r2, r3
 3018 00de 16D9     		bls	.L209
 3019              		.loc 1 1958 17 is_stmt 0 discriminator 1
 3020 00e0 97F92F30 		ldrsb	r3, [r7, #47]
 3021 00e4 7F2B     		cmp	r3, #127
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 93


 3022 00e6 0AD1     		bne	.L210
 3023              	.LBB194:
 3024              	.LBB195:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3025              		.loc 2 198 9 is_stmt 1
 3026              		.syntax unified
 3027              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3028 00e8 4FF05003 			mov r3, #80												
 3029 00ec 83F31188 		msr basepri, r3											
 3030 00f0 BFF36F8F 		isb														
 3031 00f4 BFF34F8F 		dsb														
 3032              	
 3033              	@ 0 "" 2
 3034              		.thumb
 3035              		.syntax unified
 3036 00f8 7B61     		str	r3, [r7, #20]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3037              		.loc 2 206 5
 3038 00fa 00BF     		nop
 3039              	.L211:
 3040              	.LBE195:
 3041              	.LBE194:
 3042              		.loc 1 1958 17 discriminator 5
 3043 00fc FEE7     		b	.L211
 3044              	.L210:
 3045              		.loc 1 1958 17 is_stmt 0 discriminator 3
 3046 00fe 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 3047 0102 0133     		adds	r3, r3, #1
 3048 0104 DBB2     		uxtb	r3, r3
 3049 0106 5AB2     		sxtb	r2, r3
 3050 0108 BB6B     		ldr	r3, [r7, #56]
 3051 010a 83F84420 		strb	r2, [r3, #68]
 3052              	.L209:
 3053              	.LBE193:
1959:ThirdParty/FreeRTOS/queue.c ****             }
1960:ThirdParty/FreeRTOS/queue.c **** 
1961:ThirdParty/FreeRTOS/queue.c ****             xReturn = pdPASS;
 3054              		.loc 1 1961 21 is_stmt 1
 3055 010e 0123     		movs	r3, #1
 3056 0110 FB63     		str	r3, [r7, #60]
 3057              	.LBE192:
 3058 0112 01E0     		b	.L212
 3059              	.L207:
1962:ThirdParty/FreeRTOS/queue.c ****         }
1963:ThirdParty/FreeRTOS/queue.c ****         else
1964:ThirdParty/FreeRTOS/queue.c ****         {
1965:ThirdParty/FreeRTOS/queue.c ****             xReturn = pdFAIL;
 3060              		.loc 1 1965 21
 3061 0114 0023     		movs	r3, #0
 3062 0116 FB63     		str	r3, [r7, #60]
 3063              	.L212:
 3064 0118 7B6B     		ldr	r3, [r7, #52]
 3065 011a 3B61     		str	r3, [r7, #16]
 3066              	.LBE191:
 3067              	.LBB196:
 3068              	.LBB197:
 232:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 94


 3069              		.loc 2 232 9
 3070 011c 3B69     		ldr	r3, [r7, #16]
 3071              		.syntax unified
 3072              	@ 232 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3073 011e 83F31188 			msr basepri, r3	
 3074              	@ 0 "" 2
 3075              		.loc 2 236 5
 3076              		.thumb
 3077              		.syntax unified
 3078 0122 00BF     		nop
 3079              	.LBE197:
 3080              	.LBE196:
1966:ThirdParty/FreeRTOS/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1967:ThirdParty/FreeRTOS/queue.c ****         }
1968:ThirdParty/FreeRTOS/queue.c ****     }
1969:ThirdParty/FreeRTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1970:ThirdParty/FreeRTOS/queue.c **** 
1971:ThirdParty/FreeRTOS/queue.c ****     return xReturn;
 3081              		.loc 1 1971 12
 3082 0124 FB6B     		ldr	r3, [r7, #60]
1972:ThirdParty/FreeRTOS/queue.c **** }
 3083              		.loc 1 1972 1
 3084 0126 1846     		mov	r0, r3
 3085 0128 4037     		adds	r7, r7, #64
 3086              	.LCFI73:
 3087              		.cfi_def_cfa_offset 8
 3088 012a BD46     		mov	sp, r7
 3089              	.LCFI74:
 3090              		.cfi_def_cfa_register 13
 3091              		@ sp needed
 3092 012c 80BD     		pop	{r7, pc}
 3093              		.cfi_endproc
 3094              	.LFE19:
 3096              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 3097              		.align	1
 3098              		.global	xQueuePeekFromISR
 3099              		.syntax unified
 3100              		.thumb
 3101              		.thumb_func
 3103              	xQueuePeekFromISR:
 3104              	.LFB20:
1973:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1974:ThirdParty/FreeRTOS/queue.c **** 
1975:ThirdParty/FreeRTOS/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
1976:ThirdParty/FreeRTOS/queue.c ****                               void * const pvBuffer )
1977:ThirdParty/FreeRTOS/queue.c **** {
 3105              		.loc 1 1977 1
 3106              		.cfi_startproc
 3107              		@ args = 0, pretend = 0, frame = 48
 3108              		@ frame_needed = 1, uses_anonymous_args = 0
 3109 0000 80B5     		push	{r7, lr}
 3110              	.LCFI75:
 3111              		.cfi_def_cfa_offset 8
 3112              		.cfi_offset 7, -8
 3113              		.cfi_offset 14, -4
 3114 0002 8CB0     		sub	sp, sp, #48
 3115              	.LCFI76:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 95


 3116              		.cfi_def_cfa_offset 56
 3117 0004 00AF     		add	r7, sp, #0
 3118              	.LCFI77:
 3119              		.cfi_def_cfa_register 7
 3120 0006 7860     		str	r0, [r7, #4]
 3121 0008 3960     		str	r1, [r7]
1978:ThirdParty/FreeRTOS/queue.c ****     BaseType_t xReturn;
1979:ThirdParty/FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1980:ThirdParty/FreeRTOS/queue.c ****     int8_t * pcOriginalReadPosition;
1981:ThirdParty/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3122              		.loc 1 1981 21
 3123 000a 7B68     		ldr	r3, [r7, #4]
 3124 000c BB62     		str	r3, [r7, #40]
1982:ThirdParty/FreeRTOS/queue.c **** 
1983:ThirdParty/FreeRTOS/queue.c ****     configASSERT( pxQueue );
 3125              		.loc 1 1983 5
 3126 000e BB6A     		ldr	r3, [r7, #40]
 3127 0010 002B     		cmp	r3, #0
 3128 0012 0AD1     		bne	.L215
 3129              	.LBB198:
 3130              	.LBB199:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3131              		.loc 2 198 9
 3132              		.syntax unified
 3133              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3134 0014 4FF05003 			mov r3, #80												
 3135 0018 83F31188 		msr basepri, r3											
 3136 001c BFF36F8F 		isb														
 3137 0020 BFF34F8F 		dsb														
 3138              	
 3139              	@ 0 "" 2
 3140              		.thumb
 3141              		.syntax unified
 3142 0024 FB61     		str	r3, [r7, #28]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3143              		.loc 2 206 5
 3144 0026 00BF     		nop
 3145              	.L216:
 3146              	.LBE199:
 3147              	.LBE198:
 3148              		.loc 1 1983 5 discriminator 1
 3149 0028 FEE7     		b	.L216
 3150              	.L215:
1984:ThirdParty/FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3151              		.loc 1 1984 5
 3152 002a 3B68     		ldr	r3, [r7]
 3153 002c 002B     		cmp	r3, #0
 3154 002e 03D1     		bne	.L217
 3155              		.loc 1 1984 5 is_stmt 0 discriminator 2
 3156 0030 BB6A     		ldr	r3, [r7, #40]
 3157 0032 1B6C     		ldr	r3, [r3, #64]
 3158 0034 002B     		cmp	r3, #0
 3159 0036 01D1     		bne	.L218
 3160              	.L217:
 3161              		.loc 1 1984 5 discriminator 3
 3162 0038 0123     		movs	r3, #1
 3163 003a 00E0     		b	.L219
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 96


 3164              	.L218:
 3165              		.loc 1 1984 5 discriminator 4
 3166 003c 0023     		movs	r3, #0
 3167              	.L219:
 3168              		.loc 1 1984 5 discriminator 6
 3169 003e 002B     		cmp	r3, #0
 3170 0040 0AD1     		bne	.L220
 3171              	.LBB200:
 3172              	.LBB201:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3173              		.loc 2 198 9 is_stmt 1
 3174              		.syntax unified
 3175              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3176 0042 4FF05003 			mov r3, #80												
 3177 0046 83F31188 		msr basepri, r3											
 3178 004a BFF36F8F 		isb														
 3179 004e BFF34F8F 		dsb														
 3180              	
 3181              	@ 0 "" 2
 3182              		.thumb
 3183              		.syntax unified
 3184 0052 BB61     		str	r3, [r7, #24]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3185              		.loc 2 206 5
 3186 0054 00BF     		nop
 3187              	.L221:
 3188              	.LBE201:
 3189              	.LBE200:
 3190              		.loc 1 1984 5 discriminator 2
 3191 0056 FEE7     		b	.L221
 3192              	.L220:
1985:ThirdParty/FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 3193              		.loc 1 1985 5
 3194 0058 BB6A     		ldr	r3, [r7, #40]
 3195 005a 1B6C     		ldr	r3, [r3, #64]
 3196 005c 002B     		cmp	r3, #0
 3197 005e 0AD1     		bne	.L222
 3198              	.LBB202:
 3199              	.LBB203:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3200              		.loc 2 198 9
 3201              		.syntax unified
 3202              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3203 0060 4FF05003 			mov r3, #80												
 3204 0064 83F31188 		msr basepri, r3											
 3205 0068 BFF36F8F 		isb														
 3206 006c BFF34F8F 		dsb														
 3207              	
 3208              	@ 0 "" 2
 3209              		.thumb
 3210              		.syntax unified
 3211 0070 7B61     		str	r3, [r7, #20]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3212              		.loc 2 206 5
 3213 0072 00BF     		nop
 3214              	.L223:
 3215              	.LBE203:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 97


 3216              	.LBE202:
 3217              		.loc 1 1985 5 discriminator 3
 3218 0074 FEE7     		b	.L223
 3219              	.L222:
1986:ThirdParty/FreeRTOS/queue.c **** 
1987:ThirdParty/FreeRTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1988:ThirdParty/FreeRTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1989:ThirdParty/FreeRTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1990:ThirdParty/FreeRTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1991:ThirdParty/FreeRTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1992:ThirdParty/FreeRTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1993:ThirdParty/FreeRTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1994:ThirdParty/FreeRTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1995:ThirdParty/FreeRTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1996:ThirdParty/FreeRTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1997:ThirdParty/FreeRTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1998:ThirdParty/FreeRTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1999:ThirdParty/FreeRTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
2000:ThirdParty/FreeRTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2001:ThirdParty/FreeRTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3220              		.loc 1 2001 5
 3221 0076 FFF7FEFF 		bl	vPortValidateInterruptPriority
 3222              	.LBB204:
 3223              	.LBB205:
 214:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3224              		.loc 2 214 9
 3225              		.syntax unified
 3226              	@ 214 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3227 007a EFF31182 			mrs r2, basepri											
 3228 007e 4FF05003 		mov r3, #80												
 3229 0082 83F31188 		msr basepri, r3											
 3230 0086 BFF36F8F 		isb														
 3231 008a BFF34F8F 		dsb														
 3232              	
 3233              	@ 0 "" 2
 3234              		.thumb
 3235              		.syntax unified
 3236 008e 3A61     		str	r2, [r7, #16]
 3237 0090 FB60     		str	r3, [r7, #12]
 226:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 3238              		.loc 2 226 16
 3239 0092 3B69     		ldr	r3, [r7, #16]
 3240              	.LBE205:
 3241              	.LBE204:
2002:ThirdParty/FreeRTOS/queue.c **** 
2003:ThirdParty/FreeRTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 3242              		.loc 1 2003 30
 3243 0094 7B62     		str	r3, [r7, #36]
2004:ThirdParty/FreeRTOS/queue.c ****     {
2005:ThirdParty/FreeRTOS/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
2006:ThirdParty/FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 3244              		.loc 1 2006 20
 3245 0096 BB6A     		ldr	r3, [r7, #40]
 3246 0098 9B6B     		ldr	r3, [r3, #56]
 3247              		.loc 1 2006 11
 3248 009a 002B     		cmp	r3, #0
 3249 009c 0CD0     		beq	.L225
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 98


2007:ThirdParty/FreeRTOS/queue.c ****         {
2008:ThirdParty/FreeRTOS/queue.c ****             traceQUEUE_PEEK_FROM_ISR( pxQueue );
2009:ThirdParty/FreeRTOS/queue.c **** 
2010:ThirdParty/FreeRTOS/queue.c ****             /* Remember the read position so it can be reset as nothing is
2011:ThirdParty/FreeRTOS/queue.c ****              * actually being removed from the queue. */
2012:ThirdParty/FreeRTOS/queue.c ****             pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 3250              		.loc 1 2012 36
 3251 009e BB6A     		ldr	r3, [r7, #40]
 3252 00a0 DB68     		ldr	r3, [r3, #12]
 3253 00a2 3B62     		str	r3, [r7, #32]
2013:ThirdParty/FreeRTOS/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 3254              		.loc 1 2013 13
 3255 00a4 3968     		ldr	r1, [r7]
 3256 00a6 B86A     		ldr	r0, [r7, #40]
 3257 00a8 FFF7FEFF 		bl	prvCopyDataFromQueue
2014:ThirdParty/FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 3258              		.loc 1 2014 42
 3259 00ac BB6A     		ldr	r3, [r7, #40]
 3260 00ae 3A6A     		ldr	r2, [r7, #32]
 3261 00b0 DA60     		str	r2, [r3, #12]
2015:ThirdParty/FreeRTOS/queue.c **** 
2016:ThirdParty/FreeRTOS/queue.c ****             xReturn = pdPASS;
 3262              		.loc 1 2016 21
 3263 00b2 0123     		movs	r3, #1
 3264 00b4 FB62     		str	r3, [r7, #44]
 3265 00b6 01E0     		b	.L226
 3266              	.L225:
2017:ThirdParty/FreeRTOS/queue.c ****         }
2018:ThirdParty/FreeRTOS/queue.c ****         else
2019:ThirdParty/FreeRTOS/queue.c ****         {
2020:ThirdParty/FreeRTOS/queue.c ****             xReturn = pdFAIL;
 3267              		.loc 1 2020 21
 3268 00b8 0023     		movs	r3, #0
 3269 00ba FB62     		str	r3, [r7, #44]
 3270              	.L226:
 3271 00bc 7B6A     		ldr	r3, [r7, #36]
 3272 00be BB60     		str	r3, [r7, #8]
 3273              	.LBB206:
 3274              	.LBB207:
 232:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3275              		.loc 2 232 9
 3276 00c0 BB68     		ldr	r3, [r7, #8]
 3277              		.syntax unified
 3278              	@ 232 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3279 00c2 83F31188 			msr basepri, r3	
 3280              	@ 0 "" 2
 3281              		.loc 2 236 5
 3282              		.thumb
 3283              		.syntax unified
 3284 00c6 00BF     		nop
 3285              	.LBE207:
 3286              	.LBE206:
2021:ThirdParty/FreeRTOS/queue.c ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
2022:ThirdParty/FreeRTOS/queue.c ****         }
2023:ThirdParty/FreeRTOS/queue.c ****     }
2024:ThirdParty/FreeRTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2025:ThirdParty/FreeRTOS/queue.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 99


2026:ThirdParty/FreeRTOS/queue.c ****     return xReturn;
 3287              		.loc 1 2026 12
 3288 00c8 FB6A     		ldr	r3, [r7, #44]
2027:ThirdParty/FreeRTOS/queue.c **** }
 3289              		.loc 1 2027 1
 3290 00ca 1846     		mov	r0, r3
 3291 00cc 3037     		adds	r7, r7, #48
 3292              	.LCFI78:
 3293              		.cfi_def_cfa_offset 8
 3294 00ce BD46     		mov	sp, r7
 3295              	.LCFI79:
 3296              		.cfi_def_cfa_register 13
 3297              		@ sp needed
 3298 00d0 80BD     		pop	{r7, pc}
 3299              		.cfi_endproc
 3300              	.LFE20:
 3302              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 3303              		.align	1
 3304              		.global	uxQueueMessagesWaiting
 3305              		.syntax unified
 3306              		.thumb
 3307              		.thumb_func
 3309              	uxQueueMessagesWaiting:
 3310              	.LFB21:
2028:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2029:ThirdParty/FreeRTOS/queue.c **** 
2030:ThirdParty/FreeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
2031:ThirdParty/FreeRTOS/queue.c **** {
 3311              		.loc 1 2031 1
 3312              		.cfi_startproc
 3313              		@ args = 0, pretend = 0, frame = 16
 3314              		@ frame_needed = 1, uses_anonymous_args = 0
 3315 0000 80B5     		push	{r7, lr}
 3316              	.LCFI80:
 3317              		.cfi_def_cfa_offset 8
 3318              		.cfi_offset 7, -8
 3319              		.cfi_offset 14, -4
 3320 0002 84B0     		sub	sp, sp, #16
 3321              	.LCFI81:
 3322              		.cfi_def_cfa_offset 24
 3323 0004 00AF     		add	r7, sp, #0
 3324              	.LCFI82:
 3325              		.cfi_def_cfa_register 7
 3326 0006 7860     		str	r0, [r7, #4]
2032:ThirdParty/FreeRTOS/queue.c ****     UBaseType_t uxReturn;
2033:ThirdParty/FreeRTOS/queue.c **** 
2034:ThirdParty/FreeRTOS/queue.c ****     configASSERT( xQueue );
 3327              		.loc 1 2034 5
 3328 0008 7B68     		ldr	r3, [r7, #4]
 3329 000a 002B     		cmp	r3, #0
 3330 000c 0AD1     		bne	.L229
 3331              	.LBB208:
 3332              	.LBB209:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3333              		.loc 2 198 9
 3334              		.syntax unified
 3335              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 100


 3336 000e 4FF05003 			mov r3, #80												
 3337 0012 83F31188 		msr basepri, r3											
 3338 0016 BFF36F8F 		isb														
 3339 001a BFF34F8F 		dsb														
 3340              	
 3341              	@ 0 "" 2
 3342              		.thumb
 3343              		.syntax unified
 3344 001e BB60     		str	r3, [r7, #8]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3345              		.loc 2 206 5
 3346 0020 00BF     		nop
 3347              	.L230:
 3348              	.LBE209:
 3349              	.LBE208:
 3350              		.loc 1 2034 5 discriminator 1
 3351 0022 FEE7     		b	.L230
 3352              	.L229:
2035:ThirdParty/FreeRTOS/queue.c **** 
2036:ThirdParty/FreeRTOS/queue.c ****     taskENTER_CRITICAL();
 3353              		.loc 1 2036 5
 3354 0024 FFF7FEFF 		bl	vPortEnterCritical
2037:ThirdParty/FreeRTOS/queue.c ****     {
2038:ThirdParty/FreeRTOS/queue.c ****         uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 3355              		.loc 1 2038 18
 3356 0028 7B68     		ldr	r3, [r7, #4]
 3357 002a 9B6B     		ldr	r3, [r3, #56]
 3358 002c FB60     		str	r3, [r7, #12]
2039:ThirdParty/FreeRTOS/queue.c ****     }
2040:ThirdParty/FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
 3359              		.loc 1 2040 5
 3360 002e FFF7FEFF 		bl	vPortExitCritical
2041:ThirdParty/FreeRTOS/queue.c **** 
2042:ThirdParty/FreeRTOS/queue.c ****     return uxReturn;
 3361              		.loc 1 2042 12
 3362 0032 FB68     		ldr	r3, [r7, #12]
2043:ThirdParty/FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3363              		.loc 1 2043 1
 3364 0034 1846     		mov	r0, r3
 3365 0036 1037     		adds	r7, r7, #16
 3366              	.LCFI83:
 3367              		.cfi_def_cfa_offset 8
 3368 0038 BD46     		mov	sp, r7
 3369              	.LCFI84:
 3370              		.cfi_def_cfa_register 13
 3371              		@ sp needed
 3372 003a 80BD     		pop	{r7, pc}
 3373              		.cfi_endproc
 3374              	.LFE21:
 3376              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 3377              		.align	1
 3378              		.global	uxQueueSpacesAvailable
 3379              		.syntax unified
 3380              		.thumb
 3381              		.thumb_func
 3383              	uxQueueSpacesAvailable:
 3384              	.LFB22:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 101


2044:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2045:ThirdParty/FreeRTOS/queue.c **** 
2046:ThirdParty/FreeRTOS/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
2047:ThirdParty/FreeRTOS/queue.c **** {
 3385              		.loc 1 2047 1
 3386              		.cfi_startproc
 3387              		@ args = 0, pretend = 0, frame = 24
 3388              		@ frame_needed = 1, uses_anonymous_args = 0
 3389 0000 80B5     		push	{r7, lr}
 3390              	.LCFI85:
 3391              		.cfi_def_cfa_offset 8
 3392              		.cfi_offset 7, -8
 3393              		.cfi_offset 14, -4
 3394 0002 86B0     		sub	sp, sp, #24
 3395              	.LCFI86:
 3396              		.cfi_def_cfa_offset 32
 3397 0004 00AF     		add	r7, sp, #0
 3398              	.LCFI87:
 3399              		.cfi_def_cfa_register 7
 3400 0006 7860     		str	r0, [r7, #4]
2048:ThirdParty/FreeRTOS/queue.c ****     UBaseType_t uxReturn;
2049:ThirdParty/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3401              		.loc 1 2049 21
 3402 0008 7B68     		ldr	r3, [r7, #4]
 3403 000a 7B61     		str	r3, [r7, #20]
2050:ThirdParty/FreeRTOS/queue.c **** 
2051:ThirdParty/FreeRTOS/queue.c ****     configASSERT( pxQueue );
 3404              		.loc 1 2051 5
 3405 000c 7B69     		ldr	r3, [r7, #20]
 3406 000e 002B     		cmp	r3, #0
 3407 0010 0AD1     		bne	.L233
 3408              	.LBB210:
 3409              	.LBB211:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3410              		.loc 2 198 9
 3411              		.syntax unified
 3412              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3413 0012 4FF05003 			mov r3, #80												
 3414 0016 83F31188 		msr basepri, r3											
 3415 001a BFF36F8F 		isb														
 3416 001e BFF34F8F 		dsb														
 3417              	
 3418              	@ 0 "" 2
 3419              		.thumb
 3420              		.syntax unified
 3421 0022 FB60     		str	r3, [r7, #12]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3422              		.loc 2 206 5
 3423 0024 00BF     		nop
 3424              	.L234:
 3425              	.LBE211:
 3426              	.LBE210:
 3427              		.loc 1 2051 5 discriminator 1
 3428 0026 FEE7     		b	.L234
 3429              	.L233:
2052:ThirdParty/FreeRTOS/queue.c **** 
2053:ThirdParty/FreeRTOS/queue.c ****     taskENTER_CRITICAL();
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 102


 3430              		.loc 1 2053 5
 3431 0028 FFF7FEFF 		bl	vPortEnterCritical
2054:ThirdParty/FreeRTOS/queue.c ****     {
2055:ThirdParty/FreeRTOS/queue.c ****         uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 3432              		.loc 1 2055 27
 3433 002c 7B69     		ldr	r3, [r7, #20]
 3434 002e DA6B     		ldr	r2, [r3, #60]
 3435              		.loc 1 2055 47
 3436 0030 7B69     		ldr	r3, [r7, #20]
 3437 0032 9B6B     		ldr	r3, [r3, #56]
 3438              		.loc 1 2055 18
 3439 0034 D31A     		subs	r3, r2, r3
 3440 0036 3B61     		str	r3, [r7, #16]
2056:ThirdParty/FreeRTOS/queue.c ****     }
2057:ThirdParty/FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
 3441              		.loc 1 2057 5
 3442 0038 FFF7FEFF 		bl	vPortExitCritical
2058:ThirdParty/FreeRTOS/queue.c **** 
2059:ThirdParty/FreeRTOS/queue.c ****     return uxReturn;
 3443              		.loc 1 2059 12
 3444 003c 3B69     		ldr	r3, [r7, #16]
2060:ThirdParty/FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3445              		.loc 1 2060 1
 3446 003e 1846     		mov	r0, r3
 3447 0040 1837     		adds	r7, r7, #24
 3448              	.LCFI88:
 3449              		.cfi_def_cfa_offset 8
 3450 0042 BD46     		mov	sp, r7
 3451              	.LCFI89:
 3452              		.cfi_def_cfa_register 13
 3453              		@ sp needed
 3454 0044 80BD     		pop	{r7, pc}
 3455              		.cfi_endproc
 3456              	.LFE22:
 3458              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 3459              		.align	1
 3460              		.global	uxQueueMessagesWaitingFromISR
 3461              		.syntax unified
 3462              		.thumb
 3463              		.thumb_func
 3465              	uxQueueMessagesWaitingFromISR:
 3466              	.LFB23:
2061:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2062:ThirdParty/FreeRTOS/queue.c **** 
2063:ThirdParty/FreeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
2064:ThirdParty/FreeRTOS/queue.c **** {
 3467              		.loc 1 2064 1
 3468              		.cfi_startproc
 3469              		@ args = 0, pretend = 0, frame = 24
 3470              		@ frame_needed = 1, uses_anonymous_args = 0
 3471              		@ link register save eliminated.
 3472 0000 80B4     		push	{r7}
 3473              	.LCFI90:
 3474              		.cfi_def_cfa_offset 4
 3475              		.cfi_offset 7, -4
 3476 0002 87B0     		sub	sp, sp, #28
 3477              	.LCFI91:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 103


 3478              		.cfi_def_cfa_offset 32
 3479 0004 00AF     		add	r7, sp, #0
 3480              	.LCFI92:
 3481              		.cfi_def_cfa_register 7
 3482 0006 7860     		str	r0, [r7, #4]
2065:ThirdParty/FreeRTOS/queue.c ****     UBaseType_t uxReturn;
2066:ThirdParty/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3483              		.loc 1 2066 21
 3484 0008 7B68     		ldr	r3, [r7, #4]
 3485 000a 7B61     		str	r3, [r7, #20]
2067:ThirdParty/FreeRTOS/queue.c **** 
2068:ThirdParty/FreeRTOS/queue.c ****     configASSERT( pxQueue );
 3486              		.loc 1 2068 5
 3487 000c 7B69     		ldr	r3, [r7, #20]
 3488 000e 002B     		cmp	r3, #0
 3489 0010 0AD1     		bne	.L237
 3490              	.LBB212:
 3491              	.LBB213:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3492              		.loc 2 198 9
 3493              		.syntax unified
 3494              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3495 0012 4FF05003 			mov r3, #80												
 3496 0016 83F31188 		msr basepri, r3											
 3497 001a BFF36F8F 		isb														
 3498 001e BFF34F8F 		dsb														
 3499              	
 3500              	@ 0 "" 2
 3501              		.thumb
 3502              		.syntax unified
 3503 0022 FB60     		str	r3, [r7, #12]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3504              		.loc 2 206 5
 3505 0024 00BF     		nop
 3506              	.L238:
 3507              	.LBE213:
 3508              	.LBE212:
 3509              		.loc 1 2068 5 discriminator 1
 3510 0026 FEE7     		b	.L238
 3511              	.L237:
2069:ThirdParty/FreeRTOS/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 3512              		.loc 1 2069 14
 3513 0028 7B69     		ldr	r3, [r7, #20]
 3514 002a 9B6B     		ldr	r3, [r3, #56]
 3515 002c 3B61     		str	r3, [r7, #16]
2070:ThirdParty/FreeRTOS/queue.c **** 
2071:ThirdParty/FreeRTOS/queue.c ****     return uxReturn;
 3516              		.loc 1 2071 12
 3517 002e 3B69     		ldr	r3, [r7, #16]
2072:ThirdParty/FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3518              		.loc 1 2072 1
 3519 0030 1846     		mov	r0, r3
 3520 0032 1C37     		adds	r7, r7, #28
 3521              	.LCFI93:
 3522              		.cfi_def_cfa_offset 4
 3523 0034 BD46     		mov	sp, r7
 3524              	.LCFI94:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 104


 3525              		.cfi_def_cfa_register 13
 3526              		@ sp needed
 3527 0036 5DF8047B 		ldr	r7, [sp], #4
 3528              	.LCFI95:
 3529              		.cfi_restore 7
 3530              		.cfi_def_cfa_offset 0
 3531 003a 7047     		bx	lr
 3532              		.cfi_endproc
 3533              	.LFE23:
 3535              		.section	.text.vQueueDelete,"ax",%progbits
 3536              		.align	1
 3537              		.global	vQueueDelete
 3538              		.syntax unified
 3539              		.thumb
 3540              		.thumb_func
 3542              	vQueueDelete:
 3543              	.LFB24:
2073:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2074:ThirdParty/FreeRTOS/queue.c **** 
2075:ThirdParty/FreeRTOS/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
2076:ThirdParty/FreeRTOS/queue.c **** {
 3544              		.loc 1 2076 1
 3545              		.cfi_startproc
 3546              		@ args = 0, pretend = 0, frame = 16
 3547              		@ frame_needed = 1, uses_anonymous_args = 0
 3548 0000 80B5     		push	{r7, lr}
 3549              	.LCFI96:
 3550              		.cfi_def_cfa_offset 8
 3551              		.cfi_offset 7, -8
 3552              		.cfi_offset 14, -4
 3553 0002 84B0     		sub	sp, sp, #16
 3554              	.LCFI97:
 3555              		.cfi_def_cfa_offset 24
 3556 0004 00AF     		add	r7, sp, #0
 3557              	.LCFI98:
 3558              		.cfi_def_cfa_register 7
 3559 0006 7860     		str	r0, [r7, #4]
2077:ThirdParty/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3560              		.loc 1 2077 21
 3561 0008 7B68     		ldr	r3, [r7, #4]
 3562 000a FB60     		str	r3, [r7, #12]
2078:ThirdParty/FreeRTOS/queue.c **** 
2079:ThirdParty/FreeRTOS/queue.c ****     configASSERT( pxQueue );
 3563              		.loc 1 2079 5
 3564 000c FB68     		ldr	r3, [r7, #12]
 3565 000e 002B     		cmp	r3, #0
 3566 0010 0AD1     		bne	.L241
 3567              	.LBB214:
 3568              	.LBB215:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3569              		.loc 2 198 9
 3570              		.syntax unified
 3571              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3572 0012 4FF05003 			mov r3, #80												
 3573 0016 83F31188 		msr basepri, r3											
 3574 001a BFF36F8F 		isb														
 3575 001e BFF34F8F 		dsb														
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 105


 3576              	
 3577              	@ 0 "" 2
 3578              		.thumb
 3579              		.syntax unified
 3580 0022 BB60     		str	r3, [r7, #8]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3581              		.loc 2 206 5
 3582 0024 00BF     		nop
 3583              	.L242:
 3584              	.LBE215:
 3585              	.LBE214:
 3586              		.loc 1 2079 5 discriminator 1
 3587 0026 FEE7     		b	.L242
 3588              	.L241:
2080:ThirdParty/FreeRTOS/queue.c ****     traceQUEUE_DELETE( pxQueue );
2081:ThirdParty/FreeRTOS/queue.c **** 
2082:ThirdParty/FreeRTOS/queue.c ****     #if ( configQUEUE_REGISTRY_SIZE > 0 )
2083:ThirdParty/FreeRTOS/queue.c ****     {
2084:ThirdParty/FreeRTOS/queue.c ****         vQueueUnregisterQueue( pxQueue );
 3589              		.loc 1 2084 9
 3590 0028 F868     		ldr	r0, [r7, #12]
 3591 002a FFF7FEFF 		bl	vQueueUnregisterQueue
2085:ThirdParty/FreeRTOS/queue.c ****     }
2086:ThirdParty/FreeRTOS/queue.c ****     #endif
2087:ThirdParty/FreeRTOS/queue.c **** 
2088:ThirdParty/FreeRTOS/queue.c ****     #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
2089:ThirdParty/FreeRTOS/queue.c ****     {
2090:ThirdParty/FreeRTOS/queue.c ****         /* The queue can only have been allocated dynamically - free it
2091:ThirdParty/FreeRTOS/queue.c ****          * again. */
2092:ThirdParty/FreeRTOS/queue.c ****         vPortFree( pxQueue );
 3592              		.loc 1 2092 9
 3593 002e F868     		ldr	r0, [r7, #12]
 3594 0030 FFF7FEFF 		bl	vPortFree
2093:ThirdParty/FreeRTOS/queue.c ****     }
2094:ThirdParty/FreeRTOS/queue.c ****     #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
2095:ThirdParty/FreeRTOS/queue.c ****     {
2096:ThirdParty/FreeRTOS/queue.c ****         /* The queue could have been allocated statically or dynamically, so
2097:ThirdParty/FreeRTOS/queue.c ****          * check before attempting to free the memory. */
2098:ThirdParty/FreeRTOS/queue.c ****         if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
2099:ThirdParty/FreeRTOS/queue.c ****         {
2100:ThirdParty/FreeRTOS/queue.c ****             vPortFree( pxQueue );
2101:ThirdParty/FreeRTOS/queue.c ****         }
2102:ThirdParty/FreeRTOS/queue.c ****         else
2103:ThirdParty/FreeRTOS/queue.c ****         {
2104:ThirdParty/FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2105:ThirdParty/FreeRTOS/queue.c ****         }
2106:ThirdParty/FreeRTOS/queue.c ****     }
2107:ThirdParty/FreeRTOS/queue.c ****     #else /* if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION ==
2108:ThirdParty/FreeRTOS/queue.c ****     {
2109:ThirdParty/FreeRTOS/queue.c ****         /* The queue must have been statically allocated, so is not going to be
2110:ThirdParty/FreeRTOS/queue.c ****          * deleted.  Avoid compiler warnings about the unused parameter. */
2111:ThirdParty/FreeRTOS/queue.c ****         ( void ) pxQueue;
2112:ThirdParty/FreeRTOS/queue.c ****     }
2113:ThirdParty/FreeRTOS/queue.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2114:ThirdParty/FreeRTOS/queue.c **** }
 3595              		.loc 1 2114 1
 3596 0034 00BF     		nop
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 106


 3597 0036 1037     		adds	r7, r7, #16
 3598              	.LCFI99:
 3599              		.cfi_def_cfa_offset 8
 3600 0038 BD46     		mov	sp, r7
 3601              	.LCFI100:
 3602              		.cfi_def_cfa_register 13
 3603              		@ sp needed
 3604 003a 80BD     		pop	{r7, pc}
 3605              		.cfi_endproc
 3606              	.LFE24:
 3608              		.section	.text.uxQueueGetQueueNumber,"ax",%progbits
 3609              		.align	1
 3610              		.global	uxQueueGetQueueNumber
 3611              		.syntax unified
 3612              		.thumb
 3613              		.thumb_func
 3615              	uxQueueGetQueueNumber:
 3616              	.LFB25:
2115:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2116:ThirdParty/FreeRTOS/queue.c **** 
2117:ThirdParty/FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2118:ThirdParty/FreeRTOS/queue.c **** 
2119:ThirdParty/FreeRTOS/queue.c ****     UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2120:ThirdParty/FreeRTOS/queue.c ****     {
 3617              		.loc 1 2120 5
 3618              		.cfi_startproc
 3619              		@ args = 0, pretend = 0, frame = 8
 3620              		@ frame_needed = 1, uses_anonymous_args = 0
 3621              		@ link register save eliminated.
 3622 0000 80B4     		push	{r7}
 3623              	.LCFI101:
 3624              		.cfi_def_cfa_offset 4
 3625              		.cfi_offset 7, -4
 3626 0002 83B0     		sub	sp, sp, #12
 3627              	.LCFI102:
 3628              		.cfi_def_cfa_offset 16
 3629 0004 00AF     		add	r7, sp, #0
 3630              	.LCFI103:
 3631              		.cfi_def_cfa_register 7
 3632 0006 7860     		str	r0, [r7, #4]
2121:ThirdParty/FreeRTOS/queue.c ****         return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 3633              		.loc 1 2121 40
 3634 0008 7B68     		ldr	r3, [r7, #4]
 3635 000a 9B6C     		ldr	r3, [r3, #72]
2122:ThirdParty/FreeRTOS/queue.c ****     }
 3636              		.loc 1 2122 5
 3637 000c 1846     		mov	r0, r3
 3638 000e 0C37     		adds	r7, r7, #12
 3639              	.LCFI104:
 3640              		.cfi_def_cfa_offset 4
 3641 0010 BD46     		mov	sp, r7
 3642              	.LCFI105:
 3643              		.cfi_def_cfa_register 13
 3644              		@ sp needed
 3645 0012 5DF8047B 		ldr	r7, [sp], #4
 3646              	.LCFI106:
 3647              		.cfi_restore 7
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 107


 3648              		.cfi_def_cfa_offset 0
 3649 0016 7047     		bx	lr
 3650              		.cfi_endproc
 3651              	.LFE25:
 3653              		.section	.text.vQueueSetQueueNumber,"ax",%progbits
 3654              		.align	1
 3655              		.global	vQueueSetQueueNumber
 3656              		.syntax unified
 3657              		.thumb
 3658              		.thumb_func
 3660              	vQueueSetQueueNumber:
 3661              	.LFB26:
2123:ThirdParty/FreeRTOS/queue.c **** 
2124:ThirdParty/FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2125:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2126:ThirdParty/FreeRTOS/queue.c **** 
2127:ThirdParty/FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2128:ThirdParty/FreeRTOS/queue.c **** 
2129:ThirdParty/FreeRTOS/queue.c ****     void vQueueSetQueueNumber( QueueHandle_t xQueue,
2130:ThirdParty/FreeRTOS/queue.c ****                                UBaseType_t uxQueueNumber )
2131:ThirdParty/FreeRTOS/queue.c ****     {
 3662              		.loc 1 2131 5
 3663              		.cfi_startproc
 3664              		@ args = 0, pretend = 0, frame = 8
 3665              		@ frame_needed = 1, uses_anonymous_args = 0
 3666              		@ link register save eliminated.
 3667 0000 80B4     		push	{r7}
 3668              	.LCFI107:
 3669              		.cfi_def_cfa_offset 4
 3670              		.cfi_offset 7, -4
 3671 0002 83B0     		sub	sp, sp, #12
 3672              	.LCFI108:
 3673              		.cfi_def_cfa_offset 16
 3674 0004 00AF     		add	r7, sp, #0
 3675              	.LCFI109:
 3676              		.cfi_def_cfa_register 7
 3677 0006 7860     		str	r0, [r7, #4]
 3678 0008 3960     		str	r1, [r7]
2132:ThirdParty/FreeRTOS/queue.c ****         ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 3679              		.loc 1 2132 49
 3680 000a 7B68     		ldr	r3, [r7, #4]
 3681 000c 3A68     		ldr	r2, [r7]
 3682 000e 9A64     		str	r2, [r3, #72]
2133:ThirdParty/FreeRTOS/queue.c ****     }
 3683              		.loc 1 2133 5
 3684 0010 00BF     		nop
 3685 0012 0C37     		adds	r7, r7, #12
 3686              	.LCFI110:
 3687              		.cfi_def_cfa_offset 4
 3688 0014 BD46     		mov	sp, r7
 3689              	.LCFI111:
 3690              		.cfi_def_cfa_register 13
 3691              		@ sp needed
 3692 0016 5DF8047B 		ldr	r7, [sp], #4
 3693              	.LCFI112:
 3694              		.cfi_restore 7
 3695              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 108


 3696 001a 7047     		bx	lr
 3697              		.cfi_endproc
 3698              	.LFE26:
 3700              		.section	.text.ucQueueGetQueueType,"ax",%progbits
 3701              		.align	1
 3702              		.global	ucQueueGetQueueType
 3703              		.syntax unified
 3704              		.thumb
 3705              		.thumb_func
 3707              	ucQueueGetQueueType:
 3708              	.LFB27:
2134:ThirdParty/FreeRTOS/queue.c **** 
2135:ThirdParty/FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2136:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2137:ThirdParty/FreeRTOS/queue.c **** 
2138:ThirdParty/FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2139:ThirdParty/FreeRTOS/queue.c **** 
2140:ThirdParty/FreeRTOS/queue.c ****     uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2141:ThirdParty/FreeRTOS/queue.c ****     {
 3709              		.loc 1 2141 5
 3710              		.cfi_startproc
 3711              		@ args = 0, pretend = 0, frame = 8
 3712              		@ frame_needed = 1, uses_anonymous_args = 0
 3713              		@ link register save eliminated.
 3714 0000 80B4     		push	{r7}
 3715              	.LCFI113:
 3716              		.cfi_def_cfa_offset 4
 3717              		.cfi_offset 7, -4
 3718 0002 83B0     		sub	sp, sp, #12
 3719              	.LCFI114:
 3720              		.cfi_def_cfa_offset 16
 3721 0004 00AF     		add	r7, sp, #0
 3722              	.LCFI115:
 3723              		.cfi_def_cfa_register 7
 3724 0006 7860     		str	r0, [r7, #4]
2142:ThirdParty/FreeRTOS/queue.c ****         return ( ( Queue_t * ) xQueue )->ucQueueType;
 3725              		.loc 1 2142 40
 3726 0008 7B68     		ldr	r3, [r7, #4]
 3727 000a 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
2143:ThirdParty/FreeRTOS/queue.c ****     }
 3728              		.loc 1 2143 5
 3729 000e 1846     		mov	r0, r3
 3730 0010 0C37     		adds	r7, r7, #12
 3731              	.LCFI116:
 3732              		.cfi_def_cfa_offset 4
 3733 0012 BD46     		mov	sp, r7
 3734              	.LCFI117:
 3735              		.cfi_def_cfa_register 13
 3736              		@ sp needed
 3737 0014 5DF8047B 		ldr	r7, [sp], #4
 3738              	.LCFI118:
 3739              		.cfi_restore 7
 3740              		.cfi_def_cfa_offset 0
 3741 0018 7047     		bx	lr
 3742              		.cfi_endproc
 3743              	.LFE27:
 3745              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 109


 3746              		.align	1
 3747              		.syntax unified
 3748              		.thumb
 3749              		.thumb_func
 3751              	prvGetDisinheritPriorityAfterTimeout:
 3752              	.LFB28:
2144:ThirdParty/FreeRTOS/queue.c **** 
2145:ThirdParty/FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2146:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2147:ThirdParty/FreeRTOS/queue.c **** 
2148:ThirdParty/FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
2149:ThirdParty/FreeRTOS/queue.c **** 
2150:ThirdParty/FreeRTOS/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2151:ThirdParty/FreeRTOS/queue.c ****     {
 3753              		.loc 1 2151 5
 3754              		.cfi_startproc
 3755              		@ args = 0, pretend = 0, frame = 16
 3756              		@ frame_needed = 1, uses_anonymous_args = 0
 3757              		@ link register save eliminated.
 3758 0000 80B4     		push	{r7}
 3759              	.LCFI119:
 3760              		.cfi_def_cfa_offset 4
 3761              		.cfi_offset 7, -4
 3762 0002 85B0     		sub	sp, sp, #20
 3763              	.LCFI120:
 3764              		.cfi_def_cfa_offset 24
 3765 0004 00AF     		add	r7, sp, #0
 3766              	.LCFI121:
 3767              		.cfi_def_cfa_register 7
 3768 0006 7860     		str	r0, [r7, #4]
2152:ThirdParty/FreeRTOS/queue.c ****         UBaseType_t uxHighestPriorityOfWaitingTasks;
2153:ThirdParty/FreeRTOS/queue.c **** 
2154:ThirdParty/FreeRTOS/queue.c ****         /* If a task waiting for a mutex causes the mutex holder to inherit a
2155:ThirdParty/FreeRTOS/queue.c ****          * priority, but the waiting task times out, then the holder should
2156:ThirdParty/FreeRTOS/queue.c ****          * disinherit the priority - but only down to the highest priority of any
2157:ThirdParty/FreeRTOS/queue.c ****          * other tasks that are waiting for the same mutex.  For this purpose,
2158:ThirdParty/FreeRTOS/queue.c ****          * return the priority of the highest priority task that is waiting for the
2159:ThirdParty/FreeRTOS/queue.c ****          * mutex. */
2160:ThirdParty/FreeRTOS/queue.c ****         if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 3769              		.loc 1 2160 13
 3770 0008 7B68     		ldr	r3, [r7, #4]
 3771 000a 5B6A     		ldr	r3, [r3, #36]
 3772              		.loc 1 2160 11
 3773 000c 002B     		cmp	r3, #0
 3774 000e 06D0     		beq	.L249
2161:ThirdParty/FreeRTOS/queue.c ****         {
2162:ThirdParty/FreeRTOS/queue.c ****             uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t 
 3775              		.loc 1 2162 102
 3776 0010 7B68     		ldr	r3, [r7, #4]
 3777 0012 1B6B     		ldr	r3, [r3, #48]
 3778 0014 1B68     		ldr	r3, [r3]
 3779              		.loc 1 2162 45
 3780 0016 C3F10503 		rsb	r3, r3, #5
 3781 001a FB60     		str	r3, [r7, #12]
 3782 001c 01E0     		b	.L250
 3783              	.L249:
2163:ThirdParty/FreeRTOS/queue.c ****         }
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 110


2164:ThirdParty/FreeRTOS/queue.c ****         else
2165:ThirdParty/FreeRTOS/queue.c ****         {
2166:ThirdParty/FreeRTOS/queue.c ****             uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 3784              		.loc 1 2166 45
 3785 001e 0023     		movs	r3, #0
 3786 0020 FB60     		str	r3, [r7, #12]
 3787              	.L250:
2167:ThirdParty/FreeRTOS/queue.c ****         }
2168:ThirdParty/FreeRTOS/queue.c **** 
2169:ThirdParty/FreeRTOS/queue.c ****         return uxHighestPriorityOfWaitingTasks;
 3788              		.loc 1 2169 16
 3789 0022 FB68     		ldr	r3, [r7, #12]
2170:ThirdParty/FreeRTOS/queue.c ****     }
 3790              		.loc 1 2170 5
 3791 0024 1846     		mov	r0, r3
 3792 0026 1437     		adds	r7, r7, #20
 3793              	.LCFI122:
 3794              		.cfi_def_cfa_offset 4
 3795 0028 BD46     		mov	sp, r7
 3796              	.LCFI123:
 3797              		.cfi_def_cfa_register 13
 3798              		@ sp needed
 3799 002a 5DF8047B 		ldr	r7, [sp], #4
 3800              	.LCFI124:
 3801              		.cfi_restore 7
 3802              		.cfi_def_cfa_offset 0
 3803 002e 7047     		bx	lr
 3804              		.cfi_endproc
 3805              	.LFE28:
 3807              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 3808              		.align	1
 3809              		.syntax unified
 3810              		.thumb
 3811              		.thumb_func
 3813              	prvCopyDataToQueue:
 3814              	.LFB29:
2171:ThirdParty/FreeRTOS/queue.c **** 
2172:ThirdParty/FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
2173:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2174:ThirdParty/FreeRTOS/queue.c **** 
2175:ThirdParty/FreeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
2176:ThirdParty/FreeRTOS/queue.c ****                                       const void * pvItemToQueue,
2177:ThirdParty/FreeRTOS/queue.c ****                                       const BaseType_t xPosition )
2178:ThirdParty/FreeRTOS/queue.c **** {
 3815              		.loc 1 2178 1
 3816              		.cfi_startproc
 3817              		@ args = 0, pretend = 0, frame = 24
 3818              		@ frame_needed = 1, uses_anonymous_args = 0
 3819 0000 80B5     		push	{r7, lr}
 3820              	.LCFI125:
 3821              		.cfi_def_cfa_offset 8
 3822              		.cfi_offset 7, -8
 3823              		.cfi_offset 14, -4
 3824 0002 86B0     		sub	sp, sp, #24
 3825              	.LCFI126:
 3826              		.cfi_def_cfa_offset 32
 3827 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 111


 3828              	.LCFI127:
 3829              		.cfi_def_cfa_register 7
 3830 0006 F860     		str	r0, [r7, #12]
 3831 0008 B960     		str	r1, [r7, #8]
 3832 000a 7A60     		str	r2, [r7, #4]
2179:ThirdParty/FreeRTOS/queue.c ****     BaseType_t xReturn = pdFALSE;
 3833              		.loc 1 2179 16
 3834 000c 0023     		movs	r3, #0
 3835 000e 7B61     		str	r3, [r7, #20]
2180:ThirdParty/FreeRTOS/queue.c ****     UBaseType_t uxMessagesWaiting;
2181:ThirdParty/FreeRTOS/queue.c **** 
2182:ThirdParty/FreeRTOS/queue.c ****     /* This function is called from a critical section. */
2183:ThirdParty/FreeRTOS/queue.c **** 
2184:ThirdParty/FreeRTOS/queue.c ****     uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 3836              		.loc 1 2184 23
 3837 0010 FB68     		ldr	r3, [r7, #12]
 3838 0012 9B6B     		ldr	r3, [r3, #56]
 3839 0014 3B61     		str	r3, [r7, #16]
2185:ThirdParty/FreeRTOS/queue.c **** 
2186:ThirdParty/FreeRTOS/queue.c ****     if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 3840              		.loc 1 2186 16
 3841 0016 FB68     		ldr	r3, [r7, #12]
 3842 0018 1B6C     		ldr	r3, [r3, #64]
 3843              		.loc 1 2186 7
 3844 001a 002B     		cmp	r3, #0
 3845 001c 0DD1     		bne	.L253
2187:ThirdParty/FreeRTOS/queue.c ****     {
2188:ThirdParty/FreeRTOS/queue.c ****         #if ( configUSE_MUTEXES == 1 )
2189:ThirdParty/FreeRTOS/queue.c ****         {
2190:ThirdParty/FreeRTOS/queue.c ****             if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 3846              		.loc 1 2190 24
 3847 001e FB68     		ldr	r3, [r7, #12]
 3848 0020 1B68     		ldr	r3, [r3]
 3849              		.loc 1 2190 15
 3850 0022 002B     		cmp	r3, #0
 3851 0024 4DD1     		bne	.L254
2191:ThirdParty/FreeRTOS/queue.c ****             {
2192:ThirdParty/FreeRTOS/queue.c ****                 /* The mutex is no longer being held. */
2193:ThirdParty/FreeRTOS/queue.c ****                 xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 3852              		.loc 1 2193 27
 3853 0026 FB68     		ldr	r3, [r7, #12]
 3854 0028 9B68     		ldr	r3, [r3, #8]
 3855 002a 1846     		mov	r0, r3
 3856 002c FFF7FEFF 		bl	xTaskPriorityDisinherit
 3857 0030 7861     		str	r0, [r7, #20]
2194:ThirdParty/FreeRTOS/queue.c ****                 pxQueue->u.xSemaphore.xMutexHolder = NULL;
 3858              		.loc 1 2194 52
 3859 0032 FB68     		ldr	r3, [r7, #12]
 3860 0034 0022     		movs	r2, #0
 3861 0036 9A60     		str	r2, [r3, #8]
 3862 0038 43E0     		b	.L254
 3863              	.L253:
2195:ThirdParty/FreeRTOS/queue.c ****             }
2196:ThirdParty/FreeRTOS/queue.c ****             else
2197:ThirdParty/FreeRTOS/queue.c ****             {
2198:ThirdParty/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2199:ThirdParty/FreeRTOS/queue.c ****             }
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 112


2200:ThirdParty/FreeRTOS/queue.c ****         }
2201:ThirdParty/FreeRTOS/queue.c ****         #endif /* configUSE_MUTEXES */
2202:ThirdParty/FreeRTOS/queue.c ****     }
2203:ThirdParty/FreeRTOS/queue.c ****     else if( xPosition == queueSEND_TO_BACK )
 3864              		.loc 1 2203 12
 3865 003a 7B68     		ldr	r3, [r7, #4]
 3866 003c 002B     		cmp	r3, #0
 3867 003e 19D1     		bne	.L255
2204:ThirdParty/FreeRTOS/queue.c ****     {
2205:ThirdParty/FreeRTOS/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSi
 3868              		.loc 1 2205 44
 3869 0040 FB68     		ldr	r3, [r7, #12]
 3870 0042 5868     		ldr	r0, [r3, #4]
 3871              		.loc 1 2205 90
 3872 0044 FB68     		ldr	r3, [r7, #12]
 3873 0046 1B6C     		ldr	r3, [r3, #64]
 3874              		.loc 1 2205 18
 3875 0048 1A46     		mov	r2, r3
 3876 004a B968     		ldr	r1, [r7, #8]
 3877 004c FFF7FEFF 		bl	memcpy
2206:ThirdParty/FreeRTOS/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
 3878              		.loc 1 2206 28
 3879 0050 FB68     		ldr	r3, [r7, #12]
 3880 0052 5A68     		ldr	r2, [r3, #4]
 3881              		.loc 1 2206 38
 3882 0054 FB68     		ldr	r3, [r7, #12]
 3883 0056 1B6C     		ldr	r3, [r3, #64]
 3884              		.loc 1 2206 28
 3885 0058 1A44     		add	r2, r2, r3
 3886 005a FB68     		ldr	r3, [r7, #12]
 3887 005c 5A60     		str	r2, [r3, #4]
2207:ThirdParty/FreeRTOS/queue.c **** 
2208:ThirdParty/FreeRTOS/queue.c ****         if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                       
 3888              		.loc 1 2208 20
 3889 005e FB68     		ldr	r3, [r7, #12]
 3890 0060 5A68     		ldr	r2, [r3, #4]
 3891              		.loc 1 2208 52
 3892 0062 FB68     		ldr	r3, [r7, #12]
 3893 0064 9B68     		ldr	r3, [r3, #8]
 3894              		.loc 1 2208 11
 3895 0066 9A42     		cmp	r2, r3
 3896 0068 2BD3     		bcc	.L254
2209:ThirdParty/FreeRTOS/queue.c ****         {
2210:ThirdParty/FreeRTOS/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 3897              		.loc 1 2210 41
 3898 006a FB68     		ldr	r3, [r7, #12]
 3899 006c 1A68     		ldr	r2, [r3]
 3900              		.loc 1 2210 32
 3901 006e FB68     		ldr	r3, [r7, #12]
 3902 0070 5A60     		str	r2, [r3, #4]
 3903 0072 26E0     		b	.L254
 3904              	.L255:
2211:ThirdParty/FreeRTOS/queue.c ****         }
2212:ThirdParty/FreeRTOS/queue.c ****         else
2213:ThirdParty/FreeRTOS/queue.c ****         {
2214:ThirdParty/FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2215:ThirdParty/FreeRTOS/queue.c ****         }
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 113


2216:ThirdParty/FreeRTOS/queue.c ****     }
2217:ThirdParty/FreeRTOS/queue.c ****     else
2218:ThirdParty/FreeRTOS/queue.c ****     {
2219:ThirdParty/FreeRTOS/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue
 3905              		.loc 1 2219 54
 3906 0074 FB68     		ldr	r3, [r7, #12]
 3907 0076 D868     		ldr	r0, [r3, #12]
 3908              		.loc 1 2219 100
 3909 0078 FB68     		ldr	r3, [r7, #12]
 3910 007a 1B6C     		ldr	r3, [r3, #64]
 3911              		.loc 1 2219 18
 3912 007c 1A46     		mov	r2, r3
 3913 007e B968     		ldr	r1, [r7, #8]
 3914 0080 FFF7FEFF 		bl	memcpy
2220:ThirdParty/FreeRTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 3915              		.loc 1 2220 38
 3916 0084 FB68     		ldr	r3, [r7, #12]
 3917 0086 DA68     		ldr	r2, [r3, #12]
 3918              		.loc 1 2220 48
 3919 0088 FB68     		ldr	r3, [r7, #12]
 3920 008a 1B6C     		ldr	r3, [r3, #64]
 3921              		.loc 1 2220 38
 3922 008c 5B42     		rsbs	r3, r3, #0
 3923 008e 1A44     		add	r2, r2, r3
 3924 0090 FB68     		ldr	r3, [r7, #12]
 3925 0092 DA60     		str	r2, [r3, #12]
2221:ThirdParty/FreeRTOS/queue.c **** 
2222:ThirdParty/FreeRTOS/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified
 3926              		.loc 1 2222 30
 3927 0094 FB68     		ldr	r3, [r7, #12]
 3928 0096 DA68     		ldr	r2, [r3, #12]
 3929              		.loc 1 2222 51
 3930 0098 FB68     		ldr	r3, [r7, #12]
 3931 009a 1B68     		ldr	r3, [r3]
 3932              		.loc 1 2222 11
 3933 009c 9A42     		cmp	r2, r3
 3934 009e 07D2     		bcs	.L256
2223:ThirdParty/FreeRTOS/queue.c ****         {
2224:ThirdParty/FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 3935              		.loc 1 2224 63
 3936 00a0 FB68     		ldr	r3, [r7, #12]
 3937 00a2 9A68     		ldr	r2, [r3, #8]
 3938              		.loc 1 2224 80
 3939 00a4 FB68     		ldr	r3, [r7, #12]
 3940 00a6 1B6C     		ldr	r3, [r3, #64]
 3941              		.loc 1 2224 71
 3942 00a8 5B42     		rsbs	r3, r3, #0
 3943 00aa 1A44     		add	r2, r2, r3
 3944              		.loc 1 2224 42
 3945 00ac FB68     		ldr	r3, [r7, #12]
 3946 00ae DA60     		str	r2, [r3, #12]
 3947              	.L256:
2225:ThirdParty/FreeRTOS/queue.c ****         }
2226:ThirdParty/FreeRTOS/queue.c ****         else
2227:ThirdParty/FreeRTOS/queue.c ****         {
2228:ThirdParty/FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2229:ThirdParty/FreeRTOS/queue.c ****         }
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 114


2230:ThirdParty/FreeRTOS/queue.c **** 
2231:ThirdParty/FreeRTOS/queue.c ****         if( xPosition == queueOVERWRITE )
 3948              		.loc 1 2231 11
 3949 00b0 7B68     		ldr	r3, [r7, #4]
 3950 00b2 022B     		cmp	r3, #2
 3951 00b4 05D1     		bne	.L254
2232:ThirdParty/FreeRTOS/queue.c ****         {
2233:ThirdParty/FreeRTOS/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 3952              		.loc 1 2233 15
 3953 00b6 3B69     		ldr	r3, [r7, #16]
 3954 00b8 002B     		cmp	r3, #0
 3955 00ba 02D0     		beq	.L254
2234:ThirdParty/FreeRTOS/queue.c ****             {
2235:ThirdParty/FreeRTOS/queue.c ****                 /* An item is not being added but overwritten, so subtract
2236:ThirdParty/FreeRTOS/queue.c ****                  * one from the recorded number of items in the queue so when
2237:ThirdParty/FreeRTOS/queue.c ****                  * one is added again below the number of recorded items remains
2238:ThirdParty/FreeRTOS/queue.c ****                  * correct. */
2239:ThirdParty/FreeRTOS/queue.c ****                 --uxMessagesWaiting;
 3956              		.loc 1 2239 17
 3957 00bc 3B69     		ldr	r3, [r7, #16]
 3958 00be 013B     		subs	r3, r3, #1
 3959 00c0 3B61     		str	r3, [r7, #16]
 3960              	.L254:
2240:ThirdParty/FreeRTOS/queue.c ****             }
2241:ThirdParty/FreeRTOS/queue.c ****             else
2242:ThirdParty/FreeRTOS/queue.c ****             {
2243:ThirdParty/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2244:ThirdParty/FreeRTOS/queue.c ****             }
2245:ThirdParty/FreeRTOS/queue.c ****         }
2246:ThirdParty/FreeRTOS/queue.c ****         else
2247:ThirdParty/FreeRTOS/queue.c ****         {
2248:ThirdParty/FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2249:ThirdParty/FreeRTOS/queue.c ****         }
2250:ThirdParty/FreeRTOS/queue.c ****     }
2251:ThirdParty/FreeRTOS/queue.c **** 
2252:ThirdParty/FreeRTOS/queue.c ****     pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 3961              		.loc 1 2252 52
 3962 00c2 3B69     		ldr	r3, [r7, #16]
 3963 00c4 5A1C     		adds	r2, r3, #1
 3964              		.loc 1 2252 32
 3965 00c6 FB68     		ldr	r3, [r7, #12]
 3966 00c8 9A63     		str	r2, [r3, #56]
2253:ThirdParty/FreeRTOS/queue.c **** 
2254:ThirdParty/FreeRTOS/queue.c ****     return xReturn;
 3967              		.loc 1 2254 12
 3968 00ca 7B69     		ldr	r3, [r7, #20]
2255:ThirdParty/FreeRTOS/queue.c **** }
 3969              		.loc 1 2255 1
 3970 00cc 1846     		mov	r0, r3
 3971 00ce 1837     		adds	r7, r7, #24
 3972              	.LCFI128:
 3973              		.cfi_def_cfa_offset 8
 3974 00d0 BD46     		mov	sp, r7
 3975              	.LCFI129:
 3976              		.cfi_def_cfa_register 13
 3977              		@ sp needed
 3978 00d2 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 115


 3979              		.cfi_endproc
 3980              	.LFE29:
 3982              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 3983              		.align	1
 3984              		.syntax unified
 3985              		.thumb
 3986              		.thumb_func
 3988              	prvCopyDataFromQueue:
 3989              	.LFB30:
2256:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2257:ThirdParty/FreeRTOS/queue.c **** 
2258:ThirdParty/FreeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
2259:ThirdParty/FreeRTOS/queue.c ****                                   void * const pvBuffer )
2260:ThirdParty/FreeRTOS/queue.c **** {
 3990              		.loc 1 2260 1
 3991              		.cfi_startproc
 3992              		@ args = 0, pretend = 0, frame = 8
 3993              		@ frame_needed = 1, uses_anonymous_args = 0
 3994 0000 80B5     		push	{r7, lr}
 3995              	.LCFI130:
 3996              		.cfi_def_cfa_offset 8
 3997              		.cfi_offset 7, -8
 3998              		.cfi_offset 14, -4
 3999 0002 82B0     		sub	sp, sp, #8
 4000              	.LCFI131:
 4001              		.cfi_def_cfa_offset 16
 4002 0004 00AF     		add	r7, sp, #0
 4003              	.LCFI132:
 4004              		.cfi_def_cfa_register 7
 4005 0006 7860     		str	r0, [r7, #4]
 4006 0008 3960     		str	r1, [r7]
2261:ThirdParty/FreeRTOS/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 4007              		.loc 1 2261 16
 4008 000a 7B68     		ldr	r3, [r7, #4]
 4009 000c 1B6C     		ldr	r3, [r3, #64]
 4010              		.loc 1 2261 7
 4011 000e 002B     		cmp	r3, #0
 4012 0010 18D0     		beq	.L261
2262:ThirdParty/FreeRTOS/queue.c ****     {
2263:ThirdParty/FreeRTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithm
 4013              		.loc 1 2263 38
 4014 0012 7B68     		ldr	r3, [r7, #4]
 4015 0014 DA68     		ldr	r2, [r3, #12]
 4016              		.loc 1 2263 48
 4017 0016 7B68     		ldr	r3, [r7, #4]
 4018 0018 1B6C     		ldr	r3, [r3, #64]
 4019              		.loc 1 2263 38
 4020 001a 1A44     		add	r2, r2, r3
 4021 001c 7B68     		ldr	r3, [r7, #4]
 4022 001e DA60     		str	r2, [r3, #12]
2264:ThirdParty/FreeRTOS/queue.c **** 
2265:ThirdParty/FreeRTOS/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception
 4023              		.loc 1 2265 30
 4024 0020 7B68     		ldr	r3, [r7, #4]
 4025 0022 DA68     		ldr	r2, [r3, #12]
 4026              		.loc 1 2265 62
 4027 0024 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 116


 4028 0026 9B68     		ldr	r3, [r3, #8]
 4029              		.loc 1 2265 11
 4030 0028 9A42     		cmp	r2, r3
 4031 002a 03D3     		bcc	.L260
2266:ThirdParty/FreeRTOS/queue.c ****         {
2267:ThirdParty/FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 4032              		.loc 1 2267 51
 4033 002c 7B68     		ldr	r3, [r7, #4]
 4034 002e 1A68     		ldr	r2, [r3]
 4035              		.loc 1 2267 42
 4036 0030 7B68     		ldr	r3, [r7, #4]
 4037 0032 DA60     		str	r2, [r3, #12]
 4038              	.L260:
2268:ThirdParty/FreeRTOS/queue.c ****         }
2269:ThirdParty/FreeRTOS/queue.c ****         else
2270:ThirdParty/FreeRTOS/queue.c ****         {
2271:ThirdParty/FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2272:ThirdParty/FreeRTOS/queue.c ****         }
2273:ThirdParty/FreeRTOS/queue.c **** 
2274:ThirdParty/FreeRTOS/queue.c ****         ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) p
 4039              		.loc 1 2274 75
 4040 0034 7B68     		ldr	r3, [r7, #4]
 4041 0036 D968     		ldr	r1, [r3, #12]
 4042              		.loc 1 2274 106
 4043 0038 7B68     		ldr	r3, [r7, #4]
 4044 003a 1B6C     		ldr	r3, [r3, #64]
 4045              		.loc 1 2274 18
 4046 003c 1A46     		mov	r2, r3
 4047 003e 3868     		ldr	r0, [r7]
 4048 0040 FFF7FEFF 		bl	memcpy
 4049              	.L261:
2275:ThirdParty/FreeRTOS/queue.c ****     }
2276:ThirdParty/FreeRTOS/queue.c **** }
 4050              		.loc 1 2276 1
 4051 0044 00BF     		nop
 4052 0046 0837     		adds	r7, r7, #8
 4053              	.LCFI133:
 4054              		.cfi_def_cfa_offset 8
 4055 0048 BD46     		mov	sp, r7
 4056              	.LCFI134:
 4057              		.cfi_def_cfa_register 13
 4058              		@ sp needed
 4059 004a 80BD     		pop	{r7, pc}
 4060              		.cfi_endproc
 4061              	.LFE30:
 4063              		.section	.text.prvUnlockQueue,"ax",%progbits
 4064              		.align	1
 4065              		.syntax unified
 4066              		.thumb
 4067              		.thumb_func
 4069              	prvUnlockQueue:
 4070              	.LFB31:
2277:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2278:ThirdParty/FreeRTOS/queue.c **** 
2279:ThirdParty/FreeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2280:ThirdParty/FreeRTOS/queue.c **** {
 4071              		.loc 1 2280 1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 117


 4072              		.cfi_startproc
 4073              		@ args = 0, pretend = 0, frame = 16
 4074              		@ frame_needed = 1, uses_anonymous_args = 0
 4075 0000 80B5     		push	{r7, lr}
 4076              	.LCFI135:
 4077              		.cfi_def_cfa_offset 8
 4078              		.cfi_offset 7, -8
 4079              		.cfi_offset 14, -4
 4080 0002 84B0     		sub	sp, sp, #16
 4081              	.LCFI136:
 4082              		.cfi_def_cfa_offset 24
 4083 0004 00AF     		add	r7, sp, #0
 4084              	.LCFI137:
 4085              		.cfi_def_cfa_register 7
 4086 0006 7860     		str	r0, [r7, #4]
2281:ThirdParty/FreeRTOS/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2282:ThirdParty/FreeRTOS/queue.c **** 
2283:ThirdParty/FreeRTOS/queue.c ****     /* The lock counts contains the number of extra data items placed or
2284:ThirdParty/FreeRTOS/queue.c ****      * removed from the queue while the queue was locked.  When a queue is
2285:ThirdParty/FreeRTOS/queue.c ****      * locked items can be added or removed, but the event lists cannot be
2286:ThirdParty/FreeRTOS/queue.c ****      * updated. */
2287:ThirdParty/FreeRTOS/queue.c ****     taskENTER_CRITICAL();
 4087              		.loc 1 2287 5
 4088 0008 FFF7FEFF 		bl	vPortEnterCritical
 4089              	.LBB216:
2288:ThirdParty/FreeRTOS/queue.c ****     {
2289:ThirdParty/FreeRTOS/queue.c ****         int8_t cTxLock = pxQueue->cTxLock;
 4090              		.loc 1 2289 16
 4091 000c 7B68     		ldr	r3, [r7, #4]
 4092 000e 93F84530 		ldrb	r3, [r3, #69]
 4093 0012 FB73     		strb	r3, [r7, #15]
2290:ThirdParty/FreeRTOS/queue.c **** 
2291:ThirdParty/FreeRTOS/queue.c ****         /* See if data was added to the queue while it was locked. */
2292:ThirdParty/FreeRTOS/queue.c ****         while( cTxLock > queueLOCKED_UNMODIFIED )
 4094              		.loc 1 2292 14
 4095 0014 11E0     		b	.L263
 4096              	.L267:
2293:ThirdParty/FreeRTOS/queue.c ****         {
2294:ThirdParty/FreeRTOS/queue.c ****             /* Data was posted while the queue was locked.  Are any tasks
2295:ThirdParty/FreeRTOS/queue.c ****              * blocked waiting for data to become available? */
2296:ThirdParty/FreeRTOS/queue.c ****             #if ( configUSE_QUEUE_SETS == 1 )
2297:ThirdParty/FreeRTOS/queue.c ****             {
2298:ThirdParty/FreeRTOS/queue.c ****                 if( pxQueue->pxQueueSetContainer != NULL )
2299:ThirdParty/FreeRTOS/queue.c ****                 {
2300:ThirdParty/FreeRTOS/queue.c ****                     if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
2301:ThirdParty/FreeRTOS/queue.c ****                     {
2302:ThirdParty/FreeRTOS/queue.c ****                         /* The queue is a member of a queue set, and posting to
2303:ThirdParty/FreeRTOS/queue.c ****                          * the queue set caused a higher priority task to unblock.
2304:ThirdParty/FreeRTOS/queue.c ****                          * A context switch is required. */
2305:ThirdParty/FreeRTOS/queue.c ****                         vTaskMissedYield();
2306:ThirdParty/FreeRTOS/queue.c ****                     }
2307:ThirdParty/FreeRTOS/queue.c ****                     else
2308:ThirdParty/FreeRTOS/queue.c ****                     {
2309:ThirdParty/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2310:ThirdParty/FreeRTOS/queue.c ****                     }
2311:ThirdParty/FreeRTOS/queue.c ****                 }
2312:ThirdParty/FreeRTOS/queue.c ****                 else
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 118


2313:ThirdParty/FreeRTOS/queue.c ****                 {
2314:ThirdParty/FreeRTOS/queue.c ****                     /* Tasks that are removed from the event list will get
2315:ThirdParty/FreeRTOS/queue.c ****                      * added to the pending ready list as the scheduler is still
2316:ThirdParty/FreeRTOS/queue.c ****                      * suspended. */
2317:ThirdParty/FreeRTOS/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2318:ThirdParty/FreeRTOS/queue.c ****                     {
2319:ThirdParty/FreeRTOS/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
2320:ThirdParty/FreeRTOS/queue.c ****                         {
2321:ThirdParty/FreeRTOS/queue.c ****                             /* The task waiting has a higher priority so record that a
2322:ThirdParty/FreeRTOS/queue.c ****                              * context switch is required. */
2323:ThirdParty/FreeRTOS/queue.c ****                             vTaskMissedYield();
2324:ThirdParty/FreeRTOS/queue.c ****                         }
2325:ThirdParty/FreeRTOS/queue.c ****                         else
2326:ThirdParty/FreeRTOS/queue.c ****                         {
2327:ThirdParty/FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
2328:ThirdParty/FreeRTOS/queue.c ****                         }
2329:ThirdParty/FreeRTOS/queue.c ****                     }
2330:ThirdParty/FreeRTOS/queue.c ****                     else
2331:ThirdParty/FreeRTOS/queue.c ****                     {
2332:ThirdParty/FreeRTOS/queue.c ****                         break;
2333:ThirdParty/FreeRTOS/queue.c ****                     }
2334:ThirdParty/FreeRTOS/queue.c ****                 }
2335:ThirdParty/FreeRTOS/queue.c ****             }
2336:ThirdParty/FreeRTOS/queue.c ****             #else /* configUSE_QUEUE_SETS */
2337:ThirdParty/FreeRTOS/queue.c ****             {
2338:ThirdParty/FreeRTOS/queue.c ****                 /* Tasks that are removed from the event list will get added to
2339:ThirdParty/FreeRTOS/queue.c ****                  * the pending ready list as the scheduler is still suspended. */
2340:ThirdParty/FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 4097              		.loc 1 2340 21
 4098 0016 7B68     		ldr	r3, [r7, #4]
 4099 0018 5B6A     		ldr	r3, [r3, #36]
 4100              		.loc 1 2340 19
 4101 001a 002B     		cmp	r3, #0
 4102 001c 12D0     		beq	.L273
2341:ThirdParty/FreeRTOS/queue.c ****                 {
2342:ThirdParty/FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE
 4103              		.loc 1 2342 51
 4104 001e 7B68     		ldr	r3, [r7, #4]
 4105 0020 2433     		adds	r3, r3, #36
 4106              		.loc 1 2342 25
 4107 0022 1846     		mov	r0, r3
 4108 0024 FFF7FEFF 		bl	xTaskRemoveFromEventList
 4109 0028 0346     		mov	r3, r0
 4110              		.loc 1 2342 23
 4111 002a 002B     		cmp	r3, #0
 4112 002c 01D0     		beq	.L265
2343:ThirdParty/FreeRTOS/queue.c ****                     {
2344:ThirdParty/FreeRTOS/queue.c ****                         /* The task waiting has a higher priority so record that
2345:ThirdParty/FreeRTOS/queue.c ****                          * a context switch is required. */
2346:ThirdParty/FreeRTOS/queue.c ****                         vTaskMissedYield();
 4113              		.loc 1 2346 25
 4114 002e FFF7FEFF 		bl	vTaskMissedYield
 4115              	.L265:
2347:ThirdParty/FreeRTOS/queue.c ****                     }
2348:ThirdParty/FreeRTOS/queue.c ****                     else
2349:ThirdParty/FreeRTOS/queue.c ****                     {
2350:ThirdParty/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 119


2351:ThirdParty/FreeRTOS/queue.c ****                     }
2352:ThirdParty/FreeRTOS/queue.c ****                 }
2353:ThirdParty/FreeRTOS/queue.c ****                 else
2354:ThirdParty/FreeRTOS/queue.c ****                 {
2355:ThirdParty/FreeRTOS/queue.c ****                     break;
2356:ThirdParty/FreeRTOS/queue.c ****                 }
2357:ThirdParty/FreeRTOS/queue.c ****             }
2358:ThirdParty/FreeRTOS/queue.c ****             #endif /* configUSE_QUEUE_SETS */
2359:ThirdParty/FreeRTOS/queue.c **** 
2360:ThirdParty/FreeRTOS/queue.c ****             --cTxLock;
 4116              		.loc 1 2360 13
 4117 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4118 0034 013B     		subs	r3, r3, #1
 4119 0036 DBB2     		uxtb	r3, r3
 4120 0038 FB73     		strb	r3, [r7, #15]
 4121              	.L263:
2292:ThirdParty/FreeRTOS/queue.c ****         {
 4122              		.loc 1 2292 14
 4123 003a 97F90F30 		ldrsb	r3, [r7, #15]
 4124 003e 002B     		cmp	r3, #0
 4125 0040 E9DC     		bgt	.L267
 4126 0042 00E0     		b	.L266
 4127              	.L273:
2355:ThirdParty/FreeRTOS/queue.c ****                 }
 4128              		.loc 1 2355 21
 4129 0044 00BF     		nop
 4130              	.L266:
2361:ThirdParty/FreeRTOS/queue.c ****         }
2362:ThirdParty/FreeRTOS/queue.c **** 
2363:ThirdParty/FreeRTOS/queue.c ****         pxQueue->cTxLock = queueUNLOCKED;
 4131              		.loc 1 2363 26
 4132 0046 7B68     		ldr	r3, [r7, #4]
 4133 0048 FF22     		movs	r2, #255
 4134 004a 83F84520 		strb	r2, [r3, #69]
 4135              	.LBE216:
2364:ThirdParty/FreeRTOS/queue.c ****     }
2365:ThirdParty/FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
 4136              		.loc 1 2365 5
 4137 004e FFF7FEFF 		bl	vPortExitCritical
2366:ThirdParty/FreeRTOS/queue.c **** 
2367:ThirdParty/FreeRTOS/queue.c ****     /* Do the same for the Rx lock. */
2368:ThirdParty/FreeRTOS/queue.c ****     taskENTER_CRITICAL();
 4138              		.loc 1 2368 5
 4139 0052 FFF7FEFF 		bl	vPortEnterCritical
 4140              	.LBB217:
2369:ThirdParty/FreeRTOS/queue.c ****     {
2370:ThirdParty/FreeRTOS/queue.c ****         int8_t cRxLock = pxQueue->cRxLock;
 4141              		.loc 1 2370 16
 4142 0056 7B68     		ldr	r3, [r7, #4]
 4143 0058 93F84430 		ldrb	r3, [r3, #68]
 4144 005c BB73     		strb	r3, [r7, #14]
2371:ThirdParty/FreeRTOS/queue.c **** 
2372:ThirdParty/FreeRTOS/queue.c ****         while( cRxLock > queueLOCKED_UNMODIFIED )
 4145              		.loc 1 2372 14
 4146 005e 11E0     		b	.L268
 4147              	.L272:
2373:ThirdParty/FreeRTOS/queue.c ****         {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 120


2374:ThirdParty/FreeRTOS/queue.c ****             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 4148              		.loc 1 2374 17
 4149 0060 7B68     		ldr	r3, [r7, #4]
 4150 0062 1B69     		ldr	r3, [r3, #16]
 4151              		.loc 1 2374 15
 4152 0064 002B     		cmp	r3, #0
 4153 0066 12D0     		beq	.L274
2375:ThirdParty/FreeRTOS/queue.c ****             {
2376:ThirdParty/FreeRTOS/queue.c ****                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 4154              		.loc 1 2376 47
 4155 0068 7B68     		ldr	r3, [r7, #4]
 4156 006a 1033     		adds	r3, r3, #16
 4157              		.loc 1 2376 21
 4158 006c 1846     		mov	r0, r3
 4159 006e FFF7FEFF 		bl	xTaskRemoveFromEventList
 4160 0072 0346     		mov	r3, r0
 4161              		.loc 1 2376 19
 4162 0074 002B     		cmp	r3, #0
 4163 0076 01D0     		beq	.L270
2377:ThirdParty/FreeRTOS/queue.c ****                 {
2378:ThirdParty/FreeRTOS/queue.c ****                     vTaskMissedYield();
 4164              		.loc 1 2378 21
 4165 0078 FFF7FEFF 		bl	vTaskMissedYield
 4166              	.L270:
2379:ThirdParty/FreeRTOS/queue.c ****                 }
2380:ThirdParty/FreeRTOS/queue.c ****                 else
2381:ThirdParty/FreeRTOS/queue.c ****                 {
2382:ThirdParty/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2383:ThirdParty/FreeRTOS/queue.c ****                 }
2384:ThirdParty/FreeRTOS/queue.c **** 
2385:ThirdParty/FreeRTOS/queue.c ****                 --cRxLock;
 4167              		.loc 1 2385 17
 4168 007c BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 4169 007e 013B     		subs	r3, r3, #1
 4170 0080 DBB2     		uxtb	r3, r3
 4171 0082 BB73     		strb	r3, [r7, #14]
 4172              	.L268:
2372:ThirdParty/FreeRTOS/queue.c ****         {
 4173              		.loc 1 2372 14
 4174 0084 97F90E30 		ldrsb	r3, [r7, #14]
 4175 0088 002B     		cmp	r3, #0
 4176 008a E9DC     		bgt	.L272
 4177 008c 00E0     		b	.L271
 4178              	.L274:
2386:ThirdParty/FreeRTOS/queue.c ****             }
2387:ThirdParty/FreeRTOS/queue.c ****             else
2388:ThirdParty/FreeRTOS/queue.c ****             {
2389:ThirdParty/FreeRTOS/queue.c ****                 break;
 4179              		.loc 1 2389 17
 4180 008e 00BF     		nop
 4181              	.L271:
2390:ThirdParty/FreeRTOS/queue.c ****             }
2391:ThirdParty/FreeRTOS/queue.c ****         }
2392:ThirdParty/FreeRTOS/queue.c **** 
2393:ThirdParty/FreeRTOS/queue.c ****         pxQueue->cRxLock = queueUNLOCKED;
 4182              		.loc 1 2393 26
 4183 0090 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 121


 4184 0092 FF22     		movs	r2, #255
 4185 0094 83F84420 		strb	r2, [r3, #68]
 4186              	.LBE217:
2394:ThirdParty/FreeRTOS/queue.c ****     }
2395:ThirdParty/FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
 4187              		.loc 1 2395 5
 4188 0098 FFF7FEFF 		bl	vPortExitCritical
2396:ThirdParty/FreeRTOS/queue.c **** }
 4189              		.loc 1 2396 1
 4190 009c 00BF     		nop
 4191 009e 1037     		adds	r7, r7, #16
 4192              	.LCFI138:
 4193              		.cfi_def_cfa_offset 8
 4194 00a0 BD46     		mov	sp, r7
 4195              	.LCFI139:
 4196              		.cfi_def_cfa_register 13
 4197              		@ sp needed
 4198 00a2 80BD     		pop	{r7, pc}
 4199              		.cfi_endproc
 4200              	.LFE31:
 4202              		.section	.text.prvIsQueueEmpty,"ax",%progbits
 4203              		.align	1
 4204              		.syntax unified
 4205              		.thumb
 4206              		.thumb_func
 4208              	prvIsQueueEmpty:
 4209              	.LFB32:
2397:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2398:ThirdParty/FreeRTOS/queue.c **** 
2399:ThirdParty/FreeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
2400:ThirdParty/FreeRTOS/queue.c **** {
 4210              		.loc 1 2400 1
 4211              		.cfi_startproc
 4212              		@ args = 0, pretend = 0, frame = 16
 4213              		@ frame_needed = 1, uses_anonymous_args = 0
 4214 0000 80B5     		push	{r7, lr}
 4215              	.LCFI140:
 4216              		.cfi_def_cfa_offset 8
 4217              		.cfi_offset 7, -8
 4218              		.cfi_offset 14, -4
 4219 0002 84B0     		sub	sp, sp, #16
 4220              	.LCFI141:
 4221              		.cfi_def_cfa_offset 24
 4222 0004 00AF     		add	r7, sp, #0
 4223              	.LCFI142:
 4224              		.cfi_def_cfa_register 7
 4225 0006 7860     		str	r0, [r7, #4]
2401:ThirdParty/FreeRTOS/queue.c ****     BaseType_t xReturn;
2402:ThirdParty/FreeRTOS/queue.c **** 
2403:ThirdParty/FreeRTOS/queue.c ****     taskENTER_CRITICAL();
 4226              		.loc 1 2403 5
 4227 0008 FFF7FEFF 		bl	vPortEnterCritical
2404:ThirdParty/FreeRTOS/queue.c ****     {
2405:ThirdParty/FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 4228              		.loc 1 2405 20
 4229 000c 7B68     		ldr	r3, [r7, #4]
 4230 000e 9B6B     		ldr	r3, [r3, #56]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 122


 4231              		.loc 1 2405 11
 4232 0010 002B     		cmp	r3, #0
 4233 0012 02D1     		bne	.L276
2406:ThirdParty/FreeRTOS/queue.c ****         {
2407:ThirdParty/FreeRTOS/queue.c ****             xReturn = pdTRUE;
 4234              		.loc 1 2407 21
 4235 0014 0123     		movs	r3, #1
 4236 0016 FB60     		str	r3, [r7, #12]
 4237 0018 01E0     		b	.L277
 4238              	.L276:
2408:ThirdParty/FreeRTOS/queue.c ****         }
2409:ThirdParty/FreeRTOS/queue.c ****         else
2410:ThirdParty/FreeRTOS/queue.c ****         {
2411:ThirdParty/FreeRTOS/queue.c ****             xReturn = pdFALSE;
 4239              		.loc 1 2411 21
 4240 001a 0023     		movs	r3, #0
 4241 001c FB60     		str	r3, [r7, #12]
 4242              	.L277:
2412:ThirdParty/FreeRTOS/queue.c ****         }
2413:ThirdParty/FreeRTOS/queue.c ****     }
2414:ThirdParty/FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
 4243              		.loc 1 2414 5
 4244 001e FFF7FEFF 		bl	vPortExitCritical
2415:ThirdParty/FreeRTOS/queue.c **** 
2416:ThirdParty/FreeRTOS/queue.c ****     return xReturn;
 4245              		.loc 1 2416 12
 4246 0022 FB68     		ldr	r3, [r7, #12]
2417:ThirdParty/FreeRTOS/queue.c **** }
 4247              		.loc 1 2417 1
 4248 0024 1846     		mov	r0, r3
 4249 0026 1037     		adds	r7, r7, #16
 4250              	.LCFI143:
 4251              		.cfi_def_cfa_offset 8
 4252 0028 BD46     		mov	sp, r7
 4253              	.LCFI144:
 4254              		.cfi_def_cfa_register 13
 4255              		@ sp needed
 4256 002a 80BD     		pop	{r7, pc}
 4257              		.cfi_endproc
 4258              	.LFE32:
 4260              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 4261              		.align	1
 4262              		.global	xQueueIsQueueEmptyFromISR
 4263              		.syntax unified
 4264              		.thumb
 4265              		.thumb_func
 4267              	xQueueIsQueueEmptyFromISR:
 4268              	.LFB33:
2418:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2419:ThirdParty/FreeRTOS/queue.c **** 
2420:ThirdParty/FreeRTOS/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2421:ThirdParty/FreeRTOS/queue.c **** {
 4269              		.loc 1 2421 1
 4270              		.cfi_startproc
 4271              		@ args = 0, pretend = 0, frame = 24
 4272              		@ frame_needed = 1, uses_anonymous_args = 0
 4273              		@ link register save eliminated.
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 123


 4274 0000 80B4     		push	{r7}
 4275              	.LCFI145:
 4276              		.cfi_def_cfa_offset 4
 4277              		.cfi_offset 7, -4
 4278 0002 87B0     		sub	sp, sp, #28
 4279              	.LCFI146:
 4280              		.cfi_def_cfa_offset 32
 4281 0004 00AF     		add	r7, sp, #0
 4282              	.LCFI147:
 4283              		.cfi_def_cfa_register 7
 4284 0006 7860     		str	r0, [r7, #4]
2422:ThirdParty/FreeRTOS/queue.c ****     BaseType_t xReturn;
2423:ThirdParty/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 4285              		.loc 1 2423 21
 4286 0008 7B68     		ldr	r3, [r7, #4]
 4287 000a 3B61     		str	r3, [r7, #16]
2424:ThirdParty/FreeRTOS/queue.c **** 
2425:ThirdParty/FreeRTOS/queue.c ****     configASSERT( pxQueue );
 4288              		.loc 1 2425 5
 4289 000c 3B69     		ldr	r3, [r7, #16]
 4290 000e 002B     		cmp	r3, #0
 4291 0010 0AD1     		bne	.L280
 4292              	.LBB218:
 4293              	.LBB219:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4294              		.loc 2 198 9
 4295              		.syntax unified
 4296              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4297 0012 4FF05003 			mov r3, #80												
 4298 0016 83F31188 		msr basepri, r3											
 4299 001a BFF36F8F 		isb														
 4300 001e BFF34F8F 		dsb														
 4301              	
 4302              	@ 0 "" 2
 4303              		.thumb
 4304              		.syntax unified
 4305 0022 FB60     		str	r3, [r7, #12]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4306              		.loc 2 206 5
 4307 0024 00BF     		nop
 4308              	.L281:
 4309              	.LBE219:
 4310              	.LBE218:
 4311              		.loc 1 2425 5 discriminator 1
 4312 0026 FEE7     		b	.L281
 4313              	.L280:
2426:ThirdParty/FreeRTOS/queue.c **** 
2427:ThirdParty/FreeRTOS/queue.c ****     if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 4314              		.loc 1 2427 16
 4315 0028 3B69     		ldr	r3, [r7, #16]
 4316 002a 9B6B     		ldr	r3, [r3, #56]
 4317              		.loc 1 2427 7
 4318 002c 002B     		cmp	r3, #0
 4319 002e 02D1     		bne	.L282
2428:ThirdParty/FreeRTOS/queue.c ****     {
2429:ThirdParty/FreeRTOS/queue.c ****         xReturn = pdTRUE;
 4320              		.loc 1 2429 17
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 124


 4321 0030 0123     		movs	r3, #1
 4322 0032 7B61     		str	r3, [r7, #20]
 4323 0034 01E0     		b	.L283
 4324              	.L282:
2430:ThirdParty/FreeRTOS/queue.c ****     }
2431:ThirdParty/FreeRTOS/queue.c ****     else
2432:ThirdParty/FreeRTOS/queue.c ****     {
2433:ThirdParty/FreeRTOS/queue.c ****         xReturn = pdFALSE;
 4325              		.loc 1 2433 17
 4326 0036 0023     		movs	r3, #0
 4327 0038 7B61     		str	r3, [r7, #20]
 4328              	.L283:
2434:ThirdParty/FreeRTOS/queue.c ****     }
2435:ThirdParty/FreeRTOS/queue.c **** 
2436:ThirdParty/FreeRTOS/queue.c ****     return xReturn;
 4329              		.loc 1 2436 12
 4330 003a 7B69     		ldr	r3, [r7, #20]
2437:ThirdParty/FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 4331              		.loc 1 2437 1
 4332 003c 1846     		mov	r0, r3
 4333 003e 1C37     		adds	r7, r7, #28
 4334              	.LCFI148:
 4335              		.cfi_def_cfa_offset 4
 4336 0040 BD46     		mov	sp, r7
 4337              	.LCFI149:
 4338              		.cfi_def_cfa_register 13
 4339              		@ sp needed
 4340 0042 5DF8047B 		ldr	r7, [sp], #4
 4341              	.LCFI150:
 4342              		.cfi_restore 7
 4343              		.cfi_def_cfa_offset 0
 4344 0046 7047     		bx	lr
 4345              		.cfi_endproc
 4346              	.LFE33:
 4348              		.section	.text.prvIsQueueFull,"ax",%progbits
 4349              		.align	1
 4350              		.syntax unified
 4351              		.thumb
 4352              		.thumb_func
 4354              	prvIsQueueFull:
 4355              	.LFB34:
2438:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2439:ThirdParty/FreeRTOS/queue.c **** 
2440:ThirdParty/FreeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
2441:ThirdParty/FreeRTOS/queue.c **** {
 4356              		.loc 1 2441 1
 4357              		.cfi_startproc
 4358              		@ args = 0, pretend = 0, frame = 16
 4359              		@ frame_needed = 1, uses_anonymous_args = 0
 4360 0000 80B5     		push	{r7, lr}
 4361              	.LCFI151:
 4362              		.cfi_def_cfa_offset 8
 4363              		.cfi_offset 7, -8
 4364              		.cfi_offset 14, -4
 4365 0002 84B0     		sub	sp, sp, #16
 4366              	.LCFI152:
 4367              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 125


 4368 0004 00AF     		add	r7, sp, #0
 4369              	.LCFI153:
 4370              		.cfi_def_cfa_register 7
 4371 0006 7860     		str	r0, [r7, #4]
2442:ThirdParty/FreeRTOS/queue.c ****     BaseType_t xReturn;
2443:ThirdParty/FreeRTOS/queue.c **** 
2444:ThirdParty/FreeRTOS/queue.c ****     taskENTER_CRITICAL();
 4372              		.loc 1 2444 5
 4373 0008 FFF7FEFF 		bl	vPortEnterCritical
2445:ThirdParty/FreeRTOS/queue.c ****     {
2446:ThirdParty/FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 4374              		.loc 1 2446 20
 4375 000c 7B68     		ldr	r3, [r7, #4]
 4376 000e 9A6B     		ldr	r2, [r3, #56]
 4377              		.loc 1 2446 50
 4378 0010 7B68     		ldr	r3, [r7, #4]
 4379 0012 DB6B     		ldr	r3, [r3, #60]
 4380              		.loc 1 2446 11
 4381 0014 9A42     		cmp	r2, r3
 4382 0016 02D1     		bne	.L286
2447:ThirdParty/FreeRTOS/queue.c ****         {
2448:ThirdParty/FreeRTOS/queue.c ****             xReturn = pdTRUE;
 4383              		.loc 1 2448 21
 4384 0018 0123     		movs	r3, #1
 4385 001a FB60     		str	r3, [r7, #12]
 4386 001c 01E0     		b	.L287
 4387              	.L286:
2449:ThirdParty/FreeRTOS/queue.c ****         }
2450:ThirdParty/FreeRTOS/queue.c ****         else
2451:ThirdParty/FreeRTOS/queue.c ****         {
2452:ThirdParty/FreeRTOS/queue.c ****             xReturn = pdFALSE;
 4388              		.loc 1 2452 21
 4389 001e 0023     		movs	r3, #0
 4390 0020 FB60     		str	r3, [r7, #12]
 4391              	.L287:
2453:ThirdParty/FreeRTOS/queue.c ****         }
2454:ThirdParty/FreeRTOS/queue.c ****     }
2455:ThirdParty/FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
 4392              		.loc 1 2455 5
 4393 0022 FFF7FEFF 		bl	vPortExitCritical
2456:ThirdParty/FreeRTOS/queue.c **** 
2457:ThirdParty/FreeRTOS/queue.c ****     return xReturn;
 4394              		.loc 1 2457 12
 4395 0026 FB68     		ldr	r3, [r7, #12]
2458:ThirdParty/FreeRTOS/queue.c **** }
 4396              		.loc 1 2458 1
 4397 0028 1846     		mov	r0, r3
 4398 002a 1037     		adds	r7, r7, #16
 4399              	.LCFI154:
 4400              		.cfi_def_cfa_offset 8
 4401 002c BD46     		mov	sp, r7
 4402              	.LCFI155:
 4403              		.cfi_def_cfa_register 13
 4404              		@ sp needed
 4405 002e 80BD     		pop	{r7, pc}
 4406              		.cfi_endproc
 4407              	.LFE34:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 126


 4409              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 4410              		.align	1
 4411              		.global	xQueueIsQueueFullFromISR
 4412              		.syntax unified
 4413              		.thumb
 4414              		.thumb_func
 4416              	xQueueIsQueueFullFromISR:
 4417              	.LFB35:
2459:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2460:ThirdParty/FreeRTOS/queue.c **** 
2461:ThirdParty/FreeRTOS/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2462:ThirdParty/FreeRTOS/queue.c **** {
 4418              		.loc 1 2462 1
 4419              		.cfi_startproc
 4420              		@ args = 0, pretend = 0, frame = 24
 4421              		@ frame_needed = 1, uses_anonymous_args = 0
 4422              		@ link register save eliminated.
 4423 0000 80B4     		push	{r7}
 4424              	.LCFI156:
 4425              		.cfi_def_cfa_offset 4
 4426              		.cfi_offset 7, -4
 4427 0002 87B0     		sub	sp, sp, #28
 4428              	.LCFI157:
 4429              		.cfi_def_cfa_offset 32
 4430 0004 00AF     		add	r7, sp, #0
 4431              	.LCFI158:
 4432              		.cfi_def_cfa_register 7
 4433 0006 7860     		str	r0, [r7, #4]
2463:ThirdParty/FreeRTOS/queue.c ****     BaseType_t xReturn;
2464:ThirdParty/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 4434              		.loc 1 2464 21
 4435 0008 7B68     		ldr	r3, [r7, #4]
 4436 000a 3B61     		str	r3, [r7, #16]
2465:ThirdParty/FreeRTOS/queue.c **** 
2466:ThirdParty/FreeRTOS/queue.c ****     configASSERT( pxQueue );
 4437              		.loc 1 2466 5
 4438 000c 3B69     		ldr	r3, [r7, #16]
 4439 000e 002B     		cmp	r3, #0
 4440 0010 0AD1     		bne	.L290
 4441              	.LBB220:
 4442              	.LBB221:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4443              		.loc 2 198 9
 4444              		.syntax unified
 4445              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4446 0012 4FF05003 			mov r3, #80												
 4447 0016 83F31188 		msr basepri, r3											
 4448 001a BFF36F8F 		isb														
 4449 001e BFF34F8F 		dsb														
 4450              	
 4451              	@ 0 "" 2
 4452              		.thumb
 4453              		.syntax unified
 4454 0022 FB60     		str	r3, [r7, #12]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4455              		.loc 2 206 5
 4456 0024 00BF     		nop
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 127


 4457              	.L291:
 4458              	.LBE221:
 4459              	.LBE220:
 4460              		.loc 1 2466 5 discriminator 1
 4461 0026 FEE7     		b	.L291
 4462              	.L290:
2467:ThirdParty/FreeRTOS/queue.c **** 
2468:ThirdParty/FreeRTOS/queue.c ****     if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 4463              		.loc 1 2468 16
 4464 0028 3B69     		ldr	r3, [r7, #16]
 4465 002a 9A6B     		ldr	r2, [r3, #56]
 4466              		.loc 1 2468 46
 4467 002c 3B69     		ldr	r3, [r7, #16]
 4468 002e DB6B     		ldr	r3, [r3, #60]
 4469              		.loc 1 2468 7
 4470 0030 9A42     		cmp	r2, r3
 4471 0032 02D1     		bne	.L292
2469:ThirdParty/FreeRTOS/queue.c ****     {
2470:ThirdParty/FreeRTOS/queue.c ****         xReturn = pdTRUE;
 4472              		.loc 1 2470 17
 4473 0034 0123     		movs	r3, #1
 4474 0036 7B61     		str	r3, [r7, #20]
 4475 0038 01E0     		b	.L293
 4476              	.L292:
2471:ThirdParty/FreeRTOS/queue.c ****     }
2472:ThirdParty/FreeRTOS/queue.c ****     else
2473:ThirdParty/FreeRTOS/queue.c ****     {
2474:ThirdParty/FreeRTOS/queue.c ****         xReturn = pdFALSE;
 4477              		.loc 1 2474 17
 4478 003a 0023     		movs	r3, #0
 4479 003c 7B61     		str	r3, [r7, #20]
 4480              	.L293:
2475:ThirdParty/FreeRTOS/queue.c ****     }
2476:ThirdParty/FreeRTOS/queue.c **** 
2477:ThirdParty/FreeRTOS/queue.c ****     return xReturn;
 4481              		.loc 1 2477 12
 4482 003e 7B69     		ldr	r3, [r7, #20]
2478:ThirdParty/FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 4483              		.loc 1 2478 1
 4484 0040 1846     		mov	r0, r3
 4485 0042 1C37     		adds	r7, r7, #28
 4486              	.LCFI159:
 4487              		.cfi_def_cfa_offset 4
 4488 0044 BD46     		mov	sp, r7
 4489              	.LCFI160:
 4490              		.cfi_def_cfa_register 13
 4491              		@ sp needed
 4492 0046 5DF8047B 		ldr	r7, [sp], #4
 4493              	.LCFI161:
 4494              		.cfi_restore 7
 4495              		.cfi_def_cfa_offset 0
 4496 004a 7047     		bx	lr
 4497              		.cfi_endproc
 4498              	.LFE35:
 4500              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 4501              		.align	1
 4502              		.global	vQueueAddToRegistry
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 128


 4503              		.syntax unified
 4504              		.thumb
 4505              		.thumb_func
 4507              	vQueueAddToRegistry:
 4508              	.LFB36:
2479:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2480:ThirdParty/FreeRTOS/queue.c **** 
2481:ThirdParty/FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2482:ThirdParty/FreeRTOS/queue.c **** 
2483:ThirdParty/FreeRTOS/queue.c ****     BaseType_t xQueueCRSend( QueueHandle_t xQueue,
2484:ThirdParty/FreeRTOS/queue.c ****                              const void * pvItemToQueue,
2485:ThirdParty/FreeRTOS/queue.c ****                              TickType_t xTicksToWait )
2486:ThirdParty/FreeRTOS/queue.c ****     {
2487:ThirdParty/FreeRTOS/queue.c ****         BaseType_t xReturn;
2488:ThirdParty/FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2489:ThirdParty/FreeRTOS/queue.c **** 
2490:ThirdParty/FreeRTOS/queue.c ****         /* If the queue is already full we may have to block.  A critical section
2491:ThirdParty/FreeRTOS/queue.c ****          * is required to prevent an interrupt removing something from the queue
2492:ThirdParty/FreeRTOS/queue.c ****          * between the check to see if the queue is full and blocking on the queue. */
2493:ThirdParty/FreeRTOS/queue.c ****         portDISABLE_INTERRUPTS();
2494:ThirdParty/FreeRTOS/queue.c ****         {
2495:ThirdParty/FreeRTOS/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
2496:ThirdParty/FreeRTOS/queue.c ****             {
2497:ThirdParty/FreeRTOS/queue.c ****                 /* The queue is full - do we want to block or just leave without
2498:ThirdParty/FreeRTOS/queue.c ****                  * posting? */
2499:ThirdParty/FreeRTOS/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2500:ThirdParty/FreeRTOS/queue.c ****                 {
2501:ThirdParty/FreeRTOS/queue.c ****                     /* As this is called from a coroutine we cannot block directly, but
2502:ThirdParty/FreeRTOS/queue.c ****                      * return indicating that we need to block. */
2503:ThirdParty/FreeRTOS/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2504:ThirdParty/FreeRTOS/queue.c ****                     portENABLE_INTERRUPTS();
2505:ThirdParty/FreeRTOS/queue.c ****                     return errQUEUE_BLOCKED;
2506:ThirdParty/FreeRTOS/queue.c ****                 }
2507:ThirdParty/FreeRTOS/queue.c ****                 else
2508:ThirdParty/FreeRTOS/queue.c ****                 {
2509:ThirdParty/FreeRTOS/queue.c ****                     portENABLE_INTERRUPTS();
2510:ThirdParty/FreeRTOS/queue.c ****                     return errQUEUE_FULL;
2511:ThirdParty/FreeRTOS/queue.c ****                 }
2512:ThirdParty/FreeRTOS/queue.c ****             }
2513:ThirdParty/FreeRTOS/queue.c ****         }
2514:ThirdParty/FreeRTOS/queue.c ****         portENABLE_INTERRUPTS();
2515:ThirdParty/FreeRTOS/queue.c **** 
2516:ThirdParty/FreeRTOS/queue.c ****         portDISABLE_INTERRUPTS();
2517:ThirdParty/FreeRTOS/queue.c ****         {
2518:ThirdParty/FreeRTOS/queue.c ****             if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2519:ThirdParty/FreeRTOS/queue.c ****             {
2520:ThirdParty/FreeRTOS/queue.c ****                 /* There is room in the queue, copy the data into the queue. */
2521:ThirdParty/FreeRTOS/queue.c ****                 prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2522:ThirdParty/FreeRTOS/queue.c ****                 xReturn = pdPASS;
2523:ThirdParty/FreeRTOS/queue.c **** 
2524:ThirdParty/FreeRTOS/queue.c ****                 /* Were any co-routines waiting for data to become available? */
2525:ThirdParty/FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2526:ThirdParty/FreeRTOS/queue.c ****                 {
2527:ThirdParty/FreeRTOS/queue.c ****                     /* In this instance the co-routine could be placed directly
2528:ThirdParty/FreeRTOS/queue.c ****                      * into the ready list as we are within a critical section.
2529:ThirdParty/FreeRTOS/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2530:ThirdParty/FreeRTOS/queue.c ****                      * the event were caused from within an interrupt. */
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 129


2531:ThirdParty/FreeRTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2532:ThirdParty/FreeRTOS/queue.c ****                     {
2533:ThirdParty/FreeRTOS/queue.c ****                         /* The co-routine waiting has a higher priority so record
2534:ThirdParty/FreeRTOS/queue.c ****                          * that a yield might be appropriate. */
2535:ThirdParty/FreeRTOS/queue.c ****                         xReturn = errQUEUE_YIELD;
2536:ThirdParty/FreeRTOS/queue.c ****                     }
2537:ThirdParty/FreeRTOS/queue.c ****                     else
2538:ThirdParty/FreeRTOS/queue.c ****                     {
2539:ThirdParty/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2540:ThirdParty/FreeRTOS/queue.c ****                     }
2541:ThirdParty/FreeRTOS/queue.c ****                 }
2542:ThirdParty/FreeRTOS/queue.c ****                 else
2543:ThirdParty/FreeRTOS/queue.c ****                 {
2544:ThirdParty/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2545:ThirdParty/FreeRTOS/queue.c ****                 }
2546:ThirdParty/FreeRTOS/queue.c ****             }
2547:ThirdParty/FreeRTOS/queue.c ****             else
2548:ThirdParty/FreeRTOS/queue.c ****             {
2549:ThirdParty/FreeRTOS/queue.c ****                 xReturn = errQUEUE_FULL;
2550:ThirdParty/FreeRTOS/queue.c ****             }
2551:ThirdParty/FreeRTOS/queue.c ****         }
2552:ThirdParty/FreeRTOS/queue.c ****         portENABLE_INTERRUPTS();
2553:ThirdParty/FreeRTOS/queue.c **** 
2554:ThirdParty/FreeRTOS/queue.c ****         return xReturn;
2555:ThirdParty/FreeRTOS/queue.c ****     }
2556:ThirdParty/FreeRTOS/queue.c **** 
2557:ThirdParty/FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2558:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2559:ThirdParty/FreeRTOS/queue.c **** 
2560:ThirdParty/FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2561:ThirdParty/FreeRTOS/queue.c **** 
2562:ThirdParty/FreeRTOS/queue.c ****     BaseType_t xQueueCRReceive( QueueHandle_t xQueue,
2563:ThirdParty/FreeRTOS/queue.c ****                                 void * pvBuffer,
2564:ThirdParty/FreeRTOS/queue.c ****                                 TickType_t xTicksToWait )
2565:ThirdParty/FreeRTOS/queue.c ****     {
2566:ThirdParty/FreeRTOS/queue.c ****         BaseType_t xReturn;
2567:ThirdParty/FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2568:ThirdParty/FreeRTOS/queue.c **** 
2569:ThirdParty/FreeRTOS/queue.c ****         /* If the queue is already empty we may have to block.  A critical section
2570:ThirdParty/FreeRTOS/queue.c ****          * is required to prevent an interrupt adding something to the queue
2571:ThirdParty/FreeRTOS/queue.c ****          * between the check to see if the queue is empty and blocking on the queue. */
2572:ThirdParty/FreeRTOS/queue.c ****         portDISABLE_INTERRUPTS();
2573:ThirdParty/FreeRTOS/queue.c ****         {
2574:ThirdParty/FreeRTOS/queue.c ****             if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2575:ThirdParty/FreeRTOS/queue.c ****             {
2576:ThirdParty/FreeRTOS/queue.c ****                 /* There are no messages in the queue, do we want to block or just
2577:ThirdParty/FreeRTOS/queue.c ****                  * leave with nothing? */
2578:ThirdParty/FreeRTOS/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2579:ThirdParty/FreeRTOS/queue.c ****                 {
2580:ThirdParty/FreeRTOS/queue.c ****                     /* As this is a co-routine we cannot block directly, but return
2581:ThirdParty/FreeRTOS/queue.c ****                      * indicating that we need to block. */
2582:ThirdParty/FreeRTOS/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) 
2583:ThirdParty/FreeRTOS/queue.c ****                     portENABLE_INTERRUPTS();
2584:ThirdParty/FreeRTOS/queue.c ****                     return errQUEUE_BLOCKED;
2585:ThirdParty/FreeRTOS/queue.c ****                 }
2586:ThirdParty/FreeRTOS/queue.c ****                 else
2587:ThirdParty/FreeRTOS/queue.c ****                 {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 130


2588:ThirdParty/FreeRTOS/queue.c ****                     portENABLE_INTERRUPTS();
2589:ThirdParty/FreeRTOS/queue.c ****                     return errQUEUE_FULL;
2590:ThirdParty/FreeRTOS/queue.c ****                 }
2591:ThirdParty/FreeRTOS/queue.c ****             }
2592:ThirdParty/FreeRTOS/queue.c ****             else
2593:ThirdParty/FreeRTOS/queue.c ****             {
2594:ThirdParty/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2595:ThirdParty/FreeRTOS/queue.c ****             }
2596:ThirdParty/FreeRTOS/queue.c ****         }
2597:ThirdParty/FreeRTOS/queue.c ****         portENABLE_INTERRUPTS();
2598:ThirdParty/FreeRTOS/queue.c **** 
2599:ThirdParty/FreeRTOS/queue.c ****         portDISABLE_INTERRUPTS();
2600:ThirdParty/FreeRTOS/queue.c ****         {
2601:ThirdParty/FreeRTOS/queue.c ****             if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2602:ThirdParty/FreeRTOS/queue.c ****             {
2603:ThirdParty/FreeRTOS/queue.c ****                 /* Data is available from the queue. */
2604:ThirdParty/FreeRTOS/queue.c ****                 pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2605:ThirdParty/FreeRTOS/queue.c **** 
2606:ThirdParty/FreeRTOS/queue.c ****                 if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2607:ThirdParty/FreeRTOS/queue.c ****                 {
2608:ThirdParty/FreeRTOS/queue.c ****                     pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2609:ThirdParty/FreeRTOS/queue.c ****                 }
2610:ThirdParty/FreeRTOS/queue.c ****                 else
2611:ThirdParty/FreeRTOS/queue.c ****                 {
2612:ThirdParty/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2613:ThirdParty/FreeRTOS/queue.c ****                 }
2614:ThirdParty/FreeRTOS/queue.c **** 
2615:ThirdParty/FreeRTOS/queue.c ****                 --( pxQueue->uxMessagesWaiting );
2616:ThirdParty/FreeRTOS/queue.c ****                 ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( un
2617:ThirdParty/FreeRTOS/queue.c **** 
2618:ThirdParty/FreeRTOS/queue.c ****                 xReturn = pdPASS;
2619:ThirdParty/FreeRTOS/queue.c **** 
2620:ThirdParty/FreeRTOS/queue.c ****                 /* Were any co-routines waiting for space to become available? */
2621:ThirdParty/FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2622:ThirdParty/FreeRTOS/queue.c ****                 {
2623:ThirdParty/FreeRTOS/queue.c ****                     /* In this instance the co-routine could be placed directly
2624:ThirdParty/FreeRTOS/queue.c ****                      * into the ready list as we are within a critical section.
2625:ThirdParty/FreeRTOS/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2626:ThirdParty/FreeRTOS/queue.c ****                      * the event were caused from within an interrupt. */
2627:ThirdParty/FreeRTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2628:ThirdParty/FreeRTOS/queue.c ****                     {
2629:ThirdParty/FreeRTOS/queue.c ****                         xReturn = errQUEUE_YIELD;
2630:ThirdParty/FreeRTOS/queue.c ****                     }
2631:ThirdParty/FreeRTOS/queue.c ****                     else
2632:ThirdParty/FreeRTOS/queue.c ****                     {
2633:ThirdParty/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2634:ThirdParty/FreeRTOS/queue.c ****                     }
2635:ThirdParty/FreeRTOS/queue.c ****                 }
2636:ThirdParty/FreeRTOS/queue.c ****                 else
2637:ThirdParty/FreeRTOS/queue.c ****                 {
2638:ThirdParty/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2639:ThirdParty/FreeRTOS/queue.c ****                 }
2640:ThirdParty/FreeRTOS/queue.c ****             }
2641:ThirdParty/FreeRTOS/queue.c ****             else
2642:ThirdParty/FreeRTOS/queue.c ****             {
2643:ThirdParty/FreeRTOS/queue.c ****                 xReturn = pdFAIL;
2644:ThirdParty/FreeRTOS/queue.c ****             }
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 131


2645:ThirdParty/FreeRTOS/queue.c ****         }
2646:ThirdParty/FreeRTOS/queue.c ****         portENABLE_INTERRUPTS();
2647:ThirdParty/FreeRTOS/queue.c **** 
2648:ThirdParty/FreeRTOS/queue.c ****         return xReturn;
2649:ThirdParty/FreeRTOS/queue.c ****     }
2650:ThirdParty/FreeRTOS/queue.c **** 
2651:ThirdParty/FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2652:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2653:ThirdParty/FreeRTOS/queue.c **** 
2654:ThirdParty/FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2655:ThirdParty/FreeRTOS/queue.c **** 
2656:ThirdParty/FreeRTOS/queue.c ****     BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue,
2657:ThirdParty/FreeRTOS/queue.c ****                                     const void * pvItemToQueue,
2658:ThirdParty/FreeRTOS/queue.c ****                                     BaseType_t xCoRoutinePreviouslyWoken )
2659:ThirdParty/FreeRTOS/queue.c ****     {
2660:ThirdParty/FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2661:ThirdParty/FreeRTOS/queue.c **** 
2662:ThirdParty/FreeRTOS/queue.c ****         /* Cannot block within an ISR so if there is no space on the queue then
2663:ThirdParty/FreeRTOS/queue.c ****          * exit without doing anything. */
2664:ThirdParty/FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2665:ThirdParty/FreeRTOS/queue.c ****         {
2666:ThirdParty/FreeRTOS/queue.c ****             prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2667:ThirdParty/FreeRTOS/queue.c **** 
2668:ThirdParty/FreeRTOS/queue.c ****             /* We only want to wake one co-routine per ISR, so check that a
2669:ThirdParty/FreeRTOS/queue.c ****              * co-routine has not already been woken. */
2670:ThirdParty/FreeRTOS/queue.c ****             if( xCoRoutinePreviouslyWoken == pdFALSE )
2671:ThirdParty/FreeRTOS/queue.c ****             {
2672:ThirdParty/FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2673:ThirdParty/FreeRTOS/queue.c ****                 {
2674:ThirdParty/FreeRTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2675:ThirdParty/FreeRTOS/queue.c ****                     {
2676:ThirdParty/FreeRTOS/queue.c ****                         return pdTRUE;
2677:ThirdParty/FreeRTOS/queue.c ****                     }
2678:ThirdParty/FreeRTOS/queue.c ****                     else
2679:ThirdParty/FreeRTOS/queue.c ****                     {
2680:ThirdParty/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2681:ThirdParty/FreeRTOS/queue.c ****                     }
2682:ThirdParty/FreeRTOS/queue.c ****                 }
2683:ThirdParty/FreeRTOS/queue.c ****                 else
2684:ThirdParty/FreeRTOS/queue.c ****                 {
2685:ThirdParty/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2686:ThirdParty/FreeRTOS/queue.c ****                 }
2687:ThirdParty/FreeRTOS/queue.c ****             }
2688:ThirdParty/FreeRTOS/queue.c ****             else
2689:ThirdParty/FreeRTOS/queue.c ****             {
2690:ThirdParty/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2691:ThirdParty/FreeRTOS/queue.c ****             }
2692:ThirdParty/FreeRTOS/queue.c ****         }
2693:ThirdParty/FreeRTOS/queue.c ****         else
2694:ThirdParty/FreeRTOS/queue.c ****         {
2695:ThirdParty/FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2696:ThirdParty/FreeRTOS/queue.c ****         }
2697:ThirdParty/FreeRTOS/queue.c **** 
2698:ThirdParty/FreeRTOS/queue.c ****         return xCoRoutinePreviouslyWoken;
2699:ThirdParty/FreeRTOS/queue.c ****     }
2700:ThirdParty/FreeRTOS/queue.c **** 
2701:ThirdParty/FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 132


2702:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2703:ThirdParty/FreeRTOS/queue.c **** 
2704:ThirdParty/FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2705:ThirdParty/FreeRTOS/queue.c **** 
2706:ThirdParty/FreeRTOS/queue.c ****     BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue,
2707:ThirdParty/FreeRTOS/queue.c ****                                        void * pvBuffer,
2708:ThirdParty/FreeRTOS/queue.c ****                                        BaseType_t * pxCoRoutineWoken )
2709:ThirdParty/FreeRTOS/queue.c ****     {
2710:ThirdParty/FreeRTOS/queue.c ****         BaseType_t xReturn;
2711:ThirdParty/FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2712:ThirdParty/FreeRTOS/queue.c **** 
2713:ThirdParty/FreeRTOS/queue.c ****         /* We cannot block from an ISR, so check there is data available. If
2714:ThirdParty/FreeRTOS/queue.c ****          * not then just leave without doing anything. */
2715:ThirdParty/FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2716:ThirdParty/FreeRTOS/queue.c ****         {
2717:ThirdParty/FreeRTOS/queue.c ****             /* Copy the data from the queue. */
2718:ThirdParty/FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2719:ThirdParty/FreeRTOS/queue.c **** 
2720:ThirdParty/FreeRTOS/queue.c ****             if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2721:ThirdParty/FreeRTOS/queue.c ****             {
2722:ThirdParty/FreeRTOS/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2723:ThirdParty/FreeRTOS/queue.c ****             }
2724:ThirdParty/FreeRTOS/queue.c ****             else
2725:ThirdParty/FreeRTOS/queue.c ****             {
2726:ThirdParty/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2727:ThirdParty/FreeRTOS/queue.c ****             }
2728:ThirdParty/FreeRTOS/queue.c **** 
2729:ThirdParty/FreeRTOS/queue.c ****             --( pxQueue->uxMessagesWaiting );
2730:ThirdParty/FreeRTOS/queue.c ****             ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsign
2731:ThirdParty/FreeRTOS/queue.c **** 
2732:ThirdParty/FreeRTOS/queue.c ****             if( ( *pxCoRoutineWoken ) == pdFALSE )
2733:ThirdParty/FreeRTOS/queue.c ****             {
2734:ThirdParty/FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2735:ThirdParty/FreeRTOS/queue.c ****                 {
2736:ThirdParty/FreeRTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2737:ThirdParty/FreeRTOS/queue.c ****                     {
2738:ThirdParty/FreeRTOS/queue.c ****                         *pxCoRoutineWoken = pdTRUE;
2739:ThirdParty/FreeRTOS/queue.c ****                     }
2740:ThirdParty/FreeRTOS/queue.c ****                     else
2741:ThirdParty/FreeRTOS/queue.c ****                     {
2742:ThirdParty/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2743:ThirdParty/FreeRTOS/queue.c ****                     }
2744:ThirdParty/FreeRTOS/queue.c ****                 }
2745:ThirdParty/FreeRTOS/queue.c ****                 else
2746:ThirdParty/FreeRTOS/queue.c ****                 {
2747:ThirdParty/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2748:ThirdParty/FreeRTOS/queue.c ****                 }
2749:ThirdParty/FreeRTOS/queue.c ****             }
2750:ThirdParty/FreeRTOS/queue.c ****             else
2751:ThirdParty/FreeRTOS/queue.c ****             {
2752:ThirdParty/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2753:ThirdParty/FreeRTOS/queue.c ****             }
2754:ThirdParty/FreeRTOS/queue.c **** 
2755:ThirdParty/FreeRTOS/queue.c ****             xReturn = pdPASS;
2756:ThirdParty/FreeRTOS/queue.c ****         }
2757:ThirdParty/FreeRTOS/queue.c ****         else
2758:ThirdParty/FreeRTOS/queue.c ****         {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 133


2759:ThirdParty/FreeRTOS/queue.c ****             xReturn = pdFAIL;
2760:ThirdParty/FreeRTOS/queue.c ****         }
2761:ThirdParty/FreeRTOS/queue.c **** 
2762:ThirdParty/FreeRTOS/queue.c ****         return xReturn;
2763:ThirdParty/FreeRTOS/queue.c ****     }
2764:ThirdParty/FreeRTOS/queue.c **** 
2765:ThirdParty/FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2766:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2767:ThirdParty/FreeRTOS/queue.c **** 
2768:ThirdParty/FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2769:ThirdParty/FreeRTOS/queue.c **** 
2770:ThirdParty/FreeRTOS/queue.c ****     void vQueueAddToRegistry( QueueHandle_t xQueue,
2771:ThirdParty/FreeRTOS/queue.c ****                               const char * pcQueueName ) /*lint !e971 Unqualified char types are al
2772:ThirdParty/FreeRTOS/queue.c ****     {
 4509              		.loc 1 2772 5
 4510              		.cfi_startproc
 4511              		@ args = 0, pretend = 0, frame = 24
 4512              		@ frame_needed = 1, uses_anonymous_args = 0
 4513              		@ link register save eliminated.
 4514 0000 80B4     		push	{r7}
 4515              	.LCFI162:
 4516              		.cfi_def_cfa_offset 4
 4517              		.cfi_offset 7, -4
 4518 0002 87B0     		sub	sp, sp, #28
 4519              	.LCFI163:
 4520              		.cfi_def_cfa_offset 32
 4521 0004 00AF     		add	r7, sp, #0
 4522              	.LCFI164:
 4523              		.cfi_def_cfa_register 7
 4524 0006 7860     		str	r0, [r7, #4]
 4525 0008 3960     		str	r1, [r7]
2773:ThirdParty/FreeRTOS/queue.c ****         UBaseType_t ux;
2774:ThirdParty/FreeRTOS/queue.c ****         QueueRegistryItem_t * pxEntryToWrite = NULL;
 4526              		.loc 1 2774 31
 4527 000a 0023     		movs	r3, #0
 4528 000c 3B61     		str	r3, [r7, #16]
2775:ThirdParty/FreeRTOS/queue.c **** 
2776:ThirdParty/FreeRTOS/queue.c ****         configASSERT( xQueue );
 4529              		.loc 1 2776 9
 4530 000e 7B68     		ldr	r3, [r7, #4]
 4531 0010 002B     		cmp	r3, #0
 4532 0012 0AD1     		bne	.L296
 4533              	.LBB222:
 4534              	.LBB223:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4535              		.loc 2 198 9
 4536              		.syntax unified
 4537              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4538 0014 4FF05003 			mov r3, #80												
 4539 0018 83F31188 		msr basepri, r3											
 4540 001c BFF36F8F 		isb														
 4541 0020 BFF34F8F 		dsb														
 4542              	
 4543              	@ 0 "" 2
 4544              		.thumb
 4545              		.syntax unified
 4546 0024 FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 134


 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4547              		.loc 2 206 5
 4548 0026 00BF     		nop
 4549              	.L297:
 4550              	.LBE223:
 4551              	.LBE222:
 4552              		.loc 1 2776 9 discriminator 1
 4553 0028 FEE7     		b	.L297
 4554              	.L296:
2777:ThirdParty/FreeRTOS/queue.c **** 
2778:ThirdParty/FreeRTOS/queue.c ****         if( pcQueueName != NULL )
 4555              		.loc 1 2778 11
 4556 002a 3B68     		ldr	r3, [r7]
 4557 002c 002B     		cmp	r3, #0
 4558 002e 24D0     		beq	.L298
2779:ThirdParty/FreeRTOS/queue.c ****         {
2780:ThirdParty/FreeRTOS/queue.c ****             /* See if there is an empty space in the registry.  A NULL name denotes
2781:ThirdParty/FreeRTOS/queue.c ****              * a free slot. */
2782:ThirdParty/FreeRTOS/queue.c ****             for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 4559              		.loc 1 2782 21
 4560 0030 0023     		movs	r3, #0
 4561 0032 7B61     		str	r3, [r7, #20]
 4562              		.loc 1 2782 13
 4563 0034 1EE0     		b	.L299
 4564              	.L302:
2783:ThirdParty/FreeRTOS/queue.c ****             {
2784:ThirdParty/FreeRTOS/queue.c ****                 /* Replace an existing entry if the queue is already in the registry. */
2785:ThirdParty/FreeRTOS/queue.c ****                 if( xQueue == xQueueRegistry[ ux ].xHandle )
 4565              		.loc 1 2785 51
 4566 0036 184A     		ldr	r2, .L305
 4567 0038 7B69     		ldr	r3, [r7, #20]
 4568 003a DB00     		lsls	r3, r3, #3
 4569 003c 1344     		add	r3, r3, r2
 4570 003e 5B68     		ldr	r3, [r3, #4]
 4571              		.loc 1 2785 19
 4572 0040 7A68     		ldr	r2, [r7, #4]
 4573 0042 9A42     		cmp	r2, r3
 4574 0044 05D1     		bne	.L300
2786:ThirdParty/FreeRTOS/queue.c ****                 {
2787:ThirdParty/FreeRTOS/queue.c ****                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
 4575              		.loc 1 2787 36
 4576 0046 7B69     		ldr	r3, [r7, #20]
 4577 0048 DB00     		lsls	r3, r3, #3
 4578 004a 134A     		ldr	r2, .L305
 4579 004c 1344     		add	r3, r3, r2
 4580 004e 3B61     		str	r3, [r7, #16]
2788:ThirdParty/FreeRTOS/queue.c ****                     break;
 4581              		.loc 1 2788 21
 4582 0050 13E0     		b	.L298
 4583              	.L300:
2789:ThirdParty/FreeRTOS/queue.c ****                 }
2790:ThirdParty/FreeRTOS/queue.c ****                 /* Otherwise, store in the next empty location */
2791:ThirdParty/FreeRTOS/queue.c ****                 else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL )
 4584              		.loc 1 2791 24
 4585 0052 3B69     		ldr	r3, [r7, #16]
 4586 0054 002B     		cmp	r3, #0
 4587 0056 0AD1     		bne	.L301
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 135


 4588              		.loc 1 2791 78 discriminator 1
 4589 0058 0F4A     		ldr	r2, .L305
 4590 005a 7B69     		ldr	r3, [r7, #20]
 4591 005c 52F83330 		ldr	r3, [r2, r3, lsl #3]
 4592              		.loc 1 2791 53 discriminator 1
 4593 0060 002B     		cmp	r3, #0
 4594 0062 04D1     		bne	.L301
2792:ThirdParty/FreeRTOS/queue.c ****                 {
2793:ThirdParty/FreeRTOS/queue.c ****                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
 4595              		.loc 1 2793 36
 4596 0064 7B69     		ldr	r3, [r7, #20]
 4597 0066 DB00     		lsls	r3, r3, #3
 4598 0068 0B4A     		ldr	r2, .L305
 4599 006a 1344     		add	r3, r3, r2
 4600 006c 3B61     		str	r3, [r7, #16]
 4601              	.L301:
2782:ThirdParty/FreeRTOS/queue.c ****             {
 4602              		.loc 1 2782 93 discriminator 2
 4603 006e 7B69     		ldr	r3, [r7, #20]
 4604 0070 0133     		adds	r3, r3, #1
 4605 0072 7B61     		str	r3, [r7, #20]
 4606              	.L299:
2782:ThirdParty/FreeRTOS/queue.c ****             {
 4607              		.loc 1 2782 13 discriminator 1
 4608 0074 7B69     		ldr	r3, [r7, #20]
 4609 0076 072B     		cmp	r3, #7
 4610 0078 DDD9     		bls	.L302
 4611              	.L298:
2794:ThirdParty/FreeRTOS/queue.c ****                 }
2795:ThirdParty/FreeRTOS/queue.c ****                 else
2796:ThirdParty/FreeRTOS/queue.c ****                 {
2797:ThirdParty/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2798:ThirdParty/FreeRTOS/queue.c ****                 }
2799:ThirdParty/FreeRTOS/queue.c ****             }
2800:ThirdParty/FreeRTOS/queue.c ****         }
2801:ThirdParty/FreeRTOS/queue.c **** 
2802:ThirdParty/FreeRTOS/queue.c ****         if( pxEntryToWrite != NULL )
 4612              		.loc 1 2802 11
 4613 007a 3B69     		ldr	r3, [r7, #16]
 4614 007c 002B     		cmp	r3, #0
 4615 007e 05D0     		beq	.L304
2803:ThirdParty/FreeRTOS/queue.c ****         {
2804:ThirdParty/FreeRTOS/queue.c ****             /* Store the information on this queue. */
2805:ThirdParty/FreeRTOS/queue.c ****             pxEntryToWrite->pcQueueName = pcQueueName;
 4616              		.loc 1 2805 41
 4617 0080 3B69     		ldr	r3, [r7, #16]
 4618 0082 3A68     		ldr	r2, [r7]
 4619 0084 1A60     		str	r2, [r3]
2806:ThirdParty/FreeRTOS/queue.c ****             pxEntryToWrite->xHandle = xQueue;
 4620              		.loc 1 2806 37
 4621 0086 3B69     		ldr	r3, [r7, #16]
 4622 0088 7A68     		ldr	r2, [r7, #4]
 4623 008a 5A60     		str	r2, [r3, #4]
 4624              	.L304:
2807:ThirdParty/FreeRTOS/queue.c **** 
2808:ThirdParty/FreeRTOS/queue.c ****             traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2809:ThirdParty/FreeRTOS/queue.c ****         }
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 136


2810:ThirdParty/FreeRTOS/queue.c ****     }
 4625              		.loc 1 2810 5
 4626 008c 00BF     		nop
 4627 008e 1C37     		adds	r7, r7, #28
 4628              	.LCFI165:
 4629              		.cfi_def_cfa_offset 4
 4630 0090 BD46     		mov	sp, r7
 4631              	.LCFI166:
 4632              		.cfi_def_cfa_register 13
 4633              		@ sp needed
 4634 0092 5DF8047B 		ldr	r7, [sp], #4
 4635              	.LCFI167:
 4636              		.cfi_restore 7
 4637              		.cfi_def_cfa_offset 0
 4638 0096 7047     		bx	lr
 4639              	.L306:
 4640              		.align	2
 4641              	.L305:
 4642 0098 00000000 		.word	xQueueRegistry
 4643              		.cfi_endproc
 4644              	.LFE36:
 4646              		.section	.text.pcQueueGetName,"ax",%progbits
 4647              		.align	1
 4648              		.global	pcQueueGetName
 4649              		.syntax unified
 4650              		.thumb
 4651              		.thumb_func
 4653              	pcQueueGetName:
 4654              	.LFB37:
2811:ThirdParty/FreeRTOS/queue.c **** 
2812:ThirdParty/FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2813:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2814:ThirdParty/FreeRTOS/queue.c **** 
2815:ThirdParty/FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2816:ThirdParty/FreeRTOS/queue.c **** 
2817:ThirdParty/FreeRTOS/queue.c ****     const char * pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are all
2818:ThirdParty/FreeRTOS/queue.c ****     {
 4655              		.loc 1 2818 5
 4656              		.cfi_startproc
 4657              		@ args = 0, pretend = 0, frame = 24
 4658              		@ frame_needed = 1, uses_anonymous_args = 0
 4659              		@ link register save eliminated.
 4660 0000 80B4     		push	{r7}
 4661              	.LCFI168:
 4662              		.cfi_def_cfa_offset 4
 4663              		.cfi_offset 7, -4
 4664 0002 87B0     		sub	sp, sp, #28
 4665              	.LCFI169:
 4666              		.cfi_def_cfa_offset 32
 4667 0004 00AF     		add	r7, sp, #0
 4668              	.LCFI170:
 4669              		.cfi_def_cfa_register 7
 4670 0006 7860     		str	r0, [r7, #4]
2819:ThirdParty/FreeRTOS/queue.c ****         UBaseType_t ux;
2820:ThirdParty/FreeRTOS/queue.c ****         const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings a
 4671              		.loc 1 2820 22
 4672 0008 0023     		movs	r3, #0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 137


 4673 000a 3B61     		str	r3, [r7, #16]
2821:ThirdParty/FreeRTOS/queue.c **** 
2822:ThirdParty/FreeRTOS/queue.c ****         configASSERT( xQueue );
 4674              		.loc 1 2822 9
 4675 000c 7B68     		ldr	r3, [r7, #4]
 4676 000e 002B     		cmp	r3, #0
 4677 0010 0AD1     		bne	.L308
 4678              	.LBB224:
 4679              	.LBB225:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4680              		.loc 2 198 9
 4681              		.syntax unified
 4682              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4683 0012 4FF05003 			mov r3, #80												
 4684 0016 83F31188 		msr basepri, r3											
 4685 001a BFF36F8F 		isb														
 4686 001e BFF34F8F 		dsb														
 4687              	
 4688              	@ 0 "" 2
 4689              		.thumb
 4690              		.syntax unified
 4691 0022 FB60     		str	r3, [r7, #12]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4692              		.loc 2 206 5
 4693 0024 00BF     		nop
 4694              	.L309:
 4695              	.LBE225:
 4696              	.LBE224:
 4697              		.loc 1 2822 9 discriminator 1
 4698 0026 FEE7     		b	.L309
 4699              	.L308:
2823:ThirdParty/FreeRTOS/queue.c **** 
2824:ThirdParty/FreeRTOS/queue.c ****         /* Note there is nothing here to protect against another task adding or
2825:ThirdParty/FreeRTOS/queue.c ****          * removing entries from the registry while it is being searched. */
2826:ThirdParty/FreeRTOS/queue.c **** 
2827:ThirdParty/FreeRTOS/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 4700              		.loc 1 2827 17
 4701 0028 0023     		movs	r3, #0
 4702 002a 7B61     		str	r3, [r7, #20]
 4703              		.loc 1 2827 9
 4704 002c 10E0     		b	.L310
 4705              	.L313:
2828:ThirdParty/FreeRTOS/queue.c ****         {
2829:ThirdParty/FreeRTOS/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
 4706              		.loc 1 2829 37
 4707 002e 0D4A     		ldr	r2, .L315
 4708 0030 7B69     		ldr	r3, [r7, #20]
 4709 0032 DB00     		lsls	r3, r3, #3
 4710 0034 1344     		add	r3, r3, r2
 4711 0036 5B68     		ldr	r3, [r3, #4]
 4712              		.loc 1 2829 15
 4713 0038 7A68     		ldr	r2, [r7, #4]
 4714 003a 9A42     		cmp	r2, r3
 4715 003c 05D1     		bne	.L311
2830:ThirdParty/FreeRTOS/queue.c ****             {
2831:ThirdParty/FreeRTOS/queue.c ****                 pcReturn = xQueueRegistry[ ux ].pcQueueName;
 4716              		.loc 1 2831 26
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 138


 4717 003e 094A     		ldr	r2, .L315
 4718 0040 7B69     		ldr	r3, [r7, #20]
 4719 0042 52F83330 		ldr	r3, [r2, r3, lsl #3]
 4720 0046 3B61     		str	r3, [r7, #16]
2832:ThirdParty/FreeRTOS/queue.c ****                 break;
 4721              		.loc 1 2832 17
 4722 0048 05E0     		b	.L312
 4723              	.L311:
2827:ThirdParty/FreeRTOS/queue.c ****         {
 4724              		.loc 1 2827 89 discriminator 2
 4725 004a 7B69     		ldr	r3, [r7, #20]
 4726 004c 0133     		adds	r3, r3, #1
 4727 004e 7B61     		str	r3, [r7, #20]
 4728              	.L310:
2827:ThirdParty/FreeRTOS/queue.c ****         {
 4729              		.loc 1 2827 9 discriminator 1
 4730 0050 7B69     		ldr	r3, [r7, #20]
 4731 0052 072B     		cmp	r3, #7
 4732 0054 EBD9     		bls	.L313
 4733              	.L312:
2833:ThirdParty/FreeRTOS/queue.c ****             }
2834:ThirdParty/FreeRTOS/queue.c ****             else
2835:ThirdParty/FreeRTOS/queue.c ****             {
2836:ThirdParty/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2837:ThirdParty/FreeRTOS/queue.c ****             }
2838:ThirdParty/FreeRTOS/queue.c ****         }
2839:ThirdParty/FreeRTOS/queue.c **** 
2840:ThirdParty/FreeRTOS/queue.c ****         return pcReturn;
 4734              		.loc 1 2840 16
 4735 0056 3B69     		ldr	r3, [r7, #16]
2841:ThirdParty/FreeRTOS/queue.c ****     } /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 4736              		.loc 1 2841 5
 4737 0058 1846     		mov	r0, r3
 4738 005a 1C37     		adds	r7, r7, #28
 4739              	.LCFI171:
 4740              		.cfi_def_cfa_offset 4
 4741 005c BD46     		mov	sp, r7
 4742              	.LCFI172:
 4743              		.cfi_def_cfa_register 13
 4744              		@ sp needed
 4745 005e 5DF8047B 		ldr	r7, [sp], #4
 4746              	.LCFI173:
 4747              		.cfi_restore 7
 4748              		.cfi_def_cfa_offset 0
 4749 0062 7047     		bx	lr
 4750              	.L316:
 4751              		.align	2
 4752              	.L315:
 4753 0064 00000000 		.word	xQueueRegistry
 4754              		.cfi_endproc
 4755              	.LFE37:
 4757              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 4758              		.align	1
 4759              		.global	vQueueUnregisterQueue
 4760              		.syntax unified
 4761              		.thumb
 4762              		.thumb_func
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 139


 4764              	vQueueUnregisterQueue:
 4765              	.LFB38:
2842:ThirdParty/FreeRTOS/queue.c **** 
2843:ThirdParty/FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2844:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2845:ThirdParty/FreeRTOS/queue.c **** 
2846:ThirdParty/FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2847:ThirdParty/FreeRTOS/queue.c **** 
2848:ThirdParty/FreeRTOS/queue.c ****     void vQueueUnregisterQueue( QueueHandle_t xQueue )
2849:ThirdParty/FreeRTOS/queue.c ****     {
 4766              		.loc 1 2849 5
 4767              		.cfi_startproc
 4768              		@ args = 0, pretend = 0, frame = 16
 4769              		@ frame_needed = 1, uses_anonymous_args = 0
 4770              		@ link register save eliminated.
 4771 0000 80B4     		push	{r7}
 4772              	.LCFI174:
 4773              		.cfi_def_cfa_offset 4
 4774              		.cfi_offset 7, -4
 4775 0002 85B0     		sub	sp, sp, #20
 4776              	.LCFI175:
 4777              		.cfi_def_cfa_offset 24
 4778 0004 00AF     		add	r7, sp, #0
 4779              	.LCFI176:
 4780              		.cfi_def_cfa_register 7
 4781 0006 7860     		str	r0, [r7, #4]
2850:ThirdParty/FreeRTOS/queue.c ****         UBaseType_t ux;
2851:ThirdParty/FreeRTOS/queue.c **** 
2852:ThirdParty/FreeRTOS/queue.c ****         configASSERT( xQueue );
 4782              		.loc 1 2852 9
 4783 0008 7B68     		ldr	r3, [r7, #4]
 4784 000a 002B     		cmp	r3, #0
 4785 000c 0AD1     		bne	.L318
 4786              	.LBB226:
 4787              	.LBB227:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4788              		.loc 2 198 9
 4789              		.syntax unified
 4790              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4791 000e 4FF05003 			mov r3, #80												
 4792 0012 83F31188 		msr basepri, r3											
 4793 0016 BFF36F8F 		isb														
 4794 001a BFF34F8F 		dsb														
 4795              	
 4796              	@ 0 "" 2
 4797              		.thumb
 4798              		.syntax unified
 4799 001e BB60     		str	r3, [r7, #8]
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4800              		.loc 2 206 5
 4801 0020 00BF     		nop
 4802              	.L319:
 4803              	.LBE227:
 4804              	.LBE226:
 4805              		.loc 1 2852 9 discriminator 1
 4806 0022 FEE7     		b	.L319
 4807              	.L318:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 140


2853:ThirdParty/FreeRTOS/queue.c **** 
2854:ThirdParty/FreeRTOS/queue.c ****         /* See if the handle of the queue being unregistered in actually in the
2855:ThirdParty/FreeRTOS/queue.c ****          * registry. */
2856:ThirdParty/FreeRTOS/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 4808              		.loc 1 2856 17
 4809 0024 0023     		movs	r3, #0
 4810 0026 FB60     		str	r3, [r7, #12]
 4811              		.loc 1 2856 9
 4812 0028 16E0     		b	.L320
 4813              	.L323:
2857:ThirdParty/FreeRTOS/queue.c ****         {
2858:ThirdParty/FreeRTOS/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
 4814              		.loc 1 2858 37
 4815 002a 104A     		ldr	r2, .L324
 4816 002c FB68     		ldr	r3, [r7, #12]
 4817 002e DB00     		lsls	r3, r3, #3
 4818 0030 1344     		add	r3, r3, r2
 4819 0032 5B68     		ldr	r3, [r3, #4]
 4820              		.loc 1 2858 15
 4821 0034 7A68     		ldr	r2, [r7, #4]
 4822 0036 9A42     		cmp	r2, r3
 4823 0038 0BD1     		bne	.L321
2859:ThirdParty/FreeRTOS/queue.c ****             {
2860:ThirdParty/FreeRTOS/queue.c ****                 /* Set the name to NULL to show that this slot if free again. */
2861:ThirdParty/FreeRTOS/queue.c ****                 xQueueRegistry[ ux ].pcQueueName = NULL;
 4824              		.loc 1 2861 50
 4825 003a 0C4A     		ldr	r2, .L324
 4826 003c FB68     		ldr	r3, [r7, #12]
 4827 003e 0021     		movs	r1, #0
 4828 0040 42F83310 		str	r1, [r2, r3, lsl #3]
2862:ThirdParty/FreeRTOS/queue.c **** 
2863:ThirdParty/FreeRTOS/queue.c ****                 /* Set the handle to NULL to ensure the same queue handle cannot
2864:ThirdParty/FreeRTOS/queue.c ****                  * appear in the registry twice if it is added, removed, then
2865:ThirdParty/FreeRTOS/queue.c ****                  * added again. */
2866:ThirdParty/FreeRTOS/queue.c ****                 xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 4829              		.loc 1 2866 46
 4830 0044 094A     		ldr	r2, .L324
 4831 0046 FB68     		ldr	r3, [r7, #12]
 4832 0048 DB00     		lsls	r3, r3, #3
 4833 004a 1344     		add	r3, r3, r2
 4834 004c 0022     		movs	r2, #0
 4835 004e 5A60     		str	r2, [r3, #4]
2867:ThirdParty/FreeRTOS/queue.c ****                 break;
 4836              		.loc 1 2867 17
 4837 0050 06E0     		b	.L322
 4838              	.L321:
2856:ThirdParty/FreeRTOS/queue.c ****         {
 4839              		.loc 1 2856 89 discriminator 2
 4840 0052 FB68     		ldr	r3, [r7, #12]
 4841 0054 0133     		adds	r3, r3, #1
 4842 0056 FB60     		str	r3, [r7, #12]
 4843              	.L320:
2856:ThirdParty/FreeRTOS/queue.c ****         {
 4844              		.loc 1 2856 9 discriminator 1
 4845 0058 FB68     		ldr	r3, [r7, #12]
 4846 005a 072B     		cmp	r3, #7
 4847 005c E5D9     		bls	.L323
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 141


2868:ThirdParty/FreeRTOS/queue.c ****             }
2869:ThirdParty/FreeRTOS/queue.c ****             else
2870:ThirdParty/FreeRTOS/queue.c ****             {
2871:ThirdParty/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2872:ThirdParty/FreeRTOS/queue.c ****             }
2873:ThirdParty/FreeRTOS/queue.c ****         }
2874:ThirdParty/FreeRTOS/queue.c ****     } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 4848              		.loc 1 2874 5
 4849 005e 00BF     		nop
 4850              	.L322:
 4851 0060 00BF     		nop
 4852 0062 1437     		adds	r7, r7, #20
 4853              	.LCFI177:
 4854              		.cfi_def_cfa_offset 4
 4855 0064 BD46     		mov	sp, r7
 4856              	.LCFI178:
 4857              		.cfi_def_cfa_register 13
 4858              		@ sp needed
 4859 0066 5DF8047B 		ldr	r7, [sp], #4
 4860              	.LCFI179:
 4861              		.cfi_restore 7
 4862              		.cfi_def_cfa_offset 0
 4863 006a 7047     		bx	lr
 4864              	.L325:
 4865              		.align	2
 4866              	.L324:
 4867 006c 00000000 		.word	xQueueRegistry
 4868              		.cfi_endproc
 4869              	.LFE38:
 4871              		.section	.text.vQueueWaitForMessageRestricted,"ax",%progbits
 4872              		.align	1
 4873              		.global	vQueueWaitForMessageRestricted
 4874              		.syntax unified
 4875              		.thumb
 4876              		.thumb_func
 4878              	vQueueWaitForMessageRestricted:
 4879              	.LFB39:
2875:ThirdParty/FreeRTOS/queue.c **** 
2876:ThirdParty/FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2877:ThirdParty/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2878:ThirdParty/FreeRTOS/queue.c **** 
2879:ThirdParty/FreeRTOS/queue.c **** #if ( configUSE_TIMERS == 1 )
2880:ThirdParty/FreeRTOS/queue.c **** 
2881:ThirdParty/FreeRTOS/queue.c ****     void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
2882:ThirdParty/FreeRTOS/queue.c ****                                          TickType_t xTicksToWait,
2883:ThirdParty/FreeRTOS/queue.c ****                                          const BaseType_t xWaitIndefinitely )
2884:ThirdParty/FreeRTOS/queue.c ****     {
 4880              		.loc 1 2884 5
 4881              		.cfi_startproc
 4882              		@ args = 0, pretend = 0, frame = 24
 4883              		@ frame_needed = 1, uses_anonymous_args = 0
 4884 0000 80B5     		push	{r7, lr}
 4885              	.LCFI180:
 4886              		.cfi_def_cfa_offset 8
 4887              		.cfi_offset 7, -8
 4888              		.cfi_offset 14, -4
 4889 0002 86B0     		sub	sp, sp, #24
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 142


 4890              	.LCFI181:
 4891              		.cfi_def_cfa_offset 32
 4892 0004 00AF     		add	r7, sp, #0
 4893              	.LCFI182:
 4894              		.cfi_def_cfa_register 7
 4895 0006 F860     		str	r0, [r7, #12]
 4896 0008 B960     		str	r1, [r7, #8]
 4897 000a 7A60     		str	r2, [r7, #4]
2885:ThirdParty/FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
 4898              		.loc 1 2885 25
 4899 000c FB68     		ldr	r3, [r7, #12]
 4900 000e 7B61     		str	r3, [r7, #20]
2886:ThirdParty/FreeRTOS/queue.c **** 
2887:ThirdParty/FreeRTOS/queue.c ****         /* This function should not be called by application code hence the
2888:ThirdParty/FreeRTOS/queue.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
2889:ThirdParty/FreeRTOS/queue.c ****          * designed for use by kernel code, and has special calling requirements.
2890:ThirdParty/FreeRTOS/queue.c ****          * It can result in vListInsert() being called on a list that can only
2891:ThirdParty/FreeRTOS/queue.c ****          * possibly ever have one item in it, so the list will be fast, but even
2892:ThirdParty/FreeRTOS/queue.c ****          * so it should be called with the scheduler locked and not from a critical
2893:ThirdParty/FreeRTOS/queue.c ****          * section. */
2894:ThirdParty/FreeRTOS/queue.c **** 
2895:ThirdParty/FreeRTOS/queue.c ****         /* Only do anything if there are no messages in the queue.  This function
2896:ThirdParty/FreeRTOS/queue.c ****          *  will not actually cause the task to block, just place it on a blocked
2897:ThirdParty/FreeRTOS/queue.c ****          *  list.  It will not block until the scheduler is unlocked - at which
2898:ThirdParty/FreeRTOS/queue.c ****          *  time a yield will be performed.  If an item is added to the queue while
2899:ThirdParty/FreeRTOS/queue.c ****          *  the queue is locked, and the calling task blocks on the queue, then the
2900:ThirdParty/FreeRTOS/queue.c ****          *  calling task will be immediately unblocked when the queue is unlocked. */
2901:ThirdParty/FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 4901              		.loc 1 2901 9
 4902 0010 FFF7FEFF 		bl	vPortEnterCritical
 4903 0014 7B69     		ldr	r3, [r7, #20]
 4904 0016 93F84430 		ldrb	r3, [r3, #68]
 4905 001a 5BB2     		sxtb	r3, r3
 4906 001c B3F1FF3F 		cmp	r3, #-1
 4907 0020 03D1     		bne	.L327
 4908              		.loc 1 2901 9 is_stmt 0 discriminator 1
 4909 0022 7B69     		ldr	r3, [r7, #20]
 4910 0024 0022     		movs	r2, #0
 4911 0026 83F84420 		strb	r2, [r3, #68]
 4912              	.L327:
 4913              		.loc 1 2901 9 discriminator 3
 4914 002a 7B69     		ldr	r3, [r7, #20]
 4915 002c 93F84530 		ldrb	r3, [r3, #69]
 4916 0030 5BB2     		sxtb	r3, r3
 4917 0032 B3F1FF3F 		cmp	r3, #-1
 4918 0036 03D1     		bne	.L328
 4919              		.loc 1 2901 9 discriminator 4
 4920 0038 7B69     		ldr	r3, [r7, #20]
 4921 003a 0022     		movs	r2, #0
 4922 003c 83F84520 		strb	r2, [r3, #69]
 4923              	.L328:
 4924              		.loc 1 2901 9 discriminator 6
 4925 0040 FFF7FEFF 		bl	vPortExitCritical
2902:ThirdParty/FreeRTOS/queue.c **** 
2903:ThirdParty/FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 4926              		.loc 1 2903 20 is_stmt 1 discriminator 6
 4927 0044 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 143


 4928 0046 9B6B     		ldr	r3, [r3, #56]
 4929              		.loc 1 2903 11 discriminator 6
 4930 0048 002B     		cmp	r3, #0
 4931 004a 06D1     		bne	.L329
2904:ThirdParty/FreeRTOS/queue.c ****         {
2905:ThirdParty/FreeRTOS/queue.c ****             /* There is nothing in the queue, block for the specified period. */
2906:ThirdParty/FreeRTOS/queue.c ****             vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xW
 4932              		.loc 1 2906 13
 4933 004c 7B69     		ldr	r3, [r7, #20]
 4934 004e 2433     		adds	r3, r3, #36
 4935 0050 7A68     		ldr	r2, [r7, #4]
 4936 0052 B968     		ldr	r1, [r7, #8]
 4937 0054 1846     		mov	r0, r3
 4938 0056 FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted
 4939              	.L329:
2907:ThirdParty/FreeRTOS/queue.c ****         }
2908:ThirdParty/FreeRTOS/queue.c ****         else
2909:ThirdParty/FreeRTOS/queue.c ****         {
2910:ThirdParty/FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2911:ThirdParty/FreeRTOS/queue.c ****         }
2912:ThirdParty/FreeRTOS/queue.c **** 
2913:ThirdParty/FreeRTOS/queue.c ****         prvUnlockQueue( pxQueue );
 4940              		.loc 1 2913 9
 4941 005a 7869     		ldr	r0, [r7, #20]
 4942 005c FFF7FEFF 		bl	prvUnlockQueue
2914:ThirdParty/FreeRTOS/queue.c ****     }
 4943              		.loc 1 2914 5
 4944 0060 00BF     		nop
 4945 0062 1837     		adds	r7, r7, #24
 4946              	.LCFI183:
 4947              		.cfi_def_cfa_offset 8
 4948 0064 BD46     		mov	sp, r7
 4949              	.LCFI184:
 4950              		.cfi_def_cfa_register 13
 4951              		@ sp needed
 4952 0066 80BD     		pop	{r7, pc}
 4953              		.cfi_endproc
 4954              	.LFE39:
 4956              		.text
 4957              	.Letext0:
 4958              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\lib\\gcc\\arm-none-eabi\
 4959              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 4960              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 4961              		.file 6 "ThirdParty/FreeRTOS/include/list.h"
 4962              		.file 7 "ThirdParty/FreeRTOS/include/task.h"
 4963              		.file 8 "ThirdParty/FreeRTOS/include/queue.h"
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 144


DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:24     .bss.xQueueRegistry:00000000 xQueueRegistry
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:21     .bss.xQueueRegistry:00000000 $d
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:27     .text.xQueueGenericReset:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:33     .text.xQueueGenericReset:00000000 xQueueGenericReset
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:246    .text.xQueueGenericCreate:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:252    .text.xQueueGenericCreate:00000000 xQueueGenericCreate
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:381    .text.prvInitialiseNewQueue:00000000 prvInitialiseNewQueue
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:376    .text.prvInitialiseNewQueue:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:447    .text.prvInitialiseMutex:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:452    .text.prvInitialiseMutex:00000000 prvInitialiseMutex
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:883    .text.xQueueGenericSend:00000000 xQueueGenericSend
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:507    .text.xQueueCreateMutex:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:513    .text.xQueueCreateMutex:00000000 xQueueCreateMutex
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:564    .text.xQueueGiveMutexRecursive:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:570    .text.xQueueGiveMutexRecursive:00000000 xQueueGiveMutexRecursive
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:672    .text.xQueueTakeMutexRecursive:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:678    .text.xQueueTakeMutexRecursive:00000000 xQueueTakeMutexRecursive
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:2160   .text.xQueueSemaphoreTake:00000000 xQueueSemaphoreTake
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:781    .text.xQueueCreateCountingSemaphore:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:787    .text.xQueueCreateCountingSemaphore:00000000 xQueueCreateCountingSemaphore
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:877    .text.xQueueGenericSend:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3813   .text.prvCopyDataToQueue:00000000 prvCopyDataToQueue
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:4354   .text.prvIsQueueFull:00000000 prvIsQueueFull
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:4069   .text.prvUnlockQueue:00000000 prvUnlockQueue
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:1231   .text.xQueueGenericSend:000001c8 $d
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:1236   .text.xQueueGenericSendFromISR:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:1242   .text.xQueueGenericSendFromISR:00000000 xQueueGenericSendFromISR
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:1544   .text.xQueueGiveFromISR:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:1550   .text.xQueueGiveFromISR:00000000 xQueueGiveFromISR
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:1831   .text.xQueueReceive:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:1837   .text.xQueueReceive:00000000 xQueueReceive
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3988   .text.prvCopyDataFromQueue:00000000 prvCopyDataFromQueue
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:4208   .text.prvIsQueueEmpty:00000000 prvIsQueueEmpty
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:2149   .text.xQueueReceive:000001a4 $d
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:2154   .text.xQueueSemaphoreTake:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3751   .text.prvGetDisinheritPriorityAfterTimeout:00000000 prvGetDisinheritPriorityAfterTimeout
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:2506   .text.xQueueSemaphoreTake:000001e0 $d
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:2511   .text.xQueuePeek:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:2517   .text.xQueuePeek:00000000 xQueuePeek
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:2831   .text.xQueuePeek:000001a8 $d
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:2836   .text.xQueueReceiveFromISR:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:2842   .text.xQueueReceiveFromISR:00000000 xQueueReceiveFromISR
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3097   .text.xQueuePeekFromISR:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3103   .text.xQueuePeekFromISR:00000000 xQueuePeekFromISR
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3303   .text.uxQueueMessagesWaiting:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3309   .text.uxQueueMessagesWaiting:00000000 uxQueueMessagesWaiting
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3377   .text.uxQueueSpacesAvailable:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3383   .text.uxQueueSpacesAvailable:00000000 uxQueueSpacesAvailable
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3459   .text.uxQueueMessagesWaitingFromISR:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3465   .text.uxQueueMessagesWaitingFromISR:00000000 uxQueueMessagesWaitingFromISR
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3536   .text.vQueueDelete:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3542   .text.vQueueDelete:00000000 vQueueDelete
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:4764   .text.vQueueUnregisterQueue:00000000 vQueueUnregisterQueue
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3609   .text.uxQueueGetQueueNumber:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3615   .text.uxQueueGetQueueNumber:00000000 uxQueueGetQueueNumber
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s 			page 145


C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3654   .text.vQueueSetQueueNumber:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3660   .text.vQueueSetQueueNumber:00000000 vQueueSetQueueNumber
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3701   .text.ucQueueGetQueueType:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3707   .text.ucQueueGetQueueType:00000000 ucQueueGetQueueType
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3746   .text.prvGetDisinheritPriorityAfterTimeout:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3808   .text.prvCopyDataToQueue:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:3983   .text.prvCopyDataFromQueue:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:4064   .text.prvUnlockQueue:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:4203   .text.prvIsQueueEmpty:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:4261   .text.xQueueIsQueueEmptyFromISR:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:4267   .text.xQueueIsQueueEmptyFromISR:00000000 xQueueIsQueueEmptyFromISR
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:4349   .text.prvIsQueueFull:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:4410   .text.xQueueIsQueueFullFromISR:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:4416   .text.xQueueIsQueueFullFromISR:00000000 xQueueIsQueueFullFromISR
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:4501   .text.vQueueAddToRegistry:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:4507   .text.vQueueAddToRegistry:00000000 vQueueAddToRegistry
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:4642   .text.vQueueAddToRegistry:00000098 $d
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:4647   .text.pcQueueGetName:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:4653   .text.pcQueueGetName:00000000 pcQueueGetName
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:4753   .text.pcQueueGetName:00000064 $d
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:4758   .text.vQueueUnregisterQueue:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:4867   .text.vQueueUnregisterQueue:0000006c $d
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:4872   .text.vQueueWaitForMessageRestricted:00000000 $t
C:\Users\Admin\AppData\Local\Temp\ccYAfxe2.s:4878   .text.vQueueWaitForMessageRestricted:00000000 vQueueWaitForMessageRestricted

UNDEFINED SYMBOLS
vPortEnterCritical
xTaskRemoveFromEventList
vListInitialise
vPortExitCritical
pvPortMalloc
xTaskGetCurrentTaskHandle
xTaskGetSchedulerState
vTaskInternalSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
vPortValidateInterruptPriority
uxTaskGetNumberOfTasks
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vPortFree
xTaskPriorityDisinherit
memcpy
vTaskMissedYield
vTaskPlaceOnEventListRestricted
