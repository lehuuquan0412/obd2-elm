ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"timers.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.bss.xActiveTimerList1,"aw",%nobits
  20              		.align	2
  23              	xActiveTimerList1:
  24 0000 00000000 		.space	20
  24      00000000 
  24      00000000 
  24      00000000 
  24      00000000 
  25              		.section	.bss.xActiveTimerList2,"aw",%nobits
  26              		.align	2
  29              	xActiveTimerList2:
  30 0000 00000000 		.space	20
  30      00000000 
  30      00000000 
  30      00000000 
  30      00000000 
  31              		.section	.bss.pxCurrentTimerList,"aw",%nobits
  32              		.align	2
  35              	pxCurrentTimerList:
  36 0000 00000000 		.space	4
  37              		.section	.bss.pxOverflowTimerList,"aw",%nobits
  38              		.align	2
  41              	pxOverflowTimerList:
  42 0000 00000000 		.space	4
  43              		.section	.bss.xTimerQueue,"aw",%nobits
  44              		.align	2
  47              	xTimerQueue:
  48 0000 00000000 		.space	4
  49              		.section	.bss.xTimerTaskHandle,"aw",%nobits
  50              		.align	2
  53              	xTimerTaskHandle:
  54 0000 00000000 		.space	4
  55              		.section	.rodata
  56              		.align	2
  57              	.LC0:
  58 0000 546D7220 		.ascii	"Tmr Svc\000"
  58      53766300 
  59              		.section	.text.xTimerCreateTimerTask,"ax",%progbits
  60              		.align	1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 2


  61              		.global	xTimerCreateTimerTask
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  66              	xTimerCreateTimerTask:
  67              	.LFB5:
  68              		.file 1 "ThirdParty/FreeRTOS/timers.c"
   1:ThirdParty/FreeRTOS/timers.c **** /*
   2:ThirdParty/FreeRTOS/timers.c ****  * FreeRTOS Kernel V10.5.1
   3:ThirdParty/FreeRTOS/timers.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:ThirdParty/FreeRTOS/timers.c ****  *
   5:ThirdParty/FreeRTOS/timers.c ****  * SPDX-License-Identifier: MIT
   6:ThirdParty/FreeRTOS/timers.c ****  *
   7:ThirdParty/FreeRTOS/timers.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:ThirdParty/FreeRTOS/timers.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:ThirdParty/FreeRTOS/timers.c ****  * the Software without restriction, including without limitation the rights to
  10:ThirdParty/FreeRTOS/timers.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:ThirdParty/FreeRTOS/timers.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:ThirdParty/FreeRTOS/timers.c ****  * subject to the following conditions:
  13:ThirdParty/FreeRTOS/timers.c ****  *
  14:ThirdParty/FreeRTOS/timers.c ****  * The above copyright notice and this permission notice shall be included in all
  15:ThirdParty/FreeRTOS/timers.c ****  * copies or substantial portions of the Software.
  16:ThirdParty/FreeRTOS/timers.c ****  *
  17:ThirdParty/FreeRTOS/timers.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:ThirdParty/FreeRTOS/timers.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:ThirdParty/FreeRTOS/timers.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:ThirdParty/FreeRTOS/timers.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:ThirdParty/FreeRTOS/timers.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:ThirdParty/FreeRTOS/timers.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:ThirdParty/FreeRTOS/timers.c ****  *
  24:ThirdParty/FreeRTOS/timers.c ****  * https://www.FreeRTOS.org
  25:ThirdParty/FreeRTOS/timers.c ****  * https://github.com/FreeRTOS
  26:ThirdParty/FreeRTOS/timers.c ****  *
  27:ThirdParty/FreeRTOS/timers.c ****  */
  28:ThirdParty/FreeRTOS/timers.c **** 
  29:ThirdParty/FreeRTOS/timers.c **** /* Standard includes. */
  30:ThirdParty/FreeRTOS/timers.c **** #include <stdlib.h>
  31:ThirdParty/FreeRTOS/timers.c **** 
  32:ThirdParty/FreeRTOS/timers.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:ThirdParty/FreeRTOS/timers.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  34:ThirdParty/FreeRTOS/timers.c ****  * task.h is included from an application file. */
  35:ThirdParty/FreeRTOS/timers.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:ThirdParty/FreeRTOS/timers.c **** 
  37:ThirdParty/FreeRTOS/timers.c **** #include "FreeRTOS.h"
  38:ThirdParty/FreeRTOS/timers.c **** #include "task.h"
  39:ThirdParty/FreeRTOS/timers.c **** #include "queue.h"
  40:ThirdParty/FreeRTOS/timers.c **** #include "timers.h"
  41:ThirdParty/FreeRTOS/timers.c **** 
  42:ThirdParty/FreeRTOS/timers.c **** #if ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 0 )
  43:ThirdParty/FreeRTOS/timers.c ****     #error configUSE_TIMERS must be set to 1 to make the xTimerPendFunctionCall() function availabl
  44:ThirdParty/FreeRTOS/timers.c **** #endif
  45:ThirdParty/FreeRTOS/timers.c **** 
  46:ThirdParty/FreeRTOS/timers.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  47:ThirdParty/FreeRTOS/timers.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  48:ThirdParty/FreeRTOS/timers.c ****  * for the header files above, but not in this file, in order to generate the
  49:ThirdParty/FreeRTOS/timers.c ****  * correct privileged Vs unprivileged linkage and placement. */
  50:ThirdParty/FreeRTOS/timers.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e9021 !e961 !e750. */
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 3


  51:ThirdParty/FreeRTOS/timers.c **** 
  52:ThirdParty/FreeRTOS/timers.c **** 
  53:ThirdParty/FreeRTOS/timers.c **** /* This entire source file will be skipped if the application is not configured
  54:ThirdParty/FreeRTOS/timers.c ****  * to include software timer functionality.  This #if is closed at the very bottom
  55:ThirdParty/FreeRTOS/timers.c ****  * of this file.  If you want to include software timer functionality then ensure
  56:ThirdParty/FreeRTOS/timers.c ****  * configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
  57:ThirdParty/FreeRTOS/timers.c **** #if ( configUSE_TIMERS == 1 )
  58:ThirdParty/FreeRTOS/timers.c **** 
  59:ThirdParty/FreeRTOS/timers.c **** /* Misc definitions. */
  60:ThirdParty/FreeRTOS/timers.c ****     #define tmrNO_DELAY                    ( ( TickType_t ) 0U )
  61:ThirdParty/FreeRTOS/timers.c ****     #define tmrMAX_TIME_BEFORE_OVERFLOW    ( ( TickType_t ) -1 )
  62:ThirdParty/FreeRTOS/timers.c **** 
  63:ThirdParty/FreeRTOS/timers.c **** /* The name assigned to the timer service task.  This can be overridden by
  64:ThirdParty/FreeRTOS/timers.c ****  * defining trmTIMER_SERVICE_TASK_NAME in FreeRTOSConfig.h. */
  65:ThirdParty/FreeRTOS/timers.c ****     #ifndef configTIMER_SERVICE_TASK_NAME
  66:ThirdParty/FreeRTOS/timers.c ****         #define configTIMER_SERVICE_TASK_NAME    "Tmr Svc"
  67:ThirdParty/FreeRTOS/timers.c ****     #endif
  68:ThirdParty/FreeRTOS/timers.c **** 
  69:ThirdParty/FreeRTOS/timers.c **** /* Bit definitions used in the ucStatus member of a timer structure. */
  70:ThirdParty/FreeRTOS/timers.c ****     #define tmrSTATUS_IS_ACTIVE                  ( ( uint8_t ) 0x01 )
  71:ThirdParty/FreeRTOS/timers.c ****     #define tmrSTATUS_IS_STATICALLY_ALLOCATED    ( ( uint8_t ) 0x02 )
  72:ThirdParty/FreeRTOS/timers.c ****     #define tmrSTATUS_IS_AUTORELOAD              ( ( uint8_t ) 0x04 )
  73:ThirdParty/FreeRTOS/timers.c **** 
  74:ThirdParty/FreeRTOS/timers.c **** /* The definition of the timers themselves. */
  75:ThirdParty/FreeRTOS/timers.c ****     typedef struct tmrTimerControl                  /* The old naming convention is used to prevent
  76:ThirdParty/FreeRTOS/timers.c ****     {
  77:ThirdParty/FreeRTOS/timers.c ****         const char * pcTimerName;                   /*<< Text name.  This is not used by the kernel
  78:ThirdParty/FreeRTOS/timers.c ****         ListItem_t xTimerListItem;                  /*<< Standard linked list item as used by all k
  79:ThirdParty/FreeRTOS/timers.c ****         TickType_t xTimerPeriodInTicks;             /*<< How quickly and often the timer expires. *
  80:ThirdParty/FreeRTOS/timers.c ****         void * pvTimerID;                           /*<< An ID to identify the timer.  This allows 
  81:ThirdParty/FreeRTOS/timers.c ****         TimerCallbackFunction_t pxCallbackFunction; /*<< The function that will be called when the 
  82:ThirdParty/FreeRTOS/timers.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
  83:ThirdParty/FreeRTOS/timers.c ****             UBaseType_t uxTimerNumber;              /*<< An ID assigned by trace tools such as Free
  84:ThirdParty/FreeRTOS/timers.c ****         #endif
  85:ThirdParty/FreeRTOS/timers.c ****         uint8_t ucStatus;                           /*<< Holds bits to say if the timer was statica
  86:ThirdParty/FreeRTOS/timers.c ****     } xTIMER;
  87:ThirdParty/FreeRTOS/timers.c **** 
  88:ThirdParty/FreeRTOS/timers.c **** /* The old xTIMER name is maintained above then typedefed to the new Timer_t
  89:ThirdParty/FreeRTOS/timers.c ****  * name below to enable the use of older kernel aware debuggers. */
  90:ThirdParty/FreeRTOS/timers.c ****     typedef xTIMER Timer_t;
  91:ThirdParty/FreeRTOS/timers.c **** 
  92:ThirdParty/FreeRTOS/timers.c **** /* The definition of messages that can be sent and received on the timer queue.
  93:ThirdParty/FreeRTOS/timers.c ****  * Two types of message can be queued - messages that manipulate a software timer,
  94:ThirdParty/FreeRTOS/timers.c ****  * and messages that request the execution of a non-timer related callback.  The
  95:ThirdParty/FreeRTOS/timers.c ****  * two message types are defined in two separate structures, xTimerParametersType
  96:ThirdParty/FreeRTOS/timers.c ****  * and xCallbackParametersType respectively. */
  97:ThirdParty/FreeRTOS/timers.c ****     typedef struct tmrTimerParameters
  98:ThirdParty/FreeRTOS/timers.c ****     {
  99:ThirdParty/FreeRTOS/timers.c ****         TickType_t xMessageValue; /*<< An optional value used by a subset of commands, for example,
 100:ThirdParty/FreeRTOS/timers.c ****         Timer_t * pxTimer;        /*<< The timer to which the command will be applied. */
 101:ThirdParty/FreeRTOS/timers.c ****     } TimerParameter_t;
 102:ThirdParty/FreeRTOS/timers.c **** 
 103:ThirdParty/FreeRTOS/timers.c **** 
 104:ThirdParty/FreeRTOS/timers.c ****     typedef struct tmrCallbackParameters
 105:ThirdParty/FreeRTOS/timers.c ****     {
 106:ThirdParty/FreeRTOS/timers.c ****         PendedFunction_t pxCallbackFunction; /* << The callback function to execute. */
 107:ThirdParty/FreeRTOS/timers.c ****         void * pvParameter1;                 /* << The value that will be used as the callback func
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 4


 108:ThirdParty/FreeRTOS/timers.c ****         uint32_t ulParameter2;               /* << The value that will be used as the callback func
 109:ThirdParty/FreeRTOS/timers.c ****     } CallbackParameters_t;
 110:ThirdParty/FreeRTOS/timers.c **** 
 111:ThirdParty/FreeRTOS/timers.c **** /* The structure that contains the two message types, along with an identifier
 112:ThirdParty/FreeRTOS/timers.c ****  * that is used to determine which message type is valid. */
 113:ThirdParty/FreeRTOS/timers.c ****     typedef struct tmrTimerQueueMessage
 114:ThirdParty/FreeRTOS/timers.c ****     {
 115:ThirdParty/FreeRTOS/timers.c ****         BaseType_t xMessageID; /*<< The command being sent to the timer service task. */
 116:ThirdParty/FreeRTOS/timers.c ****         union
 117:ThirdParty/FreeRTOS/timers.c ****         {
 118:ThirdParty/FreeRTOS/timers.c ****             TimerParameter_t xTimerParameters;
 119:ThirdParty/FreeRTOS/timers.c **** 
 120:ThirdParty/FreeRTOS/timers.c ****             /* Don't include xCallbackParameters if it is not going to be used as
 121:ThirdParty/FreeRTOS/timers.c ****              * it makes the structure (and therefore the timer queue) larger. */
 122:ThirdParty/FreeRTOS/timers.c ****             #if ( INCLUDE_xTimerPendFunctionCall == 1 )
 123:ThirdParty/FreeRTOS/timers.c ****                 CallbackParameters_t xCallbackParameters;
 124:ThirdParty/FreeRTOS/timers.c ****             #endif /* INCLUDE_xTimerPendFunctionCall */
 125:ThirdParty/FreeRTOS/timers.c ****         } u;
 126:ThirdParty/FreeRTOS/timers.c ****     } DaemonTaskMessage_t;
 127:ThirdParty/FreeRTOS/timers.c **** 
 128:ThirdParty/FreeRTOS/timers.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 129:ThirdParty/FreeRTOS/timers.c ****  * which static variables must be declared volatile. */
 130:ThirdParty/FreeRTOS/timers.c **** 
 131:ThirdParty/FreeRTOS/timers.c **** /* The list in which active timers are stored.  Timers are referenced in expire
 132:ThirdParty/FreeRTOS/timers.c ****  * time order, with the nearest expiry time at the front of the list.  Only the
 133:ThirdParty/FreeRTOS/timers.c ****  * timer service task is allowed to access these lists.
 134:ThirdParty/FreeRTOS/timers.c ****  * xActiveTimerList1 and xActiveTimerList2 could be at function scope but that
 135:ThirdParty/FreeRTOS/timers.c ****  * breaks some kernel aware debuggers, and debuggers that reply on removing the
 136:ThirdParty/FreeRTOS/timers.c ****  * static qualifier. */
 137:ThirdParty/FreeRTOS/timers.c ****     PRIVILEGED_DATA static List_t xActiveTimerList1;
 138:ThirdParty/FreeRTOS/timers.c ****     PRIVILEGED_DATA static List_t xActiveTimerList2;
 139:ThirdParty/FreeRTOS/timers.c ****     PRIVILEGED_DATA static List_t * pxCurrentTimerList;
 140:ThirdParty/FreeRTOS/timers.c ****     PRIVILEGED_DATA static List_t * pxOverflowTimerList;
 141:ThirdParty/FreeRTOS/timers.c **** 
 142:ThirdParty/FreeRTOS/timers.c **** /* A queue that is used to send commands to the timer service task. */
 143:ThirdParty/FreeRTOS/timers.c ****     PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;
 144:ThirdParty/FreeRTOS/timers.c ****     PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;
 145:ThirdParty/FreeRTOS/timers.c **** 
 146:ThirdParty/FreeRTOS/timers.c **** /*lint -restore */
 147:ThirdParty/FreeRTOS/timers.c **** 
 148:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 149:ThirdParty/FreeRTOS/timers.c **** 
 150:ThirdParty/FreeRTOS/timers.c **** /*
 151:ThirdParty/FreeRTOS/timers.c ****  * Initialise the infrastructure used by the timer service task if it has not
 152:ThirdParty/FreeRTOS/timers.c ****  * been initialised already.
 153:ThirdParty/FreeRTOS/timers.c ****  */
 154:ThirdParty/FreeRTOS/timers.c ****     static void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
 155:ThirdParty/FreeRTOS/timers.c **** 
 156:ThirdParty/FreeRTOS/timers.c **** /*
 157:ThirdParty/FreeRTOS/timers.c ****  * The timer service task (daemon).  Timer functionality is controlled by this
 158:ThirdParty/FreeRTOS/timers.c ****  * task.  Other tasks communicate with the timer service task using the
 159:ThirdParty/FreeRTOS/timers.c ****  * xTimerQueue queue.
 160:ThirdParty/FreeRTOS/timers.c ****  */
 161:ThirdParty/FreeRTOS/timers.c ****     static portTASK_FUNCTION_PROTO( prvTimerTask, pvParameters ) PRIVILEGED_FUNCTION;
 162:ThirdParty/FreeRTOS/timers.c **** 
 163:ThirdParty/FreeRTOS/timers.c **** /*
 164:ThirdParty/FreeRTOS/timers.c ****  * Called by the timer service task to interpret and process a command it
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 5


 165:ThirdParty/FreeRTOS/timers.c ****  * received on the timer queue.
 166:ThirdParty/FreeRTOS/timers.c ****  */
 167:ThirdParty/FreeRTOS/timers.c ****     static void prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
 168:ThirdParty/FreeRTOS/timers.c **** 
 169:ThirdParty/FreeRTOS/timers.c **** /*
 170:ThirdParty/FreeRTOS/timers.c ****  * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
 171:ThirdParty/FreeRTOS/timers.c ****  * depending on if the expire time causes a timer counter overflow.
 172:ThirdParty/FreeRTOS/timers.c ****  */
 173:ThirdParty/FreeRTOS/timers.c ****     static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
 174:ThirdParty/FreeRTOS/timers.c ****                                                   const TickType_t xNextExpiryTime,
 175:ThirdParty/FreeRTOS/timers.c ****                                                   const TickType_t xTimeNow,
 176:ThirdParty/FreeRTOS/timers.c ****                                                   const TickType_t xCommandTime ) PRIVILEGED_FUNCTI
 177:ThirdParty/FreeRTOS/timers.c **** 
 178:ThirdParty/FreeRTOS/timers.c **** /*
 179:ThirdParty/FreeRTOS/timers.c ****  * Reload the specified auto-reload timer.  If the reloading is backlogged,
 180:ThirdParty/FreeRTOS/timers.c ****  * clear the backlog, calling the callback for each additional reload.  When
 181:ThirdParty/FreeRTOS/timers.c ****  * this function returns, the next expiry time is after xTimeNow.
 182:ThirdParty/FreeRTOS/timers.c ****  */
 183:ThirdParty/FreeRTOS/timers.c ****     static void prvReloadTimer( Timer_t * const pxTimer,
 184:ThirdParty/FreeRTOS/timers.c ****                                 TickType_t xExpiredTime,
 185:ThirdParty/FreeRTOS/timers.c ****                                 const TickType_t xTimeNow ) PRIVILEGED_FUNCTION;
 186:ThirdParty/FreeRTOS/timers.c **** 
 187:ThirdParty/FreeRTOS/timers.c **** /*
 188:ThirdParty/FreeRTOS/timers.c ****  * An active timer has reached its expire time.  Reload the timer if it is an
 189:ThirdParty/FreeRTOS/timers.c ****  * auto-reload timer, then call its callback.
 190:ThirdParty/FreeRTOS/timers.c ****  */
 191:ThirdParty/FreeRTOS/timers.c ****     static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
 192:ThirdParty/FreeRTOS/timers.c ****                                         const TickType_t xTimeNow ) PRIVILEGED_FUNCTION;
 193:ThirdParty/FreeRTOS/timers.c **** 
 194:ThirdParty/FreeRTOS/timers.c **** /*
 195:ThirdParty/FreeRTOS/timers.c ****  * The tick count has overflowed.  Switch the timer lists after ensuring the
 196:ThirdParty/FreeRTOS/timers.c ****  * current timer list does not still reference some timers.
 197:ThirdParty/FreeRTOS/timers.c ****  */
 198:ThirdParty/FreeRTOS/timers.c ****     static void prvSwitchTimerLists( void ) PRIVILEGED_FUNCTION;
 199:ThirdParty/FreeRTOS/timers.c **** 
 200:ThirdParty/FreeRTOS/timers.c **** /*
 201:ThirdParty/FreeRTOS/timers.c ****  * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
 202:ThirdParty/FreeRTOS/timers.c ****  * if a tick count overflow occurred since prvSampleTimeNow() was last called.
 203:ThirdParty/FreeRTOS/timers.c ****  */
 204:ThirdParty/FreeRTOS/timers.c ****     static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched ) PRIVILEGED_FU
 205:ThirdParty/FreeRTOS/timers.c **** 
 206:ThirdParty/FreeRTOS/timers.c **** /*
 207:ThirdParty/FreeRTOS/timers.c ****  * If the timer list contains any active timers then return the expire time of
 208:ThirdParty/FreeRTOS/timers.c ****  * the timer that will expire first and set *pxListWasEmpty to false.  If the
 209:ThirdParty/FreeRTOS/timers.c ****  * timer list does not contain any timers then return 0 and set *pxListWasEmpty
 210:ThirdParty/FreeRTOS/timers.c ****  * to pdTRUE.
 211:ThirdParty/FreeRTOS/timers.c ****  */
 212:ThirdParty/FreeRTOS/timers.c ****     static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty ) PRIVILEGED_FUNCTION
 213:ThirdParty/FreeRTOS/timers.c **** 
 214:ThirdParty/FreeRTOS/timers.c **** /*
 215:ThirdParty/FreeRTOS/timers.c ****  * If a timer has expired, process it.  Otherwise, block the timer service task
 216:ThirdParty/FreeRTOS/timers.c ****  * until either a timer does expire or a command is received.
 217:ThirdParty/FreeRTOS/timers.c ****  */
 218:ThirdParty/FreeRTOS/timers.c ****     static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
 219:ThirdParty/FreeRTOS/timers.c ****                                             BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;
 220:ThirdParty/FreeRTOS/timers.c **** 
 221:ThirdParty/FreeRTOS/timers.c **** /*
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 6


 222:ThirdParty/FreeRTOS/timers.c ****  * Called after a Timer_t structure has been allocated either statically or
 223:ThirdParty/FreeRTOS/timers.c ****  * dynamically to fill in the structure's members.
 224:ThirdParty/FreeRTOS/timers.c ****  */
 225:ThirdParty/FreeRTOS/timers.c ****     static void prvInitialiseNewTimer( const char * const pcTimerName, /*lint !e971 Unqualified cha
 226:ThirdParty/FreeRTOS/timers.c ****                                        const TickType_t xTimerPeriodInTicks,
 227:ThirdParty/FreeRTOS/timers.c ****                                        const BaseType_t xAutoReload,
 228:ThirdParty/FreeRTOS/timers.c ****                                        void * const pvTimerID,
 229:ThirdParty/FreeRTOS/timers.c ****                                        TimerCallbackFunction_t pxCallbackFunction,
 230:ThirdParty/FreeRTOS/timers.c ****                                        Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
 231:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 232:ThirdParty/FreeRTOS/timers.c **** 
 233:ThirdParty/FreeRTOS/timers.c ****     BaseType_t xTimerCreateTimerTask( void )
 234:ThirdParty/FreeRTOS/timers.c ****     {
  69              		.loc 1 234 5
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 8
  72              		@ frame_needed = 1, uses_anonymous_args = 0
  73 0000 80B5     		push	{r7, lr}
  74              	.LCFI0:
  75              		.cfi_def_cfa_offset 8
  76              		.cfi_offset 7, -8
  77              		.cfi_offset 14, -4
  78 0002 84B0     		sub	sp, sp, #16
  79              	.LCFI1:
  80              		.cfi_def_cfa_offset 24
  81 0004 02AF     		add	r7, sp, #8
  82              	.LCFI2:
  83              		.cfi_def_cfa 7, 16
 235:ThirdParty/FreeRTOS/timers.c ****         BaseType_t xReturn = pdFAIL;
  84              		.loc 1 235 20
  85 0006 0023     		movs	r3, #0
  86 0008 7B60     		str	r3, [r7, #4]
 236:ThirdParty/FreeRTOS/timers.c **** 
 237:ThirdParty/FreeRTOS/timers.c ****         /* This function is called when the scheduler is started if
 238:ThirdParty/FreeRTOS/timers.c ****          * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
 239:ThirdParty/FreeRTOS/timers.c ****          * timer service task has been created/initialised.  If timers have already
 240:ThirdParty/FreeRTOS/timers.c ****          * been created then the initialisation will already have been performed. */
 241:ThirdParty/FreeRTOS/timers.c ****         prvCheckForValidListAndQueue();
  87              		.loc 1 241 9
  88 000a FFF7FEFF 		bl	prvCheckForValidListAndQueue
 242:ThirdParty/FreeRTOS/timers.c **** 
 243:ThirdParty/FreeRTOS/timers.c ****         if( xTimerQueue != NULL )
  89              		.loc 1 243 25
  90 000e 114B     		ldr	r3, .L6
  91 0010 1B68     		ldr	r3, [r3]
  92              		.loc 1 243 11
  93 0012 002B     		cmp	r3, #0
  94 0014 0BD0     		beq	.L2
 244:ThirdParty/FreeRTOS/timers.c ****         {
 245:ThirdParty/FreeRTOS/timers.c ****             #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 246:ThirdParty/FreeRTOS/timers.c ****             {
 247:ThirdParty/FreeRTOS/timers.c ****                 StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 248:ThirdParty/FreeRTOS/timers.c ****                 StackType_t * pxTimerTaskStackBuffer = NULL;
 249:ThirdParty/FreeRTOS/timers.c ****                 uint32_t ulTimerTaskStackSize;
 250:ThirdParty/FreeRTOS/timers.c **** 
 251:ThirdParty/FreeRTOS/timers.c ****                 vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ul
 252:ThirdParty/FreeRTOS/timers.c ****                 xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 7


 253:ThirdParty/FreeRTOS/timers.c ****                                                       configTIMER_SERVICE_TASK_NAME,
 254:ThirdParty/FreeRTOS/timers.c ****                                                       ulTimerTaskStackSize,
 255:ThirdParty/FreeRTOS/timers.c ****                                                       NULL,
 256:ThirdParty/FreeRTOS/timers.c ****                                                       ( ( UBaseType_t ) configTIMER_TASK_PRIORITY )
 257:ThirdParty/FreeRTOS/timers.c ****                                                       pxTimerTaskStackBuffer,
 258:ThirdParty/FreeRTOS/timers.c ****                                                       pxTimerTaskTCBBuffer );
 259:ThirdParty/FreeRTOS/timers.c **** 
 260:ThirdParty/FreeRTOS/timers.c ****                 if( xTimerTaskHandle != NULL )
 261:ThirdParty/FreeRTOS/timers.c ****                 {
 262:ThirdParty/FreeRTOS/timers.c ****                     xReturn = pdPASS;
 263:ThirdParty/FreeRTOS/timers.c ****                 }
 264:ThirdParty/FreeRTOS/timers.c ****             }
 265:ThirdParty/FreeRTOS/timers.c ****             #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 266:ThirdParty/FreeRTOS/timers.c ****             {
 267:ThirdParty/FreeRTOS/timers.c ****                 xReturn = xTaskCreate( prvTimerTask,
  95              		.loc 1 267 27
  96 0016 104B     		ldr	r3, .L6+4
  97 0018 0193     		str	r3, [sp, #4]
  98 001a 0223     		movs	r3, #2
  99 001c 0093     		str	r3, [sp]
 100 001e 0023     		movs	r3, #0
 101 0020 4FF48272 		mov	r2, #260
 102 0024 0D49     		ldr	r1, .L6+8
 103 0026 0E48     		ldr	r0, .L6+12
 104 0028 FFF7FEFF 		bl	xTaskCreate
 105 002c 7860     		str	r0, [r7, #4]
 106              	.L2:
 268:ThirdParty/FreeRTOS/timers.c ****                                        configTIMER_SERVICE_TASK_NAME,
 269:ThirdParty/FreeRTOS/timers.c ****                                        configTIMER_TASK_STACK_DEPTH,
 270:ThirdParty/FreeRTOS/timers.c ****                                        NULL,
 271:ThirdParty/FreeRTOS/timers.c ****                                        ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEG
 272:ThirdParty/FreeRTOS/timers.c ****                                        &xTimerTaskHandle );
 273:ThirdParty/FreeRTOS/timers.c ****             }
 274:ThirdParty/FreeRTOS/timers.c ****             #endif /* configSUPPORT_STATIC_ALLOCATION */
 275:ThirdParty/FreeRTOS/timers.c ****         }
 276:ThirdParty/FreeRTOS/timers.c ****         else
 277:ThirdParty/FreeRTOS/timers.c ****         {
 278:ThirdParty/FreeRTOS/timers.c ****             mtCOVERAGE_TEST_MARKER();
 279:ThirdParty/FreeRTOS/timers.c ****         }
 280:ThirdParty/FreeRTOS/timers.c **** 
 281:ThirdParty/FreeRTOS/timers.c ****         configASSERT( xReturn );
 107              		.loc 1 281 9
 108 002e 7B68     		ldr	r3, [r7, #4]
 109 0030 002B     		cmp	r3, #0
 110 0032 0AD1     		bne	.L3
 111              	.LBB28:
 112              	.LBB29:
 113              		.file 2 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
   1:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.5.1
   3:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   7:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 8


  10:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  13:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  14:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  16:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  17:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  24:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://www.FreeRTOS.org
  25:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://github.com/FreeRTOS
  26:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  27:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  28:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  30:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  31:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define PORTMACRO_H
  32:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  33:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef __cplusplus
  34:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         extern "C" {
  35:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  36:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  37:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  38:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  39:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  40:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  42:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  43:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  44:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  45:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  46:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  48:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCHAR          char
  49:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portFLOAT         float
  50:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDOUBLE        double
  51:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portLONG          long
  52:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSHORT         short
  53:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBASE_TYPE     long
  55:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  57:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef long             BaseType_t;
  58:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef unsigned long    UBaseType_t;
  59:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  60:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint16_t     TickType_t;
  62:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #else
  64:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint32_t     TickType_t;
  65:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  66:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 9


  67:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  68:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not need to be guarded with a critical section. */
  69:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  70:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  71:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  72:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  73:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  74:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  79:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  80:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  81:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD()                                 \
  82:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {                                                   \
  83:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****                                                         \
  86:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  88:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  89:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "isb" );                                  \
  90:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
  91:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  92:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  95:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  96:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  97:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  98:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  99:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortEnterCritical( void );
 100:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortExitCritical( void );
 101:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 104:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 109:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 110:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * (which build with all the ports) will build. */
 113:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 114:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 116:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 117:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 118:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 119:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 122:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 123:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 10


 124:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 125:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 126:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 127:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 128:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 131:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Generic helper function. */
 132:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 134:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             uint8_t ucReturn;
 135:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 136:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             return ucReturn;
 139:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 140:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 141:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Check the configuration. */
 142:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #endif
 145:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 146:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 147:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 149:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 151:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 152:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 153:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 154:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 156:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 157:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 158:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef configASSERT
 159:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 161:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 162:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 164:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNOP()
 165:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 166:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portINLINE              __inline
 167:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 168:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portFORCE_INLINE
 169:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 171:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 172:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 173:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 174:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulCurrentInterrupt;
 175:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         BaseType_t xReturn;
 176:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 178:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 179:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         if( ulCurrentInterrupt == 0 )
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 11


 181:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 182:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdFALSE;
 183:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 184:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         else
 185:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 186:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdTRUE;
 187:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 188:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         return xReturn;
 190:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 191:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 192:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 193:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 194:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 195:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulNewBASEPRI;
 197:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 114              		.loc 2 198 9
 115              		.syntax unified
 116              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 117 0034 4FF05003 			mov r3, #80												
 118 0038 83F31188 		msr basepri, r3											
 119 003c BFF36F8F 		isb														
 120 0040 BFF34F8F 		dsb														
 121              	
 122              	@ 0 "" 2
 123              		.thumb
 124              		.syntax unified
 125 0044 3B60     		str	r3, [r7]
 199:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mov %0, %1												\n"\
 201:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %0											\n"\
 202:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	isb														\n"\
 203:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	dsb														\n"\
 204:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 205:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         );
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 126              		.loc 2 206 5
 127 0046 00BF     		nop
 128              	.L4:
 129              	.LBE29:
 130              	.LBE28:
 131              		.loc 1 281 9 discriminator 1
 132 0048 FEE7     		b	.L4
 133              	.L3:
 282:ThirdParty/FreeRTOS/timers.c ****         return xReturn;
 134              		.loc 1 282 16
 135 004a 7B68     		ldr	r3, [r7, #4]
 283:ThirdParty/FreeRTOS/timers.c ****     }
 136              		.loc 1 283 5
 137 004c 1846     		mov	r0, r3
 138 004e 0837     		adds	r7, r7, #8
 139              	.LCFI3:
 140              		.cfi_def_cfa_offset 8
 141 0050 BD46     		mov	sp, r7
 142              	.LCFI4:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 12


 143              		.cfi_def_cfa_register 13
 144              		@ sp needed
 145 0052 80BD     		pop	{r7, pc}
 146              	.L7:
 147              		.align	2
 148              	.L6:
 149 0054 00000000 		.word	xTimerQueue
 150 0058 00000000 		.word	xTimerTaskHandle
 151 005c 00000000 		.word	.LC0
 152 0060 00000000 		.word	prvTimerTask
 153              		.cfi_endproc
 154              	.LFE5:
 156              		.section	.text.xTimerCreate,"ax",%progbits
 157              		.align	1
 158              		.global	xTimerCreate
 159              		.syntax unified
 160              		.thumb
 161              		.thumb_func
 163              	xTimerCreate:
 164              	.LFB6:
 284:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 285:ThirdParty/FreeRTOS/timers.c **** 
 286:ThirdParty/FreeRTOS/timers.c ****     #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 287:ThirdParty/FreeRTOS/timers.c **** 
 288:ThirdParty/FreeRTOS/timers.c ****         TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char t
 289:ThirdParty/FreeRTOS/timers.c ****                                     const TickType_t xTimerPeriodInTicks,
 290:ThirdParty/FreeRTOS/timers.c ****                                     const BaseType_t xAutoReload,
 291:ThirdParty/FreeRTOS/timers.c ****                                     void * const pvTimerID,
 292:ThirdParty/FreeRTOS/timers.c ****                                     TimerCallbackFunction_t pxCallbackFunction )
 293:ThirdParty/FreeRTOS/timers.c ****         {
 165              		.loc 1 293 9
 166              		.cfi_startproc
 167              		@ args = 4, pretend = 0, frame = 24
 168              		@ frame_needed = 1, uses_anonymous_args = 0
 169 0000 80B5     		push	{r7, lr}
 170              	.LCFI5:
 171              		.cfi_def_cfa_offset 8
 172              		.cfi_offset 7, -8
 173              		.cfi_offset 14, -4
 174 0002 88B0     		sub	sp, sp, #32
 175              	.LCFI6:
 176              		.cfi_def_cfa_offset 40
 177 0004 02AF     		add	r7, sp, #8
 178              	.LCFI7:
 179              		.cfi_def_cfa 7, 32
 180 0006 F860     		str	r0, [r7, #12]
 181 0008 B960     		str	r1, [r7, #8]
 182 000a 7A60     		str	r2, [r7, #4]
 183 000c 3B60     		str	r3, [r7]
 294:ThirdParty/FreeRTOS/timers.c ****             Timer_t * pxNewTimer;
 295:ThirdParty/FreeRTOS/timers.c **** 
 296:ThirdParty/FreeRTOS/timers.c ****             pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All 
 184              		.loc 1 296 40
 185 000e 2C20     		movs	r0, #44
 186 0010 FFF7FEFF 		bl	pvPortMalloc
 187 0014 7861     		str	r0, [r7, #20]
 297:ThirdParty/FreeRTOS/timers.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 13


 298:ThirdParty/FreeRTOS/timers.c ****             if( pxNewTimer != NULL )
 188              		.loc 1 298 15
 189 0016 7B69     		ldr	r3, [r7, #20]
 190 0018 002B     		cmp	r3, #0
 191 001a 0DD0     		beq	.L9
 299:ThirdParty/FreeRTOS/timers.c ****             {
 300:ThirdParty/FreeRTOS/timers.c ****                 /* Status is thus far zero as the timer is not created statically
 301:ThirdParty/FreeRTOS/timers.c ****                  * and has not been started.  The auto-reload bit may get set in
 302:ThirdParty/FreeRTOS/timers.c ****                  * prvInitialiseNewTimer. */
 303:ThirdParty/FreeRTOS/timers.c ****                 pxNewTimer->ucStatus = 0x00;
 192              		.loc 1 303 38
 193 001c 7B69     		ldr	r3, [r7, #20]
 194 001e 0022     		movs	r2, #0
 195 0020 83F82820 		strb	r2, [r3, #40]
 304:ThirdParty/FreeRTOS/timers.c ****                 prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, px
 196              		.loc 1 304 17
 197 0024 7B69     		ldr	r3, [r7, #20]
 198 0026 0193     		str	r3, [sp, #4]
 199 0028 3B6A     		ldr	r3, [r7, #32]
 200 002a 0093     		str	r3, [sp]
 201 002c 3B68     		ldr	r3, [r7]
 202 002e 7A68     		ldr	r2, [r7, #4]
 203 0030 B968     		ldr	r1, [r7, #8]
 204 0032 F868     		ldr	r0, [r7, #12]
 205 0034 FFF7FEFF 		bl	prvInitialiseNewTimer
 206              	.L9:
 305:ThirdParty/FreeRTOS/timers.c ****             }
 306:ThirdParty/FreeRTOS/timers.c **** 
 307:ThirdParty/FreeRTOS/timers.c ****             return pxNewTimer;
 207              		.loc 1 307 20
 208 0038 7B69     		ldr	r3, [r7, #20]
 308:ThirdParty/FreeRTOS/timers.c ****         }
 209              		.loc 1 308 9
 210 003a 1846     		mov	r0, r3
 211 003c 1837     		adds	r7, r7, #24
 212              	.LCFI8:
 213              		.cfi_def_cfa_offset 8
 214 003e BD46     		mov	sp, r7
 215              	.LCFI9:
 216              		.cfi_def_cfa_register 13
 217              		@ sp needed
 218 0040 80BD     		pop	{r7, pc}
 219              		.cfi_endproc
 220              	.LFE6:
 222              		.section	.text.prvInitialiseNewTimer,"ax",%progbits
 223              		.align	1
 224              		.syntax unified
 225              		.thumb
 226              		.thumb_func
 228              	prvInitialiseNewTimer:
 229              	.LFB7:
 309:ThirdParty/FreeRTOS/timers.c **** 
 310:ThirdParty/FreeRTOS/timers.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 311:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 312:ThirdParty/FreeRTOS/timers.c **** 
 313:ThirdParty/FreeRTOS/timers.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 314:ThirdParty/FreeRTOS/timers.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 14


 315:ThirdParty/FreeRTOS/timers.c ****         TimerHandle_t xTimerCreateStatic( const char * const pcTimerName, /*lint !e971 Unqualified 
 316:ThirdParty/FreeRTOS/timers.c ****                                           const TickType_t xTimerPeriodInTicks,
 317:ThirdParty/FreeRTOS/timers.c ****                                           const BaseType_t xAutoReload,
 318:ThirdParty/FreeRTOS/timers.c ****                                           void * const pvTimerID,
 319:ThirdParty/FreeRTOS/timers.c ****                                           TimerCallbackFunction_t pxCallbackFunction,
 320:ThirdParty/FreeRTOS/timers.c ****                                           StaticTimer_t * pxTimerBuffer )
 321:ThirdParty/FreeRTOS/timers.c ****         {
 322:ThirdParty/FreeRTOS/timers.c ****             Timer_t * pxNewTimer;
 323:ThirdParty/FreeRTOS/timers.c **** 
 324:ThirdParty/FreeRTOS/timers.c ****             #if ( configASSERT_DEFINED == 1 )
 325:ThirdParty/FreeRTOS/timers.c ****             {
 326:ThirdParty/FreeRTOS/timers.c ****                 /* Sanity check that the size of the structure used to declare a
 327:ThirdParty/FreeRTOS/timers.c ****                  * variable of type StaticTimer_t equals the size of the real timer
 328:ThirdParty/FreeRTOS/timers.c ****                  * structure. */
 329:ThirdParty/FreeRTOS/timers.c ****                 volatile size_t xSize = sizeof( StaticTimer_t );
 330:ThirdParty/FreeRTOS/timers.c ****                 configASSERT( xSize == sizeof( Timer_t ) );
 331:ThirdParty/FreeRTOS/timers.c ****                 ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 332:ThirdParty/FreeRTOS/timers.c ****             }
 333:ThirdParty/FreeRTOS/timers.c ****             #endif /* configASSERT_DEFINED */
 334:ThirdParty/FreeRTOS/timers.c **** 
 335:ThirdParty/FreeRTOS/timers.c ****             /* A pointer to a StaticTimer_t structure MUST be provided, use it. */
 336:ThirdParty/FreeRTOS/timers.c ****             configASSERT( pxTimerBuffer );
 337:ThirdParty/FreeRTOS/timers.c ****             pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointe
 338:ThirdParty/FreeRTOS/timers.c **** 
 339:ThirdParty/FreeRTOS/timers.c ****             if( pxNewTimer != NULL )
 340:ThirdParty/FreeRTOS/timers.c ****             {
 341:ThirdParty/FreeRTOS/timers.c ****                 /* Timers can be created statically or dynamically so note this
 342:ThirdParty/FreeRTOS/timers.c ****                  * timer was created statically in case it is later deleted.  The
 343:ThirdParty/FreeRTOS/timers.c ****                  * auto-reload bit may get set in prvInitialiseNewTimer(). */
 344:ThirdParty/FreeRTOS/timers.c ****                 pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 345:ThirdParty/FreeRTOS/timers.c **** 
 346:ThirdParty/FreeRTOS/timers.c ****                 prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, px
 347:ThirdParty/FreeRTOS/timers.c ****             }
 348:ThirdParty/FreeRTOS/timers.c **** 
 349:ThirdParty/FreeRTOS/timers.c ****             return pxNewTimer;
 350:ThirdParty/FreeRTOS/timers.c ****         }
 351:ThirdParty/FreeRTOS/timers.c **** 
 352:ThirdParty/FreeRTOS/timers.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
 353:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 354:ThirdParty/FreeRTOS/timers.c **** 
 355:ThirdParty/FreeRTOS/timers.c ****     static void prvInitialiseNewTimer( const char * const pcTimerName, /*lint !e971 Unqualified cha
 356:ThirdParty/FreeRTOS/timers.c ****                                        const TickType_t xTimerPeriodInTicks,
 357:ThirdParty/FreeRTOS/timers.c ****                                        const BaseType_t xAutoReload,
 358:ThirdParty/FreeRTOS/timers.c ****                                        void * const pvTimerID,
 359:ThirdParty/FreeRTOS/timers.c ****                                        TimerCallbackFunction_t pxCallbackFunction,
 360:ThirdParty/FreeRTOS/timers.c ****                                        Timer_t * pxNewTimer )
 361:ThirdParty/FreeRTOS/timers.c ****     {
 230              		.loc 1 361 5
 231              		.cfi_startproc
 232              		@ args = 8, pretend = 0, frame = 24
 233              		@ frame_needed = 1, uses_anonymous_args = 0
 234 0000 80B5     		push	{r7, lr}
 235              	.LCFI10:
 236              		.cfi_def_cfa_offset 8
 237              		.cfi_offset 7, -8
 238              		.cfi_offset 14, -4
 239 0002 86B0     		sub	sp, sp, #24
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 15


 240              	.LCFI11:
 241              		.cfi_def_cfa_offset 32
 242 0004 00AF     		add	r7, sp, #0
 243              	.LCFI12:
 244              		.cfi_def_cfa_register 7
 245 0006 F860     		str	r0, [r7, #12]
 246 0008 B960     		str	r1, [r7, #8]
 247 000a 7A60     		str	r2, [r7, #4]
 248 000c 3B60     		str	r3, [r7]
 362:ThirdParty/FreeRTOS/timers.c ****         /* 0 is not a valid value for xTimerPeriodInTicks. */
 363:ThirdParty/FreeRTOS/timers.c ****         configASSERT( ( xTimerPeriodInTicks > 0 ) );
 249              		.loc 1 363 9
 250 000e BB68     		ldr	r3, [r7, #8]
 251 0010 002B     		cmp	r3, #0
 252 0012 0AD1     		bne	.L12
 253              	.LBB30:
 254              	.LBB31:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 255              		.loc 2 198 9
 256              		.syntax unified
 257              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 258 0014 4FF05003 			mov r3, #80												
 259 0018 83F31188 		msr basepri, r3											
 260 001c BFF36F8F 		isb														
 261 0020 BFF34F8F 		dsb														
 262              	
 263              	@ 0 "" 2
 264              		.thumb
 265              		.syntax unified
 266 0024 7B61     		str	r3, [r7, #20]
 267              		.loc 2 206 5
 268 0026 00BF     		nop
 269              	.L13:
 270              	.LBE31:
 271              	.LBE30:
 272              		.loc 1 363 9 discriminator 1
 273 0028 FEE7     		b	.L13
 274              	.L12:
 364:ThirdParty/FreeRTOS/timers.c **** 
 365:ThirdParty/FreeRTOS/timers.c ****         /* Ensure the infrastructure used by the timer service task has been
 366:ThirdParty/FreeRTOS/timers.c ****          * created/initialised. */
 367:ThirdParty/FreeRTOS/timers.c ****         prvCheckForValidListAndQueue();
 275              		.loc 1 367 9
 276 002a FFF7FEFF 		bl	prvCheckForValidListAndQueue
 368:ThirdParty/FreeRTOS/timers.c **** 
 369:ThirdParty/FreeRTOS/timers.c ****         /* Initialise the timer structure members using the function
 370:ThirdParty/FreeRTOS/timers.c ****          * parameters. */
 371:ThirdParty/FreeRTOS/timers.c ****         pxNewTimer->pcTimerName = pcTimerName;
 277              		.loc 1 371 33
 278 002e 7B6A     		ldr	r3, [r7, #36]
 279 0030 FA68     		ldr	r2, [r7, #12]
 280 0032 1A60     		str	r2, [r3]
 372:ThirdParty/FreeRTOS/timers.c ****         pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 281              		.loc 1 372 41
 282 0034 7B6A     		ldr	r3, [r7, #36]
 283 0036 BA68     		ldr	r2, [r7, #8]
 284 0038 9A61     		str	r2, [r3, #24]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 16


 373:ThirdParty/FreeRTOS/timers.c ****         pxNewTimer->pvTimerID = pvTimerID;
 285              		.loc 1 373 31
 286 003a 7B6A     		ldr	r3, [r7, #36]
 287 003c 3A68     		ldr	r2, [r7]
 288 003e DA61     		str	r2, [r3, #28]
 374:ThirdParty/FreeRTOS/timers.c ****         pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 289              		.loc 1 374 40
 290 0040 7B6A     		ldr	r3, [r7, #36]
 291 0042 3A6A     		ldr	r2, [r7, #32]
 292 0044 1A62     		str	r2, [r3, #32]
 375:ThirdParty/FreeRTOS/timers.c ****         vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 293              		.loc 1 375 9
 294 0046 7B6A     		ldr	r3, [r7, #36]
 295 0048 0433     		adds	r3, r3, #4
 296 004a 1846     		mov	r0, r3
 297 004c FFF7FEFF 		bl	vListInitialiseItem
 376:ThirdParty/FreeRTOS/timers.c **** 
 377:ThirdParty/FreeRTOS/timers.c ****         if( xAutoReload != pdFALSE )
 298              		.loc 1 377 11
 299 0050 7B68     		ldr	r3, [r7, #4]
 300 0052 002B     		cmp	r3, #0
 301 0054 08D0     		beq	.L15
 378:ThirdParty/FreeRTOS/timers.c ****         {
 379:ThirdParty/FreeRTOS/timers.c ****             pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 302              		.loc 1 379 34
 303 0056 7B6A     		ldr	r3, [r7, #36]
 304 0058 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 305 005c 43F00403 		orr	r3, r3, #4
 306 0060 DAB2     		uxtb	r2, r3
 307 0062 7B6A     		ldr	r3, [r7, #36]
 308 0064 83F82820 		strb	r2, [r3, #40]
 309              	.L15:
 380:ThirdParty/FreeRTOS/timers.c ****         }
 381:ThirdParty/FreeRTOS/timers.c **** 
 382:ThirdParty/FreeRTOS/timers.c ****         traceTIMER_CREATE( pxNewTimer );
 383:ThirdParty/FreeRTOS/timers.c ****     }
 310              		.loc 1 383 5
 311 0068 00BF     		nop
 312 006a 1837     		adds	r7, r7, #24
 313              	.LCFI13:
 314              		.cfi_def_cfa_offset 8
 315 006c BD46     		mov	sp, r7
 316              	.LCFI14:
 317              		.cfi_def_cfa_register 13
 318              		@ sp needed
 319 006e 80BD     		pop	{r7, pc}
 320              		.cfi_endproc
 321              	.LFE7:
 323              		.section	.text.xTimerGenericCommand,"ax",%progbits
 324              		.align	1
 325              		.global	xTimerGenericCommand
 326              		.syntax unified
 327              		.thumb
 328              		.thumb_func
 330              	xTimerGenericCommand:
 331              	.LFB8:
 384:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 17


 385:ThirdParty/FreeRTOS/timers.c **** 
 386:ThirdParty/FreeRTOS/timers.c ****     BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
 387:ThirdParty/FreeRTOS/timers.c ****                                      const BaseType_t xCommandID,
 388:ThirdParty/FreeRTOS/timers.c ****                                      const TickType_t xOptionalValue,
 389:ThirdParty/FreeRTOS/timers.c ****                                      BaseType_t * const pxHigherPriorityTaskWoken,
 390:ThirdParty/FreeRTOS/timers.c ****                                      const TickType_t xTicksToWait )
 391:ThirdParty/FreeRTOS/timers.c ****     {
 332              		.loc 1 391 5
 333              		.cfi_startproc
 334              		@ args = 4, pretend = 0, frame = 40
 335              		@ frame_needed = 1, uses_anonymous_args = 0
 336 0000 80B5     		push	{r7, lr}
 337              	.LCFI15:
 338              		.cfi_def_cfa_offset 8
 339              		.cfi_offset 7, -8
 340              		.cfi_offset 14, -4
 341 0002 8AB0     		sub	sp, sp, #40
 342              	.LCFI16:
 343              		.cfi_def_cfa_offset 48
 344 0004 00AF     		add	r7, sp, #0
 345              	.LCFI17:
 346              		.cfi_def_cfa_register 7
 347 0006 F860     		str	r0, [r7, #12]
 348 0008 B960     		str	r1, [r7, #8]
 349 000a 7A60     		str	r2, [r7, #4]
 350 000c 3B60     		str	r3, [r7]
 392:ThirdParty/FreeRTOS/timers.c ****         BaseType_t xReturn = pdFAIL;
 351              		.loc 1 392 20
 352 000e 0023     		movs	r3, #0
 353 0010 7B62     		str	r3, [r7, #36]
 393:ThirdParty/FreeRTOS/timers.c ****         DaemonTaskMessage_t xMessage;
 394:ThirdParty/FreeRTOS/timers.c **** 
 395:ThirdParty/FreeRTOS/timers.c ****         configASSERT( xTimer );
 354              		.loc 1 395 9
 355 0012 FB68     		ldr	r3, [r7, #12]
 356 0014 002B     		cmp	r3, #0
 357 0016 0AD1     		bne	.L17
 358              	.LBB32:
 359              	.LBB33:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 360              		.loc 2 198 9
 361              		.syntax unified
 362              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 363 0018 4FF05003 			mov r3, #80												
 364 001c 83F31188 		msr basepri, r3											
 365 0020 BFF36F8F 		isb														
 366 0024 BFF34F8F 		dsb														
 367              	
 368              	@ 0 "" 2
 369              		.thumb
 370              		.syntax unified
 371 0028 3B62     		str	r3, [r7, #32]
 372              		.loc 2 206 5
 373 002a 00BF     		nop
 374              	.L18:
 375              	.LBE33:
 376              	.LBE32:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 18


 377              		.loc 1 395 9 discriminator 1
 378 002c FEE7     		b	.L18
 379              	.L17:
 396:ThirdParty/FreeRTOS/timers.c **** 
 397:ThirdParty/FreeRTOS/timers.c ****         /* Send a message to the timer service task to perform a particular action
 398:ThirdParty/FreeRTOS/timers.c ****          * on a particular timer definition. */
 399:ThirdParty/FreeRTOS/timers.c ****         if( xTimerQueue != NULL )
 380              		.loc 1 399 25
 381 002e 1A4B     		ldr	r3, .L23
 382 0030 1B68     		ldr	r3, [r3]
 383              		.loc 1 399 11
 384 0032 002B     		cmp	r3, #0
 385 0034 2AD0     		beq	.L19
 400:ThirdParty/FreeRTOS/timers.c ****         {
 401:ThirdParty/FreeRTOS/timers.c ****             /* Send a command to the timer service task to start the xTimer timer. */
 402:ThirdParty/FreeRTOS/timers.c ****             xMessage.xMessageID = xCommandID;
 386              		.loc 1 402 33
 387 0036 BB68     		ldr	r3, [r7, #8]
 388 0038 7B61     		str	r3, [r7, #20]
 403:ThirdParty/FreeRTOS/timers.c ****             xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 389              		.loc 1 403 55
 390 003a 7B68     		ldr	r3, [r7, #4]
 391 003c BB61     		str	r3, [r7, #24]
 404:ThirdParty/FreeRTOS/timers.c ****             xMessage.u.xTimerParameters.pxTimer = xTimer;
 392              		.loc 1 404 49
 393 003e FB68     		ldr	r3, [r7, #12]
 394 0040 FB61     		str	r3, [r7, #28]
 405:ThirdParty/FreeRTOS/timers.c **** 
 406:ThirdParty/FreeRTOS/timers.c ****             if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 395              		.loc 1 406 15
 396 0042 BB68     		ldr	r3, [r7, #8]
 397 0044 052B     		cmp	r3, #5
 398 0046 18DC     		bgt	.L20
 407:ThirdParty/FreeRTOS/timers.c ****             {
 408:ThirdParty/FreeRTOS/timers.c ****                 if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 399              		.loc 1 408 21
 400 0048 FFF7FEFF 		bl	xTaskGetSchedulerState
 401 004c 0346     		mov	r3, r0
 402              		.loc 1 408 19
 403 004e 022B     		cmp	r3, #2
 404 0050 09D1     		bne	.L21
 409:ThirdParty/FreeRTOS/timers.c ****                 {
 410:ThirdParty/FreeRTOS/timers.c ****                     xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 405              		.loc 1 410 31
 406 0052 114B     		ldr	r3, .L23
 407 0054 1868     		ldr	r0, [r3]
 408 0056 07F11401 		add	r1, r7, #20
 409 005a 0023     		movs	r3, #0
 410 005c 3A6B     		ldr	r2, [r7, #48]
 411 005e FFF7FEFF 		bl	xQueueGenericSend
 412 0062 7862     		str	r0, [r7, #36]
 413 0064 12E0     		b	.L19
 414              	.L21:
 411:ThirdParty/FreeRTOS/timers.c ****                 }
 412:ThirdParty/FreeRTOS/timers.c ****                 else
 413:ThirdParty/FreeRTOS/timers.c ****                 {
 414:ThirdParty/FreeRTOS/timers.c ****                     xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 19


 415              		.loc 1 414 31
 416 0066 0C4B     		ldr	r3, .L23
 417 0068 1868     		ldr	r0, [r3]
 418 006a 07F11401 		add	r1, r7, #20
 419 006e 0023     		movs	r3, #0
 420 0070 0022     		movs	r2, #0
 421 0072 FFF7FEFF 		bl	xQueueGenericSend
 422 0076 7862     		str	r0, [r7, #36]
 423 0078 08E0     		b	.L19
 424              	.L20:
 415:ThirdParty/FreeRTOS/timers.c ****                 }
 416:ThirdParty/FreeRTOS/timers.c ****             }
 417:ThirdParty/FreeRTOS/timers.c ****             else
 418:ThirdParty/FreeRTOS/timers.c ****             {
 419:ThirdParty/FreeRTOS/timers.c ****                 xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoke
 425              		.loc 1 419 27
 426 007a 074B     		ldr	r3, .L23
 427 007c 1868     		ldr	r0, [r3]
 428 007e 07F11401 		add	r1, r7, #20
 429 0082 0023     		movs	r3, #0
 430 0084 3A68     		ldr	r2, [r7]
 431 0086 FFF7FEFF 		bl	xQueueGenericSendFromISR
 432 008a 7862     		str	r0, [r7, #36]
 433              	.L19:
 420:ThirdParty/FreeRTOS/timers.c ****             }
 421:ThirdParty/FreeRTOS/timers.c **** 
 422:ThirdParty/FreeRTOS/timers.c ****             traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 423:ThirdParty/FreeRTOS/timers.c ****         }
 424:ThirdParty/FreeRTOS/timers.c ****         else
 425:ThirdParty/FreeRTOS/timers.c ****         {
 426:ThirdParty/FreeRTOS/timers.c ****             mtCOVERAGE_TEST_MARKER();
 427:ThirdParty/FreeRTOS/timers.c ****         }
 428:ThirdParty/FreeRTOS/timers.c **** 
 429:ThirdParty/FreeRTOS/timers.c ****         return xReturn;
 434              		.loc 1 429 16
 435 008c 7B6A     		ldr	r3, [r7, #36]
 430:ThirdParty/FreeRTOS/timers.c ****     }
 436              		.loc 1 430 5
 437 008e 1846     		mov	r0, r3
 438 0090 2837     		adds	r7, r7, #40
 439              	.LCFI18:
 440              		.cfi_def_cfa_offset 8
 441 0092 BD46     		mov	sp, r7
 442              	.LCFI19:
 443              		.cfi_def_cfa_register 13
 444              		@ sp needed
 445 0094 80BD     		pop	{r7, pc}
 446              	.L24:
 447 0096 00BF     		.align	2
 448              	.L23:
 449 0098 00000000 		.word	xTimerQueue
 450              		.cfi_endproc
 451              	.LFE8:
 453              		.section	.text.xTimerGetTimerDaemonTaskHandle,"ax",%progbits
 454              		.align	1
 455              		.global	xTimerGetTimerDaemonTaskHandle
 456              		.syntax unified
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 20


 457              		.thumb
 458              		.thumb_func
 460              	xTimerGetTimerDaemonTaskHandle:
 461              	.LFB9:
 431:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 432:ThirdParty/FreeRTOS/timers.c **** 
 433:ThirdParty/FreeRTOS/timers.c ****     TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
 434:ThirdParty/FreeRTOS/timers.c ****     {
 462              		.loc 1 434 5
 463              		.cfi_startproc
 464              		@ args = 0, pretend = 0, frame = 8
 465              		@ frame_needed = 1, uses_anonymous_args = 0
 466              		@ link register save eliminated.
 467 0000 80B4     		push	{r7}
 468              	.LCFI20:
 469              		.cfi_def_cfa_offset 4
 470              		.cfi_offset 7, -4
 471 0002 83B0     		sub	sp, sp, #12
 472              	.LCFI21:
 473              		.cfi_def_cfa_offset 16
 474 0004 00AF     		add	r7, sp, #0
 475              	.LCFI22:
 476              		.cfi_def_cfa_register 7
 435:ThirdParty/FreeRTOS/timers.c ****         /* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 436:ThirdParty/FreeRTOS/timers.c ****          * started, then xTimerTaskHandle will be NULL. */
 437:ThirdParty/FreeRTOS/timers.c ****         configASSERT( ( xTimerTaskHandle != NULL ) );
 477              		.loc 1 437 9
 478 0006 0B4B     		ldr	r3, .L29
 479 0008 1B68     		ldr	r3, [r3]
 480 000a 002B     		cmp	r3, #0
 481 000c 0AD1     		bne	.L26
 482              	.LBB34:
 483              	.LBB35:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 484              		.loc 2 198 9
 485              		.syntax unified
 486              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 487 000e 4FF05003 			mov r3, #80												
 488 0012 83F31188 		msr basepri, r3											
 489 0016 BFF36F8F 		isb														
 490 001a BFF34F8F 		dsb														
 491              	
 492              	@ 0 "" 2
 493              		.thumb
 494              		.syntax unified
 495 001e 7B60     		str	r3, [r7, #4]
 496              		.loc 2 206 5
 497 0020 00BF     		nop
 498              	.L27:
 499              	.LBE35:
 500              	.LBE34:
 501              		.loc 1 437 9 discriminator 1
 502 0022 FEE7     		b	.L27
 503              	.L26:
 438:ThirdParty/FreeRTOS/timers.c ****         return xTimerTaskHandle;
 504              		.loc 1 438 16
 505 0024 034B     		ldr	r3, .L29
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 21


 506 0026 1B68     		ldr	r3, [r3]
 439:ThirdParty/FreeRTOS/timers.c ****     }
 507              		.loc 1 439 5
 508 0028 1846     		mov	r0, r3
 509 002a 0C37     		adds	r7, r7, #12
 510              	.LCFI23:
 511              		.cfi_def_cfa_offset 4
 512 002c BD46     		mov	sp, r7
 513              	.LCFI24:
 514              		.cfi_def_cfa_register 13
 515              		@ sp needed
 516 002e 5DF8047B 		ldr	r7, [sp], #4
 517              	.LCFI25:
 518              		.cfi_restore 7
 519              		.cfi_def_cfa_offset 0
 520 0032 7047     		bx	lr
 521              	.L30:
 522              		.align	2
 523              	.L29:
 524 0034 00000000 		.word	xTimerTaskHandle
 525              		.cfi_endproc
 526              	.LFE9:
 528              		.section	.text.xTimerGetPeriod,"ax",%progbits
 529              		.align	1
 530              		.global	xTimerGetPeriod
 531              		.syntax unified
 532              		.thumb
 533              		.thumb_func
 535              	xTimerGetPeriod:
 536              	.LFB10:
 440:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 441:ThirdParty/FreeRTOS/timers.c **** 
 442:ThirdParty/FreeRTOS/timers.c ****     TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
 443:ThirdParty/FreeRTOS/timers.c ****     {
 537              		.loc 1 443 5
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 16
 540              		@ frame_needed = 1, uses_anonymous_args = 0
 541              		@ link register save eliminated.
 542 0000 80B4     		push	{r7}
 543              	.LCFI26:
 544              		.cfi_def_cfa_offset 4
 545              		.cfi_offset 7, -4
 546 0002 85B0     		sub	sp, sp, #20
 547              	.LCFI27:
 548              		.cfi_def_cfa_offset 24
 549 0004 00AF     		add	r7, sp, #0
 550              	.LCFI28:
 551              		.cfi_def_cfa_register 7
 552 0006 7860     		str	r0, [r7, #4]
 444:ThirdParty/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 553              		.loc 1 444 19
 554 0008 7B68     		ldr	r3, [r7, #4]
 555 000a FB60     		str	r3, [r7, #12]
 445:ThirdParty/FreeRTOS/timers.c **** 
 446:ThirdParty/FreeRTOS/timers.c ****         configASSERT( xTimer );
 556              		.loc 1 446 9
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 22


 557 000c 7B68     		ldr	r3, [r7, #4]
 558 000e 002B     		cmp	r3, #0
 559 0010 0AD1     		bne	.L32
 560              	.LBB36:
 561              	.LBB37:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 562              		.loc 2 198 9
 563              		.syntax unified
 564              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 565 0012 4FF05003 			mov r3, #80												
 566 0016 83F31188 		msr basepri, r3											
 567 001a BFF36F8F 		isb														
 568 001e BFF34F8F 		dsb														
 569              	
 570              	@ 0 "" 2
 571              		.thumb
 572              		.syntax unified
 573 0022 BB60     		str	r3, [r7, #8]
 574              		.loc 2 206 5
 575 0024 00BF     		nop
 576              	.L33:
 577              	.LBE37:
 578              	.LBE36:
 579              		.loc 1 446 9 discriminator 1
 580 0026 FEE7     		b	.L33
 581              	.L32:
 447:ThirdParty/FreeRTOS/timers.c ****         return pxTimer->xTimerPeriodInTicks;
 582              		.loc 1 447 23
 583 0028 FB68     		ldr	r3, [r7, #12]
 584 002a 9B69     		ldr	r3, [r3, #24]
 448:ThirdParty/FreeRTOS/timers.c ****     }
 585              		.loc 1 448 5
 586 002c 1846     		mov	r0, r3
 587 002e 1437     		adds	r7, r7, #20
 588              	.LCFI29:
 589              		.cfi_def_cfa_offset 4
 590 0030 BD46     		mov	sp, r7
 591              	.LCFI30:
 592              		.cfi_def_cfa_register 13
 593              		@ sp needed
 594 0032 5DF8047B 		ldr	r7, [sp], #4
 595              	.LCFI31:
 596              		.cfi_restore 7
 597              		.cfi_def_cfa_offset 0
 598 0036 7047     		bx	lr
 599              		.cfi_endproc
 600              	.LFE10:
 602              		.section	.text.vTimerSetReloadMode,"ax",%progbits
 603              		.align	1
 604              		.global	vTimerSetReloadMode
 605              		.syntax unified
 606              		.thumb
 607              		.thumb_func
 609              	vTimerSetReloadMode:
 610              	.LFB11:
 449:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 450:ThirdParty/FreeRTOS/timers.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 23


 451:ThirdParty/FreeRTOS/timers.c ****     void vTimerSetReloadMode( TimerHandle_t xTimer,
 452:ThirdParty/FreeRTOS/timers.c ****                               const BaseType_t xAutoReload )
 453:ThirdParty/FreeRTOS/timers.c ****     {
 611              		.loc 1 453 5
 612              		.cfi_startproc
 613              		@ args = 0, pretend = 0, frame = 16
 614              		@ frame_needed = 1, uses_anonymous_args = 0
 615 0000 80B5     		push	{r7, lr}
 616              	.LCFI32:
 617              		.cfi_def_cfa_offset 8
 618              		.cfi_offset 7, -8
 619              		.cfi_offset 14, -4
 620 0002 84B0     		sub	sp, sp, #16
 621              	.LCFI33:
 622              		.cfi_def_cfa_offset 24
 623 0004 00AF     		add	r7, sp, #0
 624              	.LCFI34:
 625              		.cfi_def_cfa_register 7
 626 0006 7860     		str	r0, [r7, #4]
 627 0008 3960     		str	r1, [r7]
 454:ThirdParty/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 628              		.loc 1 454 19
 629 000a 7B68     		ldr	r3, [r7, #4]
 630 000c FB60     		str	r3, [r7, #12]
 455:ThirdParty/FreeRTOS/timers.c **** 
 456:ThirdParty/FreeRTOS/timers.c ****         configASSERT( xTimer );
 631              		.loc 1 456 9
 632 000e 7B68     		ldr	r3, [r7, #4]
 633 0010 002B     		cmp	r3, #0
 634 0012 0AD1     		bne	.L36
 635              	.LBB38:
 636              	.LBB39:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 637              		.loc 2 198 9
 638              		.syntax unified
 639              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 640 0014 4FF05003 			mov r3, #80												
 641 0018 83F31188 		msr basepri, r3											
 642 001c BFF36F8F 		isb														
 643 0020 BFF34F8F 		dsb														
 644              	
 645              	@ 0 "" 2
 646              		.thumb
 647              		.syntax unified
 648 0024 BB60     		str	r3, [r7, #8]
 649              		.loc 2 206 5
 650 0026 00BF     		nop
 651              	.L37:
 652              	.LBE39:
 653              	.LBE38:
 654              		.loc 1 456 9 discriminator 1
 655 0028 FEE7     		b	.L37
 656              	.L36:
 457:ThirdParty/FreeRTOS/timers.c ****         taskENTER_CRITICAL();
 657              		.loc 1 457 9
 658 002a FFF7FEFF 		bl	vPortEnterCritical
 458:ThirdParty/FreeRTOS/timers.c ****         {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 24


 459:ThirdParty/FreeRTOS/timers.c ****             if( xAutoReload != pdFALSE )
 659              		.loc 1 459 15
 660 002e 3B68     		ldr	r3, [r7]
 661 0030 002B     		cmp	r3, #0
 662 0032 09D0     		beq	.L38
 460:ThirdParty/FreeRTOS/timers.c ****             {
 461:ThirdParty/FreeRTOS/timers.c ****                 pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 663              		.loc 1 461 35
 664 0034 FB68     		ldr	r3, [r7, #12]
 665 0036 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 666 003a 43F00403 		orr	r3, r3, #4
 667 003e DAB2     		uxtb	r2, r3
 668 0040 FB68     		ldr	r3, [r7, #12]
 669 0042 83F82820 		strb	r2, [r3, #40]
 670 0046 08E0     		b	.L39
 671              	.L38:
 462:ThirdParty/FreeRTOS/timers.c ****             }
 463:ThirdParty/FreeRTOS/timers.c ****             else
 464:ThirdParty/FreeRTOS/timers.c ****             {
 465:ThirdParty/FreeRTOS/timers.c ****                 pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
 672              		.loc 1 465 35
 673 0048 FB68     		ldr	r3, [r7, #12]
 674 004a 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 675 004e 23F00403 		bic	r3, r3, #4
 676 0052 DAB2     		uxtb	r2, r3
 677 0054 FB68     		ldr	r3, [r7, #12]
 678 0056 83F82820 		strb	r2, [r3, #40]
 679              	.L39:
 466:ThirdParty/FreeRTOS/timers.c ****             }
 467:ThirdParty/FreeRTOS/timers.c ****         }
 468:ThirdParty/FreeRTOS/timers.c ****         taskEXIT_CRITICAL();
 680              		.loc 1 468 9
 681 005a FFF7FEFF 		bl	vPortExitCritical
 469:ThirdParty/FreeRTOS/timers.c ****     }
 682              		.loc 1 469 5
 683 005e 00BF     		nop
 684 0060 1037     		adds	r7, r7, #16
 685              	.LCFI35:
 686              		.cfi_def_cfa_offset 8
 687 0062 BD46     		mov	sp, r7
 688              	.LCFI36:
 689              		.cfi_def_cfa_register 13
 690              		@ sp needed
 691 0064 80BD     		pop	{r7, pc}
 692              		.cfi_endproc
 693              	.LFE11:
 695              		.section	.text.xTimerGetReloadMode,"ax",%progbits
 696              		.align	1
 697              		.global	xTimerGetReloadMode
 698              		.syntax unified
 699              		.thumb
 700              		.thumb_func
 702              	xTimerGetReloadMode:
 703              	.LFB12:
 470:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 471:ThirdParty/FreeRTOS/timers.c **** 
 472:ThirdParty/FreeRTOS/timers.c ****     BaseType_t xTimerGetReloadMode( TimerHandle_t xTimer )
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 25


 473:ThirdParty/FreeRTOS/timers.c ****     {
 704              		.loc 1 473 5
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 24
 707              		@ frame_needed = 1, uses_anonymous_args = 0
 708 0000 80B5     		push	{r7, lr}
 709              	.LCFI37:
 710              		.cfi_def_cfa_offset 8
 711              		.cfi_offset 7, -8
 712              		.cfi_offset 14, -4
 713 0002 86B0     		sub	sp, sp, #24
 714              	.LCFI38:
 715              		.cfi_def_cfa_offset 32
 716 0004 00AF     		add	r7, sp, #0
 717              	.LCFI39:
 718              		.cfi_def_cfa_register 7
 719 0006 7860     		str	r0, [r7, #4]
 474:ThirdParty/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 720              		.loc 1 474 19
 721 0008 7B68     		ldr	r3, [r7, #4]
 722 000a 3B61     		str	r3, [r7, #16]
 475:ThirdParty/FreeRTOS/timers.c ****         BaseType_t xReturn;
 476:ThirdParty/FreeRTOS/timers.c **** 
 477:ThirdParty/FreeRTOS/timers.c ****         configASSERT( xTimer );
 723              		.loc 1 477 9
 724 000c 7B68     		ldr	r3, [r7, #4]
 725 000e 002B     		cmp	r3, #0
 726 0010 0AD1     		bne	.L41
 727              	.LBB40:
 728              	.LBB41:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 729              		.loc 2 198 9
 730              		.syntax unified
 731              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 732 0012 4FF05003 			mov r3, #80												
 733 0016 83F31188 		msr basepri, r3											
 734 001a BFF36F8F 		isb														
 735 001e BFF34F8F 		dsb														
 736              	
 737              	@ 0 "" 2
 738              		.thumb
 739              		.syntax unified
 740 0022 FB60     		str	r3, [r7, #12]
 741              		.loc 2 206 5
 742 0024 00BF     		nop
 743              	.L42:
 744              	.LBE41:
 745              	.LBE40:
 746              		.loc 1 477 9 discriminator 1
 747 0026 FEE7     		b	.L42
 748              	.L41:
 478:ThirdParty/FreeRTOS/timers.c ****         taskENTER_CRITICAL();
 749              		.loc 1 478 9
 750 0028 FFF7FEFF 		bl	vPortEnterCritical
 479:ThirdParty/FreeRTOS/timers.c ****         {
 480:ThirdParty/FreeRTOS/timers.c ****             if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 751              		.loc 1 480 26
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 26


 752 002c 3B69     		ldr	r3, [r7, #16]
 753 002e 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 754              		.loc 1 480 37
 755 0032 03F00403 		and	r3, r3, #4
 756              		.loc 1 480 15
 757 0036 002B     		cmp	r3, #0
 758 0038 02D1     		bne	.L43
 481:ThirdParty/FreeRTOS/timers.c ****             {
 482:ThirdParty/FreeRTOS/timers.c ****                 /* Not an auto-reload timer. */
 483:ThirdParty/FreeRTOS/timers.c ****                 xReturn = pdFALSE;
 759              		.loc 1 483 25
 760 003a 0023     		movs	r3, #0
 761 003c 7B61     		str	r3, [r7, #20]
 762 003e 01E0     		b	.L44
 763              	.L43:
 484:ThirdParty/FreeRTOS/timers.c ****             }
 485:ThirdParty/FreeRTOS/timers.c ****             else
 486:ThirdParty/FreeRTOS/timers.c ****             {
 487:ThirdParty/FreeRTOS/timers.c ****                 /* Is an auto-reload timer. */
 488:ThirdParty/FreeRTOS/timers.c ****                 xReturn = pdTRUE;
 764              		.loc 1 488 25
 765 0040 0123     		movs	r3, #1
 766 0042 7B61     		str	r3, [r7, #20]
 767              	.L44:
 489:ThirdParty/FreeRTOS/timers.c ****             }
 490:ThirdParty/FreeRTOS/timers.c ****         }
 491:ThirdParty/FreeRTOS/timers.c ****         taskEXIT_CRITICAL();
 768              		.loc 1 491 9
 769 0044 FFF7FEFF 		bl	vPortExitCritical
 492:ThirdParty/FreeRTOS/timers.c **** 
 493:ThirdParty/FreeRTOS/timers.c ****         return xReturn;
 770              		.loc 1 493 16
 771 0048 7B69     		ldr	r3, [r7, #20]
 494:ThirdParty/FreeRTOS/timers.c ****     }
 772              		.loc 1 494 5
 773 004a 1846     		mov	r0, r3
 774 004c 1837     		adds	r7, r7, #24
 775              	.LCFI40:
 776              		.cfi_def_cfa_offset 8
 777 004e BD46     		mov	sp, r7
 778              	.LCFI41:
 779              		.cfi_def_cfa_register 13
 780              		@ sp needed
 781 0050 80BD     		pop	{r7, pc}
 782              		.cfi_endproc
 783              	.LFE12:
 785              		.section	.text.uxTimerGetReloadMode,"ax",%progbits
 786              		.align	1
 787              		.global	uxTimerGetReloadMode
 788              		.syntax unified
 789              		.thumb
 790              		.thumb_func
 792              	uxTimerGetReloadMode:
 793              	.LFB13:
 495:ThirdParty/FreeRTOS/timers.c **** 
 496:ThirdParty/FreeRTOS/timers.c ****     UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer )
 497:ThirdParty/FreeRTOS/timers.c ****     {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 27


 794              		.loc 1 497 5
 795              		.cfi_startproc
 796              		@ args = 0, pretend = 0, frame = 8
 797              		@ frame_needed = 1, uses_anonymous_args = 0
 798 0000 80B5     		push	{r7, lr}
 799              	.LCFI42:
 800              		.cfi_def_cfa_offset 8
 801              		.cfi_offset 7, -8
 802              		.cfi_offset 14, -4
 803 0002 82B0     		sub	sp, sp, #8
 804              	.LCFI43:
 805              		.cfi_def_cfa_offset 16
 806 0004 00AF     		add	r7, sp, #0
 807              	.LCFI44:
 808              		.cfi_def_cfa_register 7
 809 0006 7860     		str	r0, [r7, #4]
 498:ThirdParty/FreeRTOS/timers.c ****         return ( UBaseType_t ) xTimerGetReloadMode( xTimer );
 810              		.loc 1 498 32
 811 0008 7868     		ldr	r0, [r7, #4]
 812 000a FFF7FEFF 		bl	xTimerGetReloadMode
 813 000e 0346     		mov	r3, r0
 499:ThirdParty/FreeRTOS/timers.c ****     }
 814              		.loc 1 499 5
 815 0010 1846     		mov	r0, r3
 816 0012 0837     		adds	r7, r7, #8
 817              	.LCFI45:
 818              		.cfi_def_cfa_offset 8
 819 0014 BD46     		mov	sp, r7
 820              	.LCFI46:
 821              		.cfi_def_cfa_register 13
 822              		@ sp needed
 823 0016 80BD     		pop	{r7, pc}
 824              		.cfi_endproc
 825              	.LFE13:
 827              		.section	.text.xTimerGetExpiryTime,"ax",%progbits
 828              		.align	1
 829              		.global	xTimerGetExpiryTime
 830              		.syntax unified
 831              		.thumb
 832              		.thumb_func
 834              	xTimerGetExpiryTime:
 835              	.LFB14:
 500:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 501:ThirdParty/FreeRTOS/timers.c **** 
 502:ThirdParty/FreeRTOS/timers.c ****     TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
 503:ThirdParty/FreeRTOS/timers.c ****     {
 836              		.loc 1 503 5
 837              		.cfi_startproc
 838              		@ args = 0, pretend = 0, frame = 24
 839              		@ frame_needed = 1, uses_anonymous_args = 0
 840              		@ link register save eliminated.
 841 0000 80B4     		push	{r7}
 842              	.LCFI47:
 843              		.cfi_def_cfa_offset 4
 844              		.cfi_offset 7, -4
 845 0002 87B0     		sub	sp, sp, #28
 846              	.LCFI48:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 28


 847              		.cfi_def_cfa_offset 32
 848 0004 00AF     		add	r7, sp, #0
 849              	.LCFI49:
 850              		.cfi_def_cfa_register 7
 851 0006 7860     		str	r0, [r7, #4]
 504:ThirdParty/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 852              		.loc 1 504 19
 853 0008 7B68     		ldr	r3, [r7, #4]
 854 000a 7B61     		str	r3, [r7, #20]
 505:ThirdParty/FreeRTOS/timers.c ****         TickType_t xReturn;
 506:ThirdParty/FreeRTOS/timers.c **** 
 507:ThirdParty/FreeRTOS/timers.c ****         configASSERT( xTimer );
 855              		.loc 1 507 9
 856 000c 7B68     		ldr	r3, [r7, #4]
 857 000e 002B     		cmp	r3, #0
 858 0010 0AD1     		bne	.L49
 859              	.LBB42:
 860              	.LBB43:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 861              		.loc 2 198 9
 862              		.syntax unified
 863              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 864 0012 4FF05003 			mov r3, #80												
 865 0016 83F31188 		msr basepri, r3											
 866 001a BFF36F8F 		isb														
 867 001e BFF34F8F 		dsb														
 868              	
 869              	@ 0 "" 2
 870              		.thumb
 871              		.syntax unified
 872 0022 FB60     		str	r3, [r7, #12]
 873              		.loc 2 206 5
 874 0024 00BF     		nop
 875              	.L50:
 876              	.LBE43:
 877              	.LBE42:
 878              		.loc 1 507 9 discriminator 1
 879 0026 FEE7     		b	.L50
 880              	.L49:
 508:ThirdParty/FreeRTOS/timers.c ****         xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 881              		.loc 1 508 17
 882 0028 7B69     		ldr	r3, [r7, #20]
 883 002a 5B68     		ldr	r3, [r3, #4]
 884 002c 3B61     		str	r3, [r7, #16]
 509:ThirdParty/FreeRTOS/timers.c ****         return xReturn;
 885              		.loc 1 509 16
 886 002e 3B69     		ldr	r3, [r7, #16]
 510:ThirdParty/FreeRTOS/timers.c ****     }
 887              		.loc 1 510 5
 888 0030 1846     		mov	r0, r3
 889 0032 1C37     		adds	r7, r7, #28
 890              	.LCFI50:
 891              		.cfi_def_cfa_offset 4
 892 0034 BD46     		mov	sp, r7
 893              	.LCFI51:
 894              		.cfi_def_cfa_register 13
 895              		@ sp needed
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 29


 896 0036 5DF8047B 		ldr	r7, [sp], #4
 897              	.LCFI52:
 898              		.cfi_restore 7
 899              		.cfi_def_cfa_offset 0
 900 003a 7047     		bx	lr
 901              		.cfi_endproc
 902              	.LFE14:
 904              		.section	.text.pcTimerGetName,"ax",%progbits
 905              		.align	1
 906              		.global	pcTimerGetName
 907              		.syntax unified
 908              		.thumb
 909              		.thumb_func
 911              	pcTimerGetName:
 912              	.LFB15:
 511:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 512:ThirdParty/FreeRTOS/timers.c **** 
 513:ThirdParty/FreeRTOS/timers.c ****     const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are all
 514:ThirdParty/FreeRTOS/timers.c ****     {
 913              		.loc 1 514 5
 914              		.cfi_startproc
 915              		@ args = 0, pretend = 0, frame = 16
 916              		@ frame_needed = 1, uses_anonymous_args = 0
 917              		@ link register save eliminated.
 918 0000 80B4     		push	{r7}
 919              	.LCFI53:
 920              		.cfi_def_cfa_offset 4
 921              		.cfi_offset 7, -4
 922 0002 85B0     		sub	sp, sp, #20
 923              	.LCFI54:
 924              		.cfi_def_cfa_offset 24
 925 0004 00AF     		add	r7, sp, #0
 926              	.LCFI55:
 927              		.cfi_def_cfa_register 7
 928 0006 7860     		str	r0, [r7, #4]
 515:ThirdParty/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 929              		.loc 1 515 19
 930 0008 7B68     		ldr	r3, [r7, #4]
 931 000a FB60     		str	r3, [r7, #12]
 516:ThirdParty/FreeRTOS/timers.c **** 
 517:ThirdParty/FreeRTOS/timers.c ****         configASSERT( xTimer );
 932              		.loc 1 517 9
 933 000c 7B68     		ldr	r3, [r7, #4]
 934 000e 002B     		cmp	r3, #0
 935 0010 0AD1     		bne	.L53
 936              	.LBB44:
 937              	.LBB45:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 938              		.loc 2 198 9
 939              		.syntax unified
 940              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 941 0012 4FF05003 			mov r3, #80												
 942 0016 83F31188 		msr basepri, r3											
 943 001a BFF36F8F 		isb														
 944 001e BFF34F8F 		dsb														
 945              	
 946              	@ 0 "" 2
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 30


 947              		.thumb
 948              		.syntax unified
 949 0022 BB60     		str	r3, [r7, #8]
 950              		.loc 2 206 5
 951 0024 00BF     		nop
 952              	.L54:
 953              	.LBE45:
 954              	.LBE44:
 955              		.loc 1 517 9 discriminator 1
 956 0026 FEE7     		b	.L54
 957              	.L53:
 518:ThirdParty/FreeRTOS/timers.c ****         return pxTimer->pcTimerName;
 958              		.loc 1 518 23
 959 0028 FB68     		ldr	r3, [r7, #12]
 960 002a 1B68     		ldr	r3, [r3]
 519:ThirdParty/FreeRTOS/timers.c ****     }
 961              		.loc 1 519 5
 962 002c 1846     		mov	r0, r3
 963 002e 1437     		adds	r7, r7, #20
 964              	.LCFI56:
 965              		.cfi_def_cfa_offset 4
 966 0030 BD46     		mov	sp, r7
 967              	.LCFI57:
 968              		.cfi_def_cfa_register 13
 969              		@ sp needed
 970 0032 5DF8047B 		ldr	r7, [sp], #4
 971              	.LCFI58:
 972              		.cfi_restore 7
 973              		.cfi_def_cfa_offset 0
 974 0036 7047     		bx	lr
 975              		.cfi_endproc
 976              	.LFE15:
 978              		.section	.text.prvReloadTimer,"ax",%progbits
 979              		.align	1
 980              		.syntax unified
 981              		.thumb
 982              		.thumb_func
 984              	prvReloadTimer:
 985              	.LFB16:
 520:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 521:ThirdParty/FreeRTOS/timers.c **** 
 522:ThirdParty/FreeRTOS/timers.c ****     static void prvReloadTimer( Timer_t * const pxTimer,
 523:ThirdParty/FreeRTOS/timers.c ****                                 TickType_t xExpiredTime,
 524:ThirdParty/FreeRTOS/timers.c ****                                 const TickType_t xTimeNow )
 525:ThirdParty/FreeRTOS/timers.c ****     {
 986              		.loc 1 525 5
 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 16
 989              		@ frame_needed = 1, uses_anonymous_args = 0
 990 0000 80B5     		push	{r7, lr}
 991              	.LCFI59:
 992              		.cfi_def_cfa_offset 8
 993              		.cfi_offset 7, -8
 994              		.cfi_offset 14, -4
 995 0002 84B0     		sub	sp, sp, #16
 996              	.LCFI60:
 997              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 31


 998 0004 00AF     		add	r7, sp, #0
 999              	.LCFI61:
 1000              		.cfi_def_cfa_register 7
 1001 0006 F860     		str	r0, [r7, #12]
 1002 0008 B960     		str	r1, [r7, #8]
 1003 000a 7A60     		str	r2, [r7, #4]
 526:ThirdParty/FreeRTOS/timers.c ****         /* Insert the timer into the appropriate list for the next expiry time.
 527:ThirdParty/FreeRTOS/timers.c ****          * If the next expiry time has already passed, advance the expiry time,
 528:ThirdParty/FreeRTOS/timers.c ****          * call the callback function, and try again. */
 529:ThirdParty/FreeRTOS/timers.c ****         while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks )
 1004              		.loc 1 529 14
 1005 000c 08E0     		b	.L57
 1006              	.L58:
 530:ThirdParty/FreeRTOS/timers.c ****         {
 531:ThirdParty/FreeRTOS/timers.c ****             /* Advance the expiry time. */
 532:ThirdParty/FreeRTOS/timers.c ****             xExpiredTime += pxTimer->xTimerPeriodInTicks;
 1007              		.loc 1 532 36
 1008 000e FB68     		ldr	r3, [r7, #12]
 1009 0010 9B69     		ldr	r3, [r3, #24]
 1010              		.loc 1 532 26
 1011 0012 BA68     		ldr	r2, [r7, #8]
 1012 0014 1344     		add	r3, r3, r2
 1013 0016 BB60     		str	r3, [r7, #8]
 533:ThirdParty/FreeRTOS/timers.c **** 
 534:ThirdParty/FreeRTOS/timers.c ****             /* Call the timer callback. */
 535:ThirdParty/FreeRTOS/timers.c ****             traceTIMER_EXPIRED( pxTimer );
 536:ThirdParty/FreeRTOS/timers.c ****             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 1014              		.loc 1 536 20
 1015 0018 FB68     		ldr	r3, [r7, #12]
 1016 001a 1B6A     		ldr	r3, [r3, #32]
 1017              		.loc 1 536 13
 1018 001c F868     		ldr	r0, [r7, #12]
 1019 001e 9847     		blx	r3
 1020              	.LVL0:
 1021              	.L57:
 529:ThirdParty/FreeRTOS/timers.c ****         {
 1022              		.loc 1 529 77
 1023 0020 FB68     		ldr	r3, [r7, #12]
 1024 0022 9A69     		ldr	r2, [r3, #24]
 529:ThirdParty/FreeRTOS/timers.c ****         {
 1025              		.loc 1 529 16
 1026 0024 BB68     		ldr	r3, [r7, #8]
 1027 0026 D118     		adds	r1, r2, r3
 1028 0028 BB68     		ldr	r3, [r7, #8]
 1029 002a 7A68     		ldr	r2, [r7, #4]
 1030 002c F868     		ldr	r0, [r7, #12]
 1031 002e FFF7FEFF 		bl	prvInsertTimerInActiveList
 1032 0032 0346     		mov	r3, r0
 529:ThirdParty/FreeRTOS/timers.c ****         {
 1033              		.loc 1 529 14
 1034 0034 002B     		cmp	r3, #0
 1035 0036 EAD1     		bne	.L58
 537:ThirdParty/FreeRTOS/timers.c ****         }
 538:ThirdParty/FreeRTOS/timers.c ****     }
 1036              		.loc 1 538 5
 1037 0038 00BF     		nop
 1038 003a 00BF     		nop
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 32


 1039 003c 1037     		adds	r7, r7, #16
 1040              	.LCFI62:
 1041              		.cfi_def_cfa_offset 8
 1042 003e BD46     		mov	sp, r7
 1043              	.LCFI63:
 1044              		.cfi_def_cfa_register 13
 1045              		@ sp needed
 1046 0040 80BD     		pop	{r7, pc}
 1047              		.cfi_endproc
 1048              	.LFE16:
 1050              		.section	.text.prvProcessExpiredTimer,"ax",%progbits
 1051              		.align	1
 1052              		.syntax unified
 1053              		.thumb
 1054              		.thumb_func
 1056              	prvProcessExpiredTimer:
 1057              	.LFB17:
 539:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 540:ThirdParty/FreeRTOS/timers.c **** 
 541:ThirdParty/FreeRTOS/timers.c ****     static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
 542:ThirdParty/FreeRTOS/timers.c ****                                         const TickType_t xTimeNow )
 543:ThirdParty/FreeRTOS/timers.c ****     {
 1058              		.loc 1 543 5
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 16
 1061              		@ frame_needed = 1, uses_anonymous_args = 0
 1062 0000 80B5     		push	{r7, lr}
 1063              	.LCFI64:
 1064              		.cfi_def_cfa_offset 8
 1065              		.cfi_offset 7, -8
 1066              		.cfi_offset 14, -4
 1067 0002 84B0     		sub	sp, sp, #16
 1068              	.LCFI65:
 1069              		.cfi_def_cfa_offset 24
 1070 0004 00AF     		add	r7, sp, #0
 1071              	.LCFI66:
 1072              		.cfi_def_cfa_register 7
 1073 0006 7860     		str	r0, [r7, #4]
 1074 0008 3960     		str	r1, [r7]
 544:ThirdParty/FreeRTOS/timers.c ****         Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); 
 1075              		.loc 1 544 49
 1076 000a 144B     		ldr	r3, .L62
 1077 000c 1B68     		ldr	r3, [r3]
 1078 000e DB68     		ldr	r3, [r3, #12]
 1079              		.loc 1 544 25
 1080 0010 DB68     		ldr	r3, [r3, #12]
 1081 0012 FB60     		str	r3, [r7, #12]
 545:ThirdParty/FreeRTOS/timers.c **** 
 546:ThirdParty/FreeRTOS/timers.c ****         /* Remove the timer from the list of active timers.  A check has already
 547:ThirdParty/FreeRTOS/timers.c ****          * been performed to ensure the list is not empty. */
 548:ThirdParty/FreeRTOS/timers.c **** 
 549:ThirdParty/FreeRTOS/timers.c ****         ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 1082              		.loc 1 549 18
 1083 0014 FB68     		ldr	r3, [r7, #12]
 1084 0016 0433     		adds	r3, r3, #4
 1085 0018 1846     		mov	r0, r3
 1086 001a FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 33


 550:ThirdParty/FreeRTOS/timers.c **** 
 551:ThirdParty/FreeRTOS/timers.c ****         /* If the timer is an auto-reload timer then calculate the next
 552:ThirdParty/FreeRTOS/timers.c ****          * expiry time and re-insert the timer in the list of active timers. */
 553:ThirdParty/FreeRTOS/timers.c ****         if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 1087              		.loc 1 553 22
 1088 001e FB68     		ldr	r3, [r7, #12]
 1089 0020 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1090              		.loc 1 553 33
 1091 0024 03F00403 		and	r3, r3, #4
 1092              		.loc 1 553 11
 1093 0028 002B     		cmp	r3, #0
 1094 002a 05D0     		beq	.L60
 554:ThirdParty/FreeRTOS/timers.c ****         {
 555:ThirdParty/FreeRTOS/timers.c ****             prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 1095              		.loc 1 555 13
 1096 002c 3A68     		ldr	r2, [r7]
 1097 002e 7968     		ldr	r1, [r7, #4]
 1098 0030 F868     		ldr	r0, [r7, #12]
 1099 0032 FFF7FEFF 		bl	prvReloadTimer
 1100 0036 08E0     		b	.L61
 1101              	.L60:
 556:ThirdParty/FreeRTOS/timers.c ****         }
 557:ThirdParty/FreeRTOS/timers.c ****         else
 558:ThirdParty/FreeRTOS/timers.c ****         {
 559:ThirdParty/FreeRTOS/timers.c ****             pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 1102              		.loc 1 559 31
 1103 0038 FB68     		ldr	r3, [r7, #12]
 1104 003a 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1105 003e 23F00103 		bic	r3, r3, #1
 1106 0042 DAB2     		uxtb	r2, r3
 1107 0044 FB68     		ldr	r3, [r7, #12]
 1108 0046 83F82820 		strb	r2, [r3, #40]
 1109              	.L61:
 560:ThirdParty/FreeRTOS/timers.c ****         }
 561:ThirdParty/FreeRTOS/timers.c **** 
 562:ThirdParty/FreeRTOS/timers.c ****         /* Call the timer callback. */
 563:ThirdParty/FreeRTOS/timers.c ****         traceTIMER_EXPIRED( pxTimer );
 564:ThirdParty/FreeRTOS/timers.c ****         pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 1110              		.loc 1 564 16
 1111 004a FB68     		ldr	r3, [r7, #12]
 1112 004c 1B6A     		ldr	r3, [r3, #32]
 1113              		.loc 1 564 9
 1114 004e F868     		ldr	r0, [r7, #12]
 1115 0050 9847     		blx	r3
 1116              	.LVL1:
 565:ThirdParty/FreeRTOS/timers.c ****     }
 1117              		.loc 1 565 5
 1118 0052 00BF     		nop
 1119 0054 1037     		adds	r7, r7, #16
 1120              	.LCFI67:
 1121              		.cfi_def_cfa_offset 8
 1122 0056 BD46     		mov	sp, r7
 1123              	.LCFI68:
 1124              		.cfi_def_cfa_register 13
 1125              		@ sp needed
 1126 0058 80BD     		pop	{r7, pc}
 1127              	.L63:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 34


 1128 005a 00BF     		.align	2
 1129              	.L62:
 1130 005c 00000000 		.word	pxCurrentTimerList
 1131              		.cfi_endproc
 1132              	.LFE17:
 1134              		.section	.text.prvTimerTask,"ax",%progbits
 1135              		.align	1
 1136              		.syntax unified
 1137              		.thumb
 1138              		.thumb_func
 1140              	prvTimerTask:
 1141              	.LFB18:
 566:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 567:ThirdParty/FreeRTOS/timers.c **** 
 568:ThirdParty/FreeRTOS/timers.c ****     static portTASK_FUNCTION( prvTimerTask, pvParameters )
 569:ThirdParty/FreeRTOS/timers.c ****     {
 1142              		.loc 1 569 5
 1143              		.cfi_startproc
 1144              		@ args = 0, pretend = 0, frame = 16
 1145              		@ frame_needed = 1, uses_anonymous_args = 0
 1146 0000 80B5     		push	{r7, lr}
 1147              	.LCFI69:
 1148              		.cfi_def_cfa_offset 8
 1149              		.cfi_offset 7, -8
 1150              		.cfi_offset 14, -4
 1151 0002 84B0     		sub	sp, sp, #16
 1152              	.LCFI70:
 1153              		.cfi_def_cfa_offset 24
 1154 0004 00AF     		add	r7, sp, #0
 1155              	.LCFI71:
 1156              		.cfi_def_cfa_register 7
 1157 0006 7860     		str	r0, [r7, #4]
 1158              	.L65:
 570:ThirdParty/FreeRTOS/timers.c ****         TickType_t xNextExpireTime;
 571:ThirdParty/FreeRTOS/timers.c ****         BaseType_t xListWasEmpty;
 572:ThirdParty/FreeRTOS/timers.c **** 
 573:ThirdParty/FreeRTOS/timers.c ****         /* Just to avoid compiler warnings. */
 574:ThirdParty/FreeRTOS/timers.c ****         ( void ) pvParameters;
 575:ThirdParty/FreeRTOS/timers.c **** 
 576:ThirdParty/FreeRTOS/timers.c ****         #if ( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
 577:ThirdParty/FreeRTOS/timers.c ****         {
 578:ThirdParty/FreeRTOS/timers.c ****             extern void vApplicationDaemonTaskStartupHook( void );
 579:ThirdParty/FreeRTOS/timers.c **** 
 580:ThirdParty/FreeRTOS/timers.c ****             /* Allow the application writer to execute some code in the context of
 581:ThirdParty/FreeRTOS/timers.c ****              * this task at the point the task starts executing.  This is useful if the
 582:ThirdParty/FreeRTOS/timers.c ****              * application includes initialisation code that would benefit from
 583:ThirdParty/FreeRTOS/timers.c ****              * executing after the scheduler has been started. */
 584:ThirdParty/FreeRTOS/timers.c ****             vApplicationDaemonTaskStartupHook();
 585:ThirdParty/FreeRTOS/timers.c ****         }
 586:ThirdParty/FreeRTOS/timers.c ****         #endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
 587:ThirdParty/FreeRTOS/timers.c **** 
 588:ThirdParty/FreeRTOS/timers.c ****         for( ; ; )
 589:ThirdParty/FreeRTOS/timers.c ****         {
 590:ThirdParty/FreeRTOS/timers.c ****             /* Query the timers list to see if it contains any timers, and if so,
 591:ThirdParty/FreeRTOS/timers.c ****              * obtain the time at which the next timer will expire. */
 592:ThirdParty/FreeRTOS/timers.c ****             xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 1159              		.loc 1 592 31 discriminator 1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 35


 1160 0008 07F10803 		add	r3, r7, #8
 1161 000c 1846     		mov	r0, r3
 1162 000e FFF7FEFF 		bl	prvGetNextExpireTime
 1163 0012 F860     		str	r0, [r7, #12]
 593:ThirdParty/FreeRTOS/timers.c **** 
 594:ThirdParty/FreeRTOS/timers.c ****             /* If a timer has expired, process it.  Otherwise, block this task
 595:ThirdParty/FreeRTOS/timers.c ****              * until either a timer does expire, or a command is received. */
 596:ThirdParty/FreeRTOS/timers.c ****             prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 1164              		.loc 1 596 13 discriminator 1
 1165 0014 BB68     		ldr	r3, [r7, #8]
 1166 0016 1946     		mov	r1, r3
 1167 0018 F868     		ldr	r0, [r7, #12]
 1168 001a FFF7FEFF 		bl	prvProcessTimerOrBlockTask
 597:ThirdParty/FreeRTOS/timers.c **** 
 598:ThirdParty/FreeRTOS/timers.c ****             /* Empty the command queue. */
 599:ThirdParty/FreeRTOS/timers.c ****             prvProcessReceivedCommands();
 1169              		.loc 1 599 13 discriminator 1
 1170 001e FFF7FEFF 		bl	prvProcessReceivedCommands
 592:ThirdParty/FreeRTOS/timers.c **** 
 1171              		.loc 1 592 29 discriminator 1
 1172 0022 F1E7     		b	.L65
 1173              		.cfi_endproc
 1174              	.LFE18:
 1176              		.section	.text.prvProcessTimerOrBlockTask,"ax",%progbits
 1177              		.align	1
 1178              		.syntax unified
 1179              		.thumb
 1180              		.thumb_func
 1182              	prvProcessTimerOrBlockTask:
 1183              	.LFB19:
 600:ThirdParty/FreeRTOS/timers.c ****         }
 601:ThirdParty/FreeRTOS/timers.c ****     }
 602:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 603:ThirdParty/FreeRTOS/timers.c **** 
 604:ThirdParty/FreeRTOS/timers.c ****     static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
 605:ThirdParty/FreeRTOS/timers.c ****                                             BaseType_t xListWasEmpty )
 606:ThirdParty/FreeRTOS/timers.c ****     {
 1184              		.loc 1 606 5
 1185              		.cfi_startproc
 1186              		@ args = 0, pretend = 0, frame = 16
 1187              		@ frame_needed = 1, uses_anonymous_args = 0
 1188 0000 80B5     		push	{r7, lr}
 1189              	.LCFI72:
 1190              		.cfi_def_cfa_offset 8
 1191              		.cfi_offset 7, -8
 1192              		.cfi_offset 14, -4
 1193 0002 84B0     		sub	sp, sp, #16
 1194              	.LCFI73:
 1195              		.cfi_def_cfa_offset 24
 1196 0004 00AF     		add	r7, sp, #0
 1197              	.LCFI74:
 1198              		.cfi_def_cfa_register 7
 1199 0006 7860     		str	r0, [r7, #4]
 1200 0008 3960     		str	r1, [r7]
 607:ThirdParty/FreeRTOS/timers.c ****         TickType_t xTimeNow;
 608:ThirdParty/FreeRTOS/timers.c ****         BaseType_t xTimerListsWereSwitched;
 609:ThirdParty/FreeRTOS/timers.c **** 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 36


 610:ThirdParty/FreeRTOS/timers.c ****         vTaskSuspendAll();
 1201              		.loc 1 610 9
 1202 000a FFF7FEFF 		bl	vTaskSuspendAll
 611:ThirdParty/FreeRTOS/timers.c ****         {
 612:ThirdParty/FreeRTOS/timers.c ****             /* Obtain the time now to make an assessment as to whether the timer
 613:ThirdParty/FreeRTOS/timers.c ****              * has expired or not.  If obtaining the time causes the lists to switch
 614:ThirdParty/FreeRTOS/timers.c ****              * then don't process this timer as any timers that remained in the list
 615:ThirdParty/FreeRTOS/timers.c ****              * when the lists were switched will have been processed within the
 616:ThirdParty/FreeRTOS/timers.c ****              * prvSampleTimeNow() function. */
 617:ThirdParty/FreeRTOS/timers.c ****             xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 1203              		.loc 1 617 24
 1204 000e 07F10803 		add	r3, r7, #8
 1205 0012 1846     		mov	r0, r3
 1206 0014 FFF7FEFF 		bl	prvSampleTimeNow
 1207 0018 F860     		str	r0, [r7, #12]
 618:ThirdParty/FreeRTOS/timers.c **** 
 619:ThirdParty/FreeRTOS/timers.c ****             if( xTimerListsWereSwitched == pdFALSE )
 1208              		.loc 1 619 41
 1209 001a BB68     		ldr	r3, [r7, #8]
 1210              		.loc 1 619 15
 1211 001c 002B     		cmp	r3, #0
 1212 001e 30D1     		bne	.L67
 620:ThirdParty/FreeRTOS/timers.c ****             {
 621:ThirdParty/FreeRTOS/timers.c ****                 /* The tick count has not overflowed, has the timer expired? */
 622:ThirdParty/FreeRTOS/timers.c ****                 if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 1213              		.loc 1 622 19
 1214 0020 3B68     		ldr	r3, [r7]
 1215 0022 002B     		cmp	r3, #0
 1216 0024 0AD1     		bne	.L68
 1217              		.loc 1 622 50 discriminator 1
 1218 0026 7A68     		ldr	r2, [r7, #4]
 1219 0028 FB68     		ldr	r3, [r7, #12]
 1220 002a 9A42     		cmp	r2, r3
 1221 002c 06D8     		bhi	.L68
 623:ThirdParty/FreeRTOS/timers.c ****                 {
 624:ThirdParty/FreeRTOS/timers.c ****                     ( void ) xTaskResumeAll();
 1222              		.loc 1 624 30
 1223 002e FFF7FEFF 		bl	xTaskResumeAll
 625:ThirdParty/FreeRTOS/timers.c ****                     prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 1224              		.loc 1 625 21
 1225 0032 F968     		ldr	r1, [r7, #12]
 1226 0034 7868     		ldr	r0, [r7, #4]
 1227 0036 FFF7FEFF 		bl	prvProcessExpiredTimer
 626:ThirdParty/FreeRTOS/timers.c ****                 }
 627:ThirdParty/FreeRTOS/timers.c ****                 else
 628:ThirdParty/FreeRTOS/timers.c ****                 {
 629:ThirdParty/FreeRTOS/timers.c ****                     /* The tick count has not overflowed, and the next expire
 630:ThirdParty/FreeRTOS/timers.c ****                      * time has not been reached yet.  This task should therefore
 631:ThirdParty/FreeRTOS/timers.c ****                      * block to wait for the next expire time or a command to be
 632:ThirdParty/FreeRTOS/timers.c ****                      * received - whichever comes first.  The following line cannot
 633:ThirdParty/FreeRTOS/timers.c ****                      * be reached unless xNextExpireTime > xTimeNow, except in the
 634:ThirdParty/FreeRTOS/timers.c ****                      * case when the current timer list is empty. */
 635:ThirdParty/FreeRTOS/timers.c ****                     if( xListWasEmpty != pdFALSE )
 636:ThirdParty/FreeRTOS/timers.c ****                     {
 637:ThirdParty/FreeRTOS/timers.c ****                         /* The current timer list is empty - is the overflow list
 638:ThirdParty/FreeRTOS/timers.c ****                          * also empty? */
 639:ThirdParty/FreeRTOS/timers.c ****                         xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 37


 640:ThirdParty/FreeRTOS/timers.c ****                     }
 641:ThirdParty/FreeRTOS/timers.c **** 
 642:ThirdParty/FreeRTOS/timers.c ****                     vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xL
 643:ThirdParty/FreeRTOS/timers.c **** 
 644:ThirdParty/FreeRTOS/timers.c ****                     if( xTaskResumeAll() == pdFALSE )
 645:ThirdParty/FreeRTOS/timers.c ****                     {
 646:ThirdParty/FreeRTOS/timers.c ****                         /* Yield to wait for either a command to arrive, or the
 647:ThirdParty/FreeRTOS/timers.c ****                          * block time to expire.  If a command arrived between the
 648:ThirdParty/FreeRTOS/timers.c ****                          * critical section being exited and this yield then the yield
 649:ThirdParty/FreeRTOS/timers.c ****                          * will not cause the task to block. */
 650:ThirdParty/FreeRTOS/timers.c ****                         portYIELD_WITHIN_API();
 651:ThirdParty/FreeRTOS/timers.c ****                     }
 652:ThirdParty/FreeRTOS/timers.c ****                     else
 653:ThirdParty/FreeRTOS/timers.c ****                     {
 654:ThirdParty/FreeRTOS/timers.c ****                         mtCOVERAGE_TEST_MARKER();
 655:ThirdParty/FreeRTOS/timers.c ****                     }
 656:ThirdParty/FreeRTOS/timers.c ****                 }
 657:ThirdParty/FreeRTOS/timers.c ****             }
 658:ThirdParty/FreeRTOS/timers.c ****             else
 659:ThirdParty/FreeRTOS/timers.c ****             {
 660:ThirdParty/FreeRTOS/timers.c ****                 ( void ) xTaskResumeAll();
 661:ThirdParty/FreeRTOS/timers.c ****             }
 662:ThirdParty/FreeRTOS/timers.c ****         }
 663:ThirdParty/FreeRTOS/timers.c ****     }
 1228              		.loc 1 663 5
 1229 003a 24E0     		b	.L74
 1230              	.L68:
 635:ThirdParty/FreeRTOS/timers.c ****                     {
 1231              		.loc 1 635 23
 1232 003c 3B68     		ldr	r3, [r7]
 1233 003e 002B     		cmp	r3, #0
 1234 0040 08D0     		beq	.L70
 639:ThirdParty/FreeRTOS/timers.c ****                     }
 1235              		.loc 1 639 41
 1236 0042 134B     		ldr	r3, .L75
 1237 0044 1B68     		ldr	r3, [r3]
 1238 0046 1B68     		ldr	r3, [r3]
 1239 0048 002B     		cmp	r3, #0
 1240 004a 01D1     		bne	.L71
 639:ThirdParty/FreeRTOS/timers.c ****                     }
 1241              		.loc 1 639 41 is_stmt 0 discriminator 1
 1242 004c 0123     		movs	r3, #1
 1243 004e 00E0     		b	.L72
 1244              	.L71:
 639:ThirdParty/FreeRTOS/timers.c ****                     }
 1245              		.loc 1 639 41 discriminator 2
 1246 0050 0023     		movs	r3, #0
 1247              	.L72:
 639:ThirdParty/FreeRTOS/timers.c ****                     }
 1248              		.loc 1 639 39 is_stmt 1 discriminator 4
 1249 0052 3B60     		str	r3, [r7]
 1250              	.L70:
 642:ThirdParty/FreeRTOS/timers.c **** 
 1251              		.loc 1 642 21
 1252 0054 0F4B     		ldr	r3, .L75+4
 1253 0056 1868     		ldr	r0, [r3]
 1254 0058 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 38


 1255 005a FB68     		ldr	r3, [r7, #12]
 1256 005c D31A     		subs	r3, r2, r3
 1257 005e 3A68     		ldr	r2, [r7]
 1258 0060 1946     		mov	r1, r3
 1259 0062 FFF7FEFF 		bl	vQueueWaitForMessageRestricted
 644:ThirdParty/FreeRTOS/timers.c ****                     {
 1260              		.loc 1 644 25
 1261 0066 FFF7FEFF 		bl	xTaskResumeAll
 1262 006a 0346     		mov	r3, r0
 644:ThirdParty/FreeRTOS/timers.c ****                     {
 1263              		.loc 1 644 23
 1264 006c 002B     		cmp	r3, #0
 1265 006e 0AD1     		bne	.L74
 650:ThirdParty/FreeRTOS/timers.c ****                     }
 1266              		.loc 1 650 25
 1267 0070 094B     		ldr	r3, .L75+8
 1268 0072 4FF08052 		mov	r2, #268435456
 1269 0076 1A60     		str	r2, [r3]
 1270              		.syntax unified
 1271              	@ 650 "ThirdParty/FreeRTOS/timers.c" 1
 1272 0078 BFF34F8F 		dsb
 1273              	@ 0 "" 2
 1274              	@ 650 "ThirdParty/FreeRTOS/timers.c" 1
 1275 007c BFF36F8F 		isb
 1276              	@ 0 "" 2
 1277              		.loc 1 663 5
 1278              		.thumb
 1279              		.syntax unified
 1280 0080 01E0     		b	.L74
 1281              	.L67:
 660:ThirdParty/FreeRTOS/timers.c ****             }
 1282              		.loc 1 660 26
 1283 0082 FFF7FEFF 		bl	xTaskResumeAll
 1284              	.L74:
 1285              		.loc 1 663 5
 1286 0086 00BF     		nop
 1287 0088 1037     		adds	r7, r7, #16
 1288              	.LCFI75:
 1289              		.cfi_def_cfa_offset 8
 1290 008a BD46     		mov	sp, r7
 1291              	.LCFI76:
 1292              		.cfi_def_cfa_register 13
 1293              		@ sp needed
 1294 008c 80BD     		pop	{r7, pc}
 1295              	.L76:
 1296 008e 00BF     		.align	2
 1297              	.L75:
 1298 0090 00000000 		.word	pxOverflowTimerList
 1299 0094 00000000 		.word	xTimerQueue
 1300 0098 04ED00E0 		.word	-536810236
 1301              		.cfi_endproc
 1302              	.LFE19:
 1304              		.section	.text.prvGetNextExpireTime,"ax",%progbits
 1305              		.align	1
 1306              		.syntax unified
 1307              		.thumb
 1308              		.thumb_func
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 39


 1310              	prvGetNextExpireTime:
 1311              	.LFB20:
 664:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 665:ThirdParty/FreeRTOS/timers.c **** 
 666:ThirdParty/FreeRTOS/timers.c ****     static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
 667:ThirdParty/FreeRTOS/timers.c ****     {
 1312              		.loc 1 667 5
 1313              		.cfi_startproc
 1314              		@ args = 0, pretend = 0, frame = 16
 1315              		@ frame_needed = 1, uses_anonymous_args = 0
 1316              		@ link register save eliminated.
 1317 0000 80B4     		push	{r7}
 1318              	.LCFI77:
 1319              		.cfi_def_cfa_offset 4
 1320              		.cfi_offset 7, -4
 1321 0002 85B0     		sub	sp, sp, #20
 1322              	.LCFI78:
 1323              		.cfi_def_cfa_offset 24
 1324 0004 00AF     		add	r7, sp, #0
 1325              	.LCFI79:
 1326              		.cfi_def_cfa_register 7
 1327 0006 7860     		str	r0, [r7, #4]
 668:ThirdParty/FreeRTOS/timers.c ****         TickType_t xNextExpireTime;
 669:ThirdParty/FreeRTOS/timers.c **** 
 670:ThirdParty/FreeRTOS/timers.c ****         /* Timers are listed in expiry time order, with the head of the list
 671:ThirdParty/FreeRTOS/timers.c ****          * referencing the task that will expire first.  Obtain the time at which
 672:ThirdParty/FreeRTOS/timers.c ****          * the timer with the nearest expiry time will expire.  If there are no
 673:ThirdParty/FreeRTOS/timers.c ****          * active timers then just set the next expire time to 0.  That will cause
 674:ThirdParty/FreeRTOS/timers.c ****          * this task to unblock when the tick count overflows, at which point the
 675:ThirdParty/FreeRTOS/timers.c ****          * timer lists will be switched and the next expiry time can be
 676:ThirdParty/FreeRTOS/timers.c ****          * re-assessed.  */
 677:ThirdParty/FreeRTOS/timers.c ****         *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 1328              		.loc 1 677 27
 1329 0008 0E4B     		ldr	r3, .L83
 1330 000a 1B68     		ldr	r3, [r3]
 1331 000c 1B68     		ldr	r3, [r3]
 1332 000e 002B     		cmp	r3, #0
 1333 0010 01D1     		bne	.L78
 1334              		.loc 1 677 27 is_stmt 0 discriminator 1
 1335 0012 0122     		movs	r2, #1
 1336 0014 00E0     		b	.L79
 1337              	.L78:
 1338              		.loc 1 677 27 discriminator 2
 1339 0016 0022     		movs	r2, #0
 1340              	.L79:
 1341              		.loc 1 677 25 is_stmt 1 discriminator 4
 1342 0018 7B68     		ldr	r3, [r7, #4]
 1343 001a 1A60     		str	r2, [r3]
 678:ThirdParty/FreeRTOS/timers.c **** 
 679:ThirdParty/FreeRTOS/timers.c ****         if( *pxListWasEmpty == pdFALSE )
 1344              		.loc 1 679 13 discriminator 4
 1345 001c 7B68     		ldr	r3, [r7, #4]
 1346 001e 1B68     		ldr	r3, [r3]
 1347              		.loc 1 679 11 discriminator 4
 1348 0020 002B     		cmp	r3, #0
 1349 0022 05D1     		bne	.L80
 680:ThirdParty/FreeRTOS/timers.c ****         {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 40


 681:ThirdParty/FreeRTOS/timers.c ****             xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 1350              		.loc 1 681 31
 1351 0024 074B     		ldr	r3, .L83
 1352 0026 1B68     		ldr	r3, [r3]
 1353 0028 DB68     		ldr	r3, [r3, #12]
 1354              		.loc 1 681 29
 1355 002a 1B68     		ldr	r3, [r3]
 1356 002c FB60     		str	r3, [r7, #12]
 1357 002e 01E0     		b	.L81
 1358              	.L80:
 682:ThirdParty/FreeRTOS/timers.c ****         }
 683:ThirdParty/FreeRTOS/timers.c ****         else
 684:ThirdParty/FreeRTOS/timers.c ****         {
 685:ThirdParty/FreeRTOS/timers.c ****             /* Ensure the task unblocks when the tick count rolls over. */
 686:ThirdParty/FreeRTOS/timers.c ****             xNextExpireTime = ( TickType_t ) 0U;
 1359              		.loc 1 686 29
 1360 0030 0023     		movs	r3, #0
 1361 0032 FB60     		str	r3, [r7, #12]
 1362              	.L81:
 687:ThirdParty/FreeRTOS/timers.c ****         }
 688:ThirdParty/FreeRTOS/timers.c **** 
 689:ThirdParty/FreeRTOS/timers.c ****         return xNextExpireTime;
 1363              		.loc 1 689 16
 1364 0034 FB68     		ldr	r3, [r7, #12]
 690:ThirdParty/FreeRTOS/timers.c ****     }
 1365              		.loc 1 690 5
 1366 0036 1846     		mov	r0, r3
 1367 0038 1437     		adds	r7, r7, #20
 1368              	.LCFI80:
 1369              		.cfi_def_cfa_offset 4
 1370 003a BD46     		mov	sp, r7
 1371              	.LCFI81:
 1372              		.cfi_def_cfa_register 13
 1373              		@ sp needed
 1374 003c 5DF8047B 		ldr	r7, [sp], #4
 1375              	.LCFI82:
 1376              		.cfi_restore 7
 1377              		.cfi_def_cfa_offset 0
 1378 0040 7047     		bx	lr
 1379              	.L84:
 1380 0042 00BF     		.align	2
 1381              	.L83:
 1382 0044 00000000 		.word	pxCurrentTimerList
 1383              		.cfi_endproc
 1384              	.LFE20:
 1386              		.section	.text.prvSampleTimeNow,"ax",%progbits
 1387              		.align	1
 1388              		.syntax unified
 1389              		.thumb
 1390              		.thumb_func
 1392              	prvSampleTimeNow:
 1393              	.LFB21:
 691:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 692:ThirdParty/FreeRTOS/timers.c **** 
 693:ThirdParty/FreeRTOS/timers.c ****     static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
 694:ThirdParty/FreeRTOS/timers.c ****     {
 1394              		.loc 1 694 5
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 41


 1395              		.cfi_startproc
 1396              		@ args = 0, pretend = 0, frame = 16
 1397              		@ frame_needed = 1, uses_anonymous_args = 0
 1398 0000 80B5     		push	{r7, lr}
 1399              	.LCFI83:
 1400              		.cfi_def_cfa_offset 8
 1401              		.cfi_offset 7, -8
 1402              		.cfi_offset 14, -4
 1403 0002 84B0     		sub	sp, sp, #16
 1404              	.LCFI84:
 1405              		.cfi_def_cfa_offset 24
 1406 0004 00AF     		add	r7, sp, #0
 1407              	.LCFI85:
 1408              		.cfi_def_cfa_register 7
 1409 0006 7860     		str	r0, [r7, #4]
 695:ThirdParty/FreeRTOS/timers.c ****         TickType_t xTimeNow;
 696:ThirdParty/FreeRTOS/timers.c ****         PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is o
 697:ThirdParty/FreeRTOS/timers.c **** 
 698:ThirdParty/FreeRTOS/timers.c ****         xTimeNow = xTaskGetTickCount();
 1410              		.loc 1 698 20
 1411 0008 FFF7FEFF 		bl	xTaskGetTickCount
 1412 000c F860     		str	r0, [r7, #12]
 699:ThirdParty/FreeRTOS/timers.c **** 
 700:ThirdParty/FreeRTOS/timers.c ****         if( xTimeNow < xLastTime )
 1413              		.loc 1 700 22
 1414 000e 0B4B     		ldr	r3, .L89
 1415 0010 1B68     		ldr	r3, [r3]
 1416              		.loc 1 700 11
 1417 0012 FA68     		ldr	r2, [r7, #12]
 1418 0014 9A42     		cmp	r2, r3
 1419 0016 05D2     		bcs	.L86
 701:ThirdParty/FreeRTOS/timers.c ****         {
 702:ThirdParty/FreeRTOS/timers.c ****             prvSwitchTimerLists();
 1420              		.loc 1 702 13
 1421 0018 FFF7FEFF 		bl	prvSwitchTimerLists
 703:ThirdParty/FreeRTOS/timers.c ****             *pxTimerListsWereSwitched = pdTRUE;
 1422              		.loc 1 703 39
 1423 001c 7B68     		ldr	r3, [r7, #4]
 1424 001e 0122     		movs	r2, #1
 1425 0020 1A60     		str	r2, [r3]
 1426 0022 02E0     		b	.L87
 1427              	.L86:
 704:ThirdParty/FreeRTOS/timers.c ****         }
 705:ThirdParty/FreeRTOS/timers.c ****         else
 706:ThirdParty/FreeRTOS/timers.c ****         {
 707:ThirdParty/FreeRTOS/timers.c ****             *pxTimerListsWereSwitched = pdFALSE;
 1428              		.loc 1 707 39
 1429 0024 7B68     		ldr	r3, [r7, #4]
 1430 0026 0022     		movs	r2, #0
 1431 0028 1A60     		str	r2, [r3]
 1432              	.L87:
 708:ThirdParty/FreeRTOS/timers.c ****         }
 709:ThirdParty/FreeRTOS/timers.c **** 
 710:ThirdParty/FreeRTOS/timers.c ****         xLastTime = xTimeNow;
 1433              		.loc 1 710 19
 1434 002a 044A     		ldr	r2, .L89
 1435 002c FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 42


 1436 002e 1360     		str	r3, [r2]
 711:ThirdParty/FreeRTOS/timers.c **** 
 712:ThirdParty/FreeRTOS/timers.c ****         return xTimeNow;
 1437              		.loc 1 712 16
 1438 0030 FB68     		ldr	r3, [r7, #12]
 713:ThirdParty/FreeRTOS/timers.c ****     }
 1439              		.loc 1 713 5
 1440 0032 1846     		mov	r0, r3
 1441 0034 1037     		adds	r7, r7, #16
 1442              	.LCFI86:
 1443              		.cfi_def_cfa_offset 8
 1444 0036 BD46     		mov	sp, r7
 1445              	.LCFI87:
 1446              		.cfi_def_cfa_register 13
 1447              		@ sp needed
 1448 0038 80BD     		pop	{r7, pc}
 1449              	.L90:
 1450 003a 00BF     		.align	2
 1451              	.L89:
 1452 003c 00000000 		.word	xLastTime.0
 1453              		.cfi_endproc
 1454              	.LFE21:
 1456              		.section	.text.prvInsertTimerInActiveList,"ax",%progbits
 1457              		.align	1
 1458              		.syntax unified
 1459              		.thumb
 1460              		.thumb_func
 1462              	prvInsertTimerInActiveList:
 1463              	.LFB22:
 714:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 715:ThirdParty/FreeRTOS/timers.c **** 
 716:ThirdParty/FreeRTOS/timers.c ****     static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
 717:ThirdParty/FreeRTOS/timers.c ****                                                   const TickType_t xNextExpiryTime,
 718:ThirdParty/FreeRTOS/timers.c ****                                                   const TickType_t xTimeNow,
 719:ThirdParty/FreeRTOS/timers.c ****                                                   const TickType_t xCommandTime )
 720:ThirdParty/FreeRTOS/timers.c ****     {
 1464              		.loc 1 720 5
 1465              		.cfi_startproc
 1466              		@ args = 0, pretend = 0, frame = 24
 1467              		@ frame_needed = 1, uses_anonymous_args = 0
 1468 0000 80B5     		push	{r7, lr}
 1469              	.LCFI88:
 1470              		.cfi_def_cfa_offset 8
 1471              		.cfi_offset 7, -8
 1472              		.cfi_offset 14, -4
 1473 0002 86B0     		sub	sp, sp, #24
 1474              	.LCFI89:
 1475              		.cfi_def_cfa_offset 32
 1476 0004 00AF     		add	r7, sp, #0
 1477              	.LCFI90:
 1478              		.cfi_def_cfa_register 7
 1479 0006 F860     		str	r0, [r7, #12]
 1480 0008 B960     		str	r1, [r7, #8]
 1481 000a 7A60     		str	r2, [r7, #4]
 1482 000c 3B60     		str	r3, [r7]
 721:ThirdParty/FreeRTOS/timers.c ****         BaseType_t xProcessTimerNow = pdFALSE;
 1483              		.loc 1 721 20
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 43


 1484 000e 0023     		movs	r3, #0
 1485 0010 7B61     		str	r3, [r7, #20]
 722:ThirdParty/FreeRTOS/timers.c **** 
 723:ThirdParty/FreeRTOS/timers.c ****         listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 1486              		.loc 1 723 9
 1487 0012 FB68     		ldr	r3, [r7, #12]
 1488 0014 BA68     		ldr	r2, [r7, #8]
 1489 0016 5A60     		str	r2, [r3, #4]
 724:ThirdParty/FreeRTOS/timers.c ****         listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 1490              		.loc 1 724 9
 1491 0018 FB68     		ldr	r3, [r7, #12]
 1492 001a FA68     		ldr	r2, [r7, #12]
 1493 001c 1A61     		str	r2, [r3, #16]
 725:ThirdParty/FreeRTOS/timers.c **** 
 726:ThirdParty/FreeRTOS/timers.c ****         if( xNextExpiryTime <= xTimeNow )
 1494              		.loc 1 726 11
 1495 001e BA68     		ldr	r2, [r7, #8]
 1496 0020 7B68     		ldr	r3, [r7, #4]
 1497 0022 9A42     		cmp	r2, r3
 1498 0024 12D8     		bhi	.L92
 727:ThirdParty/FreeRTOS/timers.c ****         {
 728:ThirdParty/FreeRTOS/timers.c ****             /* Has the expiry time elapsed between the command to start/reset a
 729:ThirdParty/FreeRTOS/timers.c ****              * timer was issued, and the time the command was processed? */
 730:ThirdParty/FreeRTOS/timers.c ****             if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*
 1499              		.loc 1 730 19
 1500 0026 7A68     		ldr	r2, [r7, #4]
 1501 0028 3B68     		ldr	r3, [r7]
 1502 002a D21A     		subs	r2, r2, r3
 1503              		.loc 1 730 74
 1504 002c FB68     		ldr	r3, [r7, #12]
 1505 002e 9B69     		ldr	r3, [r3, #24]
 1506              		.loc 1 730 15
 1507 0030 9A42     		cmp	r2, r3
 1508 0032 02D3     		bcc	.L93
 731:ThirdParty/FreeRTOS/timers.c ****             {
 732:ThirdParty/FreeRTOS/timers.c ****                 /* The time between a command being issued and the command being
 733:ThirdParty/FreeRTOS/timers.c ****                  * processed actually exceeds the timers period.  */
 734:ThirdParty/FreeRTOS/timers.c ****                 xProcessTimerNow = pdTRUE;
 1509              		.loc 1 734 34
 1510 0034 0123     		movs	r3, #1
 1511 0036 7B61     		str	r3, [r7, #20]
 1512 0038 1BE0     		b	.L94
 1513              	.L93:
 735:ThirdParty/FreeRTOS/timers.c ****             }
 736:ThirdParty/FreeRTOS/timers.c ****             else
 737:ThirdParty/FreeRTOS/timers.c ****             {
 738:ThirdParty/FreeRTOS/timers.c ****                 vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 1514              		.loc 1 738 17
 1515 003a 104B     		ldr	r3, .L97
 1516 003c 1A68     		ldr	r2, [r3]
 1517 003e FB68     		ldr	r3, [r7, #12]
 1518 0040 0433     		adds	r3, r3, #4
 1519 0042 1946     		mov	r1, r3
 1520 0044 1046     		mov	r0, r2
 1521 0046 FFF7FEFF 		bl	vListInsert
 1522 004a 12E0     		b	.L94
 1523              	.L92:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 44


 739:ThirdParty/FreeRTOS/timers.c ****             }
 740:ThirdParty/FreeRTOS/timers.c ****         }
 741:ThirdParty/FreeRTOS/timers.c ****         else
 742:ThirdParty/FreeRTOS/timers.c ****         {
 743:ThirdParty/FreeRTOS/timers.c ****             if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 1524              		.loc 1 743 15
 1525 004c 7A68     		ldr	r2, [r7, #4]
 1526 004e 3B68     		ldr	r3, [r7]
 1527 0050 9A42     		cmp	r2, r3
 1528 0052 06D2     		bcs	.L95
 1529              		.loc 1 743 45 discriminator 1
 1530 0054 BA68     		ldr	r2, [r7, #8]
 1531 0056 3B68     		ldr	r3, [r7]
 1532 0058 9A42     		cmp	r2, r3
 1533 005a 02D3     		bcc	.L95
 744:ThirdParty/FreeRTOS/timers.c ****             {
 745:ThirdParty/FreeRTOS/timers.c ****                 /* If, since the command was issued, the tick count has overflowed
 746:ThirdParty/FreeRTOS/timers.c ****                  * but the expiry time has not, then the timer must have already passed
 747:ThirdParty/FreeRTOS/timers.c ****                  * its expiry time and should be processed immediately. */
 748:ThirdParty/FreeRTOS/timers.c ****                 xProcessTimerNow = pdTRUE;
 1534              		.loc 1 748 34
 1535 005c 0123     		movs	r3, #1
 1536 005e 7B61     		str	r3, [r7, #20]
 1537 0060 07E0     		b	.L94
 1538              	.L95:
 749:ThirdParty/FreeRTOS/timers.c ****             }
 750:ThirdParty/FreeRTOS/timers.c ****             else
 751:ThirdParty/FreeRTOS/timers.c ****             {
 752:ThirdParty/FreeRTOS/timers.c ****                 vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 1539              		.loc 1 752 17
 1540 0062 074B     		ldr	r3, .L97+4
 1541 0064 1A68     		ldr	r2, [r3]
 1542 0066 FB68     		ldr	r3, [r7, #12]
 1543 0068 0433     		adds	r3, r3, #4
 1544 006a 1946     		mov	r1, r3
 1545 006c 1046     		mov	r0, r2
 1546 006e FFF7FEFF 		bl	vListInsert
 1547              	.L94:
 753:ThirdParty/FreeRTOS/timers.c ****             }
 754:ThirdParty/FreeRTOS/timers.c ****         }
 755:ThirdParty/FreeRTOS/timers.c **** 
 756:ThirdParty/FreeRTOS/timers.c ****         return xProcessTimerNow;
 1548              		.loc 1 756 16
 1549 0072 7B69     		ldr	r3, [r7, #20]
 757:ThirdParty/FreeRTOS/timers.c ****     }
 1550              		.loc 1 757 5
 1551 0074 1846     		mov	r0, r3
 1552 0076 1837     		adds	r7, r7, #24
 1553              	.LCFI91:
 1554              		.cfi_def_cfa_offset 8
 1555 0078 BD46     		mov	sp, r7
 1556              	.LCFI92:
 1557              		.cfi_def_cfa_register 13
 1558              		@ sp needed
 1559 007a 80BD     		pop	{r7, pc}
 1560              	.L98:
 1561              		.align	2
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 45


 1562              	.L97:
 1563 007c 00000000 		.word	pxOverflowTimerList
 1564 0080 00000000 		.word	pxCurrentTimerList
 1565              		.cfi_endproc
 1566              	.LFE22:
 1568              		.section	.text.prvProcessReceivedCommands,"ax",%progbits
 1569              		.align	1
 1570              		.syntax unified
 1571              		.thumb
 1572              		.thumb_func
 1574              	prvProcessReceivedCommands:
 1575              	.LFB23:
 758:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 759:ThirdParty/FreeRTOS/timers.c **** 
 760:ThirdParty/FreeRTOS/timers.c ****     static void prvProcessReceivedCommands( void )
 761:ThirdParty/FreeRTOS/timers.c ****     {
 1576              		.loc 1 761 5
 1577              		.cfi_startproc
 1578              		@ args = 0, pretend = 0, frame = 32
 1579              		@ frame_needed = 1, uses_anonymous_args = 0
 1580 0000 80B5     		push	{r7, lr}
 1581              	.LCFI93:
 1582              		.cfi_def_cfa_offset 8
 1583              		.cfi_offset 7, -8
 1584              		.cfi_offset 14, -4
 1585 0002 88B0     		sub	sp, sp, #32
 1586              	.LCFI94:
 1587              		.cfi_def_cfa_offset 40
 1588 0004 00AF     		add	r7, sp, #0
 1589              	.LCFI95:
 1590              		.cfi_def_cfa_register 7
 762:ThirdParty/FreeRTOS/timers.c ****         DaemonTaskMessage_t xMessage;
 763:ThirdParty/FreeRTOS/timers.c ****         Timer_t * pxTimer;
 764:ThirdParty/FreeRTOS/timers.c ****         BaseType_t xTimerListsWereSwitched;
 765:ThirdParty/FreeRTOS/timers.c ****         TickType_t xTimeNow;
 766:ThirdParty/FreeRTOS/timers.c **** 
 767:ThirdParty/FreeRTOS/timers.c ****         while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessa
 1591              		.loc 1 767 14
 1592 0006 A6E0     		b	.L100
 1593              	.L115:
 768:ThirdParty/FreeRTOS/timers.c ****         {
 769:ThirdParty/FreeRTOS/timers.c ****             #if ( INCLUDE_xTimerPendFunctionCall == 1 )
 770:ThirdParty/FreeRTOS/timers.c ****             {
 771:ThirdParty/FreeRTOS/timers.c ****                 /* Negative commands are pended function calls rather than timer
 772:ThirdParty/FreeRTOS/timers.c ****                  * commands. */
 773:ThirdParty/FreeRTOS/timers.c ****                 if( xMessage.xMessageID < ( BaseType_t ) 0 )
 774:ThirdParty/FreeRTOS/timers.c ****                 {
 775:ThirdParty/FreeRTOS/timers.c ****                     const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParamete
 776:ThirdParty/FreeRTOS/timers.c **** 
 777:ThirdParty/FreeRTOS/timers.c ****                     /* The timer uses the xCallbackParameters member to request a
 778:ThirdParty/FreeRTOS/timers.c ****                      * callback be executed.  Check the callback is not NULL. */
 779:ThirdParty/FreeRTOS/timers.c ****                     configASSERT( pxCallback );
 780:ThirdParty/FreeRTOS/timers.c **** 
 781:ThirdParty/FreeRTOS/timers.c ****                     /* Call the function. */
 782:ThirdParty/FreeRTOS/timers.c ****                     pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParamet
 783:ThirdParty/FreeRTOS/timers.c ****                 }
 784:ThirdParty/FreeRTOS/timers.c ****                 else
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 46


 785:ThirdParty/FreeRTOS/timers.c ****                 {
 786:ThirdParty/FreeRTOS/timers.c ****                     mtCOVERAGE_TEST_MARKER();
 787:ThirdParty/FreeRTOS/timers.c ****                 }
 788:ThirdParty/FreeRTOS/timers.c ****             }
 789:ThirdParty/FreeRTOS/timers.c ****             #endif /* INCLUDE_xTimerPendFunctionCall */
 790:ThirdParty/FreeRTOS/timers.c **** 
 791:ThirdParty/FreeRTOS/timers.c ****             /* Commands that are positive are timer commands rather than pended
 792:ThirdParty/FreeRTOS/timers.c ****              * function calls. */
 793:ThirdParty/FreeRTOS/timers.c ****             if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 1594              		.loc 1 793 25
 1595 0008 BB68     		ldr	r3, [r7, #8]
 1596              		.loc 1 793 15
 1597 000a 002B     		cmp	r3, #0
 1598 000c C0F2A280 		blt	.L116
 794:ThirdParty/FreeRTOS/timers.c ****             {
 795:ThirdParty/FreeRTOS/timers.c ****                 /* The messages uses the xTimerParameters member to work on a
 796:ThirdParty/FreeRTOS/timers.c ****                  * software timer. */
 797:ThirdParty/FreeRTOS/timers.c ****                 pxTimer = xMessage.u.xTimerParameters.pxTimer;
 1599              		.loc 1 797 25
 1600 0010 3B69     		ldr	r3, [r7, #16]
 1601 0012 FB61     		str	r3, [r7, #28]
 798:ThirdParty/FreeRTOS/timers.c **** 
 799:ThirdParty/FreeRTOS/timers.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*li
 1602              		.loc 1 799 21
 1603 0014 FB69     		ldr	r3, [r7, #28]
 1604 0016 5B69     		ldr	r3, [r3, #20]
 1605              		.loc 1 799 19
 1606 0018 002B     		cmp	r3, #0
 1607 001a 04D0     		beq	.L101
 800:ThirdParty/FreeRTOS/timers.c ****                 {
 801:ThirdParty/FreeRTOS/timers.c ****                     /* The timer is in a list, remove it. */
 802:ThirdParty/FreeRTOS/timers.c ****                     ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 1608              		.loc 1 802 30
 1609 001c FB69     		ldr	r3, [r7, #28]
 1610 001e 0433     		adds	r3, r3, #4
 1611 0020 1846     		mov	r0, r3
 1612 0022 FFF7FEFF 		bl	uxListRemove
 1613              	.L101:
 803:ThirdParty/FreeRTOS/timers.c ****                 }
 804:ThirdParty/FreeRTOS/timers.c ****                 else
 805:ThirdParty/FreeRTOS/timers.c ****                 {
 806:ThirdParty/FreeRTOS/timers.c ****                     mtCOVERAGE_TEST_MARKER();
 807:ThirdParty/FreeRTOS/timers.c ****                 }
 808:ThirdParty/FreeRTOS/timers.c **** 
 809:ThirdParty/FreeRTOS/timers.c ****                 traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParamet
 810:ThirdParty/FreeRTOS/timers.c **** 
 811:ThirdParty/FreeRTOS/timers.c ****                 /* In this case the xTimerListsWereSwitched parameter is not used, but
 812:ThirdParty/FreeRTOS/timers.c ****                  *  it must be present in the function call.  prvSampleTimeNow() must be
 813:ThirdParty/FreeRTOS/timers.c ****                  *  called after the message is received from xTimerQueue so there is no
 814:ThirdParty/FreeRTOS/timers.c ****                  *  possibility of a higher priority task adding a message to the message
 815:ThirdParty/FreeRTOS/timers.c ****                  *  queue with a time that is ahead of the timer daemon task (because it
 816:ThirdParty/FreeRTOS/timers.c ****                  *  pre-empted the timer daemon task after the xTimeNow value was set). */
 817:ThirdParty/FreeRTOS/timers.c ****                 xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 1614              		.loc 1 817 28
 1615 0026 3B1D     		adds	r3, r7, #4
 1616 0028 1846     		mov	r0, r3
 1617 002a FFF7FEFF 		bl	prvSampleTimeNow
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 47


 1618 002e B861     		str	r0, [r7, #24]
 818:ThirdParty/FreeRTOS/timers.c **** 
 819:ThirdParty/FreeRTOS/timers.c ****                 switch( xMessage.xMessageID )
 1619              		.loc 1 819 33
 1620 0030 BB68     		ldr	r3, [r7, #8]
 1621              		.loc 1 819 17
 1622 0032 013B     		subs	r3, r3, #1
 1623 0034 082B     		cmp	r3, #8
 1624 0036 00F28E80 		bhi	.L100
 1625 003a 01A2     		adr	r2, .L104
 1626 003c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1627              		.p2align 2
 1628              	.L104:
 1629 0040 65000000 		.word	.L106+1
 1630 0044 65000000 		.word	.L106+1
 1631 0048 CD000000 		.word	.L105+1
 1632 004c E1000000 		.word	.L103+1
 1633 0050 2B010000 		.word	.L107+1
 1634 0054 65000000 		.word	.L106+1
 1635 0058 65000000 		.word	.L106+1
 1636 005c CD000000 		.word	.L105+1
 1637 0060 E1000000 		.word	.L103+1
 1638              		.p2align 1
 1639              	.L106:
 820:ThirdParty/FreeRTOS/timers.c ****                 {
 821:ThirdParty/FreeRTOS/timers.c ****                     case tmrCOMMAND_START:
 822:ThirdParty/FreeRTOS/timers.c ****                     case tmrCOMMAND_START_FROM_ISR:
 823:ThirdParty/FreeRTOS/timers.c ****                     case tmrCOMMAND_RESET:
 824:ThirdParty/FreeRTOS/timers.c ****                     case tmrCOMMAND_RESET_FROM_ISR:
 825:ThirdParty/FreeRTOS/timers.c ****                         /* Start or restart a timer. */
 826:ThirdParty/FreeRTOS/timers.c ****                         pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 1640              		.loc 1 826 43
 1641 0064 FB69     		ldr	r3, [r7, #28]
 1642 0066 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1643 006a 43F00103 		orr	r3, r3, #1
 1644 006e DAB2     		uxtb	r2, r3
 1645 0070 FB69     		ldr	r3, [r7, #28]
 1646 0072 83F82820 		strb	r2, [r3, #40]
 827:ThirdParty/FreeRTOS/timers.c **** 
 828:ThirdParty/FreeRTOS/timers.c ****                         if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessa
 1647              		.loc 1 828 93
 1648 0076 FA68     		ldr	r2, [r7, #12]
 1649              		.loc 1 828 117
 1650 0078 FB69     		ldr	r3, [r7, #28]
 1651 007a 9B69     		ldr	r3, [r3, #24]
 1652              		.loc 1 828 29
 1653 007c D118     		adds	r1, r2, r3
 1654 007e FB68     		ldr	r3, [r7, #12]
 1655 0080 BA69     		ldr	r2, [r7, #24]
 1656 0082 F869     		ldr	r0, [r7, #28]
 1657 0084 FFF7FEFF 		bl	prvInsertTimerInActiveList
 1658 0088 0346     		mov	r3, r0
 1659              		.loc 1 828 27
 1660 008a 002B     		cmp	r3, #0
 1661 008c 63D0     		beq	.L100
 829:ThirdParty/FreeRTOS/timers.c ****                         {
 830:ThirdParty/FreeRTOS/timers.c ****                             /* The timer expired before it was added to the active
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 48


 831:ThirdParty/FreeRTOS/timers.c ****                              * timer list.  Process it now. */
 832:ThirdParty/FreeRTOS/timers.c ****                             if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 1662              		.loc 1 832 42
 1663 008e FB69     		ldr	r3, [r7, #28]
 1664 0090 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1665              		.loc 1 832 53
 1666 0094 03F00403 		and	r3, r3, #4
 1667              		.loc 1 832 31
 1668 0098 002B     		cmp	r3, #0
 1669 009a 09D0     		beq	.L109
 833:ThirdParty/FreeRTOS/timers.c ****                             {
 834:ThirdParty/FreeRTOS/timers.c ****                                 prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue 
 1670              		.loc 1 834 85
 1671 009c FA68     		ldr	r2, [r7, #12]
 1672              		.loc 1 834 109
 1673 009e FB69     		ldr	r3, [r7, #28]
 1674 00a0 9B69     		ldr	r3, [r3, #24]
 1675              		.loc 1 834 33
 1676 00a2 1344     		add	r3, r3, r2
 1677 00a4 BA69     		ldr	r2, [r7, #24]
 1678 00a6 1946     		mov	r1, r3
 1679 00a8 F869     		ldr	r0, [r7, #28]
 1680 00aa FFF7FEFF 		bl	prvReloadTimer
 1681 00ae 08E0     		b	.L110
 1682              	.L109:
 835:ThirdParty/FreeRTOS/timers.c ****                             }
 836:ThirdParty/FreeRTOS/timers.c ****                             else
 837:ThirdParty/FreeRTOS/timers.c ****                             {
 838:ThirdParty/FreeRTOS/timers.c ****                                 pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 1683              		.loc 1 838 51
 1684 00b0 FB69     		ldr	r3, [r7, #28]
 1685 00b2 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1686 00b6 23F00103 		bic	r3, r3, #1
 1687 00ba DAB2     		uxtb	r2, r3
 1688 00bc FB69     		ldr	r3, [r7, #28]
 1689 00be 83F82820 		strb	r2, [r3, #40]
 1690              	.L110:
 839:ThirdParty/FreeRTOS/timers.c ****                             }
 840:ThirdParty/FreeRTOS/timers.c **** 
 841:ThirdParty/FreeRTOS/timers.c ****                             /* Call the timer callback. */
 842:ThirdParty/FreeRTOS/timers.c ****                             traceTIMER_EXPIRED( pxTimer );
 843:ThirdParty/FreeRTOS/timers.c ****                             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 1691              		.loc 1 843 36
 1692 00c2 FB69     		ldr	r3, [r7, #28]
 1693 00c4 1B6A     		ldr	r3, [r3, #32]
 1694              		.loc 1 843 29
 1695 00c6 F869     		ldr	r0, [r7, #28]
 1696 00c8 9847     		blx	r3
 1697              	.LVL2:
 844:ThirdParty/FreeRTOS/timers.c ****                         }
 845:ThirdParty/FreeRTOS/timers.c ****                         else
 846:ThirdParty/FreeRTOS/timers.c ****                         {
 847:ThirdParty/FreeRTOS/timers.c ****                             mtCOVERAGE_TEST_MARKER();
 848:ThirdParty/FreeRTOS/timers.c ****                         }
 849:ThirdParty/FreeRTOS/timers.c **** 
 850:ThirdParty/FreeRTOS/timers.c ****                         break;
 1698              		.loc 1 850 25
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 49


 1699 00ca 44E0     		b	.L100
 1700              	.L105:
 851:ThirdParty/FreeRTOS/timers.c **** 
 852:ThirdParty/FreeRTOS/timers.c ****                     case tmrCOMMAND_STOP:
 853:ThirdParty/FreeRTOS/timers.c ****                     case tmrCOMMAND_STOP_FROM_ISR:
 854:ThirdParty/FreeRTOS/timers.c ****                         /* The timer has already been removed from the active list. */
 855:ThirdParty/FreeRTOS/timers.c ****                         pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 1701              		.loc 1 855 43
 1702 00cc FB69     		ldr	r3, [r7, #28]
 1703 00ce 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1704 00d2 23F00103 		bic	r3, r3, #1
 1705 00d6 DAB2     		uxtb	r2, r3
 1706 00d8 FB69     		ldr	r3, [r7, #28]
 1707 00da 83F82820 		strb	r2, [r3, #40]
 856:ThirdParty/FreeRTOS/timers.c ****                         break;
 1708              		.loc 1 856 25
 1709 00de 3AE0     		b	.L100
 1710              	.L103:
 857:ThirdParty/FreeRTOS/timers.c **** 
 858:ThirdParty/FreeRTOS/timers.c ****                     case tmrCOMMAND_CHANGE_PERIOD:
 859:ThirdParty/FreeRTOS/timers.c ****                     case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
 860:ThirdParty/FreeRTOS/timers.c ****                         pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 1711              		.loc 1 860 43
 1712 00e0 FB69     		ldr	r3, [r7, #28]
 1713 00e2 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1714 00e6 43F00103 		orr	r3, r3, #1
 1715 00ea DAB2     		uxtb	r2, r3
 1716 00ec FB69     		ldr	r3, [r7, #28]
 1717 00ee 83F82820 		strb	r2, [r3, #40]
 861:ThirdParty/FreeRTOS/timers.c ****                         pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 1718              		.loc 1 861 83
 1719 00f2 FA68     		ldr	r2, [r7, #12]
 1720              		.loc 1 861 54
 1721 00f4 FB69     		ldr	r3, [r7, #28]
 1722 00f6 9A61     		str	r2, [r3, #24]
 862:ThirdParty/FreeRTOS/timers.c ****                         configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1723              		.loc 1 862 25
 1724 00f8 FB69     		ldr	r3, [r7, #28]
 1725 00fa 9B69     		ldr	r3, [r3, #24]
 1726 00fc 002B     		cmp	r3, #0
 1727 00fe 0AD1     		bne	.L111
 1728              	.LBB46:
 1729              	.LBB47:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1730              		.loc 2 198 9
 1731              		.syntax unified
 1732              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1733 0100 4FF05003 			mov r3, #80												
 1734 0104 83F31188 		msr basepri, r3											
 1735 0108 BFF36F8F 		isb														
 1736 010c BFF34F8F 		dsb														
 1737              	
 1738              	@ 0 "" 2
 1739              		.thumb
 1740              		.syntax unified
 1741 0110 7B61     		str	r3, [r7, #20]
 1742              		.loc 2 206 5
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 50


 1743 0112 00BF     		nop
 1744              	.L112:
 1745              	.LBE47:
 1746              	.LBE46:
 1747              		.loc 1 862 25 discriminator 1
 1748 0114 FEE7     		b	.L112
 1749              	.L111:
 863:ThirdParty/FreeRTOS/timers.c **** 
 864:ThirdParty/FreeRTOS/timers.c ****                         /* The new period does not really have a reference, and can
 865:ThirdParty/FreeRTOS/timers.c ****                          * be longer or shorter than the old one.  The command time is
 866:ThirdParty/FreeRTOS/timers.c ****                          * therefore set to the current time, and as the period cannot
 867:ThirdParty/FreeRTOS/timers.c ****                          * be zero the next expiry time can only be in the future,
 868:ThirdParty/FreeRTOS/timers.c ****                          * meaning (unlike for the xTimerStart() case above) there is
 869:ThirdParty/FreeRTOS/timers.c ****                          * no fail case that needs to be handled here. */
 870:ThirdParty/FreeRTOS/timers.c ****                         ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerP
 1750              		.loc 1 870 91
 1751 0116 FB69     		ldr	r3, [r7, #28]
 1752 0118 9A69     		ldr	r2, [r3, #24]
 1753              		.loc 1 870 34
 1754 011a BB69     		ldr	r3, [r7, #24]
 1755 011c D118     		adds	r1, r2, r3
 1756 011e BB69     		ldr	r3, [r7, #24]
 1757 0120 BA69     		ldr	r2, [r7, #24]
 1758 0122 F869     		ldr	r0, [r7, #28]
 1759 0124 FFF7FEFF 		bl	prvInsertTimerInActiveList
 871:ThirdParty/FreeRTOS/timers.c ****                         break;
 1760              		.loc 1 871 25
 1761 0128 15E0     		b	.L100
 1762              	.L107:
 872:ThirdParty/FreeRTOS/timers.c **** 
 873:ThirdParty/FreeRTOS/timers.c ****                     case tmrCOMMAND_DELETE:
 874:ThirdParty/FreeRTOS/timers.c ****                         #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 875:ThirdParty/FreeRTOS/timers.c ****                         {
 876:ThirdParty/FreeRTOS/timers.c ****                             /* The timer has already been removed from the active list,
 877:ThirdParty/FreeRTOS/timers.c ****                              * just free up the memory if the memory was dynamically
 878:ThirdParty/FreeRTOS/timers.c ****                              * allocated. */
 879:ThirdParty/FreeRTOS/timers.c ****                             if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint
 1763              		.loc 1 879 42
 1764 012a FB69     		ldr	r3, [r7, #28]
 1765 012c 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1766              		.loc 1 879 53
 1767 0130 03F00203 		and	r3, r3, #2
 1768              		.loc 1 879 31
 1769 0134 002B     		cmp	r3, #0
 1770 0136 03D1     		bne	.L113
 880:ThirdParty/FreeRTOS/timers.c ****                             {
 881:ThirdParty/FreeRTOS/timers.c ****                                 vPortFree( pxTimer );
 1771              		.loc 1 881 33
 1772 0138 F869     		ldr	r0, [r7, #28]
 1773 013a FFF7FEFF 		bl	vPortFree
 1774 013e 0AE0     		b	.L100
 1775              	.L113:
 882:ThirdParty/FreeRTOS/timers.c ****                             }
 883:ThirdParty/FreeRTOS/timers.c ****                             else
 884:ThirdParty/FreeRTOS/timers.c ****                             {
 885:ThirdParty/FreeRTOS/timers.c ****                                 pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 1776              		.loc 1 885 51
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 51


 1777 0140 FB69     		ldr	r3, [r7, #28]
 1778 0142 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1779 0146 23F00103 		bic	r3, r3, #1
 1780 014a DAB2     		uxtb	r2, r3
 1781 014c FB69     		ldr	r3, [r7, #28]
 1782 014e 83F82820 		strb	r2, [r3, #40]
 886:ThirdParty/FreeRTOS/timers.c ****                             }
 887:ThirdParty/FreeRTOS/timers.c ****                         }
 888:ThirdParty/FreeRTOS/timers.c ****                         #else /* if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) */
 889:ThirdParty/FreeRTOS/timers.c ****                         {
 890:ThirdParty/FreeRTOS/timers.c ****                             /* If dynamic allocation is not enabled, the memory
 891:ThirdParty/FreeRTOS/timers.c ****                              * could not have been dynamically allocated. So there is
 892:ThirdParty/FreeRTOS/timers.c ****                              * no need to free the memory - just mark the timer as
 893:ThirdParty/FreeRTOS/timers.c ****                              * "not active". */
 894:ThirdParty/FreeRTOS/timers.c ****                             pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 895:ThirdParty/FreeRTOS/timers.c ****                         }
 896:ThirdParty/FreeRTOS/timers.c ****                         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 897:ThirdParty/FreeRTOS/timers.c ****                         break;
 1783              		.loc 1 897 25
 1784 0152 00E0     		b	.L100
 1785              	.L116:
 898:ThirdParty/FreeRTOS/timers.c **** 
 899:ThirdParty/FreeRTOS/timers.c ****                     default:
 900:ThirdParty/FreeRTOS/timers.c ****                         /* Don't expect to get here. */
 901:ThirdParty/FreeRTOS/timers.c ****                         break;
 902:ThirdParty/FreeRTOS/timers.c ****                 }
 903:ThirdParty/FreeRTOS/timers.c ****             }
 1786              		.loc 1 903 13
 1787 0154 00BF     		nop
 1788              	.L100:
 767:ThirdParty/FreeRTOS/timers.c ****         {
 1789              		.loc 1 767 16
 1790 0156 084B     		ldr	r3, .L117
 1791 0158 1B68     		ldr	r3, [r3]
 1792 015a 07F10801 		add	r1, r7, #8
 1793 015e 0022     		movs	r2, #0
 1794 0160 1846     		mov	r0, r3
 1795 0162 FFF7FEFF 		bl	xQueueReceive
 1796 0166 0346     		mov	r3, r0
 767:ThirdParty/FreeRTOS/timers.c ****         {
 1797              		.loc 1 767 14
 1798 0168 002B     		cmp	r3, #0
 1799 016a 7FF44DAF 		bne	.L115
 904:ThirdParty/FreeRTOS/timers.c ****         }
 905:ThirdParty/FreeRTOS/timers.c ****     }
 1800              		.loc 1 905 5
 1801 016e 00BF     		nop
 1802 0170 00BF     		nop
 1803 0172 2037     		adds	r7, r7, #32
 1804              	.LCFI96:
 1805              		.cfi_def_cfa_offset 8
 1806 0174 BD46     		mov	sp, r7
 1807              	.LCFI97:
 1808              		.cfi_def_cfa_register 13
 1809              		@ sp needed
 1810 0176 80BD     		pop	{r7, pc}
 1811              	.L118:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 52


 1812              		.align	2
 1813              	.L117:
 1814 0178 00000000 		.word	xTimerQueue
 1815              		.cfi_endproc
 1816              	.LFE23:
 1818              		.section	.text.prvSwitchTimerLists,"ax",%progbits
 1819              		.align	1
 1820              		.syntax unified
 1821              		.thumb
 1822              		.thumb_func
 1824              	prvSwitchTimerLists:
 1825              	.LFB24:
 906:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 907:ThirdParty/FreeRTOS/timers.c **** 
 908:ThirdParty/FreeRTOS/timers.c ****     static void prvSwitchTimerLists( void )
 909:ThirdParty/FreeRTOS/timers.c ****     {
 1826              		.loc 1 909 5
 1827              		.cfi_startproc
 1828              		@ args = 0, pretend = 0, frame = 8
 1829              		@ frame_needed = 1, uses_anonymous_args = 0
 1830 0000 80B5     		push	{r7, lr}
 1831              	.LCFI98:
 1832              		.cfi_def_cfa_offset 8
 1833              		.cfi_offset 7, -8
 1834              		.cfi_offset 14, -4
 1835 0002 82B0     		sub	sp, sp, #8
 1836              	.LCFI99:
 1837              		.cfi_def_cfa_offset 16
 1838 0004 00AF     		add	r7, sp, #0
 1839              	.LCFI100:
 1840              		.cfi_def_cfa_register 7
 910:ThirdParty/FreeRTOS/timers.c ****         TickType_t xNextExpireTime;
 911:ThirdParty/FreeRTOS/timers.c ****         List_t * pxTemp;
 912:ThirdParty/FreeRTOS/timers.c **** 
 913:ThirdParty/FreeRTOS/timers.c ****         /* The tick count has overflowed.  The timer lists must be switched.
 914:ThirdParty/FreeRTOS/timers.c ****          * If there are any timers still referenced from the current timer list
 915:ThirdParty/FreeRTOS/timers.c ****          * then they must have expired and should be processed before the lists
 916:ThirdParty/FreeRTOS/timers.c ****          * are switched. */
 917:ThirdParty/FreeRTOS/timers.c ****         while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 1841              		.loc 1 917 14
 1842 0006 09E0     		b	.L120
 1843              	.L121:
 918:ThirdParty/FreeRTOS/timers.c ****         {
 919:ThirdParty/FreeRTOS/timers.c ****             xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 1844              		.loc 1 919 31
 1845 0008 0E4B     		ldr	r3, .L122
 1846 000a 1B68     		ldr	r3, [r3]
 1847 000c DB68     		ldr	r3, [r3, #12]
 1848              		.loc 1 919 29
 1849 000e 1B68     		ldr	r3, [r3]
 1850 0010 3B60     		str	r3, [r7]
 920:ThirdParty/FreeRTOS/timers.c **** 
 921:ThirdParty/FreeRTOS/timers.c ****             /* Process the expired timer.  For auto-reload timers, be careful to
 922:ThirdParty/FreeRTOS/timers.c ****              * process only expirations that occur on the current list.  Further
 923:ThirdParty/FreeRTOS/timers.c ****              * expirations must wait until after the lists are switched. */
 924:ThirdParty/FreeRTOS/timers.c ****             prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 1851              		.loc 1 924 13
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 53


 1852 0012 4FF0FF31 		mov	r1, #-1
 1853 0016 3868     		ldr	r0, [r7]
 1854 0018 FFF7FEFF 		bl	prvProcessExpiredTimer
 1855              	.L120:
 917:ThirdParty/FreeRTOS/timers.c ****         {
 1856              		.loc 1 917 16
 1857 001c 094B     		ldr	r3, .L122
 1858 001e 1B68     		ldr	r3, [r3]
 1859 0020 1B68     		ldr	r3, [r3]
 917:ThirdParty/FreeRTOS/timers.c ****         {
 1860              		.loc 1 917 14
 1861 0022 002B     		cmp	r3, #0
 1862 0024 F0D1     		bne	.L121
 925:ThirdParty/FreeRTOS/timers.c ****         }
 926:ThirdParty/FreeRTOS/timers.c **** 
 927:ThirdParty/FreeRTOS/timers.c ****         pxTemp = pxCurrentTimerList;
 1863              		.loc 1 927 16
 1864 0026 074B     		ldr	r3, .L122
 1865 0028 1B68     		ldr	r3, [r3]
 1866 002a 7B60     		str	r3, [r7, #4]
 928:ThirdParty/FreeRTOS/timers.c ****         pxCurrentTimerList = pxOverflowTimerList;
 1867              		.loc 1 928 28
 1868 002c 064B     		ldr	r3, .L122+4
 1869 002e 1B68     		ldr	r3, [r3]
 1870 0030 044A     		ldr	r2, .L122
 1871 0032 1360     		str	r3, [r2]
 929:ThirdParty/FreeRTOS/timers.c ****         pxOverflowTimerList = pxTemp;
 1872              		.loc 1 929 29
 1873 0034 044A     		ldr	r2, .L122+4
 1874 0036 7B68     		ldr	r3, [r7, #4]
 1875 0038 1360     		str	r3, [r2]
 930:ThirdParty/FreeRTOS/timers.c ****     }
 1876              		.loc 1 930 5
 1877 003a 00BF     		nop
 1878 003c 0837     		adds	r7, r7, #8
 1879              	.LCFI101:
 1880              		.cfi_def_cfa_offset 8
 1881 003e BD46     		mov	sp, r7
 1882              	.LCFI102:
 1883              		.cfi_def_cfa_register 13
 1884              		@ sp needed
 1885 0040 80BD     		pop	{r7, pc}
 1886              	.L123:
 1887 0042 00BF     		.align	2
 1888              	.L122:
 1889 0044 00000000 		.word	pxCurrentTimerList
 1890 0048 00000000 		.word	pxOverflowTimerList
 1891              		.cfi_endproc
 1892              	.LFE24:
 1894              		.section	.rodata
 1895              		.align	2
 1896              	.LC1:
 1897 0008 546D7251 		.ascii	"TmrQ\000"
 1897      00
 1898              		.section	.text.prvCheckForValidListAndQueue,"ax",%progbits
 1899              		.align	1
 1900              		.syntax unified
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 54


 1901              		.thumb
 1902              		.thumb_func
 1904              	prvCheckForValidListAndQueue:
 1905              	.LFB25:
 931:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 932:ThirdParty/FreeRTOS/timers.c **** 
 933:ThirdParty/FreeRTOS/timers.c ****     static void prvCheckForValidListAndQueue( void )
 934:ThirdParty/FreeRTOS/timers.c ****     {
 1906              		.loc 1 934 5
 1907              		.cfi_startproc
 1908              		@ args = 0, pretend = 0, frame = 0
 1909              		@ frame_needed = 1, uses_anonymous_args = 0
 1910 0000 80B5     		push	{r7, lr}
 1911              	.LCFI103:
 1912              		.cfi_def_cfa_offset 8
 1913              		.cfi_offset 7, -8
 1914              		.cfi_offset 14, -4
 1915 0002 00AF     		add	r7, sp, #0
 1916              	.LCFI104:
 1917              		.cfi_def_cfa_register 7
 935:ThirdParty/FreeRTOS/timers.c ****         /* Check that the list from which active timers are referenced, and the
 936:ThirdParty/FreeRTOS/timers.c ****          * queue used to communicate with the timer service, have been
 937:ThirdParty/FreeRTOS/timers.c ****          * initialised. */
 938:ThirdParty/FreeRTOS/timers.c ****         taskENTER_CRITICAL();
 1918              		.loc 1 938 9
 1919 0004 FFF7FEFF 		bl	vPortEnterCritical
 939:ThirdParty/FreeRTOS/timers.c ****         {
 940:ThirdParty/FreeRTOS/timers.c ****             if( xTimerQueue == NULL )
 1920              		.loc 1 940 29
 1921 0008 124B     		ldr	r3, .L126
 1922 000a 1B68     		ldr	r3, [r3]
 1923              		.loc 1 940 15
 1924 000c 002B     		cmp	r3, #0
 1925 000e 1DD1     		bne	.L125
 941:ThirdParty/FreeRTOS/timers.c ****             {
 942:ThirdParty/FreeRTOS/timers.c ****                 vListInitialise( &xActiveTimerList1 );
 1926              		.loc 1 942 17
 1927 0010 1148     		ldr	r0, .L126+4
 1928 0012 FFF7FEFF 		bl	vListInitialise
 943:ThirdParty/FreeRTOS/timers.c ****                 vListInitialise( &xActiveTimerList2 );
 1929              		.loc 1 943 17
 1930 0016 1148     		ldr	r0, .L126+8
 1931 0018 FFF7FEFF 		bl	vListInitialise
 944:ThirdParty/FreeRTOS/timers.c ****                 pxCurrentTimerList = &xActiveTimerList1;
 1932              		.loc 1 944 36
 1933 001c 104B     		ldr	r3, .L126+12
 1934 001e 0E4A     		ldr	r2, .L126+4
 1935 0020 1A60     		str	r2, [r3]
 945:ThirdParty/FreeRTOS/timers.c ****                 pxOverflowTimerList = &xActiveTimerList2;
 1936              		.loc 1 945 37
 1937 0022 104B     		ldr	r3, .L126+16
 1938 0024 0D4A     		ldr	r2, .L126+8
 1939 0026 1A60     		str	r2, [r3]
 946:ThirdParty/FreeRTOS/timers.c **** 
 947:ThirdParty/FreeRTOS/timers.c ****                 #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 948:ThirdParty/FreeRTOS/timers.c ****                 {
 949:ThirdParty/FreeRTOS/timers.c ****                     /* The timer queue is allocated statically in case
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 55


 950:ThirdParty/FreeRTOS/timers.c ****                      * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
 951:ThirdParty/FreeRTOS/timers.c ****                     PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                        
 952:ThirdParty/FreeRTOS/timers.c ****                     PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIME
 953:ThirdParty/FreeRTOS/timers.c **** 
 954:ThirdParty/FreeRTOS/timers.c ****                     xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( U
 955:ThirdParty/FreeRTOS/timers.c ****                 }
 956:ThirdParty/FreeRTOS/timers.c ****                 #else
 957:ThirdParty/FreeRTOS/timers.c ****                 {
 958:ThirdParty/FreeRTOS/timers.c ****                     xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( D
 1940              		.loc 1 958 35
 1941 0028 0022     		movs	r2, #0
 1942 002a 0C21     		movs	r1, #12
 1943 002c 0A20     		movs	r0, #10
 1944 002e FFF7FEFF 		bl	xQueueGenericCreate
 1945 0032 0346     		mov	r3, r0
 1946              		.loc 1 958 33
 1947 0034 074A     		ldr	r2, .L126
 1948 0036 1360     		str	r3, [r2]
 959:ThirdParty/FreeRTOS/timers.c ****                 }
 960:ThirdParty/FreeRTOS/timers.c ****                 #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 961:ThirdParty/FreeRTOS/timers.c **** 
 962:ThirdParty/FreeRTOS/timers.c ****                 #if ( configQUEUE_REGISTRY_SIZE > 0 )
 963:ThirdParty/FreeRTOS/timers.c ****                 {
 964:ThirdParty/FreeRTOS/timers.c ****                     if( xTimerQueue != NULL )
 1949              		.loc 1 964 37
 1950 0038 064B     		ldr	r3, .L126
 1951 003a 1B68     		ldr	r3, [r3]
 1952              		.loc 1 964 23
 1953 003c 002B     		cmp	r3, #0
 1954 003e 05D0     		beq	.L125
 965:ThirdParty/FreeRTOS/timers.c ****                     {
 966:ThirdParty/FreeRTOS/timers.c ****                         vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 1955              		.loc 1 966 25
 1956 0040 044B     		ldr	r3, .L126
 1957 0042 1B68     		ldr	r3, [r3]
 1958 0044 0849     		ldr	r1, .L126+20
 1959 0046 1846     		mov	r0, r3
 1960 0048 FFF7FEFF 		bl	vQueueAddToRegistry
 1961              	.L125:
 967:ThirdParty/FreeRTOS/timers.c ****                     }
 968:ThirdParty/FreeRTOS/timers.c ****                     else
 969:ThirdParty/FreeRTOS/timers.c ****                     {
 970:ThirdParty/FreeRTOS/timers.c ****                         mtCOVERAGE_TEST_MARKER();
 971:ThirdParty/FreeRTOS/timers.c ****                     }
 972:ThirdParty/FreeRTOS/timers.c ****                 }
 973:ThirdParty/FreeRTOS/timers.c ****                 #endif /* configQUEUE_REGISTRY_SIZE */
 974:ThirdParty/FreeRTOS/timers.c ****             }
 975:ThirdParty/FreeRTOS/timers.c ****             else
 976:ThirdParty/FreeRTOS/timers.c ****             {
 977:ThirdParty/FreeRTOS/timers.c ****                 mtCOVERAGE_TEST_MARKER();
 978:ThirdParty/FreeRTOS/timers.c ****             }
 979:ThirdParty/FreeRTOS/timers.c ****         }
 980:ThirdParty/FreeRTOS/timers.c ****         taskEXIT_CRITICAL();
 1962              		.loc 1 980 9
 1963 004c FFF7FEFF 		bl	vPortExitCritical
 981:ThirdParty/FreeRTOS/timers.c ****     }
 1964              		.loc 1 981 5
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 56


 1965 0050 00BF     		nop
 1966 0052 80BD     		pop	{r7, pc}
 1967              	.L127:
 1968              		.align	2
 1969              	.L126:
 1970 0054 00000000 		.word	xTimerQueue
 1971 0058 00000000 		.word	xActiveTimerList1
 1972 005c 00000000 		.word	xActiveTimerList2
 1973 0060 00000000 		.word	pxCurrentTimerList
 1974 0064 00000000 		.word	pxOverflowTimerList
 1975 0068 08000000 		.word	.LC1
 1976              		.cfi_endproc
 1977              	.LFE25:
 1979              		.section	.text.xTimerIsTimerActive,"ax",%progbits
 1980              		.align	1
 1981              		.global	xTimerIsTimerActive
 1982              		.syntax unified
 1983              		.thumb
 1984              		.thumb_func
 1986              	xTimerIsTimerActive:
 1987              	.LFB26:
 982:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 983:ThirdParty/FreeRTOS/timers.c **** 
 984:ThirdParty/FreeRTOS/timers.c ****     BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
 985:ThirdParty/FreeRTOS/timers.c ****     {
 1988              		.loc 1 985 5
 1989              		.cfi_startproc
 1990              		@ args = 0, pretend = 0, frame = 24
 1991              		@ frame_needed = 1, uses_anonymous_args = 0
 1992 0000 80B5     		push	{r7, lr}
 1993              	.LCFI105:
 1994              		.cfi_def_cfa_offset 8
 1995              		.cfi_offset 7, -8
 1996              		.cfi_offset 14, -4
 1997 0002 86B0     		sub	sp, sp, #24
 1998              	.LCFI106:
 1999              		.cfi_def_cfa_offset 32
 2000 0004 00AF     		add	r7, sp, #0
 2001              	.LCFI107:
 2002              		.cfi_def_cfa_register 7
 2003 0006 7860     		str	r0, [r7, #4]
 986:ThirdParty/FreeRTOS/timers.c ****         BaseType_t xReturn;
 987:ThirdParty/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 2004              		.loc 1 987 19
 2005 0008 7B68     		ldr	r3, [r7, #4]
 2006 000a 3B61     		str	r3, [r7, #16]
 988:ThirdParty/FreeRTOS/timers.c **** 
 989:ThirdParty/FreeRTOS/timers.c ****         configASSERT( xTimer );
 2007              		.loc 1 989 9
 2008 000c 7B68     		ldr	r3, [r7, #4]
 2009 000e 002B     		cmp	r3, #0
 2010 0010 0AD1     		bne	.L129
 2011              	.LBB48:
 2012              	.LBB49:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2013              		.loc 2 198 9
 2014              		.syntax unified
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 57


 2015              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2016 0012 4FF05003 			mov r3, #80												
 2017 0016 83F31188 		msr basepri, r3											
 2018 001a BFF36F8F 		isb														
 2019 001e BFF34F8F 		dsb														
 2020              	
 2021              	@ 0 "" 2
 2022              		.thumb
 2023              		.syntax unified
 2024 0022 FB60     		str	r3, [r7, #12]
 2025              		.loc 2 206 5
 2026 0024 00BF     		nop
 2027              	.L130:
 2028              	.LBE49:
 2029              	.LBE48:
 2030              		.loc 1 989 9 discriminator 1
 2031 0026 FEE7     		b	.L130
 2032              	.L129:
 990:ThirdParty/FreeRTOS/timers.c **** 
 991:ThirdParty/FreeRTOS/timers.c ****         /* Is the timer in the list of active timers? */
 992:ThirdParty/FreeRTOS/timers.c ****         taskENTER_CRITICAL();
 2033              		.loc 1 992 9
 2034 0028 FFF7FEFF 		bl	vPortEnterCritical
 993:ThirdParty/FreeRTOS/timers.c ****         {
 994:ThirdParty/FreeRTOS/timers.c ****             if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 2035              		.loc 1 994 26
 2036 002c 3B69     		ldr	r3, [r7, #16]
 2037 002e 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 2038              		.loc 1 994 37
 2039 0032 03F00103 		and	r3, r3, #1
 2040              		.loc 1 994 15
 2041 0036 002B     		cmp	r3, #0
 2042 0038 02D1     		bne	.L131
 995:ThirdParty/FreeRTOS/timers.c ****             {
 996:ThirdParty/FreeRTOS/timers.c ****                 xReturn = pdFALSE;
 2043              		.loc 1 996 25
 2044 003a 0023     		movs	r3, #0
 2045 003c 7B61     		str	r3, [r7, #20]
 2046 003e 01E0     		b	.L132
 2047              	.L131:
 997:ThirdParty/FreeRTOS/timers.c ****             }
 998:ThirdParty/FreeRTOS/timers.c ****             else
 999:ThirdParty/FreeRTOS/timers.c ****             {
1000:ThirdParty/FreeRTOS/timers.c ****                 xReturn = pdTRUE;
 2048              		.loc 1 1000 25
 2049 0040 0123     		movs	r3, #1
 2050 0042 7B61     		str	r3, [r7, #20]
 2051              	.L132:
1001:ThirdParty/FreeRTOS/timers.c ****             }
1002:ThirdParty/FreeRTOS/timers.c ****         }
1003:ThirdParty/FreeRTOS/timers.c ****         taskEXIT_CRITICAL();
 2052              		.loc 1 1003 9
 2053 0044 FFF7FEFF 		bl	vPortExitCritical
1004:ThirdParty/FreeRTOS/timers.c **** 
1005:ThirdParty/FreeRTOS/timers.c ****         return xReturn;
 2054              		.loc 1 1005 16
 2055 0048 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 58


1006:ThirdParty/FreeRTOS/timers.c ****     } /*lint !e818 Can't be pointer to const due to the typedef. */
 2056              		.loc 1 1006 5
 2057 004a 1846     		mov	r0, r3
 2058 004c 1837     		adds	r7, r7, #24
 2059              	.LCFI108:
 2060              		.cfi_def_cfa_offset 8
 2061 004e BD46     		mov	sp, r7
 2062              	.LCFI109:
 2063              		.cfi_def_cfa_register 13
 2064              		@ sp needed
 2065 0050 80BD     		pop	{r7, pc}
 2066              		.cfi_endproc
 2067              	.LFE26:
 2069              		.section	.text.pvTimerGetTimerID,"ax",%progbits
 2070              		.align	1
 2071              		.global	pvTimerGetTimerID
 2072              		.syntax unified
 2073              		.thumb
 2074              		.thumb_func
 2076              	pvTimerGetTimerID:
 2077              	.LFB27:
1007:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
1008:ThirdParty/FreeRTOS/timers.c **** 
1009:ThirdParty/FreeRTOS/timers.c ****     void * pvTimerGetTimerID( const TimerHandle_t xTimer )
1010:ThirdParty/FreeRTOS/timers.c ****     {
 2078              		.loc 1 1010 5
 2079              		.cfi_startproc
 2080              		@ args = 0, pretend = 0, frame = 24
 2081              		@ frame_needed = 1, uses_anonymous_args = 0
 2082 0000 80B5     		push	{r7, lr}
 2083              	.LCFI110:
 2084              		.cfi_def_cfa_offset 8
 2085              		.cfi_offset 7, -8
 2086              		.cfi_offset 14, -4
 2087 0002 86B0     		sub	sp, sp, #24
 2088              	.LCFI111:
 2089              		.cfi_def_cfa_offset 32
 2090 0004 00AF     		add	r7, sp, #0
 2091              	.LCFI112:
 2092              		.cfi_def_cfa_register 7
 2093 0006 7860     		str	r0, [r7, #4]
1011:ThirdParty/FreeRTOS/timers.c ****         Timer_t * const pxTimer = xTimer;
 2094              		.loc 1 1011 25
 2095 0008 7B68     		ldr	r3, [r7, #4]
 2096 000a 7B61     		str	r3, [r7, #20]
1012:ThirdParty/FreeRTOS/timers.c ****         void * pvReturn;
1013:ThirdParty/FreeRTOS/timers.c **** 
1014:ThirdParty/FreeRTOS/timers.c ****         configASSERT( xTimer );
 2097              		.loc 1 1014 9
 2098 000c 7B68     		ldr	r3, [r7, #4]
 2099 000e 002B     		cmp	r3, #0
 2100 0010 0AD1     		bne	.L135
 2101              	.LBB50:
 2102              	.LBB51:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2103              		.loc 2 198 9
 2104              		.syntax unified
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 59


 2105              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2106 0012 4FF05003 			mov r3, #80												
 2107 0016 83F31188 		msr basepri, r3											
 2108 001a BFF36F8F 		isb														
 2109 001e BFF34F8F 		dsb														
 2110              	
 2111              	@ 0 "" 2
 2112              		.thumb
 2113              		.syntax unified
 2114 0022 FB60     		str	r3, [r7, #12]
 2115              		.loc 2 206 5
 2116 0024 00BF     		nop
 2117              	.L136:
 2118              	.LBE51:
 2119              	.LBE50:
 2120              		.loc 1 1014 9 discriminator 1
 2121 0026 FEE7     		b	.L136
 2122              	.L135:
1015:ThirdParty/FreeRTOS/timers.c **** 
1016:ThirdParty/FreeRTOS/timers.c ****         taskENTER_CRITICAL();
 2123              		.loc 1 1016 9
 2124 0028 FFF7FEFF 		bl	vPortEnterCritical
1017:ThirdParty/FreeRTOS/timers.c ****         {
1018:ThirdParty/FreeRTOS/timers.c ****             pvReturn = pxTimer->pvTimerID;
 2125              		.loc 1 1018 22
 2126 002c 7B69     		ldr	r3, [r7, #20]
 2127 002e DB69     		ldr	r3, [r3, #28]
 2128 0030 3B61     		str	r3, [r7, #16]
1019:ThirdParty/FreeRTOS/timers.c ****         }
1020:ThirdParty/FreeRTOS/timers.c ****         taskEXIT_CRITICAL();
 2129              		.loc 1 1020 9
 2130 0032 FFF7FEFF 		bl	vPortExitCritical
1021:ThirdParty/FreeRTOS/timers.c **** 
1022:ThirdParty/FreeRTOS/timers.c ****         return pvReturn;
 2131              		.loc 1 1022 16
 2132 0036 3B69     		ldr	r3, [r7, #16]
1023:ThirdParty/FreeRTOS/timers.c ****     }
 2133              		.loc 1 1023 5
 2134 0038 1846     		mov	r0, r3
 2135 003a 1837     		adds	r7, r7, #24
 2136              	.LCFI113:
 2137              		.cfi_def_cfa_offset 8
 2138 003c BD46     		mov	sp, r7
 2139              	.LCFI114:
 2140              		.cfi_def_cfa_register 13
 2141              		@ sp needed
 2142 003e 80BD     		pop	{r7, pc}
 2143              		.cfi_endproc
 2144              	.LFE27:
 2146              		.section	.text.vTimerSetTimerID,"ax",%progbits
 2147              		.align	1
 2148              		.global	vTimerSetTimerID
 2149              		.syntax unified
 2150              		.thumb
 2151              		.thumb_func
 2153              	vTimerSetTimerID:
 2154              	.LFB28:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 60


1024:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
1025:ThirdParty/FreeRTOS/timers.c **** 
1026:ThirdParty/FreeRTOS/timers.c ****     void vTimerSetTimerID( TimerHandle_t xTimer,
1027:ThirdParty/FreeRTOS/timers.c ****                            void * pvNewID )
1028:ThirdParty/FreeRTOS/timers.c ****     {
 2155              		.loc 1 1028 5
 2156              		.cfi_startproc
 2157              		@ args = 0, pretend = 0, frame = 16
 2158              		@ frame_needed = 1, uses_anonymous_args = 0
 2159 0000 80B5     		push	{r7, lr}
 2160              	.LCFI115:
 2161              		.cfi_def_cfa_offset 8
 2162              		.cfi_offset 7, -8
 2163              		.cfi_offset 14, -4
 2164 0002 84B0     		sub	sp, sp, #16
 2165              	.LCFI116:
 2166              		.cfi_def_cfa_offset 24
 2167 0004 00AF     		add	r7, sp, #0
 2168              	.LCFI117:
 2169              		.cfi_def_cfa_register 7
 2170 0006 7860     		str	r0, [r7, #4]
 2171 0008 3960     		str	r1, [r7]
1029:ThirdParty/FreeRTOS/timers.c ****         Timer_t * const pxTimer = xTimer;
 2172              		.loc 1 1029 25
 2173 000a 7B68     		ldr	r3, [r7, #4]
 2174 000c FB60     		str	r3, [r7, #12]
1030:ThirdParty/FreeRTOS/timers.c **** 
1031:ThirdParty/FreeRTOS/timers.c ****         configASSERT( xTimer );
 2175              		.loc 1 1031 9
 2176 000e 7B68     		ldr	r3, [r7, #4]
 2177 0010 002B     		cmp	r3, #0
 2178 0012 0AD1     		bne	.L139
 2179              	.LBB52:
 2180              	.LBB53:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2181              		.loc 2 198 9
 2182              		.syntax unified
 2183              	@ 198 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2184 0014 4FF05003 			mov r3, #80												
 2185 0018 83F31188 		msr basepri, r3											
 2186 001c BFF36F8F 		isb														
 2187 0020 BFF34F8F 		dsb														
 2188              	
 2189              	@ 0 "" 2
 2190              		.thumb
 2191              		.syntax unified
 2192 0024 BB60     		str	r3, [r7, #8]
 2193              		.loc 2 206 5
 2194 0026 00BF     		nop
 2195              	.L140:
 2196              	.LBE53:
 2197              	.LBE52:
 2198              		.loc 1 1031 9 discriminator 1
 2199 0028 FEE7     		b	.L140
 2200              	.L139:
1032:ThirdParty/FreeRTOS/timers.c **** 
1033:ThirdParty/FreeRTOS/timers.c ****         taskENTER_CRITICAL();
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 61


 2201              		.loc 1 1033 9
 2202 002a FFF7FEFF 		bl	vPortEnterCritical
1034:ThirdParty/FreeRTOS/timers.c ****         {
1035:ThirdParty/FreeRTOS/timers.c ****             pxTimer->pvTimerID = pvNewID;
 2203              		.loc 1 1035 32
 2204 002e FB68     		ldr	r3, [r7, #12]
 2205 0030 3A68     		ldr	r2, [r7]
 2206 0032 DA61     		str	r2, [r3, #28]
1036:ThirdParty/FreeRTOS/timers.c ****         }
1037:ThirdParty/FreeRTOS/timers.c ****         taskEXIT_CRITICAL();
 2207              		.loc 1 1037 9
 2208 0034 FFF7FEFF 		bl	vPortExitCritical
1038:ThirdParty/FreeRTOS/timers.c ****     }
 2209              		.loc 1 1038 5
 2210 0038 00BF     		nop
 2211 003a 1037     		adds	r7, r7, #16
 2212              	.LCFI118:
 2213              		.cfi_def_cfa_offset 8
 2214 003c BD46     		mov	sp, r7
 2215              	.LCFI119:
 2216              		.cfi_def_cfa_register 13
 2217              		@ sp needed
 2218 003e 80BD     		pop	{r7, pc}
 2219              		.cfi_endproc
 2220              	.LFE28:
 2222              		.section	.text.uxTimerGetTimerNumber,"ax",%progbits
 2223              		.align	1
 2224              		.global	uxTimerGetTimerNumber
 2225              		.syntax unified
 2226              		.thumb
 2227              		.thumb_func
 2229              	uxTimerGetTimerNumber:
 2230              	.LFB29:
1039:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
1040:ThirdParty/FreeRTOS/timers.c **** 
1041:ThirdParty/FreeRTOS/timers.c ****     #if ( INCLUDE_xTimerPendFunctionCall == 1 )
1042:ThirdParty/FreeRTOS/timers.c **** 
1043:ThirdParty/FreeRTOS/timers.c ****         BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
1044:ThirdParty/FreeRTOS/timers.c ****                                                   void * pvParameter1,
1045:ThirdParty/FreeRTOS/timers.c ****                                                   uint32_t ulParameter2,
1046:ThirdParty/FreeRTOS/timers.c ****                                                   BaseType_t * pxHigherPriorityTaskWoken )
1047:ThirdParty/FreeRTOS/timers.c ****         {
1048:ThirdParty/FreeRTOS/timers.c ****             DaemonTaskMessage_t xMessage;
1049:ThirdParty/FreeRTOS/timers.c ****             BaseType_t xReturn;
1050:ThirdParty/FreeRTOS/timers.c **** 
1051:ThirdParty/FreeRTOS/timers.c ****             /* Complete the message with the function parameters and post it to the
1052:ThirdParty/FreeRTOS/timers.c ****              * daemon task. */
1053:ThirdParty/FreeRTOS/timers.c ****             xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
1054:ThirdParty/FreeRTOS/timers.c ****             xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
1055:ThirdParty/FreeRTOS/timers.c ****             xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
1056:ThirdParty/FreeRTOS/timers.c ****             xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
1057:ThirdParty/FreeRTOS/timers.c **** 
1058:ThirdParty/FreeRTOS/timers.c ****             xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1059:ThirdParty/FreeRTOS/timers.c **** 
1060:ThirdParty/FreeRTOS/timers.c ****             tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
1061:ThirdParty/FreeRTOS/timers.c **** 
1062:ThirdParty/FreeRTOS/timers.c ****             return xReturn;
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 62


1063:ThirdParty/FreeRTOS/timers.c ****         }
1064:ThirdParty/FreeRTOS/timers.c **** 
1065:ThirdParty/FreeRTOS/timers.c ****     #endif /* INCLUDE_xTimerPendFunctionCall */
1066:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
1067:ThirdParty/FreeRTOS/timers.c **** 
1068:ThirdParty/FreeRTOS/timers.c ****     #if ( INCLUDE_xTimerPendFunctionCall == 1 )
1069:ThirdParty/FreeRTOS/timers.c **** 
1070:ThirdParty/FreeRTOS/timers.c ****         BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
1071:ThirdParty/FreeRTOS/timers.c ****                                            void * pvParameter1,
1072:ThirdParty/FreeRTOS/timers.c ****                                            uint32_t ulParameter2,
1073:ThirdParty/FreeRTOS/timers.c ****                                            TickType_t xTicksToWait )
1074:ThirdParty/FreeRTOS/timers.c ****         {
1075:ThirdParty/FreeRTOS/timers.c ****             DaemonTaskMessage_t xMessage;
1076:ThirdParty/FreeRTOS/timers.c ****             BaseType_t xReturn;
1077:ThirdParty/FreeRTOS/timers.c **** 
1078:ThirdParty/FreeRTOS/timers.c ****             /* This function can only be called after a timer has been created or
1079:ThirdParty/FreeRTOS/timers.c ****              * after the scheduler has been started because, until then, the timer
1080:ThirdParty/FreeRTOS/timers.c ****              * queue does not exist. */
1081:ThirdParty/FreeRTOS/timers.c ****             configASSERT( xTimerQueue );
1082:ThirdParty/FreeRTOS/timers.c **** 
1083:ThirdParty/FreeRTOS/timers.c ****             /* Complete the message with the function parameters and post it to the
1084:ThirdParty/FreeRTOS/timers.c ****              * daemon task. */
1085:ThirdParty/FreeRTOS/timers.c ****             xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
1086:ThirdParty/FreeRTOS/timers.c ****             xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
1087:ThirdParty/FreeRTOS/timers.c ****             xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
1088:ThirdParty/FreeRTOS/timers.c ****             xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
1089:ThirdParty/FreeRTOS/timers.c **** 
1090:ThirdParty/FreeRTOS/timers.c ****             xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1091:ThirdParty/FreeRTOS/timers.c **** 
1092:ThirdParty/FreeRTOS/timers.c ****             tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
1093:ThirdParty/FreeRTOS/timers.c **** 
1094:ThirdParty/FreeRTOS/timers.c ****             return xReturn;
1095:ThirdParty/FreeRTOS/timers.c ****         }
1096:ThirdParty/FreeRTOS/timers.c **** 
1097:ThirdParty/FreeRTOS/timers.c ****     #endif /* INCLUDE_xTimerPendFunctionCall */
1098:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
1099:ThirdParty/FreeRTOS/timers.c **** 
1100:ThirdParty/FreeRTOS/timers.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
1101:ThirdParty/FreeRTOS/timers.c **** 
1102:ThirdParty/FreeRTOS/timers.c ****         UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
1103:ThirdParty/FreeRTOS/timers.c ****         {
 2231              		.loc 1 1103 9
 2232              		.cfi_startproc
 2233              		@ args = 0, pretend = 0, frame = 8
 2234              		@ frame_needed = 1, uses_anonymous_args = 0
 2235              		@ link register save eliminated.
 2236 0000 80B4     		push	{r7}
 2237              	.LCFI120:
 2238              		.cfi_def_cfa_offset 4
 2239              		.cfi_offset 7, -4
 2240 0002 83B0     		sub	sp, sp, #12
 2241              	.LCFI121:
 2242              		.cfi_def_cfa_offset 16
 2243 0004 00AF     		add	r7, sp, #0
 2244              	.LCFI122:
 2245              		.cfi_def_cfa_register 7
 2246 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 63


1104:ThirdParty/FreeRTOS/timers.c ****             return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 2247              		.loc 1 1104 44
 2248 0008 7B68     		ldr	r3, [r7, #4]
 2249 000a 5B6A     		ldr	r3, [r3, #36]
1105:ThirdParty/FreeRTOS/timers.c ****         }
 2250              		.loc 1 1105 9
 2251 000c 1846     		mov	r0, r3
 2252 000e 0C37     		adds	r7, r7, #12
 2253              	.LCFI123:
 2254              		.cfi_def_cfa_offset 4
 2255 0010 BD46     		mov	sp, r7
 2256              	.LCFI124:
 2257              		.cfi_def_cfa_register 13
 2258              		@ sp needed
 2259 0012 5DF8047B 		ldr	r7, [sp], #4
 2260              	.LCFI125:
 2261              		.cfi_restore 7
 2262              		.cfi_def_cfa_offset 0
 2263 0016 7047     		bx	lr
 2264              		.cfi_endproc
 2265              	.LFE29:
 2267              		.section	.text.vTimerSetTimerNumber,"ax",%progbits
 2268              		.align	1
 2269              		.global	vTimerSetTimerNumber
 2270              		.syntax unified
 2271              		.thumb
 2272              		.thumb_func
 2274              	vTimerSetTimerNumber:
 2275              	.LFB30:
1106:ThirdParty/FreeRTOS/timers.c **** 
1107:ThirdParty/FreeRTOS/timers.c ****     #endif /* configUSE_TRACE_FACILITY */
1108:ThirdParty/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
1109:ThirdParty/FreeRTOS/timers.c **** 
1110:ThirdParty/FreeRTOS/timers.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
1111:ThirdParty/FreeRTOS/timers.c **** 
1112:ThirdParty/FreeRTOS/timers.c ****         void vTimerSetTimerNumber( TimerHandle_t xTimer,
1113:ThirdParty/FreeRTOS/timers.c ****                                    UBaseType_t uxTimerNumber )
1114:ThirdParty/FreeRTOS/timers.c ****         {
 2276              		.loc 1 1114 9
 2277              		.cfi_startproc
 2278              		@ args = 0, pretend = 0, frame = 8
 2279              		@ frame_needed = 1, uses_anonymous_args = 0
 2280              		@ link register save eliminated.
 2281 0000 80B4     		push	{r7}
 2282              	.LCFI126:
 2283              		.cfi_def_cfa_offset 4
 2284              		.cfi_offset 7, -4
 2285 0002 83B0     		sub	sp, sp, #12
 2286              	.LCFI127:
 2287              		.cfi_def_cfa_offset 16
 2288 0004 00AF     		add	r7, sp, #0
 2289              	.LCFI128:
 2290              		.cfi_def_cfa_register 7
 2291 0006 7860     		str	r0, [r7, #4]
 2292 0008 3960     		str	r1, [r7]
1115:ThirdParty/FreeRTOS/timers.c ****             ( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 2293              		.loc 1 1115 53
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 64


 2294 000a 7B68     		ldr	r3, [r7, #4]
 2295 000c 3A68     		ldr	r2, [r7]
 2296 000e 5A62     		str	r2, [r3, #36]
1116:ThirdParty/FreeRTOS/timers.c ****         }
 2297              		.loc 1 1116 9
 2298 0010 00BF     		nop
 2299 0012 0C37     		adds	r7, r7, #12
 2300              	.LCFI129:
 2301              		.cfi_def_cfa_offset 4
 2302 0014 BD46     		mov	sp, r7
 2303              	.LCFI130:
 2304              		.cfi_def_cfa_register 13
 2305              		@ sp needed
 2306 0016 5DF8047B 		ldr	r7, [sp], #4
 2307              	.LCFI131:
 2308              		.cfi_restore 7
 2309              		.cfi_def_cfa_offset 0
 2310 001a 7047     		bx	lr
 2311              		.cfi_endproc
 2312              	.LFE30:
 2314              		.section	.bss.xLastTime.0,"aw",%nobits
 2315              		.align	2
 2318              	xLastTime.0:
 2319 0000 00000000 		.space	4
 2320              		.text
 2321              	.Letext0:
 2322              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 2323              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 2324              		.file 5 "ThirdParty/FreeRTOS/include/list.h"
 2325              		.file 6 "ThirdParty/FreeRTOS/include/task.h"
 2326              		.file 7 "ThirdParty/FreeRTOS/include/queue.h"
 2327              		.file 8 "ThirdParty/FreeRTOS/include/timers.h"
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 65


DEFINED SYMBOLS
                            *ABS*:00000000 timers.c
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:20     .bss.xActiveTimerList1:00000000 $d
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:23     .bss.xActiveTimerList1:00000000 xActiveTimerList1
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:26     .bss.xActiveTimerList2:00000000 $d
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:29     .bss.xActiveTimerList2:00000000 xActiveTimerList2
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:32     .bss.pxCurrentTimerList:00000000 $d
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:35     .bss.pxCurrentTimerList:00000000 pxCurrentTimerList
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:38     .bss.pxOverflowTimerList:00000000 $d
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:41     .bss.pxOverflowTimerList:00000000 pxOverflowTimerList
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:44     .bss.xTimerQueue:00000000 $d
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:47     .bss.xTimerQueue:00000000 xTimerQueue
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:50     .bss.xTimerTaskHandle:00000000 $d
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:53     .bss.xTimerTaskHandle:00000000 xTimerTaskHandle
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:56     .rodata:00000000 $d
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:60     .text.xTimerCreateTimerTask:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:66     .text.xTimerCreateTimerTask:00000000 xTimerCreateTimerTask
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1904   .text.prvCheckForValidListAndQueue:00000000 prvCheckForValidListAndQueue
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:149    .text.xTimerCreateTimerTask:00000054 $d
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1140   .text.prvTimerTask:00000000 prvTimerTask
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:157    .text.xTimerCreate:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:163    .text.xTimerCreate:00000000 xTimerCreate
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:228    .text.prvInitialiseNewTimer:00000000 prvInitialiseNewTimer
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:223    .text.prvInitialiseNewTimer:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:324    .text.xTimerGenericCommand:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:330    .text.xTimerGenericCommand:00000000 xTimerGenericCommand
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:449    .text.xTimerGenericCommand:00000098 $d
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:454    .text.xTimerGetTimerDaemonTaskHandle:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:460    .text.xTimerGetTimerDaemonTaskHandle:00000000 xTimerGetTimerDaemonTaskHandle
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:524    .text.xTimerGetTimerDaemonTaskHandle:00000034 $d
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:529    .text.xTimerGetPeriod:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:535    .text.xTimerGetPeriod:00000000 xTimerGetPeriod
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:603    .text.vTimerSetReloadMode:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:609    .text.vTimerSetReloadMode:00000000 vTimerSetReloadMode
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:696    .text.xTimerGetReloadMode:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:702    .text.xTimerGetReloadMode:00000000 xTimerGetReloadMode
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:786    .text.uxTimerGetReloadMode:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:792    .text.uxTimerGetReloadMode:00000000 uxTimerGetReloadMode
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:828    .text.xTimerGetExpiryTime:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:834    .text.xTimerGetExpiryTime:00000000 xTimerGetExpiryTime
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:905    .text.pcTimerGetName:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:911    .text.pcTimerGetName:00000000 pcTimerGetName
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:979    .text.prvReloadTimer:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:984    .text.prvReloadTimer:00000000 prvReloadTimer
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1462   .text.prvInsertTimerInActiveList:00000000 prvInsertTimerInActiveList
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1051   .text.prvProcessExpiredTimer:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1056   .text.prvProcessExpiredTimer:00000000 prvProcessExpiredTimer
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1130   .text.prvProcessExpiredTimer:0000005c $d
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1135   .text.prvTimerTask:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1310   .text.prvGetNextExpireTime:00000000 prvGetNextExpireTime
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1182   .text.prvProcessTimerOrBlockTask:00000000 prvProcessTimerOrBlockTask
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1574   .text.prvProcessReceivedCommands:00000000 prvProcessReceivedCommands
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1177   .text.prvProcessTimerOrBlockTask:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1392   .text.prvSampleTimeNow:00000000 prvSampleTimeNow
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1298   .text.prvProcessTimerOrBlockTask:00000090 $d
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1305   .text.prvGetNextExpireTime:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1382   .text.prvGetNextExpireTime:00000044 $d
ARM GAS  C:\Users\Admin\AppData\Local\Temp\cchokJXF.s 			page 66


C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1387   .text.prvSampleTimeNow:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1824   .text.prvSwitchTimerLists:00000000 prvSwitchTimerLists
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1452   .text.prvSampleTimeNow:0000003c $d
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:2318   .bss.xLastTime.0:00000000 xLastTime.0
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1457   .text.prvInsertTimerInActiveList:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1563   .text.prvInsertTimerInActiveList:0000007c $d
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1569   .text.prvProcessReceivedCommands:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1629   .text.prvProcessReceivedCommands:00000040 $d
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1638   .text.prvProcessReceivedCommands:00000064 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1814   .text.prvProcessReceivedCommands:00000178 $d
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1819   .text.prvSwitchTimerLists:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1889   .text.prvSwitchTimerLists:00000044 $d
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1899   .text.prvCheckForValidListAndQueue:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1970   .text.prvCheckForValidListAndQueue:00000054 $d
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1980   .text.xTimerIsTimerActive:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:1986   .text.xTimerIsTimerActive:00000000 xTimerIsTimerActive
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:2070   .text.pvTimerGetTimerID:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:2076   .text.pvTimerGetTimerID:00000000 pvTimerGetTimerID
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:2147   .text.vTimerSetTimerID:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:2153   .text.vTimerSetTimerID:00000000 vTimerSetTimerID
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:2223   .text.uxTimerGetTimerNumber:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:2229   .text.uxTimerGetTimerNumber:00000000 uxTimerGetTimerNumber
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:2268   .text.vTimerSetTimerNumber:00000000 $t
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:2274   .text.vTimerSetTimerNumber:00000000 vTimerSetTimerNumber
C:\Users\Admin\AppData\Local\Temp\cchokJXF.s:2315   .bss.xLastTime.0:00000000 $d

UNDEFINED SYMBOLS
xTaskCreate
pvPortMalloc
vListInitialiseItem
xTaskGetSchedulerState
xQueueGenericSend
xQueueGenericSendFromISR
vPortEnterCritical
vPortExitCritical
uxListRemove
vTaskSuspendAll
xTaskResumeAll
vQueueWaitForMessageRestricted
xTaskGetTickCount
vListInsert
vPortFree
xQueueReceive
vListInitialise
xQueueGenericCreate
vQueueAddToRegistry
